
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b420  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f9c  0801b558  0801b558  0002b558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801c4f4  0801c4f4  0002c4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801c5b4  0801c5b4  00030164  2**0
                  CONTENTS
  5 .ARM          00000008  0801c5b4  0801c5b4  0002c5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801c5bc  0801c5bc  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801c5bc  0801c5bc  0002c5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801c5c0  0801c5c0  0002c5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000164  20000000  0801c5c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000216c  20000164  0801c728  00030164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200022d0  0801c728  000322d0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00041c75  00000000  00000000  0003018e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009ffd  00000000  00000000  00071e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003240  00000000  00000000  0007be00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002e38  00000000  00000000  0007f040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027f0d  00000000  00000000  00081e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d25e  00000000  00000000  000a9d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c97d0  00000000  00000000  000e6fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b07b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cdcc  00000000  00000000  001b0804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000164 	.word	0x20000164
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b540 	.word	0x0801b540

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000168 	.word	0x20000168
 8000174:	0801b540 	.word	0x0801b540

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14d      	bne.n	8000c84 <__udivmoddi4+0xac>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d968      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b152      	cbz	r2, 8000c0a <__udivmoddi4+0x32>
 8000bf4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf8:	f1c2 0120 	rsb	r1, r2, #32
 8000bfc:	fa20 f101 	lsr.w	r1, r0, r1
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	ea41 0803 	orr.w	r8, r1, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fbb8 fef5 	udiv	lr, r8, r5
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fb05 831e 	mls	r3, r5, lr, r8
 8000c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c20:	fb0e f107 	mul.w	r1, lr, r7
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d90b      	bls.n	8000c40 <__udivmoddi4+0x68>
 8000c28:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000c30:	f080 811e 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f240 811b 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c3a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c48:	fb05 3310 	mls	r3, r5, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x96>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c60:	f080 8108 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8105 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c74:	2100      	movs	r1, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa8>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	f000 80ee 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e9c6 0500 	strd	r0, r5, [r6]
 8000c94:	4608      	mov	r0, r1
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0303 	sbc.w	r3, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e2      	beq.n	8000c80 <__udivmoddi4+0xa8>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7df      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8091 	bne.w	8000df0 <__udivmoddi4+0x218>
 8000cce:	eba1 050c 	sub.w	r5, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce0:	fb07 5013 	mls	r0, r7, r3, r5
 8000ce4:	0c25      	lsrs	r5, r4, #16
 8000ce6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	42a8      	cmp	r0, r5
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	42a8      	cmp	r0, r5
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a2d      	subs	r5, r5, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d0c:	fb07 5510 	mls	r5, r7, r0, r5
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79e      	b.n	8000c76 <__udivmoddi4+0x9e>
 8000d38:	f1c1 0720 	rsb	r7, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa05 f301 	lsl.w	r3, r5, r1
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40fd      	lsrs	r5, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f301 	lsl.w	r3, r0, r1
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 5518 	mls	r5, r9, r8, r5
 8000d68:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0505 	adds.w	r5, ip, r5
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	42a8      	cmp	r0, r5
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4465      	add	r5, ip
 8000d90:	1a2d      	subs	r5, r5, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d98:	fb09 5510 	mls	r5, r9, r0, r5
 8000d9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	45ae      	cmp	lr, r5
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	45ae      	cmp	lr, r5
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4465      	add	r5, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba5 050e 	sub.w	r5, r5, lr
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15e      	cbz	r6, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb65 050e 	sbc.w	r5, r5, lr
 8000dda:	fa05 f707 	lsl.w	r7, r5, r7
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	40cd      	lsrs	r5, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c6 7500 	strd	r7, r5, [r6]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa25 f303 	lsr.w	r3, r5, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	430d      	orrs	r5, r1
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e10:	fb07 3011 	mls	r0, r7, r1, r3
 8000e14:	0c2b      	lsrs	r3, r5, #16
 8000e16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e1a:	fb01 f00e 	mul.w	r0, r1, lr
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	4298      	cmp	r0, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3902      	subs	r1, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a1b      	subs	r3, r3, r0
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3310 	mls	r3, r7, r0, r3
 8000e44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e48:	fb00 f30e 	mul.w	r3, r0, lr
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0505 	adds.w	r5, ip, r5
 8000e54:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	42ab      	cmp	r3, r5
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4465      	add	r5, ip
 8000e62:	1aed      	subs	r5, r5, r3
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e707      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000e70:	4686      	mov	lr, r0
 8000e72:	e6e5      	b.n	8000c40 <__udivmoddi4+0x68>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fa      	b.n	8000c6e <__udivmoddi4+0x96>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4641      	mov	r1, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4465      	add	r5, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f00:	68fb      	ldr	r3, [r7, #12]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f22:	4013      	ands	r3, r2
 8000f24:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f36:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <MX_ADC_Init+0x98>)
 8000f38:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f40:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_ADC_Init+0x94>)
 8000fb2:	f001 ff43 	bl	8002e3c <HAL_ADC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000fbc:	f000 fbec 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000180 	.word	0x20000180
 8000fc8:	40012400 	.word	0x40012400

08000fcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a15      	ldr	r2, [pc, #84]	; (8001040 <HAL_ADC_MspInit+0x74>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d124      	bne.n	8001038 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ff2:	f7ff ff73 	bl	8000edc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f7ff ff58 	bl	8000eac <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff ff55 	bl	8000eac <LL_AHB2_GRP1_EnableClock>
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PA10     ------> ADC_IN6
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_13;
 8001002:	f246 0318 	movw	r3, #24600	; 0x6018
 8001006:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001008:	2303      	movs	r3, #3
 800100a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4619      	mov	r1, r3
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <HAL_ADC_MspInit+0x78>)
 8001018:	f003 fd68 	bl	8004aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800101c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001020:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001022:	2303      	movs	r3, #3
 8001024:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f003 fd5a 	bl	8004aec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40012400 	.word	0x40012400
 8001044:	48000400 	.word	0x48000400

08001048 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_ADC_MspDeInit+0x38>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d10e      	bne.n	8001078 <HAL_ADC_MspDeInit+0x30>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800105a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800105e:	f7ff ff55 	bl	8000f0c <LL_APB2_GRP1_DisableClock>
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PA10     ------> ADC_IN6
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_13);
 8001062:	f246 0118 	movw	r1, #24600	; 0x6018
 8001066:	4807      	ldr	r0, [pc, #28]	; (8001084 <HAL_ADC_MspDeInit+0x3c>)
 8001068:	f003 fea0 	bl	8004dac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 800106c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f003 fe9a 	bl	8004dac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40012400 	.word	0x40012400
 8001084:	48000400 	.word	0x48000400

08001088 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <SYS_InitMeasurement+0x14>)
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <SYS_InitMeasurement+0x18>)
 8001090:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000180 	.word	0x20000180
 80010a0:	40012400 	.word	0x40012400

080010a4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  uint16_t batteryLevelmV = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_2);
 80010b2:	4814      	ldr	r0, [pc, #80]	; (8001104 <SYS_GetBatteryLevel+0x60>)
 80010b4:	f000 f868 	bl	8001188 <ADC_ReadChannels>
 80010b8:	6038      	str	r0, [r7, #0]
  /* USER CODE END SYS_GetBatteryLevel_1 */


  if (measuredLevel == 0)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	80fb      	strh	r3, [r7, #6]
 80010c4:	e018      	b.n	80010f8 <SYS_GetBatteryLevel+0x54>
  }
  else
  {
     batteryLevelmV = (uint16_t) (((float) (measuredLevel) / ADC_STEPS) * VOLTAGE_REFERENCE * VOLTAGE_DIVIDER);
 80010c6:	6838      	ldr	r0, [r7, #0]
 80010c8:	f7ff fb80 	bl	80007cc <__aeabi_ui2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fc86 	bl	80009e4 <__aeabi_fdiv>
 80010d8:	4603      	mov	r3, r0
 80010da:	490b      	ldr	r1, [pc, #44]	; (8001108 <SYS_GetBatteryLevel+0x64>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fbcd 	bl	800087c <__aeabi_fmul>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fac0 	bl	800066c <__addsf3>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fd3a 	bl	8000b68 <__aeabi_f2uiz>
 80010f4:	4603      	mov	r3, r0
 80010f6:	80fb      	strh	r3, [r7, #6]

  }


  return batteryLevelmV;
 80010f8:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	08000004 	.word	0x08000004
 8001108:	454c1000 	.word	0x454c1000

0800110c <GetMoistureLevelDfRobot>:

/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */

uint8_t GetMoistureLevelDfRobot(uint32_t channel)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint16_t measuredLevel = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	81fb      	strh	r3, [r7, #14]

  measuredLevel = ADC_ReadChannels(channel);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f835 	bl	8001188 <ADC_ReadChannels>
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]

  measuredLevel = MOISTURE_RANGE - (((uint32_t)(measuredLevel - DF_ROBOT_MOISTURE_MIN_MV) * MOISTURE_RANGE) / (DF_ROBOT_MOISTURE_MAX_MV - DF_ROBOT_MOISTURE_MIN_MV));
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001128:	461a      	mov	r2, r3
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <GetMoistureLevelDfRobot+0x40>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0a9b      	lsrs	r3, r3, #10
 8001138:	b29b      	uxth	r3, r3
 800113a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800113e:	81fb      	strh	r3, [r7, #14]

  return measuredLevel;
 8001140:	89fb      	ldrh	r3, [r7, #14]
 8001142:	b2db      	uxtb	r3, r3
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	91a2b3c5 	.word	0x91a2b3c5

08001150 <GetMoistureLevel>:


uint8_t GetMoistureLevel(uint32_t channel)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint16_t measuredLevel = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	81fb      	strh	r3, [r7, #14]

  measuredLevel = ADC_ReadChannels(channel);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f813 	bl	8001188 <ADC_ReadChannels>
 8001162:	4603      	mov	r3, r0
 8001164:	81fb      	strh	r3, [r7, #14]

  measuredLevel = (((uint32_t)(measuredLevel - MOISTURE_MIN_MV) * MOISTURE_RANGE) / (MOISTURE_MAX_MV - MOISTURE_MIN_MV));
 8001166:	89fb      	ldrh	r3, [r7, #14]
 8001168:	2264      	movs	r2, #100	; 0x64
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <GetMoistureLevel+0x34>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	0adb      	lsrs	r3, r3, #11
 8001176:	81fb      	strh	r3, [r7, #14]

  return measuredLevel;
 8001178:	89fb      	ldrh	r3, [r7, #14]
 800117a:	b2db      	uxtb	r3, r3
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	e3f388af 	.word	0xe3f388af

08001188 <ADC_ReadChannels>:

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80011a0:	f7ff fec6 	bl	8000f30 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80011a4:	481a      	ldr	r0, [pc, #104]	; (8001210 <ADC_ReadChannels+0x88>)
 80011a6:	f002 fc78 	bl	8003a9a <HAL_ADCEx_Calibration_Start>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80011b0:	f000 faf2 	bl	8001798 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4619      	mov	r1, r3
 80011c6:	4812      	ldr	r0, [pc, #72]	; (8001210 <ADC_ReadChannels+0x88>)
 80011c8:	f002 f984 	bl	80034d4 <HAL_ADC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80011d2:	f000 fae1 	bl	8001798 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <ADC_ReadChannels+0x88>)
 80011d8:	f002 f860 	bl	800329c <HAL_ADC_Start>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80011e2:	f000 fad9 	bl	8001798 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80011e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011ea:	4809      	ldr	r0, [pc, #36]	; (8001210 <ADC_ReadChannels+0x88>)
 80011ec:	f002 f8ce 	bl	800338c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <ADC_ReadChannels+0x88>)
 80011f2:	f002 f899 	bl	8003328 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <ADC_ReadChannels+0x88>)
 80011f8:	f002 f95f 	bl	80034ba <HAL_ADC_GetValue>
 80011fc:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <ADC_ReadChannels+0x88>)
 8001200:	f001 ffd0 	bl	80031a4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001204:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000180 	.word	0x20000180

08001214 <LL_AHB1_GRP1_EnableClock>:
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800121c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001220:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4313      	orrs	r3, r2
 800122a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001238:	68fb      	ldr	r3, [r7, #12]
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001248:	2004      	movs	r0, #4
 800124a:	f7ff ffe3 	bl	8001214 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124e:	2001      	movs	r0, #1
 8001250:	f7ff ffe0 	bl	8001214 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2102      	movs	r1, #2
 8001258:	200b      	movs	r0, #11
 800125a:	f002 fdc4 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800125e:	200b      	movs	r0, #11
 8001260:	f002 fddb 	bl	8003e1a <HAL_NVIC_EnableIRQ>

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001274:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001278:	d101      	bne.n	800127e <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800127e:	2300      	movs	r3, #0
#endif
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	58004000 	.word	0x58004000

0800128c <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80012a4:	4b56      	ldr	r3, [pc, #344]	; (8001400 <FLASH_IF_Write+0x174>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0299      	lsls	r1, r3, #10
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <FLASH_IF_Write+0x178>)
 80012ac:	400b      	ands	r3, r1
 80012ae:	fbb2 f1f3 	udiv	r1, r2, r3
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	0adb      	lsrs	r3, r3, #11
 80012ba:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80012c6:	3b01      	subs	r3, #1
 80012c8:	4a4d      	ldr	r2, [pc, #308]	; (8001400 <FLASH_IF_Write+0x174>)
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	0291      	lsls	r1, r2, #10
 80012ce:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <FLASH_IF_Write+0x178>)
 80012d0:	400a      	ands	r2, r1
 80012d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80012d6:	fb01 f202 	mul.w	r2, r1, r2
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	0adb      	lsrs	r3, r3, #11
 80012de:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <FLASH_IF_Write+0x7a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d104      	bne.n	8001306 <FLASH_IF_Write+0x7a>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 8001306:	f06f 0304 	mvn.w	r3, #4
 800130a:	e074      	b.n	80013f6 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800130c:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <FLASH_IF_Write+0x17c>)
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	da02      	bge.n	800131a <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001314:	f06f 0303 	mvn.w	r3, #3
 8001318:	e06d      	b.n	80013f6 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	429a      	cmp	r2, r3
 8001320:	d005      	beq.n	800132e <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001328:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	e05b      	b.n	80013ec <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f8f8 	bl	800152e <FLASH_IF_IsEmpty>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d037      	beq.n	80013b4 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 800134a:	f06f 0304 	mvn.w	r3, #4
 800134e:	e052      	b.n	80013f6 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001356:	02db      	lsls	r3, r3, #11
 8001358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800135c:	4619      	mov	r1, r3
 800135e:	6838      	ldr	r0, [r7, #0]
 8001360:	f018 fd7a 	bl	8019e58 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	4413      	add	r3, r2
 800136e:	6a39      	ldr	r1, [r7, #32]
 8001370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001372:	b292      	uxth	r2, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f018 fd6f 	bl	8019e58 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	69f8      	ldr	r0, [r7, #28]
 8001380:	f000 f865 	bl	800144e <FLASH_IF_EraseByPages>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 800138a:	f06f 0301 	mvn.w	r3, #1
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001390:	e030      	b.n	80013f4 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001398:	02db      	lsls	r3, r3, #11
 800139a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f88a 	bl	80014ba <FLASH_IF_Write_Buffer>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d010      	beq.n	80013ce <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80013ac:	f06f 0302 	mvn.w	r3, #2
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 80013b2:	e01f      	b.n	80013f4 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013b8:	4619      	mov	r1, r3
 80013ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013bc:	f000 f87d 	bl	80014ba <FLASH_IF_Write_Buffer>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80013c6:	f06f 0302 	mvn.w	r3, #2
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80013cc:	e012      	b.n	80013f4 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80013ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	4413      	add	r3, r2
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80013d6:	6a3a      	ldr	r2, [r7, #32]
 80013d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013da:	4413      	add	r3, r2
 80013dc:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3301      	adds	r3, #1
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d99f      	bls.n	8001334 <FLASH_IF_Write+0xa8>
  }

  return status;
 80013f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3730      	adds	r7, #48	; 0x30
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	1fff75e0 	.word	0x1fff75e0
 8001404:	03fffc00 	.word	0x03fffc00
 8001408:	58004000 	.word	0x58004000

0800140c <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001418:	e00b      	b.n	8001432 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 800141a:	bf00      	nop
 800141c:	f7ff ff24 	bl	8001268 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1fa      	bne.n	800141c <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800142a:	68f9      	ldr	r1, [r7, #12]
 800142c:	2001      	movs	r0, #1
 800142e:	f003 f8fb 	bl	8004628 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800143c:	4299      	cmp	r1, r3
 800143e:	bf08      	it	eq
 8001440:	4290      	cmpeq	r0, r2
 8001442:	d1ea      	bne.n	800141a <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001444:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b08a      	sub	sp, #40	; 0x28
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	460b      	mov	r3, r1
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 800145c:	2302      	movs	r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001464:	897b      	ldrh	r3, [r7, #10]
 8001466:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fa76 	bl	8004964 <HAL_FLASHEx_Erase_IT>
 8001478:	4603      	mov	r3, r0
 800147a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800147e:	e00a      	b.n	8001496 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001480:	f107 0214 	add.w	r2, r7, #20
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fa12 	bl	80048b4 <HAL_FLASHEx_Erase>
 8001490:	4603      	mov	r3, r0
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800149a:	2b00      	cmp	r3, #0
 800149c:	d008      	beq.n	80014b0 <FLASH_IF_EraseByPages+0x62>
 800149e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d101      	bne.n	80014aa <FLASH_IF_EraseByPages+0x5c>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e003      	b.n	80014b2 <FLASH_IF_EraseByPages+0x64>
 80014aa:	f06f 0301 	mvn.w	r3, #1
 80014ae:	e000      	b.n	80014b2 <FLASH_IF_EraseByPages+0x64>
 80014b0:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3728      	adds	r7, #40	; 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	e020      	b.n	8001516 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	2208      	movs	r2, #8
 80014da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014dc:	4618      	mov	r0, r3
 80014de:	f018 fcbb 	bl	8019e58 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80014e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014ea:	bf08      	it	eq
 80014ec:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80014f0:	d005      	beq.n	80014fe <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80014f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff ff88 	bl	800140c <FLASH_IF_Write64>
 80014fc:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3308      	adds	r3, #8
 8001502:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	3308      	adds	r3, #8
 8001508:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d108      	bne.n	8001522 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	3301      	adds	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	08db      	lsrs	r3, r3, #3
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	429a      	cmp	r2, r3
 800151e:	d3d9      	bcc.n	80014d4 <FLASH_IF_Write_Buffer+0x1a>
 8001520:	e000      	b.n	8001524 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 8001522:	bf00      	nop
    }
  }

  return status;
 8001524:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001526:	4618      	mov	r0, r3
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001538:	e00a      	b.n	8001550 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d001      	beq.n	800154a <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001546:	2301      	movs	r3, #1
 8001548:	e039      	b.n	80015be <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ef      	bne.n	800153a <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	e010      	b.n	8001586 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f103 0208 	add.w	r2, r3, #8
 800156a:	60fa      	str	r2, [r7, #12]
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001574:	bf08      	it	eq
 8001576:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800157a:	d001      	beq.n	8001580 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 800157c:	2301      	movs	r3, #1
 800157e:	e01e      	b.n	80015be <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	3301      	adds	r3, #1
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	429a      	cmp	r2, r3
 800158e:	d3e9      	bcc.n	8001564 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	607b      	str	r3, [r7, #4]
  while (size != 0)
 800159e:	e00a      	b.n	80015b6 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2bff      	cmp	r3, #255	; 0xff
 80015aa:	d001      	beq.n	80015b0 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e006      	b.n	80015be <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f1      	bne.n	80015a0 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80015bc:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <LL_AHB2_GRP1_EnableClock>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4313      	orrs	r3, r2
 80015de:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ec:	68fb      	ldr	r3, [r7, #12]
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160c:	2004      	movs	r0, #4
 800160e:	f7ff ffdb 	bl	80015c8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	2002      	movs	r0, #2
 8001614:	f7ff ffd8 	bl	80015c8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	2001      	movs	r0, #1
 800161a:	f7ff ffd5 	bl	80015c8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2120      	movs	r1, #32
 8001622:	481e      	ldr	r0, [pc, #120]	; (800169c <MX_GPIO_Init+0xa4>)
 8001624:	f003 fca7 	bl	8004f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|GPIO_PIN_2|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2135      	movs	r1, #53	; 0x35
 800162c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001630:	f003 fca1 	bl	8004f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG2_GPIO_Port, DBG2_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800163a:	4818      	ldr	r0, [pc, #96]	; (800169c <MX_GPIO_Init+0xa4>)
 800163c:	f003 fc9b 	bl	8004f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|DBG2_Pin;
 8001640:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001644:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4619      	mov	r1, r3
 8001656:	4811      	ldr	r0, [pc, #68]	; (800169c <MX_GPIO_Init+0xa4>)
 8001658:	f003 fa48 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800165c:	2331      	movs	r3, #49	; 0x31
 800165e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001674:	f003 fa3a 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001678:	2304      	movs	r3, #4
 800167a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f003 fa2c 	bl	8004aec <HAL_GPIO_Init>

}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	48000400 	.word	0x48000400

080016a0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b0:	f023 0218 	bic.w	r2, r3, #24
 80016b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ce:	f001 f9c7 	bl	8002a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d2:	f000 f807 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d6:	f7ff ff8f 	bl	80015f8 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80016da:	f008 f9cb 	bl	8009a74 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80016de:	f008 f9d1 	bl	8009a84 <MX_LoRaWAN_Process>
 80016e2:	e7fc      	b.n	80016de <main+0x14>

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b09a      	sub	sp, #104	; 0x68
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	2248      	movs	r2, #72	; 0x48
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f019 fe9c 	bl	801b430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800170a:	f003 fc4b 	bl	8004fa4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff ffc6 	bl	80016a0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <SystemClock_Config+0xb0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800171c:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <SystemClock_Config+0xb0>)
 800171e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <SystemClock_Config+0xb0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001730:	2324      	movs	r3, #36	; 0x24
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001734:	2381      	movs	r3, #129	; 0x81
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001738:	2301      	movs	r3, #1
 800173a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800173c:	2300      	movs	r3, #0
 800173e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001740:	23b0      	movs	r3, #176	; 0xb0
 8001742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001744:	2300      	movs	r3, #0
 8001746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4618      	mov	r0, r3
 800174e:	f003 ff75 	bl	800563c <HAL_RCC_OscConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001758:	f000 f81e 	bl	8001798 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800175c:	234f      	movs	r3, #79	; 0x4f
 800175e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	2102      	movs	r1, #2
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fafa 	bl	8005d74 <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001786:	f000 f807 	bl	8001798 <Error_Handler>
  }
}
 800178a:	bf00      	nop
 800178c:	3768      	adds	r7, #104	; 0x68
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	58000400 	.word	0x58000400

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <Error_Handler+0x8>

080017a2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <LL_APB1_GRP1_EnableClock>:
{
 80017c2:	b480      	push	{r7}
 80017c4:	b085      	sub	sp, #20
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4013      	ands	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	222c      	movs	r2, #44	; 0x2c
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f019 fe15 	bl	801b430 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <MX_RTC_Init+0x9c>)
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <MX_RTC_Init+0xa0>)
 800180a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <MX_RTC_Init+0x9c>)
 800180e:	221f      	movs	r2, #31
 8001810:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_RTC_Init+0x9c>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <MX_RTC_Init+0x9c>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <MX_RTC_Init+0x9c>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_RTC_Init+0x9c>)
 8001826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <MX_RTC_Init+0x9c>)
 800182e:	2200      	movs	r2, #0
 8001830:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_RTC_Init+0x9c>)
 8001834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800183a:	4815      	ldr	r0, [pc, #84]	; (8001890 <MX_RTC_Init+0x9c>)
 800183c:	f004 ff56 	bl	80066ec <HAL_RTC_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001846:	f7ff ffa7 	bl	8001798 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800184a:	4811      	ldr	r0, [pc, #68]	; (8001890 <MX_RTC_Init+0x9c>)
 800184c:	f005 fa44 	bl	8006cd8 <HAL_RTCEx_SetSSRU_IT>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001856:	f7ff ff9f 	bl	8001798 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001866:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800186a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800186c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_RTC_Init+0x9c>)
 800187a:	f004 ffb1 	bl	80067e0 <HAL_RTC_SetAlarm_IT>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001884:	f7ff ff88 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	3730      	adds	r7, #48	; 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200001e4 	.word	0x200001e4
 8001894:	40002800 	.word	0x40002800

08001898 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b090      	sub	sp, #64	; 0x40
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	2238      	movs	r2, #56	; 0x38
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f019 fdc1 	bl	801b430 <memset>
  if(rtcHandle->Instance==RTC)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a16      	ldr	r2, [pc, #88]	; (800190c <HAL_RTC_MspInit+0x74>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d125      	bne.n	8001904 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018bc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 fdf5 	bl	80064b8 <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80018d4:	f7ff ff60 	bl	8001798 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018d8:	f7ff ff63 	bl	80017a2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80018dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018e0:	f7ff ff6f 	bl	80017c2 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2002      	movs	r0, #2
 80018ea:	f002 fa7c 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80018ee:	2002      	movs	r0, #2
 80018f0:	f002 fa93 	bl	8003e1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	202a      	movs	r0, #42	; 0x2a
 80018fa:	f002 fa74 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80018fe:	202a      	movs	r0, #42	; 0x2a
 8001900:	f002 fa8b 	bl	8003e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001904:	bf00      	nop
 8001906:	3740      	adds	r7, #64	; 0x40
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40002800 	.word	0x40002800

08001910 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001916:	2201      	movs	r2, #1
 8001918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	58000400 	.word	0x58000400

08001928 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001944:	f001 f8ac 	bl	8002aa0 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001948:	f7ff ffe2 	bl	8001910 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800194c:	2001      	movs	r0, #1
 800194e:	f003 fbbb 	bl	80050c8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}

08001956 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800195a:	f001 f8af 	bl	8002abc <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800195e:	f000 ff2f 	bl	80027c0 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}

08001966 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800196a:	f001 f899 	bl	8002aa0 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800196e:	2101      	movs	r1, #1
 8001970:	2000      	movs	r0, #0
 8001972:	f003 fb25 	bl	8004fc0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}

0800197a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800197e:	f001 f89d 	bl	8002abc <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <NMI_Handler+0x4>

08001998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <HardFault_Handler+0x4>

0800199e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <MemManage_Handler+0x4>

080019a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <BusFault_Handler+0x4>

080019aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <UsageFault_Handler+0x4>

080019b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80019e6:	f005 f9b3 	bl	8006d50 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200001e4 	.word	0x200001e4

080019f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <DMA1_Channel1_IRQHandler+0x10>)
 80019fa:	f002 fca5 	bl	8004348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200002c0 	.word	0x200002c0

08001a08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <USART1_IRQHandler+0x10>)
 8001a0e:	f005 ffff 	bl	8007a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000230 	.word	0x20000230

08001a1c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <RTC_Alarm_IRQHandler+0x10>)
 8001a22:	f005 f845 	bl	8006ab0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200001e4 	.word	0x200001e4

08001a30 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001a36:	f005 fcf3 	bl	8007420 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000021c 	.word	0x2000021c

08001a44 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a68:	68fb      	ldr	r3, [r7, #12]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_SUBGHZ_Init+0x20>)
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_SUBGHZ_Init+0x20>)
 8001a80:	f005 fa52 	bl	8006f28 <HAL_SUBGHZ_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001a8a:	f7ff fe85 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000021c 	.word	0x2000021c

08001a98 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7ff ffcf 	bl	8001a44 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2032      	movs	r0, #50	; 0x32
 8001aac:	f002 f99b 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ab0:	2032      	movs	r0, #50	; 0x32
 8001ab2:	f002 f9b2 	bl	8003e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001ad0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001ae8:	4b02      	ldr	r3, [pc, #8]	; (8001af4 <LL_FLASH_GetUDN+0x10>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	1fff7580 	.word	0x1fff7580

08001af8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <LL_FLASH_GetDeviceID+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b2db      	uxtb	r3, r3
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	1fff7584 	.word	0x1fff7584

08001b10 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <LL_FLASH_GetSTCompanyID+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0a1b      	lsrs	r3, r3, #8
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	1fff7584 	.word	0x1fff7584

08001b28 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff ffc6 	bl	8001abe <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001b32:	f018 ff23 	bl	801a97c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <SystemApp_Init+0x54>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001b3c:	f000 f9a8 	bl	8001e90 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001b40:	f019 f9ac 	bl	801ae9c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001b44:	480e      	ldr	r0, [pc, #56]	; (8001b80 <SystemApp_Init+0x58>)
 8001b46:	f019 fa57 	bl	801aff8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <SystemApp_Init+0x5c>)
 8001b4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b50:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001b52:	2003      	movs	r0, #3
 8001b54:	f019 fa5e 	bl	801b014 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001b58:	f7ff fa96 	bl	8001088 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001b5c:	f000 fa00 	bl	8001f60 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001b60:	f018 f8d4 	bl	8019d0c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001b64:	2101      	movs	r1, #1
 8001b66:	2001      	movs	r0, #1
 8001b68:	f018 f910 	bl	8019d8c <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f018 f8dc 	bl	8019d2c <UTIL_LPM_SetStopMode>
#elif !defined (LOW_POWER_DISABLE)
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */
  DWT_Delay_Init();
 8001b74:	f008 f8ec 	bl	8009d50 <DWT_Delay_Init>
  /* USER CODE END SystemApp_Init_2 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000228 	.word	0x20000228
 8001b80:	08001d81 	.word	0x08001d81
 8001b84:	58004000 	.word	0x58004000

08001b88 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001b8c:	f018 f92e 	bl	8019dec <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001b9e:	f7ff fa81 	bl	80010a4 <SYS_GetBatteryLevel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d902      	bls.n	8001bb6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001bb0:	23fe      	movs	r3, #254	; 0xfe
 8001bb2:	71fb      	strb	r3, [r7, #7]
 8001bb4:	e014      	b.n	8001be0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001bb6:	88bb      	ldrh	r3, [r7, #4]
 8001bb8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001bbc:	d202      	bcs.n	8001bc4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	71fb      	strb	r3, [r7, #7]
 8001bc2:	e00d      	b.n	8001be0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4613      	mov	r3, r2
 8001bce:	01db      	lsls	r3, r3, #7
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <GetBatteryLevel+0x70>)
 8001bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8001bdc:	09db      	lsrs	r3, r3, #7
 8001bde:	71fb      	strb	r3, [r7, #7]
  }

  /* USER CODE BEGIN GetBatteryLevel_2 */
  batteryLevel = (((uint32_t)(batteryLevelmV - MIN_BAT_MV) * MAX_BAT_LV) / (MAX_BAT_MV - MIN_BAT_MV));
 8001be0:	88bb      	ldrh	r3, [r7, #4]
 8001be2:	f6a3 6374 	subw	r3, r3, #3700	; 0xe74
 8001be6:	461a      	mov	r2, r3
 8001be8:	2364      	movs	r3, #100	; 0x64
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <GetBatteryLevel+0x74>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	1b4e81b5 	.word	0x1b4e81b5
 8001c08:	10624dd3 	.word	0x10624dd3

08001c0c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f977 	bl	8001f0c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe ff7b 	bl	8000b1c <__aeabi_f2iz>
 8001c26:	4603      	mov	r3, r0
 8001c28:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  temperatureLevel = (uint8_t) DS18B20_GetTemperature() + 23;
 8001c2a:	f008 f84f 	bl	8009ccc <DS18B20_GetTemperature>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe ff99 	bl	8000b68 <__aeabi_f2uiz>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3317      	adds	r3, #23
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	83fb      	strh	r3, [r7, #30]
  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001c42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001c4e:	b590      	push	{r4, r7, lr}
 8001c50:	b087      	sub	sp, #28
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001c5a:	f7ff ff43 	bl	8001ae4 <LL_FLASH_GetUDN>
 8001c5e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c66:	d138      	bne.n	8001cda <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001c68:	f000 ff36 	bl	8002ad8 <HAL_GetUIDw0>
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	f000 ff47 	bl	8002b00 <HAL_GetUIDw2>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4423      	add	r3, r4
 8001c76:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001c78:	f000 ff38 	bl	8002aec <HAL_GetUIDw1>
 8001c7c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	0e1a      	lsrs	r2, r3, #24
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3307      	adds	r3, #7
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	0c1a      	lsrs	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3306      	adds	r3, #6
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	0a1a      	lsrs	r2, r3, #8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3305      	adds	r3, #5
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	0e1a      	lsrs	r2, r3, #24
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3303      	adds	r3, #3
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	0c1a      	lsrs	r2, r3, #16
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	0a1a      	lsrs	r2, r3, #8
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001cd8:	e031      	b.n	8001d3e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3307      	adds	r3, #7
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	0a1a      	lsrs	r2, r3, #8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3306      	adds	r3, #6
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	0c1a      	lsrs	r2, r3, #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3305      	adds	r3, #5
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	0e1a      	lsrs	r2, r3, #24
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001d08:	f7ff fef6 	bl	8001af8 <LL_FLASH_GetDeviceID>
 8001d0c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3303      	adds	r3, #3
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001d18:	f7ff fefa 	bl	8001b10 <LL_FLASH_GetSTCompanyID>
 8001d1c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3302      	adds	r3, #2
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	0a1a      	lsrs	r2, r3, #8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	701a      	strb	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd90      	pop	{r4, r7, pc}

08001d46 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001d46:	b590      	push	{r4, r7, lr}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001d50:	f7ff fec8 	bl	8001ae4 <LL_FLASH_GetUDN>
 8001d54:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d5c:	d10b      	bne.n	8001d76 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001d5e:	f000 febb 	bl	8002ad8 <HAL_GetUIDw0>
 8001d62:	4604      	mov	r4, r0
 8001d64:	f000 fec2 	bl	8002aec <HAL_GetUIDw1>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	405c      	eors	r4, r3
 8001d6c:	f000 fec8 	bl	8002b00 <HAL_GetUIDw2>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4063      	eors	r3, r4
 8001d74:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001d76:	687b      	ldr	r3, [r7, #4]

}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}

08001d80 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f018 f93c 	bl	801a00c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d9a:	9200      	str	r2, [sp, #0]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <TimestampNow+0x3c>)
 8001d9e:	2110      	movs	r1, #16
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f81d 	bl	8001de0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7fe f9e6 	bl	8000178 <strlen>
 8001dac:	4603      	mov	r3, r0
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	0801b558 	.word	0x0801b558

08001dc0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	f017 ffb0 	bl	8019d2c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	f017 ffa8 	bl	8019d2c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001de0:	b40c      	push	{r2, r3}
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001df2:	6839      	ldr	r1, [r7, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f018 fad9 	bl	801a3b0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e08:	b002      	add	sp, #8
 8001e0a:	4770      	bx	lr

08001e0c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_GetTick+0x24>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001e32:	f000 f961 	bl	80020f8 <TIMER_IF_GetTimerValue>
 8001e36:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000228 	.word	0x20000228

08001e48 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 f9d7 	bl	8002206 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <LL_AHB2_GRP1_EnableClock>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e84:	68fb      	ldr	r3, [r7, #12]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001e96:	f000 fe3d 	bl	8002b14 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001e9a:	f000 fe41 	bl	8002b20 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001e9e:	f000 fe45 	bl	8002b2c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7ff ffcf 	bl	8001e60 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f7ff ffcc 	bl	8001e60 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed4:	f002 fe0a 	bl	8004aec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001edc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4809      	ldr	r0, [pc, #36]	; (8001f08 <DBG_Init+0x78>)
 8001ee4:	f002 fe02 	bl	8004aec <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2101      	movs	r1, #1
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef0:	f003 f841 	bl	8004f76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001efa:	4803      	ldr	r0, [pc, #12]	; (8001f08 <DBG_Init+0x78>)
 8001efc:	f003 f83b 	bl	8004f76 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001f00:	bf00      	nop
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	48000400 	.word	0x48000400

08001f0c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <EnvSensors_Read+0x40>)
 8001f16:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <EnvSensors_Read+0x44>)
 8001f1a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <EnvSensors_Read+0x48>)
 8001f1e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <EnvSensors_Read+0x4c>)
 8001f36:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <EnvSensors_Read+0x50>)
 8001f3c:	611a      	str	r2, [r3, #16]

  return 0;
 8001f3e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	42480000 	.word	0x42480000
 8001f50:	41900000 	.word	0x41900000
 8001f54:	447a0000 	.word	0x447a0000
 8001f58:	003e090d 	.word	0x003e090d
 8001f5c:	000503ab 	.word	0x000503ab

08001f60 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001f6a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <TIMER_IF_Init+0x5c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	f083 0301 	eor.w	r3, r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <TIMER_IF_Init+0x60>)
 8001fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001fb8:	f7ff fc1c 	bl	80017f4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001fbc:	f000 f856 	bl	800206c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <TIMER_IF_Init+0x60>)
 8001fc6:	f004 fd17 	bl	80069f8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <TIMER_IF_Init+0x60>)
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001fd2:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <TIMER_IF_Init+0x60>)
 8001fd4:	f004 fe4e 	bl	8006c74 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f000 f9d3 	bl	8002384 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001fde:	f000 f85f 	bl	80020a0 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <TIMER_IF_Init+0x5c>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000229 	.word	0x20000229
 8001ff8:	200001e4 	.word	0x200001e4

08001ffc <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	; 0x38
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800200a:	f107 0308 	add.w	r3, r7, #8
 800200e:	222c      	movs	r2, #44	; 0x2c
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f019 fa0c 	bl	801b430 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002018:	f000 f828 	bl	800206c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <TIMER_IF_StartTimer+0x68>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	43db      	mvns	r3, r3
 800202e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002034:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002038:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800203a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	2201      	movs	r2, #1
 8002046:	4619      	mov	r1, r3
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <TIMER_IF_StartTimer+0x6c>)
 800204a:	f004 fbc9 	bl	80067e0 <HAL_RTC_SetAlarm_IT>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002054:	f7ff fba0 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800205c:	4618      	mov	r0, r3
 800205e:	3738      	adds	r7, #56	; 0x38
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2000022c 	.word	0x2000022c
 8002068:	200001e4 	.word	0x200001e4

0800206c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <TIMER_IF_StopTimer+0x2c>)
 8002078:	2201      	movs	r2, #1
 800207a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800207c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002080:	4806      	ldr	r0, [pc, #24]	; (800209c <TIMER_IF_StopTimer+0x30>)
 8002082:	f004 fcb9 	bl	80069f8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <TIMER_IF_StopTimer+0x30>)
 8002088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800208e:	79fb      	ldrb	r3, [r7, #7]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40002800 	.word	0x40002800
 800209c:	200001e4 	.word	0x200001e4

080020a0 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80020a4:	f000 f98e 	bl	80023c4 <GetTimerTicks>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a03      	ldr	r2, [pc, #12]	; (80020b8 <TIMER_IF_SetTimerContext+0x18>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80020ae:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <TIMER_IF_SetTimerContext+0x18>)
 80020b0:	681b      	ldr	r3, [r3, #0]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000022c 	.word	0x2000022c

080020bc <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80020c0:	4b02      	ldr	r3, [pc, #8]	; (80020cc <TIMER_IF_GetTimerContext+0x10>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	2000022c 	.word	0x2000022c

080020d0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80020da:	f000 f973 	bl	80023c4 <GetTimerTicks>
 80020de:	4602      	mov	r2, r0
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80020e8:	687b      	ldr	r3, [r7, #4]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000022c 	.word	0x2000022c

080020f8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <TIMER_IF_GetTimerValue+0x24>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800210a:	f000 f95b 	bl	80023c4 <GetTimerTicks>
 800210e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002110:	687b      	ldr	r3, [r7, #4]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000229 	.word	0x20000229

08002120 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800212a:	2303      	movs	r3, #3
 800212c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800212e:	687b      	ldr	r3, [r7, #4]
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800213a:	b5b0      	push	{r4, r5, r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002142:	2100      	movs	r1, #0
 8002144:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	2000      	movs	r0, #0
 800214a:	460a      	mov	r2, r1
 800214c:	4603      	mov	r3, r0
 800214e:	0d95      	lsrs	r5, r2, #22
 8002150:	0294      	lsls	r4, r2, #10
 8002152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	f7fe fd23 	bl	8000ba8 <__aeabi_uldivmod>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4613      	mov	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bdb0      	pop	{r4, r5, r7, pc}

08002174 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002174:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800217e:	2100      	movs	r1, #0
 8002180:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	2000      	movs	r0, #0
 8002186:	460c      	mov	r4, r1
 8002188:	4605      	mov	r5, r0
 800218a:	4620      	mov	r0, r4
 800218c:	4629      	mov	r1, r5
 800218e:	f04f 0a00 	mov.w	sl, #0
 8002192:	f04f 0b00 	mov.w	fp, #0
 8002196:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800219a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800219e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80021a2:	4650      	mov	r0, sl
 80021a4:	4659      	mov	r1, fp
 80021a6:	1b02      	subs	r2, r0, r4
 80021a8:	eb61 0305 	sbc.w	r3, r1, r5
 80021ac:	f04f 0000 	mov.w	r0, #0
 80021b0:	f04f 0100 	mov.w	r1, #0
 80021b4:	0099      	lsls	r1, r3, #2
 80021b6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80021ba:	0090      	lsls	r0, r2, #2
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	eb12 0804 	adds.w	r8, r2, r4
 80021c4:	eb43 0905 	adc.w	r9, r3, r5
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021dc:	4690      	mov	r8, r2
 80021de:	4699      	mov	r9, r3
 80021e0:	4640      	mov	r0, r8
 80021e2:	4649      	mov	r1, r9
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	0a82      	lsrs	r2, r0, #10
 80021ee:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80021f2:	0a8b      	lsrs	r3, r1, #10
 80021f4:	4613      	mov	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80021f8:	68fb      	ldr	r3, [r7, #12]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002204:	4770      	bx	lr

08002206 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ff93 	bl	800213a <TIMER_IF_Convert_ms2Tick>
 8002214:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002216:	f000 f8d5 	bl	80023c4 <GetTimerTicks>
 800221a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800221c:	e000      	b.n	8002220 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800221e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002220:	f000 f8d0 	bl	80023c4 <GetTimerTicks>
 8002224:	4602      	mov	r2, r0
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	429a      	cmp	r2, r3
 800222e:	d8f6      	bhi.n	800221e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002242:	f018 fce9 	bl	801ac18 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002256:	f000 f8a5 	bl	80023a4 <TIMER_IF_BkUp_Read_MSBticks>
 800225a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3301      	adds	r3, #1
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f88f 	bl	8002384 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800226e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002272:	b08c      	sub	sp, #48	; 0x30
 8002274:	af00      	add	r7, sp, #0
 8002276:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 800227c:	f000 f8a2 	bl	80023c4 <GetTimerTicks>
 8002280:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002282:	f000 f88f 	bl	80023a4 <TIMER_IF_BkUp_Read_MSBticks>
 8002286:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	2200      	movs	r2, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	60fa      	str	r2, [r7, #12]
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	000b      	movs	r3, r1
 800229c:	2200      	movs	r2, #0
 800229e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a0:	2000      	movs	r0, #0
 80022a2:	460c      	mov	r4, r1
 80022a4:	4605      	mov	r5, r0
 80022a6:	eb12 0804 	adds.w	r8, r2, r4
 80022aa:	eb43 0905 	adc.w	r9, r3, r5
 80022ae:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80022b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	0a82      	lsrs	r2, r0, #10
 80022c0:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80022c4:	0a8b      	lsrs	r3, r1, #10
 80022c6:	4613      	mov	r3, r2
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2200      	movs	r2, #0
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80022d8:	f04f 0b00 	mov.w	fp, #0
 80022dc:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff46 	bl	8002174 <TIMER_IF_Convert_Tick2ms>
 80022e8:	4603      	mov	r3, r0
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3730      	adds	r7, #48	; 0x30
 80022f6:	46bd      	mov	sp, r7
 80022f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080022fc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	2100      	movs	r1, #0
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800230a:	f004 fd45 	bl	8006d98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200001e4 	.word	0x200001e4

0800231c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	2101      	movs	r1, #1
 8002328:	4803      	ldr	r0, [pc, #12]	; (8002338 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800232a:	f004 fd35 	bl	8006d98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200001e4 	.word	0x200001e4

0800233c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002346:	2100      	movs	r1, #0
 8002348:	4804      	ldr	r0, [pc, #16]	; (800235c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800234a:	f004 fd3d 	bl	8006dc8 <HAL_RTCEx_BKUPRead>
 800234e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002350:	687b      	ldr	r3, [r7, #4]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200001e4 	.word	0x200001e4

08002360 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800236a:	2101      	movs	r1, #1
 800236c:	4804      	ldr	r0, [pc, #16]	; (8002380 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800236e:	f004 fd2b 	bl	8006dc8 <HAL_RTCEx_BKUPRead>
 8002372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002374:	687b      	ldr	r3, [r7, #4]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200001e4 	.word	0x200001e4

08002384 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	2102      	movs	r1, #2
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002392:	f004 fd01 	bl	8006d98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200001e4 	.word	0x200001e4

080023a4 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80023aa:	2102      	movs	r1, #2
 80023ac:	4804      	ldr	r0, [pc, #16]	; (80023c0 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80023ae:	f004 fd0b 	bl	8006dc8 <HAL_RTCEx_BKUPRead>
 80023b2:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80023b4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200001e4 	.word	0x200001e4

080023c4 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80023ca:	480b      	ldr	r0, [pc, #44]	; (80023f8 <GetTimerTicks+0x34>)
 80023cc:	f7ff fdd9 	bl	8001f82 <LL_RTC_TIME_GetSubSecond>
 80023d0:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80023d2:	e003      	b.n	80023dc <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80023d4:	4808      	ldr	r0, [pc, #32]	; (80023f8 <GetTimerTicks+0x34>)
 80023d6:	f7ff fdd4 	bl	8001f82 <LL_RTC_TIME_GetSubSecond>
 80023da:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80023dc:	4806      	ldr	r0, [pc, #24]	; (80023f8 <GetTimerTicks+0x34>)
 80023de:	f7ff fdd0 	bl	8001f82 <LL_RTC_TIME_GetSubSecond>
 80023e2:	4602      	mov	r2, r0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d1f4      	bne.n	80023d4 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40002800 	.word	0x40002800

080023fc <LL_AHB2_GRP1_EnableClock>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002408:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800240a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4313      	orrs	r3, r2
 8002412:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002420:	68fb      	ldr	r3, [r7, #12]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <LL_APB2_GRP1_EnableClock>:
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002438:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800243a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4313      	orrs	r3, r2
 8002442:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002448:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4013      	ands	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002450:	68fb      	ldr	r3, [r7, #12]
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <LL_APB2_GRP1_DisableClock>:
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002468:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	43db      	mvns	r3, r3
 800246e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002472:	4013      	ands	r3, r2
 8002474:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <MX_USART1_UART_Init+0x90>)
 8002486:	4a23      	ldr	r2, [pc, #140]	; (8002514 <MX_USART1_UART_Init+0x94>)
 8002488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <MX_USART1_UART_Init+0x90>)
 800248c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <MX_USART1_UART_Init+0x90>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <MX_USART1_UART_Init+0x90>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <MX_USART1_UART_Init+0x90>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <MX_USART1_UART_Init+0x90>)
 80024a6:	220c      	movs	r2, #12
 80024a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <MX_USART1_UART_Init+0x90>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <MX_USART1_UART_Init+0x90>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <MX_USART1_UART_Init+0x90>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <MX_USART1_UART_Init+0x90>)
 80024be:	2200      	movs	r2, #0
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <MX_USART1_UART_Init+0x90>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024c8:	4811      	ldr	r0, [pc, #68]	; (8002510 <MX_USART1_UART_Init+0x90>)
 80024ca:	f005 f968 	bl	800779e <HAL_UART_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80024d4:	f7ff f960 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d8:	2100      	movs	r1, #0
 80024da:	480d      	ldr	r0, [pc, #52]	; (8002510 <MX_USART1_UART_Init+0x90>)
 80024dc:	f007 f9df 	bl	800989e <HAL_UARTEx_SetTxFifoThreshold>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80024e6:	f7ff f957 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024ea:	2100      	movs	r1, #0
 80024ec:	4808      	ldr	r0, [pc, #32]	; (8002510 <MX_USART1_UART_Init+0x90>)
 80024ee:	f007 fa14 	bl	800991a <HAL_UARTEx_SetRxFifoThreshold>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80024f8:	f7ff f94e 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80024fc:	4804      	ldr	r0, [pc, #16]	; (8002510 <MX_USART1_UART_Init+0x90>)
 80024fe:	f007 f993 	bl	8009828 <HAL_UARTEx_EnableFifoMode>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002508:	f7ff f946 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000230 	.word	0x20000230
 8002514:	40013800 	.word	0x40013800

08002518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b096      	sub	sp, #88	; 0x58
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	2238      	movs	r2, #56	; 0x38
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f018 ff79 	bl	801b430 <memset>
  if(uartHandle->Instance==USART1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2f      	ldr	r2, [pc, #188]	; (8002600 <HAL_UART_MspInit+0xe8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d156      	bne.n	80025f6 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002548:	2301      	movs	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800254c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002550:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	4618      	mov	r0, r3
 8002558:	f003 ffae 	bl	80064b8 <HAL_RCCEx_PeriphCLKConfig>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002562:	f7ff f919 	bl	8001798 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002566:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800256a:	f7ff ff5f 	bl	800242c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2002      	movs	r0, #2
 8002570:	f7ff ff44 	bl	80023fc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002574:	23c0      	movs	r3, #192	; 0xc0
 8002576:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002584:	2307      	movs	r3, #7
 8002586:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002588:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800258c:	4619      	mov	r1, r3
 800258e:	481d      	ldr	r0, [pc, #116]	; (8002604 <HAL_UART_MspInit+0xec>)
 8002590:	f002 faac 	bl	8004aec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002594:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <HAL_UART_MspInit+0xf0>)
 8002596:	4a1d      	ldr	r2, [pc, #116]	; (800260c <HAL_UART_MspInit+0xf4>)
 8002598:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_UART_MspInit+0xf0>)
 800259c:	2212      	movs	r2, #18
 800259e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_UART_MspInit+0xf0>)
 80025a2:	2210      	movs	r2, #16
 80025a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_UART_MspInit+0xf0>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_UART_MspInit+0xf0>)
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_UART_MspInit+0xf0>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_UART_MspInit+0xf0>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_UART_MspInit+0xf0>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025c4:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_UART_MspInit+0xf0>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025ca:	480f      	ldr	r0, [pc, #60]	; (8002608 <HAL_UART_MspInit+0xf0>)
 80025cc:	f001 fc42 	bl	8003e54 <HAL_DMA_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80025d6:	f7ff f8df 	bl	8001798 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_UART_MspInit+0xf0>)
 80025de:	679a      	str	r2, [r3, #120]	; 0x78
 80025e0:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_UART_MspInit+0xf0>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2102      	movs	r1, #2
 80025ea:	2024      	movs	r0, #36	; 0x24
 80025ec:	f001 fbfb 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025f0:	2024      	movs	r0, #36	; 0x24
 80025f2:	f001 fc12 	bl	8003e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025f6:	bf00      	nop
 80025f8:	3758      	adds	r7, #88	; 0x58
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40013800 	.word	0x40013800
 8002604:	48000400 	.word	0x48000400
 8002608:	200002c0 	.word	0x200002c0
 800260c:	40020008 	.word	0x40020008

08002610 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0b      	ldr	r2, [pc, #44]	; (800264c <HAL_UART_MspDeInit+0x3c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10f      	bne.n	8002642 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002622:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002626:	f7ff ff19 	bl	800245c <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800262a:	21c0      	movs	r1, #192	; 0xc0
 800262c:	4808      	ldr	r0, [pc, #32]	; (8002650 <HAL_UART_MspDeInit+0x40>)
 800262e:	f002 fbbd 	bl	8004dac <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002636:	4618      	mov	r0, r3
 8002638:	f001 fcb4 	bl	8003fa4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800263c:	2024      	movs	r0, #36	; 0x24
 800263e:	f001 fbfa 	bl	8003e36 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40013800 	.word	0x40013800
 8002650:	48000400 	.word	0x48000400

08002654 <LL_APB2_GRP1_ForceReset>:
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4313      	orrs	r3, r2
 800266a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <LL_APB2_GRP1_ReleaseReset>:
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	43db      	mvns	r3, r3
 8002688:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800268c:	4013      	ands	r3, r2
 800268e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
	...

0800269c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80026a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80026aa:	4905      	ldr	r1, [pc, #20]	; (80026c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	58000800 	.word	0x58000800

080026c4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80026cc:	4a07      	ldr	r2, [pc, #28]	; (80026ec <vcom_Init+0x28>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80026d2:	f7fe fdb7 	bl	8001244 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80026d6:	f7ff fed3 	bl	8002480 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80026da:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80026de:	f7ff ffdd 	bl	800269c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80026e2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000324 	.word	0x20000324

080026f0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80026f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026f8:	f7ff ffac 	bl	8002654 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80026fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002700:	f7ff ffb9 	bl	8002676 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002704:	4804      	ldr	r0, [pc, #16]	; (8002718 <vcom_DeInit+0x28>)
 8002706:	f7ff ff83 	bl	8002610 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800270a:	200f      	movs	r0, #15
 800270c:	f001 fb93 	bl	8003e36 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002710:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002712:	4618      	mov	r0, r3
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000230 	.word	0x20000230

0800271c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	461a      	mov	r2, r3
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4804      	ldr	r0, [pc, #16]	; (8002740 <vcom_Trace_DMA+0x24>)
 8002730:	f005 f8dc 	bl	80078ec <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002734:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000230 	.word	0x20000230

08002744 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800274c:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <vcom_ReceiveInit+0x70>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002752:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002756:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002758:	f107 0308 	add.w	r3, r7, #8
 800275c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002760:	4815      	ldr	r0, [pc, #84]	; (80027b8 <vcom_ReceiveInit+0x74>)
 8002762:	f006 ffd4 	bl	800970e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002766:	bf00      	nop
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <vcom_ReceiveInit+0x74>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002776:	d0f7      	beq.n	8002768 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002778:	bf00      	nop
 800277a:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <vcom_ReceiveInit+0x74>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002788:	d1f7      	bne.n	800277a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <vcom_ReceiveInit+0x74>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <vcom_ReceiveInit+0x74>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002798:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800279a:	4807      	ldr	r0, [pc, #28]	; (80027b8 <vcom_ReceiveInit+0x74>)
 800279c:	f007 f812 	bl	80097c4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80027a0:	2201      	movs	r2, #1
 80027a2:	4906      	ldr	r1, [pc, #24]	; (80027bc <vcom_ReceiveInit+0x78>)
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <vcom_ReceiveInit+0x74>)
 80027a6:	f005 f84b 	bl	8007840 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80027aa:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000328 	.word	0x20000328
 80027b8:	20000230 	.word	0x20000230
 80027bc:	20000320 	.word	0x20000320

080027c0 <vcom_Resume>:

void vcom_Resume(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027c4:	4808      	ldr	r0, [pc, #32]	; (80027e8 <vcom_Resume+0x28>)
 80027c6:	f004 ffea 	bl	800779e <HAL_UART_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <vcom_Resume+0x14>
  {
    Error_Handler();
 80027d0:	f7fe ffe2 	bl	8001798 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027d4:	4805      	ldr	r0, [pc, #20]	; (80027ec <vcom_Resume+0x2c>)
 80027d6:	f001 fb3d 	bl	8003e54 <HAL_DMA_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <vcom_Resume+0x24>
  {
    Error_Handler();
 80027e0:	f7fe ffda 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000230 	.word	0x20000230
 80027ec:	200002c0 	.word	0x200002c0

080027f0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a05      	ldr	r2, [pc, #20]	; (8002814 <HAL_UART_TxCpltCallback+0x24>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d103      	bne.n	800280a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_UART_TxCpltCallback+0x28>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2000      	movs	r0, #0
 8002808:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40013800 	.word	0x40013800
 8002818:	20000324 	.word	0x20000324

0800281c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0d      	ldr	r2, [pc, #52]	; (8002860 <HAL_UART_RxCpltCallback+0x44>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d113      	bne.n	8002856 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_UART_RxCpltCallback+0x48>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_UART_RxCpltCallback+0x30>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_UART_RxCpltCallback+0x48>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2200      	movs	r2, #0
 8002846:	2101      	movs	r1, #1
 8002848:	4807      	ldr	r0, [pc, #28]	; (8002868 <HAL_UART_RxCpltCallback+0x4c>)
 800284a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800284c:	2201      	movs	r2, #1
 800284e:	4906      	ldr	r1, [pc, #24]	; (8002868 <HAL_UART_RxCpltCallback+0x4c>)
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f004 fff5 	bl	8007840 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40013800 	.word	0x40013800
 8002864:	20000328 	.word	0x20000328
 8002868:	20000320 	.word	0x20000320

0800286c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800286c:	480d      	ldr	r0, [pc, #52]	; (80028a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800286e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002870:	f7ff fb81 	bl	8001f76 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002874:	480c      	ldr	r0, [pc, #48]	; (80028a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002876:	490d      	ldr	r1, [pc, #52]	; (80028ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002878:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <LoopForever+0xe>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800287c:	e002      	b.n	8002884 <LoopCopyDataInit>

0800287e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002882:	3304      	adds	r3, #4

08002884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002888:	d3f9      	bcc.n	800287e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800288a:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800288c:	4c0a      	ldr	r4, [pc, #40]	; (80028b8 <LoopForever+0x16>)
  movs r3, #0
 800288e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002890:	e001      	b.n	8002896 <LoopFillZerobss>

08002892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002894:	3204      	adds	r2, #4

08002896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002898:	d3fb      	bcc.n	8002892 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800289a:	f018 fda5 	bl	801b3e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800289e:	f7fe ff14 	bl	80016ca <main>

080028a2 <LoopForever>:

LoopForever:
    b LoopForever
 80028a2:	e7fe      	b.n	80028a2 <LoopForever>
  ldr   r0, =_estack
 80028a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ac:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80028b0:	0801c5c4 	.word	0x0801c5c4
  ldr r2, =_sbss
 80028b4:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80028b8:	200022d0 	.word	0x200022d0

080028bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028bc:	e7fe      	b.n	80028bc <ADC_IRQHandler>

080028be <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80028d2:	2310      	movs	r3, #16
 80028d4:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028de:	2303      	movs	r3, #3
 80028e0:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ea:	f002 f8ff 	bl	8004aec <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80028ee:	2320      	movs	r3, #32
 80028f0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028fa:	f002 f8f7 	bl	8004aec <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80028fe:	2200      	movs	r2, #0
 8002900:	2120      	movs	r1, #32
 8002902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002906:	f002 fb36 	bl	8004f76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800290a:	2200      	movs	r2, #0
 800290c:	2110      	movs	r1, #16
 800290e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002912:	f002 fb30 	bl	8004f76 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d83f      	bhi.n	80029b0 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002930:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002936:	bf00      	nop
 8002938:	08002949 	.word	0x08002949
 800293c:	08002963 	.word	0x08002963
 8002940:	0800297d 	.word	0x0800297d
 8002944:	08002997 	.word	0x08002997
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002948:	2200      	movs	r2, #0
 800294a:	2110      	movs	r1, #16
 800294c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002950:	f002 fb11 	bl	8004f76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	2120      	movs	r1, #32
 8002958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800295c:	f002 fb0b 	bl	8004f76 <HAL_GPIO_WritePin>
      break;      
 8002960:	e027      	b.n	80029b2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002962:	2201      	movs	r2, #1
 8002964:	2110      	movs	r1, #16
 8002966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296a:	f002 fb04 	bl	8004f76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800296e:	2200      	movs	r2, #0
 8002970:	2120      	movs	r1, #32
 8002972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002976:	f002 fafe 	bl	8004f76 <HAL_GPIO_WritePin>
      break;
 800297a:	e01a      	b.n	80029b2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800297c:	2201      	movs	r2, #1
 800297e:	2110      	movs	r1, #16
 8002980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002984:	f002 faf7 	bl	8004f76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002988:	2201      	movs	r2, #1
 800298a:	2120      	movs	r1, #32
 800298c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002990:	f002 faf1 	bl	8004f76 <HAL_GPIO_WritePin>
      break;
 8002994:	e00d      	b.n	80029b2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002996:	2200      	movs	r2, #0
 8002998:	2110      	movs	r1, #16
 800299a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299e:	f002 faea 	bl	8004f76 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80029a2:	2201      	movs	r2, #1
 80029a4:	2120      	movs	r1, #32
 80029a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029aa:	f002 fae4 	bl	8004f76 <HAL_GPIO_WritePin>
      break;
 80029ae:	e000      	b.n	80029b2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80029b0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80029c0:	2302      	movs	r3, #2
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80029ce:	2301      	movs	r3, #1
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80029dc:	2301      	movs	r3, #1
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80029f6:	230f      	movs	r3, #15
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e001      	b.n	8002a00 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80029fc:	2316      	movs	r3, #22
 80029fe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a00:	68fb      	ldr	r3, [r7, #12]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4a03      	ldr	r2, [pc, #12]	; (8002a24 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	6053      	str	r3, [r2, #4]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	e0042000 	.word	0xe0042000

08002a28 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a03      	ldr	r2, [pc, #12]	; (8002a40 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002a32:	f023 0302 	bic.w	r3, r3, #2
 8002a36:	6053      	str	r3, [r2, #4]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	e0042000 	.word	0xe0042000

08002a44 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002a4e:	f023 0304 	bic.w	r3, r3, #4
 8002a52:	6053      	str	r3, [r2, #4]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	e0042000 	.word	0xe0042000

08002a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a6a:	2003      	movs	r0, #3
 8002a6c:	f001 f9b0 	bl	8003dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a70:	f003 fb44 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_Init+0x3c>)
 8002a78:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a7a:	200f      	movs	r0, #15
 8002a7c:	f7ff f9c6 	bl	8001e0c <HAL_InitTick>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	71fb      	strb	r3, [r7, #7]
 8002a8a:	e001      	b.n	8002a90 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a8c:	f7fe ff7b 	bl	8001986 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a90:	79fb      	ldrb	r3, [r7, #7]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000000 	.word	0x20000000

08002aa0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <HAL_SuspendTick+0x18>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a03      	ldr	r2, [pc, #12]	; (8002ab8 <HAL_SuspendTick+0x18>)
 8002aaa:	f023 0302 	bic.w	r3, r3, #2
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <HAL_ResumeTick+0x18>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a03      	ldr	r2, [pc, #12]	; (8002ad4 <HAL_ResumeTick+0x18>)
 8002ac6:	f043 0302 	orr.w	r3, r3, #2
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e010 	.word	0xe000e010

08002ad8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002adc:	4b02      	ldr	r3, [pc, #8]	; (8002ae8 <HAL_GetUIDw0+0x10>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	1fff7590 	.word	0x1fff7590

08002aec <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002af0:	4b02      	ldr	r3, [pc, #8]	; (8002afc <HAL_GetUIDw1+0x10>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	1fff7594 	.word	0x1fff7594

08002b00 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002b04:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <HAL_GetUIDw2+0x10>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	1fff7598 	.word	0x1fff7598

08002b14 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002b18:	f7ff ff78 	bl	8002a0c <LL_DBGMCU_DisableDBGSleepMode>
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002b24:	f7ff ff80 	bl	8002a28 <LL_DBGMCU_DisableDBGStopMode>
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002b30:	f7ff ff88 	bl	8002a44 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	601a      	str	r2, [r3, #0]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2107      	movs	r1, #7
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	401a      	ands	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2107      	movs	r1, #7
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	210f      	movs	r1, #15
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	401a      	ands	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	f003 010f 	and.w	r1, r3, #15
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b085      	sub	sp, #20
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	401a      	ands	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	0219      	lsls	r1, r3, #8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002cb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cda:	f023 0317 	bic.w	r3, r3, #23
 8002cde:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d00:	f023 0317 	bic.w	r3, r3, #23
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6093      	str	r3, [r2, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d26:	d101      	bne.n	8002d2c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d48:	f023 0317 	bic.w	r3, r3, #23
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d6e:	f023 0317 	bic.w	r3, r3, #23
 8002d72:	f043 0202 	orr.w	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_IsEnabled+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_IsEnabled+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d101      	bne.n	8002dc0 <LL_ADC_IsDisableOngoing+0x18>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <LL_ADC_IsDisableOngoing+0x1a>
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ddc:	f023 0317 	bic.w	r3, r3, #23
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e02:	f023 0317 	bic.w	r3, r3, #23
 8002e06:	f043 0210 	orr.w	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e19e      	b.n	800319c <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7fe f8ad 	bl	8000fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff44 	bl	8002d12 <LL_ADC_IsInternalRegulatorEnabled>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d115      	bne.n	8002ebc <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff18 	bl	8002cca <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e9a:	4b99      	ldr	r3, [pc, #612]	; (8003100 <HAL_ADC_Init+0x2c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	099b      	lsrs	r3, r3, #6
 8002ea0:	4a98      	ldr	r2, [pc, #608]	; (8003104 <HAL_ADC_Init+0x2c8>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eae:	e002      	b.n	8002eb6 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f9      	bne.n	8002eb0 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff26 	bl	8002d12 <LL_ADC_IsInternalRegulatorEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10d      	bne.n	8002ee8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	f043 0210 	orr.w	r2, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff93 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 8002ef2:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 8144 	bne.w	800318a <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 8140 	bne.w	800318a <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f12:	f043 0202 	orr.w	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff30 	bl	8002d84 <LL_ADC_IsEnabled>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f040 80a7 	bne.w	800307a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7e1b      	ldrb	r3, [r3, #24]
 8002f34:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f36:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7e5b      	ldrb	r3, [r3, #25]
 8002f3c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f3e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7e9b      	ldrb	r3, [r3, #26]
 8002f44:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f46:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f4c:	2a00      	cmp	r2, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_ADC_Init+0x11a>
 8002f50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f54:	e000      	b.n	8002f58 <HAL_ADC_Init+0x11c>
 8002f56:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f58:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f5e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da04      	bge.n	8002f72 <HAL_ADC_Init+0x136>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f70:	e001      	b.n	8002f76 <HAL_ADC_Init+0x13a>
 8002f72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002f76:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002f7e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f80:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d114      	bne.n	8002fbc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	7e9b      	ldrb	r3, [r3, #26]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d104      	bne.n	8002fa4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	e00b      	b.n	8002fbc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002fe2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	69b9      	ldr	r1, [r7, #24]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d111      	bne.n	8003032 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800301a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003020:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003026:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	4b33      	ldr	r3, [pc, #204]	; (8003108 <HAL_ADC_Init+0x2cc>)
 800303a:	4013      	ands	r3, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	6979      	ldr	r1, [r7, #20]
 8003042:	430b      	orrs	r3, r1
 8003044:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800304e:	d014      	beq.n	800307a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003058:	d00f      	beq.n	800307a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800305e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003062:	d00a      	beq.n	800307a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <HAL_ADC_Init+0x2d0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003074:	4925      	ldr	r1, [pc, #148]	; (800310c <HAL_ADC_Init+0x2d0>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003082:	461a      	mov	r2, r3
 8003084:	2100      	movs	r1, #0
 8003086:	f7ff fd76 	bl	8002b76 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	461a      	mov	r2, r3
 8003094:	491e      	ldr	r1, [pc, #120]	; (8003110 <HAL_ADC_Init+0x2d4>)
 8003096:	f7ff fd6e 	bl	8002b76 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f062 020f 	orn	r2, r2, #15
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
 80030b2:	e042      	b.n	800313a <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030bc:	d13d      	bne.n	800313a <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	e00c      	b.n	80030de <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	2b0f      	cmp	r3, #15
 80030d6:	d006      	beq.n	80030e6 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3301      	adds	r3, #1
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b07      	cmp	r3, #7
 80030e2:	d9ef      	bls.n	80030c4 <HAL_ADC_Init+0x288>
 80030e4:	e000      	b.n	80030e8 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80030e6:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d112      	bne.n	8003114 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f062 020f 	orn	r2, r2, #15
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
 80030fe:	e01c      	b.n	800313a <HAL_ADC_Init+0x2fe>
 8003100:	20000000 	.word	0x20000000
 8003104:	053e2d63 	.word	0x053e2d63
 8003108:	1ffffc02 	.word	0x1ffffc02
 800310c:	40012708 	.word	0x40012708
 8003110:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	3b01      	subs	r3, #1
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	f003 031c 	and.w	r3, r3, #28
 8003126:	f06f 020f 	mvn.w	r2, #15
 800312a:	fa02 f103 	lsl.w	r1, r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fd36 	bl	8002bb2 <LL_ADC_GetSamplingTimeCommonChannels>
 8003146:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800314c:	429a      	cmp	r2, r3
 800314e:	d10b      	bne.n	8003168 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	f023 0303 	bic.w	r3, r3, #3
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003166:	e018      	b.n	800319a <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	f023 0312 	bic.w	r3, r3, #18
 8003170:	f043 0210 	orr.w	r2, r3, #16
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	f043 0201 	orr.w	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003188:	e007      	b.n	800319a <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	f043 0210 	orr.w	r2, r3, #16
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800319a:	7ffb      	ldrb	r3, [r7, #31]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e06a      	b.n	800328c <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f043 0202 	orr.w	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fabe 	bl	8003744 <ADC_ConversionStop>
 80031c8:	4603      	mov	r3, r0
 80031ca:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fb82 	bl	80038dc <ADC_Disable>
 80031d8:	4603      	mov	r3, r0
 80031da:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fd7f 	bl	8002cf0 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003200:	f023 0303 	bic.w	r3, r3, #3
 8003204:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f240 329f 	movw	r2, #927	; 0x39f
 800320e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68d9      	ldr	r1, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_ADC_DeInit+0xf0>)
 800321c:	400b      	ands	r3, r1
 800321e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800322e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0207 	bic.w	r2, r2, #7
 800323e:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a1a      	ldr	r2, [r3, #32]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800324e:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2200      	movs	r2, #0
 800325c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <HAL_ADC_DeInit+0xf4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <HAL_ADC_DeInit+0xf4>)
 8003264:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003268:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd feec 	bl	8001048 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	833e0200 	.word	0x833e0200
 8003298:	40012708 	.word	0x40012708

0800329c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fdb5 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d132      	bne.n	800331a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_Start+0x26>
 80032be:	2302      	movs	r3, #2
 80032c0:	e02e      	b.n	8003320 <HAL_ADC_Start+0x84>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fa80 	bl	80037d0 <ADC_Enable>
 80032d0:	4603      	mov	r3, r0
 80032d2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11a      	bne.n	8003310 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	221c      	movs	r2, #28
 80032fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fd5f 	bl	8002dcc <LL_ADC_REG_StartConversion>
 800330e:	e006      	b.n	800331e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003318:	e001      	b.n	800331e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800331a:	2302      	movs	r3, #2
 800331c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_ADC_Stop+0x16>
 800333a:	2302      	movs	r3, #2
 800333c:	e022      	b.n	8003384 <HAL_ADC_Stop+0x5c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f9fc 	bl	8003744 <ADC_ConversionStop>
 800334c:	4603      	mov	r3, r0
 800334e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d111      	bne.n	800337a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fac0 	bl	80038dc <ADC_Disable>
 800335c:	4603      	mov	r3, r0
 800335e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	2b08      	cmp	r3, #8
 800339c:	d102      	bne.n	80033a4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800339e:	2308      	movs	r3, #8
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e010      	b.n	80033c6 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e077      	b.n	80034b2 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80033c2:	2304      	movs	r3, #4
 80033c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033c6:	f7fe fd2b 	bl	8001e20 <HAL_GetTick>
 80033ca:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033cc:	e021      	b.n	8003412 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d4:	d01d      	beq.n	8003412 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033d6:	f7fe fd23 	bl	8001e20 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <HAL_ADC_PollForConversion+0x60>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d112      	bne.n	8003412 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	f043 0204 	orr.w	r2, r3, #4
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e04f      	b.n	80034b2 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0d6      	beq.n	80033ce <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fbd6 	bl	8002be2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d031      	beq.n	80034a0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7e9b      	ldrb	r3, [r3, #26]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d12d      	bne.n	80034a0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b08      	cmp	r3, #8
 8003450:	d126      	bne.n	80034a0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fcde 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d112      	bne.n	8003488 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 020c 	bic.w	r2, r2, #12
 8003470:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	659a      	str	r2, [r3, #88]	; 0x58
 8003486:	e00b      	b.n	80034a0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348c:	f043 0220 	orr.w	r2, r3, #32
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7e1b      	ldrb	r3, [r3, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	220c      	movs	r2, #12
 80034ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x28>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e110      	b.n	800371e <HAL_ADC_ConfigChannel+0x24a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fc85 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 80f7 	bne.w	8003704 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b02      	cmp	r3, #2
 800351c:	f000 80b1 	beq.w	8003682 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003528:	d004      	beq.n	8003534 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800352e:	4a7e      	ldr	r2, [pc, #504]	; (8003728 <HAL_ADC_ConfigChannel+0x254>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f7ff fb82 	bl	8002c48 <LL_ADC_REG_SetSequencerChAdd>
 8003544:	e041      	b.n	80035ca <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	210f      	movs	r1, #15
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	401a      	ands	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <HAL_ADC_ConfigChannel+0xa0>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	0e9b      	lsrs	r3, r3, #26
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	e011      	b.n	8003598 <HAL_ADC_ConfigChannel+0xc4>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800358c:	2320      	movs	r3, #32
 800358e:	e003      	b.n	8003598 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	6849      	ldr	r1, [r1, #4]
 800359c:	f001 011f 	and.w	r1, r1, #31
 80035a0:	408b      	lsls	r3, r1
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d808      	bhi.n	80035ca <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	f7ff fb1e 	bl	8002c06 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6819      	ldr	r1, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f7ff fb5b 	bl	8002c92 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f280 8097 	bge.w	8003714 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035e6:	4851      	ldr	r0, [pc, #324]	; (800372c <HAL_ADC_ConfigChannel+0x258>)
 80035e8:	f7ff fab8 	bl	8002b5c <LL_ADC_GetCommonPathInternalCh>
 80035ec:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a4f      	ldr	r2, [pc, #316]	; (8003730 <HAL_ADC_ConfigChannel+0x25c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d120      	bne.n	800363a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11b      	bne.n	800363a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003608:	4619      	mov	r1, r3
 800360a:	4848      	ldr	r0, [pc, #288]	; (800372c <HAL_ADC_ConfigChannel+0x258>)
 800360c:	f7ff fa94 	bl	8002b38 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003610:	4b48      	ldr	r3, [pc, #288]	; (8003734 <HAL_ADC_ConfigChannel+0x260>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	4a48      	ldr	r2, [pc, #288]	; (8003738 <HAL_ADC_ConfigChannel+0x264>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800362a:	e002      	b.n	8003632 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	3b01      	subs	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f9      	bne.n	800362c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003638:	e06c      	b.n	8003714 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a3f      	ldr	r2, [pc, #252]	; (800373c <HAL_ADC_ConfigChannel+0x268>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10c      	bne.n	800365e <HAL_ADC_ConfigChannel+0x18a>
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d107      	bne.n	800365e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003654:	4619      	mov	r1, r3
 8003656:	4835      	ldr	r0, [pc, #212]	; (800372c <HAL_ADC_ConfigChannel+0x258>)
 8003658:	f7ff fa6e 	bl	8002b38 <LL_ADC_SetCommonPathInternalCh>
 800365c:	e05a      	b.n	8003714 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a37      	ldr	r2, [pc, #220]	; (8003740 <HAL_ADC_ConfigChannel+0x26c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d155      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800366e:	2b00      	cmp	r3, #0
 8003670:	d150      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003678:	4619      	mov	r1, r3
 800367a:	482c      	ldr	r0, [pc, #176]	; (800372c <HAL_ADC_ConfigChannel+0x258>)
 800367c:	f7ff fa5c 	bl	8002b38 <LL_ADC_SetCommonPathInternalCh>
 8003680:	e048      	b.n	8003714 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800368a:	d004      	beq.n	8003696 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003690:	4a25      	ldr	r2, [pc, #148]	; (8003728 <HAL_ADC_ConfigChannel+0x254>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d107      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f7ff fae3 	bl	8002c6c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da32      	bge.n	8003714 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036ae:	481f      	ldr	r0, [pc, #124]	; (800372c <HAL_ADC_ConfigChannel+0x258>)
 80036b0:	f7ff fa54 	bl	8002b5c <LL_ADC_GetCommonPathInternalCh>
 80036b4:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1d      	ldr	r2, [pc, #116]	; (8003730 <HAL_ADC_ConfigChannel+0x25c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d107      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036c6:	4619      	mov	r1, r3
 80036c8:	4818      	ldr	r0, [pc, #96]	; (800372c <HAL_ADC_ConfigChannel+0x258>)
 80036ca:	f7ff fa35 	bl	8002b38 <LL_ADC_SetCommonPathInternalCh>
 80036ce:	e021      	b.n	8003714 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a19      	ldr	r2, [pc, #100]	; (800373c <HAL_ADC_ConfigChannel+0x268>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d107      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e0:	4619      	mov	r1, r3
 80036e2:	4812      	ldr	r0, [pc, #72]	; (800372c <HAL_ADC_ConfigChannel+0x258>)
 80036e4:	f7ff fa28 	bl	8002b38 <LL_ADC_SetCommonPathInternalCh>
 80036e8:	e014      	b.n	8003714 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a14      	ldr	r2, [pc, #80]	; (8003740 <HAL_ADC_ConfigChannel+0x26c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d10f      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036fa:	4619      	mov	r1, r3
 80036fc:	480b      	ldr	r0, [pc, #44]	; (800372c <HAL_ADC_ConfigChannel+0x258>)
 80036fe:	f7ff fa1b 	bl	8002b38 <LL_ADC_SetCommonPathInternalCh>
 8003702:	e007      	b.n	8003714 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800371c:	7ffb      	ldrb	r3, [r7, #31]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	80000004 	.word	0x80000004
 800372c:	40012708 	.word	0x40012708
 8003730:	b0001000 	.word	0xb0001000
 8003734:	20000000 	.word	0x20000000
 8003738:	053e2d63 	.word	0x053e2d63
 800373c:	b8004000 	.word	0xb8004000
 8003740:	b4002000 	.word	0xb4002000

08003744 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fb61 	bl	8002e18 <LL_ADC_REG_IsConversionOngoing>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d033      	beq.n	80037c4 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fb21 	bl	8002da8 <LL_ADC_IsDisableOngoing>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fb3e 	bl	8002df2 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003776:	f7fe fb53 	bl	8001e20 <HAL_GetTick>
 800377a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800377c:	e01b      	b.n	80037b6 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800377e:	f7fe fb4f 	bl	8001e20 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d914      	bls.n	80037b6 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00d      	beq.n	80037b6 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	f043 0210 	orr.w	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	f043 0201 	orr.w	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e007      	b.n	80037c6 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1dc      	bne.n	800377e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff facf 	bl	8002d84 <LL_ADC_IsEnabled>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d169      	bne.n	80038c0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <ADC_Enable+0xfc>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	f043 0210 	orr.w	r2, r3, #16
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e055      	b.n	80038c2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fa8c 	bl	8002d38 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003820:	482b      	ldr	r0, [pc, #172]	; (80038d0 <ADC_Enable+0x100>)
 8003822:	f7ff f99b 	bl	8002b5c <LL_ADC_GetCommonPathInternalCh>
 8003826:	4603      	mov	r3, r0
 8003828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00f      	beq.n	8003850 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003830:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <ADC_Enable+0x104>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	099b      	lsrs	r3, r3, #6
 8003836:	4a28      	ldr	r2, [pc, #160]	; (80038d8 <ADC_Enable+0x108>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	3301      	adds	r3, #1
 8003840:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003842:	e002      	b.n	800384a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	3b01      	subs	r3, #1
 8003848:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f9      	bne.n	8003844 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7e5b      	ldrb	r3, [r3, #25]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d033      	beq.n	80038c0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003858:	f7fe fae2 	bl	8001e20 <HAL_GetTick>
 800385c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800385e:	e028      	b.n	80038b2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fa8d 	bl	8002d84 <LL_ADC_IsEnabled>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fa5f 	bl	8002d38 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800387a:	f7fe fad1 	bl	8001e20 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d914      	bls.n	80038b2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d00d      	beq.n	80038b2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	f043 0210 	orr.w	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e007      	b.n	80038c2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d1cf      	bne.n	8003860 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	80000017 	.word	0x80000017
 80038d0:	40012708 	.word	0x40012708
 80038d4:	20000000 	.word	0x20000000
 80038d8:	053e2d63 	.word	0x053e2d63

080038dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fa5d 	bl	8002da8 <LL_ADC_IsDisableOngoing>
 80038ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fa45 	bl	8002d84 <LL_ADC_IsEnabled>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d047      	beq.n	8003990 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d144      	bne.n	8003990 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0305 	and.w	r3, r3, #5
 8003910:	2b01      	cmp	r3, #1
 8003912:	d10c      	bne.n	800392e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fa20 	bl	8002d5e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2203      	movs	r2, #3
 8003924:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003926:	f7fe fa7b 	bl	8001e20 <HAL_GetTick>
 800392a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800392c:	e029      	b.n	8003982 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	f043 0210 	orr.w	r2, r3, #16
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	f043 0201 	orr.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e023      	b.n	8003992 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800394a:	f7fe fa69 	bl	8001e20 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d914      	bls.n	8003982 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	f043 0210 	orr.w	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e007      	b.n	8003992 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1dc      	bne.n	800394a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <LL_ADC_SetCalibrationFactor>:
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039aa:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <LL_ADC_GetCalibrationFactor>:
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <LL_ADC_Enable>:
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039ee:	f023 0317 	bic.w	r3, r3, #23
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	609a      	str	r2, [r3, #8]
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <LL_ADC_Disable>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a14:	f023 0317 	bic.w	r3, r3, #23
 8003a18:	f043 0202 	orr.w	r2, r3, #2
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <LL_ADC_IsEnabled>:
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <LL_ADC_IsEnabled+0x18>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <LL_ADC_IsEnabled+0x1a>
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <LL_ADC_StartCalibration>:
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a5e:	f023 0317 	bic.w	r3, r3, #23
 8003a62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	609a      	str	r2, [r3, #8]
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a88:	d101      	bne.n	8003a8e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b088      	sub	sp, #32
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_ADCEx_Calibration_Start+0x1e>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e0b9      	b.n	8003c2c <HAL_ADCEx_Calibration_Start+0x192>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff ff0b 	bl	80038dc <ADC_Disable>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff ffab 	bl	8003a2a <LL_ADC_IsEnabled>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f040 809d 	bne.w	8003c16 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ae4:	f043 0202 	orr.w	r2, r3, #2
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	f248 0303 	movw	r3, #32771	; 0x8003
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b08:	f023 0303 	bic.w	r3, r3, #3
 8003b0c:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	e02e      	b.n	8003b72 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff98 	bl	8003a4e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b1e:	e014      	b.n	8003b4a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	3301      	adds	r3, #1
 8003b24:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003b2c:	d30d      	bcc.n	8003b4a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	f023 0312 	bic.w	r3, r3, #18
 8003b36:	f043 0210 	orr.w	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e070      	b.n	8003c2c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ff90 	bl	8003a74 <LL_ADC_IsCalibrationOnGoing>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e2      	bne.n	8003b20 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ff2f 	bl	80039c2 <LL_ADC_GetCalibrationFactor>
 8003b64:	4602      	mov	r2, r0
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	4413      	add	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	2b07      	cmp	r3, #7
 8003b76:	d9cd      	bls.n	8003b14 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff ff29 	bl	80039de <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69b9      	ldr	r1, [r7, #24]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff ff01 	bl	800399a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff ff31 	bl	8003a04 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ba2:	f7fe f93d 	bl	8001e20 <HAL_GetTick>
 8003ba6:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ba8:	e01c      	b.n	8003be4 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003baa:	f7fe f939 	bl	8001e20 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d915      	bls.n	8003be4 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff34 	bl	8003a2a <LL_ADC_IsEnabled>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00d      	beq.n	8003be4 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f043 0210 	orr.w	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	f043 0201 	orr.w	r2, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e023      	b.n	8003c2c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ff1e 	bl	8003a2a <LL_ADC_IsEnabled>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1da      	bne.n	8003baa <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68d9      	ldr	r1, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	f023 0303 	bic.w	r3, r3, #3
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	659a      	str	r2, [r3, #88]	; 0x58
 8003c14:	e005      	b.n	8003c22 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	f043 0210 	orr.w	r2, r3, #16
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c50:	4013      	ands	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c66:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	60d3      	str	r3, [r2, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <__NVIC_GetPriorityGrouping+0x18>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	f003 0307 	and.w	r3, r3, #7
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	db0b      	blt.n	8003cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	f003 021f 	and.w	r2, r3, #31
 8003cb0:	4906      	ldr	r1, [pc, #24]	; (8003ccc <__NVIC_EnableIRQ+0x34>)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2001      	movs	r0, #1
 8003cba:	fa00 f202 	lsl.w	r2, r0, r2
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	e000e100 	.word	0xe000e100

08003cd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	db12      	blt.n	8003d08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	f003 021f 	and.w	r2, r3, #31
 8003ce8:	490a      	ldr	r1, [pc, #40]	; (8003d14 <__NVIC_DisableIRQ+0x44>)
 8003cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cf6:	3320      	adds	r3, #32
 8003cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cfc:	f3bf 8f4f 	dsb	sy
}
 8003d00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d02:	f3bf 8f6f 	isb	sy
}
 8003d06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	e000e100 	.word	0xe000e100

08003d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	6039      	str	r1, [r7, #0]
 8003d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	db0a      	blt.n	8003d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	490c      	ldr	r1, [pc, #48]	; (8003d64 <__NVIC_SetPriority+0x4c>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	0112      	lsls	r2, r2, #4
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d40:	e00a      	b.n	8003d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	4908      	ldr	r1, [pc, #32]	; (8003d68 <__NVIC_SetPriority+0x50>)
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	3b04      	subs	r3, #4
 8003d50:	0112      	lsls	r2, r2, #4
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	440b      	add	r3, r1
 8003d56:	761a      	strb	r2, [r3, #24]
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000e100 	.word	0xe000e100
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	; 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f1c3 0307 	rsb	r3, r3, #7
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	bf28      	it	cs
 8003d8a:	2304      	movcs	r3, #4
 8003d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3304      	adds	r3, #4
 8003d92:	2b06      	cmp	r3, #6
 8003d94:	d902      	bls.n	8003d9c <NVIC_EncodePriority+0x30>
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3b03      	subs	r3, #3
 8003d9a:	e000      	b.n	8003d9e <NVIC_EncodePriority+0x32>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43da      	mvns	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	401a      	ands	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbe:	43d9      	mvns	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc4:	4313      	orrs	r3, r2
         );
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff2b 	bl	8003c34 <__NVIC_SetPriorityGrouping>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003df4:	f7ff ff42 	bl	8003c7c <__NVIC_GetPriorityGrouping>
 8003df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f7ff ffb4 	bl	8003d6c <NVIC_EncodePriority>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff83 	bl	8003d18 <__NVIC_SetPriority>
}
 8003e12:	bf00      	nop
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff35 	bl	8003c98 <__NVIC_EnableIRQ>
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff43 	bl	8003cd0 <__NVIC_DisableIRQ>
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e08e      	b.n	8003f84 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_DMA_Init+0x138>)
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d80f      	bhi.n	8003e92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <HAL_DMA_Init+0x13c>)
 8003e7a:	4413      	add	r3, r2
 8003e7c:	4a45      	ldr	r2, [pc, #276]	; (8003f94 <HAL_DMA_Init+0x140>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	009a      	lsls	r2, r3, #2
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <HAL_DMA_Init+0x144>)
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8003e90:	e00e      	b.n	8003eb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <HAL_DMA_Init+0x148>)
 8003e9a:	4413      	add	r3, r2
 8003e9c:	4a3d      	ldr	r2, [pc, #244]	; (8003f94 <HAL_DMA_Init+0x140>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	009a      	lsls	r2, r3, #2
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <HAL_DMA_Init+0x14c>)
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6819      	ldr	r1, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fb24 	bl	8004550 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f10:	d102      	bne.n	8003f18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f24:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f2e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d010      	beq.n	8003f5a <HAL_DMA_Init+0x106>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d80c      	bhi.n	8003f5a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fb4d 	bl	80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	e008      	b.n	8003f6c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40020407 	.word	0x40020407
 8003f90:	bffdfff8 	.word	0xbffdfff8
 8003f94:	cccccccd 	.word	0xcccccccd
 8003f98:	40020000 	.word	0x40020000
 8003f9c:	bffdfbf8 	.word	0xbffdfbf8
 8003fa0:	40020400 	.word	0x40020400

08003fa4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e07b      	b.n	80040ae <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0201 	bic.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <HAL_DMA_DeInit+0x114>)
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d80f      	bhi.n	8003ff2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4b38      	ldr	r3, [pc, #224]	; (80040bc <HAL_DMA_DeInit+0x118>)
 8003fda:	4413      	add	r3, r2
 8003fdc:	4a38      	ldr	r2, [pc, #224]	; (80040c0 <HAL_DMA_DeInit+0x11c>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	009a      	lsls	r2, r3, #2
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a35      	ldr	r2, [pc, #212]	; (80040c4 <HAL_DMA_DeInit+0x120>)
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40
 8003ff0:	e00e      	b.n	8004010 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <HAL_DMA_DeInit+0x124>)
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a30      	ldr	r2, [pc, #192]	; (80040c0 <HAL_DMA_DeInit+0x11c>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	091b      	lsrs	r3, r3, #4
 8004004:	009a      	lsls	r2, r3, #2
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <HAL_DMA_DeInit+0x128>)
 800400e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	f003 021c 	and.w	r2, r3, #28
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f202 	lsl.w	r2, r1, r2
 800402a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fa8f 	bl	8004550 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004042:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00f      	beq.n	800406c <HAL_DMA_DeInit+0xc8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b04      	cmp	r3, #4
 8004052:	d80b      	bhi.n	800406c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fac3 	bl	80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800406a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40020407 	.word	0x40020407
 80040bc:	bffdfff8 	.word	0xbffdfff8
 80040c0:	cccccccd 	.word	0xcccccccd
 80040c4:	40020000 	.word	0x40020000
 80040c8:	bffdfbf8 	.word	0xbffdfbf8
 80040cc:	40020400 	.word	0x40020400

080040d0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_DMA_Start_IT+0x20>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e069      	b.n	80041c4 <HAL_DMA_Start_IT+0xf4>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	d155      	bne.n	80041b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f9d3 	bl	80044d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 020e 	orr.w	r2, r2, #14
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	e00f      	b.n	8004168 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0204 	bic.w	r2, r2, #4
 8004156:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 020a 	orr.w	r2, r2, #10
 8004166:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004184:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e008      	b.n	80041c2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e04f      	b.n	800427e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d008      	beq.n	80041fc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2204      	movs	r2, #4
 80041ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e040      	b.n	800427e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 020e 	bic.w	r2, r2, #14
 800420a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800421a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0201 	bic.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	f003 021c 	and.w	r2, r3, #28
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	2101      	movs	r1, #1
 800423a:	fa01 f202 	lsl.w	r2, r1, r2
 800423e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004248:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00c      	beq.n	800426c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004260:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800426a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d005      	beq.n	80042ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2204      	movs	r2, #4
 80042a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
 80042aa:	e047      	b.n	800433c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 020e 	bic.w	r2, r2, #14
 80042ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	f003 021c 	and.w	r2, r3, #28
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	2101      	movs	r1, #1
 80042ea:	fa01 f202 	lsl.w	r2, r1, r2
 80042ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00c      	beq.n	800431c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004310:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800431a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
    }
  }
  return status;
 800433c:	7bfb      	ldrb	r3, [r7, #15]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f003 031c 	and.w	r3, r3, #28
 8004368:	2204      	movs	r2, #4
 800436a:	409a      	lsls	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4013      	ands	r3, r2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d027      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x7c>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d022      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0204 	bic.w	r2, r2, #4
 800439a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	f003 021c 	and.w	r2, r3, #28
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	2104      	movs	r1, #4
 80043aa:	fa01 f202 	lsl.w	r2, r1, r2
 80043ae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8081 	beq.w	80044bc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80043c2:	e07b      	b.n	80044bc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	f003 031c 	and.w	r3, r3, #28
 80043cc:	2202      	movs	r2, #2
 80043ce:	409a      	lsls	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d03d      	beq.n	8004454 <HAL_DMA_IRQHandler+0x10c>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d038      	beq.n	8004454 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 020a 	bic.w	r2, r2, #10
 80043fe:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b2e      	ldr	r3, [pc, #184]	; (80044c8 <HAL_DMA_IRQHandler+0x180>)
 8004410:	429a      	cmp	r2, r3
 8004412:	d909      	bls.n	8004428 <HAL_DMA_IRQHandler+0xe0>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	f003 031c 	and.w	r3, r3, #28
 800441c:	4a2b      	ldr	r2, [pc, #172]	; (80044cc <HAL_DMA_IRQHandler+0x184>)
 800441e:	2102      	movs	r1, #2
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	6053      	str	r3, [r2, #4]
 8004426:	e008      	b.n	800443a <HAL_DMA_IRQHandler+0xf2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f003 031c 	and.w	r3, r3, #28
 8004430:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <HAL_DMA_IRQHandler+0x188>)
 8004432:	2102      	movs	r1, #2
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d038      	beq.n	80044bc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004452:	e033      	b.n	80044bc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	f003 031c 	and.w	r3, r3, #28
 800445c:	2208      	movs	r2, #8
 800445e:	409a      	lsls	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d02a      	beq.n	80044be <HAL_DMA_IRQHandler+0x176>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d025      	beq.n	80044be <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 020e 	bic.w	r2, r2, #14
 8004480:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f003 021c 	and.w	r2, r3, #28
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2101      	movs	r1, #1
 8004490:	fa01 f202 	lsl.w	r2, r1, r2
 8004494:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
}
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40020080 	.word	0x40020080
 80044cc:	40020400 	.word	0x40020400
 80044d0:	40020000 	.word	0x40020000

080044d4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	f003 021c 	and.w	r2, r3, #28
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	2101      	movs	r1, #1
 800450c:	fa01 f202 	lsl.w	r2, r1, r2
 8004510:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b10      	cmp	r3, #16
 8004520:	d108      	bne.n	8004534 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004532:	e007      	b.n	8004544 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr
	...

08004550 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004560:	429a      	cmp	r2, r3
 8004562:	d813      	bhi.n	800458c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004570:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	3b08      	subs	r3, #8
 8004580:	4a14      	ldr	r2, [pc, #80]	; (80045d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	091b      	lsrs	r3, r3, #4
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e011      	b.n	80045b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	009a      	lsls	r2, r3, #2
 8004594:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004596:	4413      	add	r3, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	3b08      	subs	r3, #8
 80045a4:	4a0b      	ldr	r2, [pc, #44]	; (80045d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	3307      	adds	r3, #7
 80045ae:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80045b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	2201      	movs	r2, #1
 80045be:	409a      	lsls	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40020407 	.word	0x40020407
 80045d4:	cccccccd 	.word	0xcccccccd
 80045d8:	4002081c 	.word	0x4002081c
 80045dc:	40020880 	.word	0x40020880

080045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	461a      	mov	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a08      	ldr	r2, [pc, #32]	; (8004624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004604:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3b01      	subs	r3, #1
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2201      	movs	r2, #1
 8004610:	409a      	lsls	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	1000823f 	.word	0x1000823f
 8004624:	40020940 	.word	0x40020940

08004628 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004636:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <HAL_FLASH_Program+0x80>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_FLASH_Program+0x1a>
 800463e:	2302      	movs	r3, #2
 8004640:	e02d      	b.n	800469e <HAL_FLASH_Program+0x76>
 8004642:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <HAL_FLASH_Program+0x80>)
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004648:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <HAL_FLASH_Program+0x80>)
 800464a:	2200      	movs	r2, #0
 800464c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800464e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004652:	f000 f869 	bl	8004728 <FLASH_WaitForLastOperation>
 8004656:	4603      	mov	r3, r0
 8004658:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d11a      	bne.n	8004696 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d105      	bne.n	8004672 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800466a:	68b8      	ldr	r0, [r7, #8]
 800466c:	f000 f8be 	bl	80047ec <FLASH_Program_DoubleWord>
 8004670:	e004      	b.n	800467c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	4619      	mov	r1, r3
 8004676:	68b8      	ldr	r0, [r7, #8]
 8004678:	f000 f8de 	bl	8004838 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800467c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004680:	f000 f852 	bl	8004728 <FLASH_WaitForLastOperation>
 8004684:	4603      	mov	r3, r0
 8004686:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <HAL_FLASH_Program+0x84>)
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	43db      	mvns	r3, r3
 8004690:	4906      	ldr	r1, [pc, #24]	; (80046ac <HAL_FLASH_Program+0x84>)
 8004692:	4013      	ands	r3, r2
 8004694:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004696:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <HAL_FLASH_Program+0x80>)
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2000032c 	.word	0x2000032c
 80046ac:	58004000 	.word	0x58004000

080046b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_FLASH_Unlock+0x38>)
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	da0b      	bge.n	80046da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_FLASH_Unlock+0x38>)
 80046c4:	4a09      	ldr	r2, [pc, #36]	; (80046ec <HAL_FLASH_Unlock+0x3c>)
 80046c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80046c8:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <HAL_FLASH_Unlock+0x38>)
 80046ca:	4a09      	ldr	r2, [pc, #36]	; (80046f0 <HAL_FLASH_Unlock+0x40>)
 80046cc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_FLASH_Unlock+0x38>)
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	da01      	bge.n	80046da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80046da:	79fb      	ldrb	r3, [r7, #7]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	58004000 	.word	0x58004000
 80046ec:	45670123 	.word	0x45670123
 80046f0:	cdef89ab 	.word	0xcdef89ab

080046f4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_FLASH_Lock+0x30>)
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	4a08      	ldr	r2, [pc, #32]	; (8004724 <HAL_FLASH_Lock+0x30>)
 8004704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004708:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_FLASH_Lock+0x30>)
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	db01      	blt.n	8004716 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004716:	79fb      	ldrb	r3, [r7, #7]
}
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	58004000 	.word	0x58004000

08004728 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004730:	f7fd fb76 	bl	8001e20 <HAL_GetTick>
 8004734:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004736:	e009      	b.n	800474c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004738:	f7fd fb72 	bl	8001e20 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	d801      	bhi.n	800474c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e047      	b.n	80047dc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800474c:	4b25      	ldr	r3, [pc, #148]	; (80047e4 <FLASH_WaitForLastOperation+0xbc>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004758:	d0ee      	beq.n	8004738 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800475a:	4b22      	ldr	r3, [pc, #136]	; (80047e4 <FLASH_WaitForLastOperation+0xbc>)
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800476a:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <FLASH_WaitForLastOperation+0xbc>)
 800476c:	2201      	movs	r2, #1
 800476e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004776:	4013      	ands	r3, r2
 8004778:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <FLASH_WaitForLastOperation+0x6c>
 8004784:	4b17      	ldr	r3, [pc, #92]	; (80047e4 <FLASH_WaitForLastOperation+0xbc>)
 8004786:	699a      	ldr	r2, [r3, #24]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800478e:	4915      	ldr	r1, [pc, #84]	; (80047e4 <FLASH_WaitForLastOperation+0xbc>)
 8004790:	4313      	orrs	r3, r2
 8004792:	618b      	str	r3, [r1, #24]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d004      	beq.n	80047a8 <FLASH_WaitForLastOperation+0x80>
 800479e:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <FLASH_WaitForLastOperation+0xbc>)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80047a6:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00e      	beq.n	80047cc <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80047ae:	4a0e      	ldr	r2, [pc, #56]	; (80047e8 <FLASH_WaitForLastOperation+0xc0>)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e011      	b.n	80047dc <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80047b8:	f7fd fb32 	bl	8001e20 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d801      	bhi.n	80047cc <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e007      	b.n	80047dc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <FLASH_WaitForLastOperation+0xbc>)
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047d8:	d0ee      	beq.n	80047b8 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	58004000 	.word	0x58004000
 80047e8:	2000032c 	.word	0x2000032c

080047ec <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <FLASH_Program_DoubleWord+0x48>)
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	4a0d      	ldr	r2, [pc, #52]	; (8004834 <FLASH_Program_DoubleWord+0x48>)
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800480a:	f3bf 8f6f 	isb	sy
}
 800480e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	000a      	movs	r2, r1
 800481e:	2300      	movs	r3, #0
 8004820:	68f9      	ldr	r1, [r7, #12]
 8004822:	3104      	adds	r1, #4
 8004824:	4613      	mov	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	58004000 	.word	0x58004000

08004838 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004838:	b480      	push	{r7}
 800483a:	b089      	sub	sp, #36	; 0x24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004842:	2340      	movs	r3, #64	; 0x40
 8004844:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800484e:	4b18      	ldr	r3, [pc, #96]	; (80048b0 <FLASH_Program_Fast+0x78>)
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <FLASH_Program_Fast+0x78>)
 8004854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004858:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485a:	f3ef 8310 	mrs	r3, PRIMASK
 800485e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004860:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004862:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004864:	b672      	cpsid	i
}
 8004866:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	3304      	adds	r3, #4
 8004874:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	3304      	adds	r3, #4
 800487a:	617b      	str	r3, [r7, #20]
    row_index--;
 800487c:	7ffb      	ldrb	r3, [r7, #31]
 800487e:	3b01      	subs	r3, #1
 8004880:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004882:	7ffb      	ldrb	r3, [r7, #31]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1ef      	bne.n	8004868 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004888:	bf00      	nop
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <FLASH_Program_Fast+0x78>)
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004896:	d0f8      	beq.n	800488a <FLASH_Program_Fast+0x52>
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f383 8810 	msr	PRIMASK, r3
}
 80048a2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80048a4:	bf00      	nop
 80048a6:	3724      	adds	r7, #36	; 0x24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	58004000 	.word	0x58004000

080048b4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80048be:	4b28      	ldr	r3, [pc, #160]	; (8004960 <HAL_FLASHEx_Erase+0xac>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_FLASHEx_Erase+0x16>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e046      	b.n	8004958 <HAL_FLASHEx_Erase+0xa4>
 80048ca:	4b25      	ldr	r3, [pc, #148]	; (8004960 <HAL_FLASHEx_Erase+0xac>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048d0:	4b23      	ldr	r3, [pc, #140]	; (8004960 <HAL_FLASHEx_Erase+0xac>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048da:	f7ff ff25 	bl	8004728 <FLASH_WaitForLastOperation>
 80048de:	4603      	mov	r3, r0
 80048e0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d133      	bne.n	8004950 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d108      	bne.n	8004902 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80048f0:	f000 f880 	bl	80049f4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048f8:	f7ff ff16 	bl	8004728 <FLASH_WaitForLastOperation>
 80048fc:	4603      	mov	r3, r0
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e024      	b.n	800494c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004908:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	e012      	b.n	8004938 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f000 f87e 	bl	8004a14 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800491c:	f7ff ff04 	bl	8004728 <FLASH_WaitForLastOperation>
 8004920:	4603      	mov	r3, r0
 8004922:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	601a      	str	r2, [r3, #0]
          break;
 8004930:	e00a      	b.n	8004948 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	3301      	adds	r3, #1
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4413      	add	r3, r2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d3e4      	bcc.n	8004912 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004948:	f000 f8c0 	bl	8004acc <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800494c:	f000 f87a 	bl	8004a44 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <HAL_FLASHEx_Erase+0xac>)
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]

  return status;
 8004956:	7bfb      	ldrb	r3, [r7, #15]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	2000032c 	.word	0x2000032c

08004964 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800496c:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <HAL_FLASHEx_Erase_IT+0x88>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_FLASHEx_Erase_IT+0x14>
 8004974:	2302      	movs	r3, #2
 8004976:	e034      	b.n	80049e2 <HAL_FLASHEx_Erase_IT+0x7e>
 8004978:	4b1c      	ldr	r3, [pc, #112]	; (80049ec <HAL_FLASHEx_Erase_IT+0x88>)
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800497e:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <HAL_FLASHEx_Erase_IT+0x88>)
 8004980:	2200      	movs	r2, #0
 8004982:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a18      	ldr	r2, [pc, #96]	; (80049ec <HAL_FLASHEx_Erase_IT+0x88>)
 800498a:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800498c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004990:	f7ff feca 	bl	8004728 <FLASH_WaitForLastOperation>
 8004994:	4603      	mov	r3, r0
 8004996:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <HAL_FLASHEx_Erase_IT+0x88>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e01c      	b.n	80049e0 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <HAL_FLASHEx_Erase_IT+0x8c>)
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <HAL_FLASHEx_Erase_IT+0x8c>)
 80049ac:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80049b0:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d105      	bne.n	80049c6 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <HAL_FLASHEx_Erase_IT+0x88>)
 80049bc:	2200      	movs	r2, #0
 80049be:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80049c0:	f000 f818 	bl	80049f4 <FLASH_MassErase>
 80049c4:	e00c      	b.n	80049e0 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <HAL_FLASHEx_Erase_IT+0x88>)
 80049cc:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4a06      	ldr	r2, [pc, #24]	; (80049ec <HAL_FLASHEx_Erase_IT+0x88>)
 80049d4:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 f81a 	bl	8004a14 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	2000032c 	.word	0x2000032c
 80049f0:	58004000 	.word	0x58004000

080049f4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <FLASH_MassErase+0x1c>)
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	4a04      	ldr	r2, [pc, #16]	; (8004a10 <FLASH_MassErase+0x1c>)
 80049fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a02:	f043 0304 	orr.w	r3, r3, #4
 8004a06:	6153      	str	r3, [r2, #20]
#endif
}
 8004a08:	bf00      	nop
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	58004000 	.word	0x58004000

08004a14 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004a1c:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <FLASH_PageErase+0x2c>)
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	4a05      	ldr	r2, [pc, #20]	; (8004a40 <FLASH_PageErase+0x2c>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a30:	f043 0302 	orr.w	r3, r3, #2
 8004a34:	6153      	str	r3, [r2, #20]
#endif
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	58004000 	.word	0x58004000

08004a44 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004a48:	4b1f      	ldr	r3, [pc, #124]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d117      	bne.n	8004a84 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004a54:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1b      	ldr	r2, [pc, #108]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a5a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a5e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a18      	ldr	r2, [pc, #96]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a76:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a78:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a12      	ldr	r2, [pc, #72]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a82:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004a84:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d117      	bne.n	8004ac0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004a90:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a0c      	ldr	r2, [pc, #48]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a9a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004aa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a06      	ldr	r2, [pc, #24]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ab2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ab4:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a03      	ldr	r2, [pc, #12]	; (8004ac8 <FLASH_FlushCaches+0x84>)
 8004aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004abe:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004ac0:	bf00      	nop
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	58004000 	.word	0x58004000

08004acc <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <FLASH_AcknowledgePageErase+0x1c>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <FLASH_AcknowledgePageErase+0x1c>)
 8004ad6:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004ada:	f023 0302 	bic.w	r3, r3, #2
 8004ade:	6153      	str	r3, [r2, #20]
#endif
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr
 8004ae8:	58004000 	.word	0x58004000

08004aec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004afa:	e140      	b.n	8004d7e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2101      	movs	r1, #1
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8132 	beq.w	8004d78 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d005      	beq.n	8004b2c <HAL_GPIO_Init+0x40>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d130      	bne.n	8004b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	2203      	movs	r2, #3
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4013      	ands	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b62:	2201      	movs	r2, #1
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	f003 0201 	and.w	r2, r3, #1
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d017      	beq.n	8004bca <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d123      	bne.n	8004c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	08da      	lsrs	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3208      	adds	r2, #8
 8004bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	220f      	movs	r2, #15
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	08da      	lsrs	r2, r3, #3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3208      	adds	r2, #8
 8004c18:	6939      	ldr	r1, [r7, #16]
 8004c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	2203      	movs	r2, #3
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4013      	ands	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 0203 	and.w	r2, r3, #3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 808c 	beq.w	8004d78 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c60:	4a4e      	ldr	r2, [pc, #312]	; (8004d9c <HAL_GPIO_Init+0x2b0>)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	089b      	lsrs	r3, r3, #2
 8004c66:	3302      	adds	r3, #2
 8004c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	2207      	movs	r2, #7
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4013      	ands	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c8a:	d00d      	beq.n	8004ca8 <HAL_GPIO_Init+0x1bc>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a44      	ldr	r2, [pc, #272]	; (8004da0 <HAL_GPIO_Init+0x2b4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d007      	beq.n	8004ca4 <HAL_GPIO_Init+0x1b8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a43      	ldr	r2, [pc, #268]	; (8004da4 <HAL_GPIO_Init+0x2b8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <HAL_GPIO_Init+0x1b4>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e004      	b.n	8004caa <HAL_GPIO_Init+0x1be>
 8004ca0:	2307      	movs	r3, #7
 8004ca2:	e002      	b.n	8004caa <HAL_GPIO_Init+0x1be>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_GPIO_Init+0x1be>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	f002 0203 	and.w	r2, r2, #3
 8004cb0:	0092      	lsls	r2, r2, #2
 8004cb2:	4093      	lsls	r3, r2
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cba:	4938      	ldr	r1, [pc, #224]	; (8004d9c <HAL_GPIO_Init+0x2b0>)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	089b      	lsrs	r3, r3, #2
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cc8:	4b37      	ldr	r3, [pc, #220]	; (8004da8 <HAL_GPIO_Init+0x2bc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cec:	4a2e      	ldr	r2, [pc, #184]	; (8004da8 <HAL_GPIO_Init+0x2bc>)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cf2:	4b2d      	ldr	r3, [pc, #180]	; (8004da8 <HAL_GPIO_Init+0x2bc>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d16:	4a24      	ldr	r2, [pc, #144]	; (8004da8 <HAL_GPIO_Init+0x2bc>)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004d1c:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <HAL_GPIO_Init+0x2bc>)
 8004d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d22:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	43db      	mvns	r3, r3
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004d42:	4a19      	ldr	r2, [pc, #100]	; (8004da8 <HAL_GPIO_Init+0x2bc>)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004d4a:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <HAL_GPIO_Init+0x2bc>)
 8004d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d50:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	43db      	mvns	r3, r3
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004d70:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <HAL_GPIO_Init+0x2bc>)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f47f aeb7 	bne.w	8004afc <HAL_GPIO_Init+0x10>
  }
}
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40010000 	.word	0x40010000
 8004da0:	48000400 	.word	0x48000400
 8004da4:	48000800 	.word	0x48000800
 8004da8:	58000800 	.word	0x58000800

08004dac <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004dba:	e0af      	b.n	8004f1c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80a2 	beq.w	8004f16 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004dd2:	4a59      	ldr	r2, [pc, #356]	; (8004f38 <HAL_GPIO_DeInit+0x18c>)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	089b      	lsrs	r3, r3, #2
 8004dd8:	3302      	adds	r3, #2
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	2207      	movs	r2, #7
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4013      	ands	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dfa:	d00d      	beq.n	8004e18 <HAL_GPIO_DeInit+0x6c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a4f      	ldr	r2, [pc, #316]	; (8004f3c <HAL_GPIO_DeInit+0x190>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d007      	beq.n	8004e14 <HAL_GPIO_DeInit+0x68>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a4e      	ldr	r2, [pc, #312]	; (8004f40 <HAL_GPIO_DeInit+0x194>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d101      	bne.n	8004e10 <HAL_GPIO_DeInit+0x64>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e004      	b.n	8004e1a <HAL_GPIO_DeInit+0x6e>
 8004e10:	2307      	movs	r3, #7
 8004e12:	e002      	b.n	8004e1a <HAL_GPIO_DeInit+0x6e>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <HAL_GPIO_DeInit+0x6e>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	f002 0203 	and.w	r2, r2, #3
 8004e20:	0092      	lsls	r2, r2, #2
 8004e22:	4093      	lsls	r3, r2
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d136      	bne.n	8004e98 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004e2a:	4b46      	ldr	r3, [pc, #280]	; (8004f44 <HAL_GPIO_DeInit+0x198>)
 8004e2c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	43db      	mvns	r3, r3
 8004e34:	4943      	ldr	r1, [pc, #268]	; (8004f44 <HAL_GPIO_DeInit+0x198>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004e3c:	4b41      	ldr	r3, [pc, #260]	; (8004f44 <HAL_GPIO_DeInit+0x198>)
 8004e3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	493f      	ldr	r1, [pc, #252]	; (8004f44 <HAL_GPIO_DeInit+0x198>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004e4e:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <HAL_GPIO_DeInit+0x198>)
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	43db      	mvns	r3, r3
 8004e56:	493b      	ldr	r1, [pc, #236]	; (8004f44 <HAL_GPIO_DeInit+0x198>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004e5c:	4b39      	ldr	r3, [pc, #228]	; (8004f44 <HAL_GPIO_DeInit+0x198>)
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	4937      	ldr	r1, [pc, #220]	; (8004f44 <HAL_GPIO_DeInit+0x198>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	2207      	movs	r2, #7
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004e7a:	4a2f      	ldr	r2, [pc, #188]	; (8004f38 <HAL_GPIO_DeInit+0x18c>)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	089b      	lsrs	r3, r3, #2
 8004e80:	3302      	adds	r3, #2
 8004e82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	482b      	ldr	r0, [pc, #172]	; (8004f38 <HAL_GPIO_DeInit+0x18c>)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	089b      	lsrs	r3, r3, #2
 8004e90:	400a      	ands	r2, r1
 8004e92:	3302      	adds	r3, #2
 8004e94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	2103      	movs	r1, #3
 8004ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	08da      	lsrs	r2, r3, #3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3208      	adds	r2, #8
 8004eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	220f      	movs	r2, #15
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	08d2      	lsrs	r2, r2, #3
 8004ecc:	4019      	ands	r1, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3208      	adds	r2, #8
 8004ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	2103      	movs	r1, #3
 8004ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	401a      	ands	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	401a      	ands	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	2103      	movs	r1, #3
 8004f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	401a      	ands	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f47f af49 	bne.w	8004dbc <HAL_GPIO_DeInit+0x10>
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	48000400 	.word	0x48000400
 8004f40:	48000800 	.word	0x48000800
 8004f44:	58000800 	.word	0x58000800

08004f48 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	887b      	ldrh	r3, [r7, #2]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
 8004f64:	e001      	b.n	8004f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	807b      	strh	r3, [r7, #2]
 8004f82:	4613      	mov	r3, r2
 8004f84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f86:	787b      	ldrb	r3, [r7, #1]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f8c:	887a      	ldrh	r2, [r7, #2]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f92:	e002      	b.n	8004f9a <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f94:	887a      	ldrh	r2, [r7, #2]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fa8:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a03      	ldr	r2, [pc, #12]	; (8004fbc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb2:	6013      	str	r3, [r2, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr
 8004fbc:	58000400 	.word	0x58000400

08004fc0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10c      	bne.n	8004fec <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004fd2:	4b13      	ldr	r3, [pc, #76]	; (8005020 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fde:	d10d      	bne.n	8004ffc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004fe0:	f000 f83c 	bl	800505c <HAL_PWREx_DisableLowPowerRunMode>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d008      	beq.n	8004ffc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004fea:	e015      	b.n	8005018 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004ff8:	f000 f822 	bl	8005040 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ffc:	4b09      	ldr	r3, [pc, #36]	; (8005024 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	4a08      	ldr	r2, [pc, #32]	; (8005024 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005002:	f023 0304 	bic.w	r3, r3, #4
 8005006:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800500e:	bf30      	wfi
 8005010:	e002      	b.n	8005018 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005012:	bf40      	sev
    __WFE();
 8005014:	bf20      	wfe
    __WFE();
 8005016:	bf20      	wfe
  }
}
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	58000400 	.word	0x58000400
 8005024:	e000ed00 	.word	0xe000ed00

08005028 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800502c:	4b03      	ldr	r3, [pc, #12]	; (800503c <HAL_PWREx_GetVoltageRange+0x14>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	58000400 	.word	0x58000400

08005040 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a03      	ldr	r2, [pc, #12]	; (8005058 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800504a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800504e:	6013      	str	r3, [r2, #0]
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	58000400 	.word	0x58000400

0800505c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005062:	4b16      	ldr	r3, [pc, #88]	; (80050bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a15      	ldr	r2, [pc, #84]	; (80050bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800506c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800506e:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2232      	movs	r2, #50	; 0x32
 8005074:	fb02 f303 	mul.w	r3, r2, r3
 8005078:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	0c9b      	lsrs	r3, r3, #18
 8005080:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005082:	e002      	b.n	800508a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3b01      	subs	r3, #1
 8005088:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005096:	d102      	bne.n	800509e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f2      	bne.n	8005084 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050aa:	d101      	bne.n	80050b0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e000      	b.n	80050b2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr
 80050bc:	58000400 	.word	0x58000400
 80050c0:	20000000 	.word	0x20000000
 80050c4:	431bde83 	.word	0x431bde83

080050c8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80050d2:	4b10      	ldr	r3, [pc, #64]	; (8005114 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 0307 	bic.w	r3, r3, #7
 80050da:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80050dc:	f043 0302 	orr.w	r3, r3, #2
 80050e0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80050e2:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	4a0c      	ldr	r2, [pc, #48]	; (8005118 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80050e8:	f043 0304 	orr.w	r3, r3, #4
 80050ec:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80050f4:	bf30      	wfi
 80050f6:	e002      	b.n	80050fe <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80050f8:	bf40      	sev
    __WFE();
 80050fa:	bf20      	wfe
    __WFE();
 80050fc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	4a05      	ldr	r2, [pc, #20]	; (8005118 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005104:	f023 0304 	bic.w	r3, r3, #4
 8005108:	6113      	str	r3, [r2, #16]
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	58000400 	.word	0x58000400
 8005118:	e000ed00 	.word	0xe000ed00

0800511c <LL_PWR_IsEnabledBkUpAccess>:
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512c:	d101      	bne.n	8005132 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr
 800513c:	58000400 	.word	0x58000400

08005140 <LL_RCC_HSE_EnableTcxo>:
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800514e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005152:	6013      	str	r3, [r2, #0]
}
 8005154:	bf00      	nop
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <LL_RCC_HSE_DisableTcxo>:
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800516a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr

08005178 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800517c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800518a:	d101      	bne.n	8005190 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr

0800519a <LL_RCC_HSE_Enable>:
{
 800519a:	b480      	push	{r7}
 800519c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800519e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ac:	6013      	str	r3, [r2, #0]
}
 80051ae:	bf00      	nop
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <LL_RCC_HSE_Disable>:
{
 80051b6:	b480      	push	{r7}
 80051b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80051ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c8:	6013      	str	r3, [r2, #0]
}
 80051ca:	bf00      	nop
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <LL_RCC_HSE_IsReady>:
{
 80051d2:	b480      	push	{r7}
 80051d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80051d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051e4:	d101      	bne.n	80051ea <LL_RCC_HSE_IsReady+0x18>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <LL_RCC_HSE_IsReady+0x1a>
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr

080051f4 <LL_RCC_HSI_Enable>:
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005206:	6013      	str	r3, [r2, #0]
}
 8005208:	bf00      	nop
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <LL_RCC_HSI_Disable>:
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800521e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005222:	6013      	str	r3, [r2, #0]
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <LL_RCC_HSI_IsReady>:
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523e:	d101      	bne.n	8005244 <LL_RCC_HSI_IsReady+0x18>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <LL_RCC_HSI_IsReady+0x1a>
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <LL_RCC_HSI_SetCalibTrimming>:
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	061b      	lsls	r3, r3, #24
 8005264:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr

08005276 <LL_RCC_LSE_IsReady>:
{
 8005276:	b480      	push	{r7}
 8005278:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800527a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b02      	cmp	r3, #2
 8005288:	d101      	bne.n	800528e <LL_RCC_LSE_IsReady+0x18>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <LL_RCC_LSE_IsReady+0x1a>
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <LL_RCC_LSI_Enable>:
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800529c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a8:	f043 0301 	orr.w	r3, r3, #1
 80052ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052b0:	bf00      	nop
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <LL_RCC_LSI_Disable>:
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80052bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr

080052d8 <LL_RCC_LSI_IsReady>:
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80052dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d101      	bne.n	80052f0 <LL_RCC_LSI_IsReady+0x18>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <LL_RCC_LSI_IsReady+0x1a>
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <LL_RCC_MSI_Enable>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80052fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	6013      	str	r3, [r2, #0]
}
 800530e:	bf00      	nop
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <LL_RCC_MSI_Disable>:
{
 8005316:	b480      	push	{r7}
 8005318:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800531a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	6013      	str	r3, [r2, #0]
}
 800532a:	bf00      	nop
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr

08005332 <LL_RCC_MSI_IsReady>:
{
 8005332:	b480      	push	{r7}
 8005334:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b02      	cmp	r3, #2
 8005342:	d101      	bne.n	8005348 <LL_RCC_MSI_IsReady+0x16>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <LL_RCC_MSI_IsReady+0x18>
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr

08005352 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b08      	cmp	r3, #8
 8005362:	d101      	bne.n	8005368 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <LL_RCC_MSI_GetRange>:
{
 8005372:	b480      	push	{r7}
 8005374:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005380:	4618      	mov	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005394:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005398:	4618      	mov	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ba:	4313      	orrs	r3, r2
 80053bc:	604b      	str	r3, [r1, #4]
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr

080053c8 <LL_RCC_SetSysClkSource>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80053d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f023 0203 	bic.w	r2, r3, #3
 80053da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	608b      	str	r3, [r1, #8]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr

080053ee <LL_RCC_GetSysClkSource>:
{
 80053ee:	b480      	push	{r7}
 80053f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80053f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 030c 	and.w	r3, r3, #12
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr

08005404 <LL_RCC_SetAHBPrescaler>:
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800540c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4313      	orrs	r3, r2
 800541e:	608b      	str	r3, [r1, #8]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <LL_RCC_SetAHB3Prescaler>:
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005436:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800543a:	f023 020f 	bic.w	r2, r3, #15
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	091b      	lsrs	r3, r3, #4
 8005442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr

08005456 <LL_RCC_SetAPB1Prescaler>:
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800545e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005468:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4313      	orrs	r3, r2
 8005470:	608b      	str	r3, [r1, #8]
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr

0800547c <LL_RCC_SetAPB2Prescaler>:
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800548e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4313      	orrs	r3, r2
 8005496:	608b      	str	r3, [r1, #8]
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <LL_RCC_GetAHBPrescaler>:
{
 80054a2:	b480      	push	{r7}
 80054a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <LL_RCC_GetAHB3Prescaler>:
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80054bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr

080054d2 <LL_RCC_GetAPB1Prescaler>:
{
 80054d2:	b480      	push	{r7}
 80054d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr

080054e8 <LL_RCC_GetAPB2Prescaler>:
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80054ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80054fe:	b480      	push	{r7}
 8005500:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800550c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005510:	6013      	str	r3, [r2, #0]
}
 8005512:	bf00      	nop
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800551a:	b480      	push	{r7}
 800551c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800551e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800552c:	6013      	str	r3, [r2, #0]
}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005536:	b480      	push	{r7}
 8005538:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800553a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005544:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005548:	d101      	bne.n	800554e <LL_RCC_PLL_IsReady+0x18>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <LL_RCC_PLL_IsReady+0x1a>
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800555c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005568:	4618      	mov	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr

08005570 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800557e:	4618      	mov	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr

08005586 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005586:	b480      	push	{r7}
 8005588:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800558a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005594:	4618      	mov	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80055a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f003 0303 	and.w	r3, r3, #3
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr

080055b2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80055b2:	b480      	push	{r7}
 80055b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80055b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c4:	d101      	bne.n	80055ca <LL_RCC_IsActiveFlag_HPRE+0x18>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80055d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e8:	d101      	bne.n	80055ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80055fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800560a:	d101      	bne.n	8005610 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800561a:	b480      	push	{r7}
 800561c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800561e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005628:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800562c:	d101      	bne.n	8005632 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e38b      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800564e:	f7ff fece 	bl	80053ee <LL_RCC_GetSysClkSource>
 8005652:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005654:	f7ff ffa2 	bl	800559c <LL_RCC_PLL_GetMainSource>
 8005658:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80c9 	beq.w	80057fa <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <HAL_RCC_OscConfig+0x3e>
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	2b0c      	cmp	r3, #12
 8005672:	d17b      	bne.n	800576c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d178      	bne.n	800576c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800567a:	f7ff fe5a 	bl	8005332 <LL_RCC_MSI_IsReady>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <HAL_RCC_OscConfig+0x54>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e36a      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_RCC_OscConfig+0x72>
 80056a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ac:	e006      	b.n	80056bc <HAL_RCC_OscConfig+0x80>
 80056ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056b6:	091b      	lsrs	r3, r3, #4
 80056b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056bc:	4293      	cmp	r3, r2
 80056be:	d222      	bcs.n	8005706 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fd51 	bl	800616c <RCC_SetFlashLatencyFromMSIRange>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e348      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056de:	f043 0308 	orr.w	r3, r3, #8
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056f6:	4313      	orrs	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fe4e 	bl	80053a0 <LL_RCC_MSI_SetCalibTrimming>
 8005704:	e021      	b.n	800574a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005710:	f043 0308 	orr.w	r3, r3, #8
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005728:	4313      	orrs	r3, r2
 800572a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff fe35 	bl	80053a0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fd16 	bl	800616c <RCC_SetFlashLatencyFromMSIRange>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e30d      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800574a:	f000 fcd7 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 800574e:	4603      	mov	r3, r0
 8005750:	4aa1      	ldr	r2, [pc, #644]	; (80059d8 <HAL_RCC_OscConfig+0x39c>)
 8005752:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005754:	4ba1      	ldr	r3, [pc, #644]	; (80059dc <HAL_RCC_OscConfig+0x3a0>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f7fc fb57 	bl	8001e0c <HAL_InitTick>
 800575e:	4603      	mov	r3, r0
 8005760:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d047      	beq.n	80057f8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005768:	7cfb      	ldrb	r3, [r7, #19]
 800576a:	e2fc      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d02c      	beq.n	80057ce <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005774:	f7ff fdc1 	bl	80052fa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005778:	f7fc fb52 	bl	8001e20 <HAL_GetTick>
 800577c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005780:	f7fc fb4e 	bl	8001e20 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e2e9      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005792:	f7ff fdce 	bl	8005332 <LL_RCC_MSI_IsReady>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f1      	beq.n	8005780 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800579c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057a6:	f043 0308 	orr.w	r3, r3, #8
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057be:	4313      	orrs	r3, r2
 80057c0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fdea 	bl	80053a0 <LL_RCC_MSI_SetCalibTrimming>
 80057cc:	e015      	b.n	80057fa <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057ce:	f7ff fda2 	bl	8005316 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057d2:	f7fc fb25 	bl	8001e20 <HAL_GetTick>
 80057d6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057da:	f7fc fb21 	bl	8001e20 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e2bc      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80057ec:	f7ff fda1 	bl	8005332 <LL_RCC_MSI_IsReady>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f1      	bne.n	80057da <HAL_RCC_OscConfig+0x19e>
 80057f6:	e000      	b.n	80057fa <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057f8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d05f      	beq.n	80058c6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	2b08      	cmp	r3, #8
 800580a:	d005      	beq.n	8005818 <HAL_RCC_OscConfig+0x1dc>
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2b0c      	cmp	r3, #12
 8005810:	d10d      	bne.n	800582e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b03      	cmp	r3, #3
 8005816:	d10a      	bne.n	800582e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005818:	f7ff fcdb 	bl	80051d2 <LL_RCC_HSE_IsReady>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d050      	beq.n	80058c4 <HAL_RCC_OscConfig+0x288>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d14c      	bne.n	80058c4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e29b      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800582e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005840:	4313      	orrs	r3, r2
 8005842:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584c:	d102      	bne.n	8005854 <HAL_RCC_OscConfig+0x218>
 800584e:	f7ff fca4 	bl	800519a <LL_RCC_HSE_Enable>
 8005852:	e00d      	b.n	8005870 <HAL_RCC_OscConfig+0x234>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800585c:	d104      	bne.n	8005868 <HAL_RCC_OscConfig+0x22c>
 800585e:	f7ff fc6f 	bl	8005140 <LL_RCC_HSE_EnableTcxo>
 8005862:	f7ff fc9a 	bl	800519a <LL_RCC_HSE_Enable>
 8005866:	e003      	b.n	8005870 <HAL_RCC_OscConfig+0x234>
 8005868:	f7ff fca5 	bl	80051b6 <LL_RCC_HSE_Disable>
 800586c:	f7ff fc76 	bl	800515c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d012      	beq.n	800589e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005878:	f7fc fad2 	bl	8001e20 <HAL_GetTick>
 800587c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005880:	f7fc face 	bl	8001e20 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b64      	cmp	r3, #100	; 0x64
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e269      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005892:	f7ff fc9e 	bl	80051d2 <LL_RCC_HSE_IsReady>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f1      	beq.n	8005880 <HAL_RCC_OscConfig+0x244>
 800589c:	e013      	b.n	80058c6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fc fabf 	bl	8001e20 <HAL_GetTick>
 80058a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a6:	f7fc fabb 	bl	8001e20 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b64      	cmp	r3, #100	; 0x64
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e256      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80058b8:	f7ff fc8b 	bl	80051d2 <LL_RCC_HSE_IsReady>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f1      	bne.n	80058a6 <HAL_RCC_OscConfig+0x26a>
 80058c2:	e000      	b.n	80058c6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d04b      	beq.n	800596a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_OscConfig+0x2a8>
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d113      	bne.n	8005906 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d110      	bne.n	8005906 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058e4:	f7ff fca2 	bl	800522c <LL_RCC_HSI_IsReady>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_RCC_OscConfig+0x2be>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e235      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff fca5 	bl	800524e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005904:	e031      	b.n	800596a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d019      	beq.n	8005942 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800590e:	f7ff fc71 	bl	80051f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005912:	f7fc fa85 	bl	8001e20 <HAL_GetTick>
 8005916:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800591a:	f7fc fa81 	bl	8001e20 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e21c      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800592c:	f7ff fc7e 	bl	800522c <LL_RCC_HSI_IsReady>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f1      	beq.n	800591a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fc87 	bl	800524e <LL_RCC_HSI_SetCalibTrimming>
 8005940:	e013      	b.n	800596a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005942:	f7ff fc65 	bl	8005210 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005946:	f7fc fa6b 	bl	8001e20 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800594c:	e008      	b.n	8005960 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800594e:	f7fc fa67 	bl	8001e20 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e202      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005960:	f7ff fc64 	bl	800522c <LL_RCC_HSI_IsReady>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f1      	bne.n	800594e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d06f      	beq.n	8005a56 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d057      	beq.n	8005a2e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800597e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005986:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69da      	ldr	r2, [r3, #28]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	429a      	cmp	r2, r3
 8005994:	d036      	beq.n	8005a04 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d006      	beq.n	80059ae <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e1db      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d018      	beq.n	80059ea <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80059b8:	f7ff fc7e 	bl	80052b8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059bc:	f7fc fa30 	bl	8001e20 <HAL_GetTick>
 80059c0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80059c2:	e00d      	b.n	80059e0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059c4:	f7fc fa2c 	bl	8001e20 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b11      	cmp	r3, #17
 80059d0:	d906      	bls.n	80059e0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e1c7      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
 80059d6:	bf00      	nop
 80059d8:	20000000 	.word	0x20000000
 80059dc:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80059e0:	f7ff fc7a 	bl	80052d8 <LL_RCC_LSI_IsReady>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1ec      	bne.n	80059c4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80059ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f2:	f023 0210 	bic.w	r2, r3, #16
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a04:	f7ff fc48 	bl	8005298 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a08:	f7fc fa0a 	bl	8001e20 <HAL_GetTick>
 8005a0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a10:	f7fc fa06 	bl	8001e20 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b11      	cmp	r3, #17
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e1a1      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005a22:	f7ff fc59 	bl	80052d8 <LL_RCC_LSI_IsReady>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0f1      	beq.n	8005a10 <HAL_RCC_OscConfig+0x3d4>
 8005a2c:	e013      	b.n	8005a56 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a2e:	f7ff fc43 	bl	80052b8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a32:	f7fc f9f5 	bl	8001e20 <HAL_GetTick>
 8005a36:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a3a:	f7fc f9f1 	bl	8001e20 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b11      	cmp	r3, #17
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e18c      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005a4c:	f7ff fc44 	bl	80052d8 <LL_RCC_LSI_IsReady>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f1      	bne.n	8005a3a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80d8 	beq.w	8005c14 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a64:	f7ff fb5a 	bl	800511c <LL_PWR_IsEnabledBkUpAccess>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d113      	bne.n	8005a96 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a6e:	f7ff fa99 	bl	8004fa4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a72:	f7fc f9d5 	bl	8001e20 <HAL_GetTick>
 8005a76:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a7a:	f7fc f9d1 	bl	8001e20 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e16c      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a8c:	f7ff fb46 	bl	800511c <LL_PWR_IsEnabledBkUpAccess>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f1      	beq.n	8005a7a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d07b      	beq.n	8005b96 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2b85      	cmp	r3, #133	; 0x85
 8005aa4:	d003      	beq.n	8005aae <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d109      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aba:	f043 0304 	orr.w	r3, r3, #4
 8005abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac2:	f7fc f9ad 	bl	8001e20 <HAL_GetTick>
 8005ac6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad4:	f043 0301 	orr.w	r3, r3, #1
 8005ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005adc:	e00a      	b.n	8005af4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ade:	f7fc f99f 	bl	8001e20 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e138      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005af4:	f7ff fbbf 	bl	8005276 <LL_RCC_LSE_IsReady>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0ef      	beq.n	8005ade <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	2b81      	cmp	r3, #129	; 0x81
 8005b04:	d003      	beq.n	8005b0e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	2b85      	cmp	r3, #133	; 0x85
 8005b0c:	d121      	bne.n	8005b52 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0e:	f7fc f987 	bl	8001e20 <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005b28:	e00a      	b.n	8005b40 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b2a:	f7fc f979 	bl	8001e20 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e112      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ec      	beq.n	8005b2a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005b50:	e060      	b.n	8005c14 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b52:	f7fc f965 	bl	8001e20 <HAL_GetTick>
 8005b56:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fc f957 	bl	8001e20 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e0f0      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1ec      	bne.n	8005b6e <HAL_RCC_OscConfig+0x532>
 8005b94:	e03e      	b.n	8005c14 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b96:	f7fc f943 	bl	8001e20 <HAL_GetTick>
 8005b9a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fc f935 	bl	8001e20 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e0ce      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1ec      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd8:	f7fc f922 	bl	8001e20 <HAL_GetTick>
 8005bdc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bea:	f023 0301 	bic.w	r3, r3, #1
 8005bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf4:	f7fc f914 	bl	8001e20 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0ad      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005c0a:	f7ff fb34 	bl	8005276 <LL_RCC_LSE_IsReady>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1ef      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 80a3 	beq.w	8005d64 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	2b0c      	cmp	r3, #12
 8005c22:	d076      	beq.n	8005d12 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d14b      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2c:	f7ff fc75 	bl	800551a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c30:	f7fc f8f6 	bl	8001e20 <HAL_GetTick>
 8005c34:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c38:	f7fc f8f2 	bl	8001e20 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b0a      	cmp	r3, #10
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e08d      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c4a:	f7ff fc74 	bl	8005536 <LL_RCC_PLL_IsReady>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1f1      	bne.n	8005c38 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	4b45      	ldr	r3, [pc, #276]	; (8005d70 <HAL_RCC_OscConfig+0x734>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c66:	4311      	orrs	r1, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c6c:	0212      	lsls	r2, r2, #8
 8005c6e:	4311      	orrs	r1, r2
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c74:	4311      	orrs	r1, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c7a:	4311      	orrs	r1, r2
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c80:	430a      	orrs	r2, r1
 8005c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c8a:	f7ff fc38 	bl	80054fe <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9e:	f7fc f8bf 	bl	8001e20 <HAL_GetTick>
 8005ca2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca6:	f7fc f8bb 	bl	8001e20 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b0a      	cmp	r3, #10
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e056      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005cb8:	f7ff fc3d 	bl	8005536 <LL_RCC_PLL_IsReady>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f1      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x66a>
 8005cc2:	e04f      	b.n	8005d64 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc4:	f7ff fc29 	bl	800551a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd2:	f023 0303 	bic.w	r3, r3, #3
 8005cd6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ce2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cea:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fc f898 	bl	8001e20 <HAL_GetTick>
 8005cf0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf4:	f7fc f894 	bl	8001e20 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b0a      	cmp	r3, #10
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e02f      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005d06:	f7ff fc16 	bl	8005536 <LL_RCC_PLL_IsReady>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f1      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x6b8>
 8005d10:	e028      	b.n	8005d64 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e023      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f003 0203 	and.w	r2, r3, #3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d115      	bne.n	8005d60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d10e      	bne.n	8005d60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d106      	bne.n	8005d60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3720      	adds	r7, #32
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	11c1808c 	.word	0x11c1808c

08005d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e10f      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d88:	4b89      	ldr	r3, [pc, #548]	; (8005fb0 <HAL_RCC_ClockConfig+0x23c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d91b      	bls.n	8005dce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b86      	ldr	r3, [pc, #536]	; (8005fb0 <HAL_RCC_ClockConfig+0x23c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f023 0207 	bic.w	r2, r3, #7
 8005d9e:	4984      	ldr	r1, [pc, #528]	; (8005fb0 <HAL_RCC_ClockConfig+0x23c>)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005da6:	f7fc f83b 	bl	8001e20 <HAL_GetTick>
 8005daa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005dae:	f7fc f837 	bl	8001e20 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e0f3      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc0:	4b7b      	ldr	r3, [pc, #492]	; (8005fb0 <HAL_RCC_ClockConfig+0x23c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d1ef      	bne.n	8005dae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d016      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff fb10 	bl	8005404 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005de4:	f7fc f81c 	bl	8001e20 <HAL_GetTick>
 8005de8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005dec:	f7fc f818 	bl	8001e20 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e0d4      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005dfe:	f7ff fbd8 	bl	80055b2 <LL_RCC_IsActiveFlag_HPRE>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0f1      	beq.n	8005dec <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d016      	beq.n	8005e42 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fb06 	bl	800542a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e1e:	f7fb ffff 	bl	8001e20 <HAL_GetTick>
 8005e22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e26:	f7fb fffb 	bl	8001e20 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e0b7      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e38:	f7ff fbcc 	bl	80055d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f1      	beq.n	8005e26 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d016      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff faff 	bl	8005456 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e58:	f7fb ffe2 	bl	8001e20 <HAL_GetTick>
 8005e5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e60:	f7fb ffde 	bl	8001e20 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e09a      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e72:	f7ff fbc1 	bl	80055f8 <LL_RCC_IsActiveFlag_PPRE1>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f1      	beq.n	8005e60 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d017      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff faf4 	bl	800547c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e94:	f7fb ffc4 	bl	8001e20 <HAL_GetTick>
 8005e98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e9c:	f7fb ffc0 	bl	8001e20 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e07c      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005eae:	f7ff fbb4 	bl	800561a <LL_RCC_IsActiveFlag_PPRE2>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0f1      	beq.n	8005e9c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d043      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d106      	bne.n	8005eda <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005ecc:	f7ff f981 	bl	80051d2 <LL_RCC_HSE_IsReady>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d11e      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e066      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d106      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005ee2:	f7ff fb28 	bl	8005536 <LL_RCC_PLL_IsReady>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d113      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e05b      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005ef8:	f7ff fa1b 	bl	8005332 <LL_RCC_MSI_IsReady>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d108      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e050      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005f06:	f7ff f991 	bl	800522c <LL_RCC_HSI_IsReady>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e049      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fa55 	bl	80053c8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1e:	f7fb ff7f 	bl	8001e20 <HAL_GetTick>
 8005f22:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f24:	e00a      	b.n	8005f3c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f26:	f7fb ff7b 	bl	8001e20 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e035      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3c:	f7ff fa57 	bl	80053ee <LL_RCC_GetSysClkSource>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d1ec      	bne.n	8005f26 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f4c:	4b18      	ldr	r3, [pc, #96]	; (8005fb0 <HAL_RCC_ClockConfig+0x23c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d21b      	bcs.n	8005f92 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5a:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <HAL_RCC_ClockConfig+0x23c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f023 0207 	bic.w	r2, r3, #7
 8005f62:	4913      	ldr	r1, [pc, #76]	; (8005fb0 <HAL_RCC_ClockConfig+0x23c>)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f6a:	f7fb ff59 	bl	8001e20 <HAL_GetTick>
 8005f6e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f72:	f7fb ff55 	bl	8001e20 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e011      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <HAL_RCC_ClockConfig+0x23c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d1ef      	bne.n	8005f72 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f92:	f000 f8b3 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 8005f96:	4603      	mov	r3, r0
 8005f98:	4a06      	ldr	r2, [pc, #24]	; (8005fb4 <HAL_RCC_ClockConfig+0x240>)
 8005f9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <HAL_RCC_ClockConfig+0x244>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fb ff33 	bl	8001e0c <HAL_InitTick>
 8005fa6:	4603      	mov	r3, r0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	58004000 	.word	0x58004000
 8005fb4:	20000000 	.word	0x20000000
 8005fb8:	20000004 	.word	0x20000004

08005fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fca:	f7ff fa10 	bl	80053ee <LL_RCC_GetSysClkSource>
 8005fce:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fd0:	f7ff fae4 	bl	800559c <LL_RCC_PLL_GetMainSource>
 8005fd4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x2c>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b0c      	cmp	r3, #12
 8005fe0:	d139      	bne.n	8006056 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d136      	bne.n	8006056 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005fe8:	f7ff f9b3 	bl	8005352 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d115      	bne.n	800601e <HAL_RCC_GetSysClockFreq+0x62>
 8005ff2:	f7ff f9ae 	bl	8005352 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d106      	bne.n	800600a <HAL_RCC_GetSysClockFreq+0x4e>
 8005ffc:	f7ff f9b9 	bl	8005372 <LL_RCC_MSI_GetRange>
 8006000:	4603      	mov	r3, r0
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	e005      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x5a>
 800600a:	f7ff f9bd 	bl	8005388 <LL_RCC_MSI_GetRangeAfterStandby>
 800600e:	4603      	mov	r3, r0
 8006010:	0a1b      	lsrs	r3, r3, #8
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	4a36      	ldr	r2, [pc, #216]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8006018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601c:	e014      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0x8c>
 800601e:	f7ff f998 	bl	8005352 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006022:	4603      	mov	r3, r0
 8006024:	2b01      	cmp	r3, #1
 8006026:	d106      	bne.n	8006036 <HAL_RCC_GetSysClockFreq+0x7a>
 8006028:	f7ff f9a3 	bl	8005372 <LL_RCC_MSI_GetRange>
 800602c:	4603      	mov	r3, r0
 800602e:	091b      	lsrs	r3, r3, #4
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	e005      	b.n	8006042 <HAL_RCC_GetSysClockFreq+0x86>
 8006036:	f7ff f9a7 	bl	8005388 <LL_RCC_MSI_GetRangeAfterStandby>
 800603a:	4603      	mov	r3, r0
 800603c:	091b      	lsrs	r3, r3, #4
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	4a2b      	ldr	r2, [pc, #172]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8006044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006048:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d115      	bne.n	800607c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006054:	e012      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b04      	cmp	r3, #4
 800605a:	d102      	bne.n	8006062 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800605c:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e00c      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d109      	bne.n	800607c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006068:	f7ff f886 	bl	8005178 <LL_RCC_HSE_IsEnabledDiv2>
 800606c:	4603      	mov	r3, r0
 800606e:	2b01      	cmp	r3, #1
 8006070:	d102      	bne.n	8006078 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006072:	4b20      	ldr	r3, [pc, #128]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e001      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006078:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800607a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800607c:	f7ff f9b7 	bl	80053ee <LL_RCC_GetSysClkSource>
 8006080:	4603      	mov	r3, r0
 8006082:	2b0c      	cmp	r3, #12
 8006084:	d12f      	bne.n	80060e6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006086:	f7ff fa89 	bl	800559c <LL_RCC_PLL_GetMainSource>
 800608a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d003      	beq.n	800609a <HAL_RCC_GetSysClockFreq+0xde>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b03      	cmp	r3, #3
 8006096:	d003      	beq.n	80060a0 <HAL_RCC_GetSysClockFreq+0xe4>
 8006098:	e00d      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800609a:	4b16      	ldr	r3, [pc, #88]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800609c:	60fb      	str	r3, [r7, #12]
        break;
 800609e:	e00d      	b.n	80060bc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80060a0:	f7ff f86a 	bl	8005178 <LL_RCC_HSE_IsEnabledDiv2>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d102      	bne.n	80060b0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80060aa:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80060ac:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80060ae:	e005      	b.n	80060bc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80060b0:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80060b2:	60fb      	str	r3, [r7, #12]
        break;
 80060b4:	e002      	b.n	80060bc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	60fb      	str	r3, [r7, #12]
        break;
 80060ba:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80060bc:	f7ff fa4c 	bl	8005558 <LL_RCC_PLL_GetN>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	fb03 f402 	mul.w	r4, r3, r2
 80060c8:	f7ff fa5d 	bl	8005586 <LL_RCC_PLL_GetDivider>
 80060cc:	4603      	mov	r3, r0
 80060ce:	091b      	lsrs	r3, r3, #4
 80060d0:	3301      	adds	r3, #1
 80060d2:	fbb4 f4f3 	udiv	r4, r4, r3
 80060d6:	f7ff fa4b 	bl	8005570 <LL_RCC_PLL_GetR>
 80060da:	4603      	mov	r3, r0
 80060dc:	0f5b      	lsrs	r3, r3, #29
 80060de:	3301      	adds	r3, #1
 80060e0:	fbb4 f3f3 	udiv	r3, r4, r3
 80060e4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80060e6:	697b      	ldr	r3, [r7, #20]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd90      	pop	{r4, r7, pc}
 80060f0:	0801bfac 	.word	0x0801bfac
 80060f4:	00f42400 	.word	0x00f42400
 80060f8:	01e84800 	.word	0x01e84800

080060fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060fc:	b598      	push	{r3, r4, r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006100:	f7ff ff5c 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 8006104:	4604      	mov	r4, r0
 8006106:	f7ff f9cc 	bl	80054a2 <LL_RCC_GetAHBPrescaler>
 800610a:	4603      	mov	r3, r0
 800610c:	091b      	lsrs	r3, r3, #4
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	4a03      	ldr	r2, [pc, #12]	; (8006120 <HAL_RCC_GetHCLKFreq+0x24>)
 8006114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006118:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800611c:	4618      	mov	r0, r3
 800611e:	bd98      	pop	{r3, r4, r7, pc}
 8006120:	0801bf4c 	.word	0x0801bf4c

08006124 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006124:	b598      	push	{r3, r4, r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006128:	f7ff ffe8 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 800612c:	4604      	mov	r4, r0
 800612e:	f7ff f9d0 	bl	80054d2 <LL_RCC_GetAPB1Prescaler>
 8006132:	4603      	mov	r3, r0
 8006134:	0a1b      	lsrs	r3, r3, #8
 8006136:	4a03      	ldr	r2, [pc, #12]	; (8006144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800613c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006140:	4618      	mov	r0, r3
 8006142:	bd98      	pop	{r3, r4, r7, pc}
 8006144:	0801bf8c 	.word	0x0801bf8c

08006148 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006148:	b598      	push	{r3, r4, r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800614c:	f7ff ffd6 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 8006150:	4604      	mov	r4, r0
 8006152:	f7ff f9c9 	bl	80054e8 <LL_RCC_GetAPB2Prescaler>
 8006156:	4603      	mov	r3, r0
 8006158:	0adb      	lsrs	r3, r3, #11
 800615a:	4a03      	ldr	r2, [pc, #12]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x20>)
 800615c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006160:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006164:	4618      	mov	r0, r3
 8006166:	bd98      	pop	{r3, r4, r7, pc}
 8006168:	0801bf8c 	.word	0x0801bf8c

0800616c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800616c:	b590      	push	{r4, r7, lr}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	091b      	lsrs	r3, r3, #4
 8006178:	f003 030f 	and.w	r3, r3, #15
 800617c:	4a10      	ldr	r2, [pc, #64]	; (80061c0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800617e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006182:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006184:	f7ff f998 	bl	80054b8 <LL_RCC_GetAHB3Prescaler>
 8006188:	4603      	mov	r3, r0
 800618a:	091b      	lsrs	r3, r3, #4
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	4a0c      	ldr	r2, [pc, #48]	; (80061c4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	fbb2 f3f3 	udiv	r3, r2, r3
 800619c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	0c9c      	lsrs	r4, r3, #18
 80061a8:	f7fe ff3e 	bl	8005028 <HAL_PWREx_GetVoltageRange>
 80061ac:	4603      	mov	r3, r0
 80061ae:	4619      	mov	r1, r3
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 f80b 	bl	80061cc <RCC_SetFlashLatency>
 80061b6:	4603      	mov	r3, r0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd90      	pop	{r4, r7, pc}
 80061c0:	0801bfac 	.word	0x0801bfac
 80061c4:	0801bf4c 	.word	0x0801bf4c
 80061c8:	431bde83 	.word	0x431bde83

080061cc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08e      	sub	sp, #56	; 0x38
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80061d6:	4a3a      	ldr	r2, [pc, #232]	; (80062c0 <RCC_SetFlashLatency+0xf4>)
 80061d8:	f107 0320 	add.w	r3, r7, #32
 80061dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061e0:	6018      	str	r0, [r3, #0]
 80061e2:	3304      	adds	r3, #4
 80061e4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80061e6:	4a37      	ldr	r2, [pc, #220]	; (80062c4 <RCC_SetFlashLatency+0xf8>)
 80061e8:	f107 0318 	add.w	r3, r7, #24
 80061ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061f0:	6018      	str	r0, [r3, #0]
 80061f2:	3304      	adds	r3, #4
 80061f4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80061f6:	4a34      	ldr	r2, [pc, #208]	; (80062c8 <RCC_SetFlashLatency+0xfc>)
 80061f8:	f107 030c 	add.w	r3, r7, #12
 80061fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80061fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006202:	2300      	movs	r3, #0
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620c:	d11b      	bne.n	8006246 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800620e:	2300      	movs	r3, #0
 8006210:	633b      	str	r3, [r7, #48]	; 0x30
 8006212:	e014      	b.n	800623e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	3338      	adds	r3, #56	; 0x38
 800621a:	443b      	add	r3, r7
 800621c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006220:	461a      	mov	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4293      	cmp	r3, r2
 8006226:	d807      	bhi.n	8006238 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	3338      	adds	r3, #56	; 0x38
 800622e:	443b      	add	r3, r7
 8006230:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006236:	e021      	b.n	800627c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	3301      	adds	r3, #1
 800623c:	633b      	str	r3, [r7, #48]	; 0x30
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	2b02      	cmp	r3, #2
 8006242:	d9e7      	bls.n	8006214 <RCC_SetFlashLatency+0x48>
 8006244:	e01a      	b.n	800627c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006246:	2300      	movs	r3, #0
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800624a:	e014      	b.n	8006276 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	3338      	adds	r3, #56	; 0x38
 8006252:	443b      	add	r3, r7
 8006254:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006258:	461a      	mov	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4293      	cmp	r3, r2
 800625e:	d807      	bhi.n	8006270 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	3338      	adds	r3, #56	; 0x38
 8006266:	443b      	add	r3, r7
 8006268:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800626c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800626e:	e005      	b.n	800627c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	3301      	adds	r3, #1
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	2b02      	cmp	r3, #2
 800627a:	d9e7      	bls.n	800624c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800627c:	4b13      	ldr	r3, [pc, #76]	; (80062cc <RCC_SetFlashLatency+0x100>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f023 0207 	bic.w	r2, r3, #7
 8006284:	4911      	ldr	r1, [pc, #68]	; (80062cc <RCC_SetFlashLatency+0x100>)
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	4313      	orrs	r3, r2
 800628a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800628c:	f7fb fdc8 	bl	8001e20 <HAL_GetTick>
 8006290:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006292:	e008      	b.n	80062a6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006294:	f7fb fdc4 	bl	8001e20 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e007      	b.n	80062b6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <RCC_SetFlashLatency+0x100>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d1ef      	bne.n	8006294 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3738      	adds	r7, #56	; 0x38
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	0801b564 	.word	0x0801b564
 80062c4:	0801b56c 	.word	0x0801b56c
 80062c8:	0801b574 	.word	0x0801b574
 80062cc:	58004000 	.word	0x58004000

080062d0 <LL_RCC_LSE_IsReady>:
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80062d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d101      	bne.n	80062e8 <LL_RCC_LSE_IsReady+0x18>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <LL_RCC_LSE_IsReady+0x1a>
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr

080062f2 <LL_RCC_SetUSARTClockSource>:
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80062fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	0c1b      	lsrs	r3, r3, #16
 8006306:	43db      	mvns	r3, r3
 8006308:	401a      	ands	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr

08006322 <LL_RCC_SetI2SClockSource>:
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800632a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr

0800634c <LL_RCC_SetLPUARTClockSource>:
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr

08006376 <LL_RCC_SetI2CClockSource>:
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800637e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006382:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800638e:	43db      	mvns	r3, r3
 8006390:	401a      	ands	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800639a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr

080063ae <LL_RCC_SetLPTIMClockSource>:
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80063b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	0c1b      	lsrs	r3, r3, #16
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	43db      	mvns	r3, r3
 80063c6:	401a      	ands	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	041b      	lsls	r3, r3, #16
 80063cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr

080063e0 <LL_RCC_SetRNGClockSource>:
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80063e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80063f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <LL_RCC_SetADCClockSource>:
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800641e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	bc80      	pop	{r7}
 8006432:	4770      	bx	lr

08006434 <LL_RCC_SetRTCClockSource>:
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800643c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	bc80      	pop	{r7}
 800645c:	4770      	bx	lr

0800645e <LL_RCC_GetRTCClockSource>:
{
 800645e:	b480      	push	{r7}
 8006460:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800646e:	4618      	mov	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	bc80      	pop	{r7}
 8006474:	4770      	bx	lr

08006476 <LL_RCC_ForceBackupDomainReset>:
{
 8006476:	b480      	push	{r7}
 8006478:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800647a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800648a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800648e:	bf00      	nop
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr

08006496 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006496:	b480      	push	{r7}
 8006498:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800649a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80064ae:	bf00      	nop
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr
	...

080064b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80064c4:	2300      	movs	r3, #0
 80064c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80064c8:	2300      	movs	r3, #0
 80064ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d058      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80064d8:	f7fe fd64 	bl	8004fa4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064dc:	f7fb fca0 	bl	8001e20 <HAL_GetTick>
 80064e0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80064e2:	e009      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064e4:	f7fb fc9c 	bl	8001e20 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d902      	bls.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	74fb      	strb	r3, [r7, #19]
        break;
 80064f6:	e006      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80064f8:	4b7b      	ldr	r3, [pc, #492]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006504:	d1ee      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006506:	7cfb      	ldrb	r3, [r7, #19]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d13c      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800650c:	f7ff ffa7 	bl	800645e <LL_RCC_GetRTCClockSource>
 8006510:	4602      	mov	r2, r0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006516:	429a      	cmp	r2, r3
 8006518:	d00f      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800651a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006526:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006528:	f7ff ffa5 	bl	8006476 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800652c:	f7ff ffb3 	bl	8006496 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d014      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fb fc6c 	bl	8001e20 <HAL_GetTick>
 8006548:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800654a:	e00b      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654c:	f7fb fc68 	bl	8001e20 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	f241 3288 	movw	r2, #5000	; 0x1388
 800655a:	4293      	cmp	r3, r2
 800655c:	d902      	bls.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	74fb      	strb	r3, [r7, #19]
            break;
 8006562:	e004      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006564:	f7ff feb4 	bl	80062d0 <LL_RCC_LSE_IsReady>
 8006568:	4603      	mov	r3, r0
 800656a:	2b01      	cmp	r3, #1
 800656c:	d1ee      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800656e:	7cfb      	ldrb	r3, [r7, #19]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d105      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff ff5b 	bl	8006434 <LL_RCC_SetRTCClockSource>
 800657e:	e004      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006580:	7cfb      	ldrb	r3, [r7, #19]
 8006582:	74bb      	strb	r3, [r7, #18]
 8006584:	e001      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006586:	7cfb      	ldrb	r3, [r7, #19]
 8006588:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d004      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fea9 	bl	80062f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff fe9e 	bl	80062f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fec0 	bl	800634c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d004      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff fee6 	bl	80063ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d004      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fedb 	bl	80063ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff fed0 	bl	80063ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fea9 	bl	8006376 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fe9e 	bl	8006376 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d004      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fe93 	bl	8006376 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b00      	cmp	r3, #0
 800665a:	d011      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff fe5e 	bl	8006322 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666e:	d107      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800667a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800667e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d010      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff fea5 	bl	80063e0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	2b00      	cmp	r3, #0
 800669c:	d107      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800669e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d011      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff fea3 	bl	800640a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066cc:	d107      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066dc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80066de:	7cbb      	ldrb	r3, [r7, #18]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	58000400 	.word	0x58000400

080066ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d068      	beq.n	80067d0 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fb f8c0 	bl	8001898 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006720:	4b2e      	ldr	r3, [pc, #184]	; (80067dc <HAL_RTC_Init+0xf0>)
 8006722:	22ca      	movs	r2, #202	; 0xca
 8006724:	625a      	str	r2, [r3, #36]	; 0x24
 8006726:	4b2d      	ldr	r3, [pc, #180]	; (80067dc <HAL_RTC_Init+0xf0>)
 8006728:	2253      	movs	r2, #83	; 0x53
 800672a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fa0f 	bl	8006b50 <RTC_EnterInitMode>
 8006732:	4603      	mov	r3, r0
 8006734:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d13f      	bne.n	80067bc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800673c:	4b27      	ldr	r3, [pc, #156]	; (80067dc <HAL_RTC_Init+0xf0>)
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	4a26      	ldr	r2, [pc, #152]	; (80067dc <HAL_RTC_Init+0xf0>)
 8006742:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800674a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800674c:	4b23      	ldr	r3, [pc, #140]	; (80067dc <HAL_RTC_Init+0xf0>)
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6859      	ldr	r1, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	4319      	orrs	r1, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	430b      	orrs	r3, r1
 8006760:	491e      	ldr	r1, [pc, #120]	; (80067dc <HAL_RTC_Init+0xf0>)
 8006762:	4313      	orrs	r3, r2
 8006764:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	491a      	ldr	r1, [pc, #104]	; (80067dc <HAL_RTC_Init+0xf0>)
 8006772:	4313      	orrs	r3, r2
 8006774:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006776:	4b19      	ldr	r3, [pc, #100]	; (80067dc <HAL_RTC_Init+0xf0>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006786:	430b      	orrs	r3, r1
 8006788:	4914      	ldr	r1, [pc, #80]	; (80067dc <HAL_RTC_Init+0xf0>)
 800678a:	4313      	orrs	r3, r2
 800678c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa12 	bl	8006bb8 <RTC_ExitInitMode>
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10e      	bne.n	80067bc <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800679e:	4b0f      	ldr	r3, [pc, #60]	; (80067dc <HAL_RTC_Init+0xf0>)
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a19      	ldr	r1, [r3, #32]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	4319      	orrs	r1, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	430b      	orrs	r3, r1
 80067b6:	4909      	ldr	r1, [pc, #36]	; (80067dc <HAL_RTC_Init+0xf0>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067bc:	4b07      	ldr	r3, [pc, #28]	; (80067dc <HAL_RTC_Init+0xf0>)
 80067be:	22ff      	movs	r2, #255	; 0xff
 80067c0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d103      	bne.n	80067d0 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40002800 	.word	0x40002800

080067e0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80067e0:	b590      	push	{r4, r7, lr}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_RTC_SetAlarm_IT+0x1e>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e0f3      	b.n	80069e6 <HAL_RTC_SetAlarm_IT+0x206>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2202      	movs	r2, #2
 800680a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800680e:	4b78      	ldr	r3, [pc, #480]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006816:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681e:	d06a      	beq.n	80068f6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d13a      	bne.n	800689c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006826:	4b72      	ldr	r3, [pc, #456]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d102      	bne.n	8006838 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2200      	movs	r2, #0
 8006836:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 f9f5 	bl	8006c34 <RTC_ByteToBcd2>
 800684a:	4603      	mov	r3, r0
 800684c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	785b      	ldrb	r3, [r3, #1]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 f9ee 	bl	8006c34 <RTC_ByteToBcd2>
 8006858:	4603      	mov	r3, r0
 800685a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800685c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	789b      	ldrb	r3, [r3, #2]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f9e6 	bl	8006c34 <RTC_ByteToBcd2>
 8006868:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800686a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	78db      	ldrb	r3, [r3, #3]
 8006872:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006874:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800687e:	4618      	mov	r0, r3
 8006880:	f000 f9d8 	bl	8006c34 <RTC_ByteToBcd2>
 8006884:	4603      	mov	r3, r0
 8006886:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006888:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006890:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	e02c      	b.n	80068f6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80068a4:	d00d      	beq.n	80068c2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068ae:	d008      	beq.n	80068c2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80068b0:	4b4f      	ldr	r3, [pc, #316]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d102      	bne.n	80068c2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2200      	movs	r2, #0
 80068c0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068ce:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80068d4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	78db      	ldrb	r3, [r3, #3]
 80068da:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80068dc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068e4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80068e6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80068ec:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068f6:	4b3e      	ldr	r3, [pc, #248]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80068f8:	22ca      	movs	r2, #202	; 0xca
 80068fa:	625a      	str	r2, [r3, #36]	; 0x24
 80068fc:	4b3c      	ldr	r3, [pc, #240]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80068fe:	2253      	movs	r2, #83	; 0x53
 8006900:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800690a:	d12c      	bne.n	8006966 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800690c:	4b38      	ldr	r3, [pc, #224]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	4a37      	ldr	r2, [pc, #220]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006912:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006916:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006918:	4b35      	ldr	r3, [pc, #212]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800691a:	2201      	movs	r2, #1
 800691c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006924:	d107      	bne.n	8006936 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	4930      	ldr	r1, [pc, #192]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006930:	4313      	orrs	r3, r2
 8006932:	644b      	str	r3, [r1, #68]	; 0x44
 8006934:	e006      	b.n	8006944 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006936:	4a2e      	ldr	r2, [pc, #184]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800693c:	4a2c      	ldr	r2, [pc, #176]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006944:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	f043 0201 	orr.w	r2, r3, #1
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006958:	4b25      	ldr	r3, [pc, #148]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	4a24      	ldr	r2, [pc, #144]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800695e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006962:	6193      	str	r3, [r2, #24]
 8006964:	e02b      	b.n	80069be <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006966:	4b22      	ldr	r3, [pc, #136]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	4a21      	ldr	r2, [pc, #132]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800696c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006970:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006972:	4b1f      	ldr	r3, [pc, #124]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006974:	2202      	movs	r2, #2
 8006976:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697e:	d107      	bne.n	8006990 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	4919      	ldr	r1, [pc, #100]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800698a:	4313      	orrs	r3, r2
 800698c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800698e:	e006      	b.n	800699e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006990:	4a17      	ldr	r2, [pc, #92]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006996:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800699e:	4a14      	ldr	r2, [pc, #80]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	f043 0202 	orr.w	r2, r3, #2
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80069b2:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	4a0e      	ldr	r2, [pc, #56]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80069b8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80069bc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80069be:	4b0d      	ldr	r3, [pc, #52]	; (80069f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80069c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c4:	4a0b      	ldr	r2, [pc, #44]	; (80069f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80069c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069ce:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80069d0:	22ff      	movs	r2, #255	; 0xff
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd90      	pop	{r4, r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40002800 	.word	0x40002800
 80069f4:	58000800 	.word	0x58000800

080069f8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_RTC_DeactivateAlarm+0x18>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e048      	b.n	8006aa2 <HAL_RTC_DeactivateAlarm+0xaa>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a20:	4b22      	ldr	r3, [pc, #136]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a22:	22ca      	movs	r2, #202	; 0xca
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24
 8006a26:	4b21      	ldr	r3, [pc, #132]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a28:	2253      	movs	r2, #83	; 0x53
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a32:	d115      	bne.n	8006a60 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006a34:	4b1d      	ldr	r3, [pc, #116]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	4a1c      	ldr	r2, [pc, #112]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a3e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006a40:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a44:	4a19      	ldr	r2, [pc, #100]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a4a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	f023 0201 	bic.w	r2, r3, #1
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006a58:	4b14      	ldr	r3, [pc, #80]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a5e:	e014      	b.n	8006a8a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006a60:	4b12      	ldr	r3, [pc, #72]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	4a11      	ldr	r2, [pc, #68]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a66:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006a6a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006a6c:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a70:	4a0e      	ldr	r2, [pc, #56]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a76:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	f023 0202 	bic.w	r2, r3, #2
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006a84:	4b09      	ldr	r3, [pc, #36]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a86:	2202      	movs	r2, #2
 8006a88:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a8a:	4b08      	ldr	r3, [pc, #32]	; (8006aac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a8c:	22ff      	movs	r2, #255	; 0xff
 8006a8e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr
 8006aac:	40002800 	.word	0x40002800

08006ab0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006ab8:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006aba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006ace:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fb fbb0 	bl	800223a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006ae4:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f94a 	bl	8006d84 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40002800 	.word	0x40002800

08006b04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006b0c:	4b0f      	ldr	r3, [pc, #60]	; (8006b4c <HAL_RTC_WaitForSynchro+0x48>)
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	4a0e      	ldr	r2, [pc, #56]	; (8006b4c <HAL_RTC_WaitForSynchro+0x48>)
 8006b12:	f023 0320 	bic.w	r3, r3, #32
 8006b16:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006b18:	f7fb f982 	bl	8001e20 <HAL_GetTick>
 8006b1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006b1e:	e009      	b.n	8006b34 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b20:	f7fb f97e 	bl	8001e20 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b2e:	d901      	bls.n	8006b34 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e006      	b.n	8006b42 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006b34:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <HAL_RTC_WaitForSynchro+0x48>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0ef      	beq.n	8006b20 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	40002800 	.word	0x40002800

08006b50 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006b5c:	4b15      	ldr	r3, [pc, #84]	; (8006bb4 <RTC_EnterInitMode+0x64>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d120      	bne.n	8006baa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b68:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <RTC_EnterInitMode+0x64>)
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	4a11      	ldr	r2, [pc, #68]	; (8006bb4 <RTC_EnterInitMode+0x64>)
 8006b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b72:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006b74:	f7fb f954 	bl	8001e20 <HAL_GetTick>
 8006b78:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b7a:	e00d      	b.n	8006b98 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006b7c:	f7fb f950 	bl	8001e20 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b8a:	d905      	bls.n	8006b98 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2203      	movs	r2, #3
 8006b94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b98:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <RTC_EnterInitMode+0x64>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <RTC_EnterInitMode+0x5a>
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d1e8      	bne.n	8006b7c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40002800 	.word	0x40002800

08006bb8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006bc4:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <RTC_ExitInitMode+0x78>)
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	4a19      	ldr	r2, [pc, #100]	; (8006c30 <RTC_ExitInitMode+0x78>)
 8006bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bce:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006bd0:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <RTC_ExitInitMode+0x78>)
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10c      	bne.n	8006bf6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff ff91 	bl	8006b04 <HAL_RTC_WaitForSynchro>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01e      	beq.n	8006c26 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2203      	movs	r2, #3
 8006bec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	73fb      	strb	r3, [r7, #15]
 8006bf4:	e017      	b.n	8006c26 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006bf6:	4b0e      	ldr	r3, [pc, #56]	; (8006c30 <RTC_ExitInitMode+0x78>)
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	4a0d      	ldr	r2, [pc, #52]	; (8006c30 <RTC_ExitInitMode+0x78>)
 8006bfc:	f023 0320 	bic.w	r3, r3, #32
 8006c00:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff ff7e 	bl	8006b04 <HAL_RTC_WaitForSynchro>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2203      	movs	r2, #3
 8006c12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c1a:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <RTC_ExitInitMode+0x78>)
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	4a04      	ldr	r2, [pc, #16]	; (8006c30 <RTC_ExitInitMode+0x78>)
 8006c20:	f043 0320 	orr.w	r3, r3, #32
 8006c24:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	40002800 	.word	0x40002800

08006c34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006c46:	e005      	b.n	8006c54 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	3b0a      	subs	r3, #10
 8006c52:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006c54:	7afb      	ldrb	r3, [r7, #11]
 8006c56:	2b09      	cmp	r3, #9
 8006c58:	d8f6      	bhi.n	8006c48 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	7afb      	ldrb	r3, [r7, #11]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	b2db      	uxtb	r3, r3
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
	...

08006c74 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_RTCEx_EnableBypassShadow+0x16>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e01f      	b.n	8006cca <HAL_RTCEx_EnableBypassShadow+0x56>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c9a:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c9c:	22ca      	movs	r2, #202	; 0xca
 8006c9e:	625a      	str	r2, [r3, #36]	; 0x24
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ca2:	2253      	movs	r2, #83	; 0x53
 8006ca4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	4a0a      	ldr	r2, [pc, #40]	; (8006cd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006cac:	f043 0320 	orr.w	r3, r3, #32
 8006cb0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cb2:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006cb4:	22ff      	movs	r2, #255	; 0xff
 8006cb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr
 8006cd4:	40002800 	.word	0x40002800

08006cd8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_RTCEx_SetSSRU_IT+0x16>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e027      	b.n	8006d3e <HAL_RTCEx_SetSSRU_IT+0x66>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cfe:	4b12      	ldr	r3, [pc, #72]	; (8006d48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006d00:	22ca      	movs	r2, #202	; 0xca
 8006d02:	625a      	str	r2, [r3, #36]	; 0x24
 8006d04:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006d06:	2253      	movs	r2, #83	; 0x53
 8006d08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006d0a:	4b0f      	ldr	r3, [pc, #60]	; (8006d48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	4a0e      	ldr	r2, [pc, #56]	; (8006d48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d14:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d1c:	4a0b      	ldr	r2, [pc, #44]	; (8006d4c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d26:	4b08      	ldr	r3, [pc, #32]	; (8006d48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006d28:	22ff      	movs	r2, #255	; 0xff
 8006d2a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr
 8006d48:	40002800 	.word	0x40002800
 8006d4c:	58000800 	.word	0x58000800

08006d50 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006d58:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006d64:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006d66:	2240      	movs	r2, #64	; 0x40
 8006d68:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fb fa6f 	bl	800224e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40002800 	.word	0x40002800

08006d84 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr
	...

08006d98 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006da4:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006da6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	4413      	add	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]
}
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	4000b100 	.word	0x4000b100

08006dc8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006dd2:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <HAL_RTCEx_BKUPRead+0x28>)
 8006dd4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	4000b100 	.word	0x4000b100

08006df4 <LL_PWR_SetRadioBusyTrigger>:
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e04:	4904      	ldr	r1, [pc, #16]	; (8006e18 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	608b      	str	r3, [r1, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	58000400 	.word	0x58000400

08006e1c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e26:	4a04      	ldr	r2, [pc, #16]	; (8006e38 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e30:	bf00      	nop
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr
 8006e38:	58000400 	.word	0x58000400

08006e3c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e46:	4a04      	ldr	r2, [pc, #16]	; (8006e58 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006e48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e50:	bf00      	nop
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr
 8006e58:	58000400 	.word	0x58000400

08006e5c <LL_PWR_ClearFlag_RFBUSY>:
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006e60:	4b03      	ldr	r3, [pc, #12]	; (8006e70 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e66:	619a      	str	r2, [r3, #24]
}
 8006e68:	bf00      	nop
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc80      	pop	{r7}
 8006e6e:	4770      	bx	lr
 8006e70:	58000400 	.word	0x58000400

08006e74 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006e78:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d101      	bne.n	8006e88 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bc80      	pop	{r7}
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	58000400 	.word	0x58000400

08006e98 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006e98:	b480      	push	{r7}
 8006e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d101      	bne.n	8006eac <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc80      	pop	{r7}
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	58000400 	.word	0x58000400

08006ebc <LL_RCC_RF_DisableReset>:
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ecc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ed0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006ed4:	bf00      	nop
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr

08006edc <LL_RCC_IsRFUnderReset>:
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef0:	d101      	bne.n	8006ef6 <LL_RCC_IsRFUnderReset+0x1a>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <LL_RCC_IsRFUnderReset+0x1c>
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr

08006f00 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <LL_EXTI_EnableIT_32_63+0x24>)
 8006f0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006f0e:	4905      	ldr	r1, [pc, #20]	; (8006f24 <LL_EXTI_EnableIT_32_63+0x24>)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	58000800 	.word	0x58000800

08006f28 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d103      	bne.n	8006f3e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	73fb      	strb	r3, [r7, #15]
    return status;
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	e04b      	b.n	8006fd6 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	799b      	ldrb	r3, [r3, #6]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d105      	bne.n	8006f58 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fa fda0 	bl	8001a98 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006f5e:	f7ff ffad 	bl	8006ebc <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f62:	4b1f      	ldr	r3, [pc, #124]	; (8006fe0 <HAL_SUBGHZ_Init+0xb8>)
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	4613      	mov	r3, r2
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	1a9b      	subs	r3, r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	0cdb      	lsrs	r3, r3, #19
 8006f70:	2264      	movs	r2, #100	; 0x64
 8006f72:	fb02 f303 	mul.w	r3, r2, r3
 8006f76:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	609a      	str	r2, [r3, #8]
      break;
 8006f88:	e007      	b.n	8006f9a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006f90:	f7ff ffa4 	bl	8006edc <LL_RCC_IsRFUnderReset>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1ee      	bne.n	8006f78 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f9a:	f7ff ff3f 	bl	8006e1c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006f9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006fa2:	f7ff ffad 	bl	8006f00 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006fa6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006faa:	f7ff ff23 	bl	8006df4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006fae:	f7ff ff55 	bl	8006e5c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 faad 	bl	800751c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	719a      	strb	r2, [r3, #6]

  return status;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20000000 	.word	0x20000000

08006fe4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	607a      	str	r2, [r7, #4]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	817b      	strh	r3, [r7, #10]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	799b      	ldrb	r3, [r3, #6]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d14a      	bne.n	8007098 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	795b      	ldrb	r3, [r3, #5]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d101      	bne.n	800700e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800700a:	2302      	movs	r3, #2
 800700c:	e045      	b.n	800709a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2202      	movs	r2, #2
 8007018:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fb4c 	bl	80076b8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007020:	f7ff ff0c 	bl	8006e3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007024:	210d      	movs	r1, #13
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 fa98 	bl	800755c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800702c:	897b      	ldrh	r3, [r7, #10]
 800702e:	0a1b      	lsrs	r3, r3, #8
 8007030:	b29b      	uxth	r3, r3
 8007032:	b2db      	uxtb	r3, r3
 8007034:	4619      	mov	r1, r3
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 fa90 	bl	800755c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800703c:	897b      	ldrh	r3, [r7, #10]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	4619      	mov	r1, r3
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fa8a 	bl	800755c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007048:	2300      	movs	r3, #0
 800704a:	82bb      	strh	r3, [r7, #20]
 800704c:	e00a      	b.n	8007064 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800704e:	8abb      	ldrh	r3, [r7, #20]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	4413      	add	r3, r2
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	4619      	mov	r1, r3
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 fa7f 	bl	800755c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800705e:	8abb      	ldrh	r3, [r7, #20]
 8007060:	3301      	adds	r3, #1
 8007062:	82bb      	strh	r3, [r7, #20]
 8007064:	8aba      	ldrh	r2, [r7, #20]
 8007066:	893b      	ldrh	r3, [r7, #8]
 8007068:	429a      	cmp	r2, r3
 800706a:	d3f0      	bcc.n	800704e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800706c:	f7ff fed6 	bl	8006e1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 fb45 	bl	8007700 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]
 8007082:	e001      	b.n	8007088 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	715a      	strb	r2, [r3, #5]

    return status;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	e000      	b.n	800709a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007098:	2302      	movs	r3, #2
  }
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b088      	sub	sp, #32
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	461a      	mov	r2, r3
 80070ae:	460b      	mov	r3, r1
 80070b0:	817b      	strh	r3, [r7, #10]
 80070b2:	4613      	mov	r3, r2
 80070b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	799b      	ldrb	r3, [r3, #6]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d14a      	bne.n	800715a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	795b      	ldrb	r3, [r3, #5]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e045      	b.n	800715c <HAL_SUBGHZ_ReadRegisters+0xba>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2201      	movs	r2, #1
 80070d4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 faee 	bl	80076b8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070dc:	f7ff feae 	bl	8006e3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80070e0:	211d      	movs	r1, #29
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 fa3a 	bl	800755c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80070e8:	897b      	ldrh	r3, [r7, #10]
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	4619      	mov	r1, r3
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 fa32 	bl	800755c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80070f8:	897b      	ldrh	r3, [r7, #10]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	4619      	mov	r1, r3
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 fa2c 	bl	800755c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007104:	2100      	movs	r1, #0
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fa28 	bl	800755c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800710c:	2300      	movs	r3, #0
 800710e:	82fb      	strh	r3, [r7, #22]
 8007110:	e009      	b.n	8007126 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007112:	69b9      	ldr	r1, [r7, #24]
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 fa77 	bl	8007608 <SUBGHZSPI_Receive>
      pData++;
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	3301      	adds	r3, #1
 800711e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007120:	8afb      	ldrh	r3, [r7, #22]
 8007122:	3301      	adds	r3, #1
 8007124:	82fb      	strh	r3, [r7, #22]
 8007126:	8afa      	ldrh	r2, [r7, #22]
 8007128:	893b      	ldrh	r3, [r7, #8]
 800712a:	429a      	cmp	r2, r3
 800712c:	d3f1      	bcc.n	8007112 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800712e:	f7ff fe75 	bl	8006e1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 fae4 	bl	8007700 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	77fb      	strb	r3, [r7, #31]
 8007144:	e001      	b.n	800714a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	715a      	strb	r2, [r3, #5]

    return status;
 8007156:	7ffb      	ldrb	r3, [r7, #31]
 8007158:	e000      	b.n	800715c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800715a:	2302      	movs	r3, #2
  }
}
 800715c:	4618      	mov	r0, r3
 800715e:	3720      	adds	r7, #32
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	461a      	mov	r2, r3
 8007170:	460b      	mov	r3, r1
 8007172:	72fb      	strb	r3, [r7, #11]
 8007174:	4613      	mov	r3, r2
 8007176:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	799b      	ldrb	r3, [r3, #6]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b01      	cmp	r3, #1
 8007180:	d14a      	bne.n	8007218 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	795b      	ldrb	r3, [r3, #5]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800718a:	2302      	movs	r3, #2
 800718c:	e045      	b.n	800721a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fa8f 	bl	80076b8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800719a:	7afb      	ldrb	r3, [r7, #11]
 800719c:	2b84      	cmp	r3, #132	; 0x84
 800719e:	d002      	beq.n	80071a6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	2b94      	cmp	r3, #148	; 0x94
 80071a4:	d103      	bne.n	80071ae <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	711a      	strb	r2, [r3, #4]
 80071ac:	e002      	b.n	80071b4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80071b4:	f7ff fe42 	bl	8006e3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80071b8:	7afb      	ldrb	r3, [r7, #11]
 80071ba:	4619      	mov	r1, r3
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f9cd 	bl	800755c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80071c2:	2300      	movs	r3, #0
 80071c4:	82bb      	strh	r3, [r7, #20]
 80071c6:	e00a      	b.n	80071de <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80071c8:	8abb      	ldrh	r3, [r7, #20]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	4619      	mov	r1, r3
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 f9c2 	bl	800755c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80071d8:	8abb      	ldrh	r3, [r7, #20]
 80071da:	3301      	adds	r3, #1
 80071dc:	82bb      	strh	r3, [r7, #20]
 80071de:	8aba      	ldrh	r2, [r7, #20]
 80071e0:	893b      	ldrh	r3, [r7, #8]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d3f0      	bcc.n	80071c8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80071e6:	f7ff fe19 	bl	8006e1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80071ea:	7afb      	ldrb	r3, [r7, #11]
 80071ec:	2b84      	cmp	r3, #132	; 0x84
 80071ee:	d002      	beq.n	80071f6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 fa85 	bl	8007700 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	75fb      	strb	r3, [r7, #23]
 8007202:	e001      	b.n	8007208 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	715a      	strb	r2, [r3, #5]

    return status;
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	e000      	b.n	800721a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007218:	2302      	movs	r3, #2
  }
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b088      	sub	sp, #32
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	461a      	mov	r2, r3
 800722e:	460b      	mov	r3, r1
 8007230:	72fb      	strb	r3, [r7, #11]
 8007232:	4613      	mov	r3, r2
 8007234:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	799b      	ldrb	r3, [r3, #6]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	d13d      	bne.n	80072c0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	795b      	ldrb	r3, [r3, #5]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800724c:	2302      	movs	r3, #2
 800724e:	e038      	b.n	80072c2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fa2e 	bl	80076b8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800725c:	f7ff fdee 	bl	8006e3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	4619      	mov	r1, r3
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 f979 	bl	800755c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800726a:	2100      	movs	r1, #0
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 f975 	bl	800755c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007272:	2300      	movs	r3, #0
 8007274:	82fb      	strh	r3, [r7, #22]
 8007276:	e009      	b.n	800728c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007278:	69b9      	ldr	r1, [r7, #24]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f9c4 	bl	8007608 <SUBGHZSPI_Receive>
      pData++;
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	3301      	adds	r3, #1
 8007284:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007286:	8afb      	ldrh	r3, [r7, #22]
 8007288:	3301      	adds	r3, #1
 800728a:	82fb      	strh	r3, [r7, #22]
 800728c:	8afa      	ldrh	r2, [r7, #22]
 800728e:	893b      	ldrh	r3, [r7, #8]
 8007290:	429a      	cmp	r2, r3
 8007292:	d3f1      	bcc.n	8007278 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007294:	f7ff fdc2 	bl	8006e1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fa31 	bl	8007700 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	77fb      	strb	r3, [r7, #31]
 80072aa:	e001      	b.n	80072b0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	715a      	strb	r2, [r3, #5]

    return status;
 80072bc:	7ffb      	ldrb	r3, [r7, #31]
 80072be:	e000      	b.n	80072c2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80072c0:	2302      	movs	r3, #2
  }
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b086      	sub	sp, #24
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	461a      	mov	r2, r3
 80072d6:	460b      	mov	r3, r1
 80072d8:	72fb      	strb	r3, [r7, #11]
 80072da:	4613      	mov	r3, r2
 80072dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	799b      	ldrb	r3, [r3, #6]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d13e      	bne.n	8007366 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	795b      	ldrb	r3, [r3, #5]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80072f0:	2302      	movs	r3, #2
 80072f2:	e039      	b.n	8007368 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2201      	movs	r2, #1
 80072f8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 f9dc 	bl	80076b8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007300:	f7ff fd9c 	bl	8006e3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007304:	210e      	movs	r1, #14
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 f928 	bl	800755c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800730c:	7afb      	ldrb	r3, [r7, #11]
 800730e:	4619      	mov	r1, r3
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f923 	bl	800755c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007316:	2300      	movs	r3, #0
 8007318:	82bb      	strh	r3, [r7, #20]
 800731a:	e00a      	b.n	8007332 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800731c:	8abb      	ldrh	r3, [r7, #20]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	4413      	add	r3, r2
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	4619      	mov	r1, r3
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f918 	bl	800755c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800732c:	8abb      	ldrh	r3, [r7, #20]
 800732e:	3301      	adds	r3, #1
 8007330:	82bb      	strh	r3, [r7, #20]
 8007332:	8aba      	ldrh	r2, [r7, #20]
 8007334:	893b      	ldrh	r3, [r7, #8]
 8007336:	429a      	cmp	r2, r3
 8007338:	d3f0      	bcc.n	800731c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800733a:	f7ff fd6f 	bl	8006e1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f9de 	bl	8007700 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	75fb      	strb	r3, [r7, #23]
 8007350:	e001      	b.n	8007356 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	715a      	strb	r2, [r3, #5]

    return status;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	e000      	b.n	8007368 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007366:	2302      	movs	r3, #2
  }
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	461a      	mov	r2, r3
 800737c:	460b      	mov	r3, r1
 800737e:	72fb      	strb	r3, [r7, #11]
 8007380:	4613      	mov	r3, r2
 8007382:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	799b      	ldrb	r3, [r3, #6]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b01      	cmp	r3, #1
 8007390:	d141      	bne.n	8007416 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	795b      	ldrb	r3, [r3, #5]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800739a:	2302      	movs	r3, #2
 800739c:	e03c      	b.n	8007418 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f987 	bl	80076b8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80073aa:	f7ff fd47 	bl	8006e3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80073ae:	211e      	movs	r1, #30
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f8d3 	bl	800755c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80073b6:	7afb      	ldrb	r3, [r7, #11]
 80073b8:	4619      	mov	r1, r3
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 f8ce 	bl	800755c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80073c0:	2100      	movs	r1, #0
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 f8ca 	bl	800755c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80073c8:	2300      	movs	r3, #0
 80073ca:	82fb      	strh	r3, [r7, #22]
 80073cc:	e009      	b.n	80073e2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80073ce:	69b9      	ldr	r1, [r7, #24]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f919 	bl	8007608 <SUBGHZSPI_Receive>
      pData++;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	3301      	adds	r3, #1
 80073da:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80073dc:	8afb      	ldrh	r3, [r7, #22]
 80073de:	3301      	adds	r3, #1
 80073e0:	82fb      	strh	r3, [r7, #22]
 80073e2:	8afa      	ldrh	r2, [r7, #22]
 80073e4:	893b      	ldrh	r3, [r7, #8]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d3f1      	bcc.n	80073ce <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80073ea:	f7ff fd17 	bl	8006e1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f986 	bl	8007700 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	77fb      	strb	r3, [r7, #31]
 8007400:	e001      	b.n	8007406 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2201      	movs	r2, #1
 800740a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	715a      	strb	r2, [r3, #5]

    return status;
 8007412:	7ffb      	ldrb	r3, [r7, #31]
 8007414:	e000      	b.n	8007418 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007416:	2302      	movs	r3, #2
  }
}
 8007418:	4618      	mov	r0, r3
 800741a:	3720      	adds	r7, #32
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007428:	2300      	movs	r3, #0
 800742a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800742c:	f107 020c 	add.w	r2, r7, #12
 8007430:	2302      	movs	r3, #2
 8007432:	2112      	movs	r1, #18
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff fef4 	bl	8007222 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800743a:	7b3b      	ldrb	r3, [r7, #12]
 800743c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800743e:	89fb      	ldrh	r3, [r7, #14]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	b21a      	sxth	r2, r3
 8007444:	7b7b      	ldrb	r3, [r7, #13]
 8007446:	b21b      	sxth	r3, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	b21b      	sxth	r3, r3
 800744c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800744e:	89fb      	ldrh	r3, [r7, #14]
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f012 fa8b 	bl	8019974 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800745e:	89fb      	ldrh	r3, [r7, #14]
 8007460:	085b      	lsrs	r3, r3, #1
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f012 fa90 	bl	8019990 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007470:	89fb      	ldrh	r3, [r7, #14]
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f012 fadf 	bl	8019a40 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007482:	89fb      	ldrh	r3, [r7, #14]
 8007484:	08db      	lsrs	r3, r3, #3
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f012 fae4 	bl	8019a5c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007494:	89fb      	ldrh	r3, [r7, #14]
 8007496:	091b      	lsrs	r3, r3, #4
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f012 fae9 	bl	8019a78 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80074a6:	89fb      	ldrh	r3, [r7, #14]
 80074a8:	095b      	lsrs	r3, r3, #5
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f012 fab6 	bl	8019a24 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80074b8:	89fb      	ldrh	r3, [r7, #14]
 80074ba:	099b      	lsrs	r3, r3, #6
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f012 fa71 	bl	80199ac <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80074ca:	89fb      	ldrh	r3, [r7, #14]
 80074cc:	09db      	lsrs	r3, r3, #7
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00e      	beq.n	80074f4 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80074d6:	89fb      	ldrh	r3, [r7, #14]
 80074d8:	0a1b      	lsrs	r3, r3, #8
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80074e2:	2101      	movs	r1, #1
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f012 fa6f 	bl	80199c8 <HAL_SUBGHZ_CADStatusCallback>
 80074ea:	e003      	b.n	80074f4 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80074ec:	2100      	movs	r1, #0
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f012 fa6a 	bl	80199c8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80074f4:	89fb      	ldrh	r3, [r7, #14]
 80074f6:	0a5b      	lsrs	r3, r3, #9
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f012 fa7f 	bl	8019a04 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007506:	f107 020c 	add.w	r2, r7, #12
 800750a:	2302      	movs	r3, #2
 800750c:	2102      	movs	r1, #2
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fe28 	bl	8007164 <HAL_SUBGHZ_ExecSetCmd>
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007524:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <SUBGHZSPI_Init+0x3c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a0b      	ldr	r2, [pc, #44]	; (8007558 <SUBGHZSPI_Init+0x3c>)
 800752a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800752e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007530:	4a09      	ldr	r2, [pc, #36]	; (8007558 <SUBGHZSPI_Init+0x3c>)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007538:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <SUBGHZSPI_Init+0x3c>)
 800753c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007540:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007542:	4b05      	ldr	r3, [pc, #20]	; (8007558 <SUBGHZSPI_Init+0x3c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a04      	ldr	r2, [pc, #16]	; (8007558 <SUBGHZSPI_Init+0x3c>)
 8007548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800754c:	6013      	str	r3, [r2, #0]
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	bc80      	pop	{r7}
 8007556:	4770      	bx	lr
 8007558:	58010000 	.word	0x58010000

0800755c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800755c:	b480      	push	{r7}
 800755e:	b087      	sub	sp, #28
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800756c:	4b23      	ldr	r3, [pc, #140]	; (80075fc <SUBGHZSPI_Transmit+0xa0>)
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	4613      	mov	r3, r2
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	0cdb      	lsrs	r3, r3, #19
 800757a:	2264      	movs	r2, #100	; 0x64
 800757c:	fb02 f303 	mul.w	r3, r2, r3
 8007580:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d105      	bne.n	8007594 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	609a      	str	r2, [r3, #8]
      break;
 8007592:	e008      	b.n	80075a6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3b01      	subs	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800759a:	4b19      	ldr	r3, [pc, #100]	; (8007600 <SUBGHZSPI_Transmit+0xa4>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d1ed      	bne.n	8007582 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80075a6:	4b17      	ldr	r3, [pc, #92]	; (8007604 <SUBGHZSPI_Transmit+0xa8>)
 80075a8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80075b0:	4b12      	ldr	r3, [pc, #72]	; (80075fc <SUBGHZSPI_Transmit+0xa0>)
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	4613      	mov	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	1a9b      	subs	r3, r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	0cdb      	lsrs	r3, r3, #19
 80075be:	2264      	movs	r2, #100	; 0x64
 80075c0:	fb02 f303 	mul.w	r3, r2, r3
 80075c4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d105      	bne.n	80075d8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	609a      	str	r2, [r3, #8]
      break;
 80075d6:	e008      	b.n	80075ea <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3b01      	subs	r3, #1
 80075dc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80075de:	4b08      	ldr	r3, [pc, #32]	; (8007600 <SUBGHZSPI_Transmit+0xa4>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d1ed      	bne.n	80075c6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <SUBGHZSPI_Transmit+0xa4>)
 80075ec:	68db      	ldr	r3, [r3, #12]

  return status;
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bc80      	pop	{r7}
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	20000000 	.word	0x20000000
 8007600:	58010000 	.word	0x58010000
 8007604:	5801000c 	.word	0x5801000c

08007608 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007616:	4b25      	ldr	r3, [pc, #148]	; (80076ac <SUBGHZSPI_Receive+0xa4>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	4613      	mov	r3, r2
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	1a9b      	subs	r3, r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	0cdb      	lsrs	r3, r3, #19
 8007624:	2264      	movs	r2, #100	; 0x64
 8007626:	fb02 f303 	mul.w	r3, r2, r3
 800762a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	609a      	str	r2, [r3, #8]
      break;
 800763c:	e008      	b.n	8007650 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3b01      	subs	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007644:	4b1a      	ldr	r3, [pc, #104]	; (80076b0 <SUBGHZSPI_Receive+0xa8>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b02      	cmp	r3, #2
 800764e:	d1ed      	bne.n	800762c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007650:	4b18      	ldr	r3, [pc, #96]	; (80076b4 <SUBGHZSPI_Receive+0xac>)
 8007652:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	22ff      	movs	r2, #255	; 0xff
 8007658:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800765a:	4b14      	ldr	r3, [pc, #80]	; (80076ac <SUBGHZSPI_Receive+0xa4>)
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	4613      	mov	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	1a9b      	subs	r3, r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	0cdb      	lsrs	r3, r3, #19
 8007668:	2264      	movs	r2, #100	; 0x64
 800766a:	fb02 f303 	mul.w	r3, r2, r3
 800766e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d105      	bne.n	8007682 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	609a      	str	r2, [r3, #8]
      break;
 8007680:	e008      	b.n	8007694 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3b01      	subs	r3, #1
 8007686:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007688:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <SUBGHZSPI_Receive+0xa8>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b01      	cmp	r3, #1
 8007692:	d1ed      	bne.n	8007670 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007694:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <SUBGHZSPI_Receive+0xa8>)
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	b2da      	uxtb	r2, r3
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	701a      	strb	r2, [r3, #0]

  return status;
 800769e:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20000000 	.word	0x20000000
 80076b0:	58010000 	.word	0x58010000
 80076b4:	5801000c 	.word	0x5801000c

080076b8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	791b      	ldrb	r3, [r3, #4]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d111      	bne.n	80076ec <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80076c8:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <SUBGHZ_CheckDeviceReady+0x44>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4613      	mov	r3, r2
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	4413      	add	r3, r2
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	0c1b      	lsrs	r3, r3, #16
 80076d6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80076d8:	f7ff fbb0 	bl	8006e3c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3b01      	subs	r3, #1
 80076e0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1f9      	bne.n	80076dc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076e8:	f7ff fb98 	bl	8006e1c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f807 	bl	8007700 <SUBGHZ_WaitOnBusy>
 80076f2:	4603      	mov	r3, r0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000000 	.word	0x20000000

08007700 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800770c:	4b12      	ldr	r3, [pc, #72]	; (8007758 <SUBGHZ_WaitOnBusy+0x58>)
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	4613      	mov	r3, r2
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	4413      	add	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	0d1b      	lsrs	r3, r3, #20
 800771a:	2264      	movs	r2, #100	; 0x64
 800771c:	fb02 f303 	mul.w	r3, r2, r3
 8007720:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007722:	f7ff fbb9 	bl	8006e98 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007726:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d105      	bne.n	800773a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	609a      	str	r2, [r3, #8]
      break;
 8007738:	e009      	b.n	800774e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3b01      	subs	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007740:	f7ff fb98 	bl	8006e74 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	4013      	ands	r3, r2
 800774a:	2b01      	cmp	r3, #1
 800774c:	d0e9      	beq.n	8007722 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800774e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	20000000 	.word	0x20000000

0800775c <LL_RCC_GetUSARTClockSource>:
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007768:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	401a      	ands	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	041b      	lsls	r3, r3, #16
 8007774:	4313      	orrs	r3, r2
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr

08007780 <LL_RCC_GetLPUARTClockSource>:
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800778c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4013      	ands	r3, r2
}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	bc80      	pop	{r7}
 800779c:	4770      	bx	lr

0800779e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e042      	b.n	8007836 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fa fea8 	bl	8002518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2224      	movs	r2, #36	; 0x24
 80077cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0201 	bic.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fc4b 	bl	800807c <UART_SetConfig>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d101      	bne.n	80077f0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e022      	b.n	8007836 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 feb3 	bl	8008564 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800780c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800781c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f042 0201 	orr.w	r2, r2, #1
 800782c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 ff39 	bl	80086a6 <UART_CheckIdleState>
 8007834:	4603      	mov	r3, r0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
	...

08007840 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08a      	sub	sp, #40	; 0x28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007854:	2b20      	cmp	r3, #32
 8007856:	d142      	bne.n	80078de <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <HAL_UART_Receive_IT+0x24>
 800785e:	88fb      	ldrh	r3, [r7, #6]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e03b      	b.n	80078e0 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800786e:	2b01      	cmp	r3, #1
 8007870:	d101      	bne.n	8007876 <HAL_UART_Receive_IT+0x36>
 8007872:	2302      	movs	r3, #2
 8007874:	e034      	b.n	80078e0 <HAL_UART_Receive_IT+0xa0>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a17      	ldr	r2, [pc, #92]	; (80078e8 <HAL_UART_Receive_IT+0xa8>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d01f      	beq.n	80078ce <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d018      	beq.n	80078ce <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	613b      	str	r3, [r7, #16]
   return(result);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	623b      	str	r3, [r7, #32]
 80078bc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	69f9      	ldr	r1, [r7, #28]
 80078c0:	6a3a      	ldr	r2, [r7, #32]
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e6      	bne.n	800789c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80078ce:	88fb      	ldrh	r3, [r7, #6]
 80078d0:	461a      	mov	r2, r3
 80078d2:	68b9      	ldr	r1, [r7, #8]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 fff9 	bl	80088cc <UART_Start_Receive_IT>
 80078da:	4603      	mov	r3, r0
 80078dc:	e000      	b.n	80078e0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80078de:	2302      	movs	r3, #2
  }
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3728      	adds	r7, #40	; 0x28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	40008000 	.word	0x40008000

080078ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	; 0x28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007900:	2b20      	cmp	r3, #32
 8007902:	d17a      	bne.n	80079fa <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <HAL_UART_Transmit_DMA+0x24>
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e073      	b.n	80079fc <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_UART_Transmit_DMA+0x36>
 800791e:	2302      	movs	r3, #2
 8007920:	e06c      	b.n	80079fc <HAL_UART_Transmit_DMA+0x110>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	88fa      	ldrh	r2, [r7, #6]
 8007934:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2221      	movs	r2, #33	; 0x21
 800794c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007954:	2b00      	cmp	r3, #0
 8007956:	d02c      	beq.n	80079b2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800795c:	4a29      	ldr	r2, [pc, #164]	; (8007a04 <HAL_UART_Transmit_DMA+0x118>)
 800795e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007964:	4a28      	ldr	r2, [pc, #160]	; (8007a08 <HAL_UART_Transmit_DMA+0x11c>)
 8007966:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800796c:	4a27      	ldr	r2, [pc, #156]	; (8007a0c <HAL_UART_Transmit_DMA+0x120>)
 800796e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007974:	2200      	movs	r2, #0
 8007976:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007980:	4619      	mov	r1, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3328      	adds	r3, #40	; 0x28
 8007988:	461a      	mov	r2, r3
 800798a:	88fb      	ldrh	r3, [r7, #6]
 800798c:	f7fc fba0 	bl	80040d0 <HAL_DMA_Start_IT>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00d      	beq.n	80079b2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2210      	movs	r2, #16
 800799a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e024      	b.n	80079fc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2240      	movs	r2, #64	; 0x40
 80079b8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3308      	adds	r3, #8
 80079c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	613b      	str	r3, [r7, #16]
   return(result);
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3308      	adds	r3, #8
 80079e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e2:	623a      	str	r2, [r7, #32]
 80079e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	69f9      	ldr	r1, [r7, #28]
 80079e8:	6a3a      	ldr	r2, [r7, #32]
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e5      	bne.n	80079c2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e000      	b.n	80079fc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80079fa:	2302      	movs	r3, #2
  }
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3728      	adds	r7, #40	; 0x28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	08008c67 	.word	0x08008c67
 8007a08:	08008d01 	.word	0x08008d01
 8007a0c:	08008d1d 	.word	0x08008d1d

08007a10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b0ba      	sub	sp, #232	; 0xe8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a3e:	4013      	ands	r3, r2
 8007a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d11b      	bne.n	8007a84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d015      	beq.n	8007a84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a5c:	f003 0320 	and.w	r3, r3, #32
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d105      	bne.n	8007a70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 82d6 	beq.w	8008026 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
      }
      return;
 8007a82:	e2d0      	b.n	8008026 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 811f 	beq.w	8007ccc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a92:	4b8b      	ldr	r3, [pc, #556]	; (8007cc0 <HAL_UART_IRQHandler+0x2b0>)
 8007a94:	4013      	ands	r3, r2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d106      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a9e:	4b89      	ldr	r3, [pc, #548]	; (8007cc4 <HAL_UART_IRQHandler+0x2b4>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 8112 	beq.w	8007ccc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d011      	beq.n	8007ad8 <HAL_UART_IRQHandler+0xc8>
 8007ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ace:	f043 0201 	orr.w	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d011      	beq.n	8007b08 <HAL_UART_IRQHandler+0xf8>
 8007ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2202      	movs	r2, #2
 8007af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007afe:	f043 0204 	orr.w	r2, r3, #4
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d011      	beq.n	8007b38 <HAL_UART_IRQHandler+0x128>
 8007b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2204      	movs	r2, #4
 8007b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b2e:	f043 0202 	orr.w	r2, r3, #2
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d017      	beq.n	8007b74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b48:	f003 0320 	and.w	r3, r3, #32
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b54:	4b5a      	ldr	r3, [pc, #360]	; (8007cc0 <HAL_UART_IRQHandler+0x2b0>)
 8007b56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00b      	beq.n	8007b74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2208      	movs	r2, #8
 8007b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b6a:	f043 0208 	orr.w	r2, r3, #8
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d012      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x196>
 8007b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00c      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b9c:	f043 0220 	orr.w	r2, r3, #32
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 823c 	beq.w	800802a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d013      	beq.n	8007be6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bc2:	f003 0320 	and.w	r3, r3, #32
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfa:	2b40      	cmp	r3, #64	; 0x40
 8007bfc:	d005      	beq.n	8007c0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d04f      	beq.n	8007caa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 ffc6 	bl	8008b9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1a:	2b40      	cmp	r3, #64	; 0x40
 8007c1c:	d141      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3308      	adds	r3, #8
 8007c46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1d9      	bne.n	8007c1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d013      	beq.n	8007c9a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c76:	4a14      	ldr	r2, [pc, #80]	; (8007cc8 <HAL_UART_IRQHandler+0x2b8>)
 8007c78:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fc fb02 	bl	8004288 <HAL_DMA_Abort_IT>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d017      	beq.n	8007cba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007c94:	4610      	mov	r0, r2
 8007c96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c98:	e00f      	b.n	8007cba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f9d9 	bl	8008052 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca0:	e00b      	b.n	8007cba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f9d5 	bl	8008052 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca8:	e007      	b.n	8007cba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f9d1 	bl	8008052 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007cb8:	e1b7      	b.n	800802a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cba:	bf00      	nop
    return;
 8007cbc:	e1b5      	b.n	800802a <HAL_UART_IRQHandler+0x61a>
 8007cbe:	bf00      	nop
 8007cc0:	10000001 	.word	0x10000001
 8007cc4:	04000120 	.word	0x04000120
 8007cc8:	08008d9d 	.word	0x08008d9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	f040 814a 	bne.w	8007f6a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 8143 	beq.w	8007f6a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce8:	f003 0310 	and.w	r3, r3, #16
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 813c 	beq.w	8007f6a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2210      	movs	r2, #16
 8007cf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d04:	2b40      	cmp	r3, #64	; 0x40
 8007d06:	f040 80b5 	bne.w	8007e74 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007d16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 8187 	beq.w	800802e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	f080 817f 	bcs.w	800802e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f040 8086 	bne.w	8007e58 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d58:	e853 3f00 	ldrex	r3, [r3]
 8007d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d7a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d86:	e841 2300 	strex	r3, r2, [r1]
 8007d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1da      	bne.n	8007d4c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3308      	adds	r3, #8
 8007db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e1      	bne.n	8007d96 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007df6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007df8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007dfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e3      	bne.n	8007dd2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e28:	f023 0310 	bic.w	r3, r3, #16
 8007e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e42:	e841 2300 	strex	r3, r2, [r1]
 8007e46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1e4      	bne.n	8007e18 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fc f9ba 	bl	80041cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f8f9 	bl	8008064 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007e72:	e0dc      	b.n	800802e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 80ce 	beq.w	8008032 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007e96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 80c9 	beq.w	8008032 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ec4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e4      	bne.n	8007ea0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3308      	adds	r3, #8
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eec:	f023 0301 	bic.w	r3, r3, #1
 8007ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3308      	adds	r3, #8
 8007efa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007efe:	633a      	str	r2, [r7, #48]	; 0x30
 8007f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1e1      	bne.n	8007ed6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2220      	movs	r2, #32
 8007f16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	e853 3f00 	ldrex	r3, [r3]
 8007f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0310 	bic.w	r3, r3, #16
 8007f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f48:	61fb      	str	r3, [r7, #28]
 8007f4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	69b9      	ldr	r1, [r7, #24]
 8007f4e:	69fa      	ldr	r2, [r7, #28]
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	617b      	str	r3, [r7, #20]
   return(result);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e4      	bne.n	8007f26 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f87e 	bl	8008064 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007f68:	e063      	b.n	8008032 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00e      	beq.n	8007f94 <HAL_UART_IRQHandler+0x584>
 8007f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d008      	beq.n	8007f94 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 fba3 	bl	80096d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f92:	e051      	b.n	8008038 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d014      	beq.n	8007fca <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d105      	bne.n	8007fb8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d03a      	beq.n	8008036 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	4798      	blx	r3
    }
    return;
 8007fc8:	e035      	b.n	8008036 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d009      	beq.n	8007fea <HAL_UART_IRQHandler+0x5da>
 8007fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fef0 	bl	8008dc8 <UART_EndTransmit_IT>
    return;
 8007fe8:	e026      	b.n	8008038 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <HAL_UART_IRQHandler+0x5fa>
 8007ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ffa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 fb7a 	bl	80096fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008008:	e016      	b.n	8008038 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800800a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d010      	beq.n	8008038 <HAL_UART_IRQHandler+0x628>
 8008016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800801a:	2b00      	cmp	r3, #0
 800801c:	da0c      	bge.n	8008038 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 fb63 	bl	80096ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008024:	e008      	b.n	8008038 <HAL_UART_IRQHandler+0x628>
      return;
 8008026:	bf00      	nop
 8008028:	e006      	b.n	8008038 <HAL_UART_IRQHandler+0x628>
    return;
 800802a:	bf00      	nop
 800802c:	e004      	b.n	8008038 <HAL_UART_IRQHandler+0x628>
      return;
 800802e:	bf00      	nop
 8008030:	e002      	b.n	8008038 <HAL_UART_IRQHandler+0x628>
      return;
 8008032:	bf00      	nop
 8008034:	e000      	b.n	8008038 <HAL_UART_IRQHandler+0x628>
    return;
 8008036:	bf00      	nop
  }
}
 8008038:	37e8      	adds	r7, #232	; 0xe8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop

08008040 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	bc80      	pop	{r7}
 8008050:	4770      	bx	lr

08008052 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800805a:	bf00      	nop
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	bc80      	pop	{r7}
 8008062:	4770      	bx	lr

08008064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	bc80      	pop	{r7}
 8008078:	4770      	bx	lr
	...

0800807c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800807c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008080:	b08c      	sub	sp, #48	; 0x30
 8008082:	af00      	add	r7, sp, #0
 8008084:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	431a      	orrs	r2, r3
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	431a      	orrs	r2, r3
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4b94      	ldr	r3, [pc, #592]	; (80082fc <UART_SetConfig+0x280>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080b4:	430b      	orrs	r3, r1
 80080b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a89      	ldr	r2, [pc, #548]	; (8008300 <UART_SetConfig+0x284>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d004      	beq.n	80080e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e4:	4313      	orrs	r3, r2
 80080e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80080f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	6812      	ldr	r2, [r2, #0]
 80080fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080fc:	430b      	orrs	r3, r1
 80080fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008106:	f023 010f 	bic.w	r1, r3, #15
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a7a      	ldr	r2, [pc, #488]	; (8008304 <UART_SetConfig+0x288>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d127      	bne.n	8008170 <UART_SetConfig+0xf4>
 8008120:	2003      	movs	r0, #3
 8008122:	f7ff fb1b 	bl	800775c <LL_RCC_GetUSARTClockSource>
 8008126:	4603      	mov	r3, r0
 8008128:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800812c:	2b03      	cmp	r3, #3
 800812e:	d81b      	bhi.n	8008168 <UART_SetConfig+0xec>
 8008130:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <UART_SetConfig+0xbc>)
 8008132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008136:	bf00      	nop
 8008138:	08008149 	.word	0x08008149
 800813c:	08008159 	.word	0x08008159
 8008140:	08008151 	.word	0x08008151
 8008144:	08008161 	.word	0x08008161
 8008148:	2301      	movs	r3, #1
 800814a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800814e:	e080      	b.n	8008252 <UART_SetConfig+0x1d6>
 8008150:	2302      	movs	r3, #2
 8008152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008156:	e07c      	b.n	8008252 <UART_SetConfig+0x1d6>
 8008158:	2304      	movs	r3, #4
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800815e:	e078      	b.n	8008252 <UART_SetConfig+0x1d6>
 8008160:	2308      	movs	r3, #8
 8008162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008166:	e074      	b.n	8008252 <UART_SetConfig+0x1d6>
 8008168:	2310      	movs	r3, #16
 800816a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800816e:	e070      	b.n	8008252 <UART_SetConfig+0x1d6>
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a64      	ldr	r2, [pc, #400]	; (8008308 <UART_SetConfig+0x28c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d138      	bne.n	80081ec <UART_SetConfig+0x170>
 800817a:	200c      	movs	r0, #12
 800817c:	f7ff faee 	bl	800775c <LL_RCC_GetUSARTClockSource>
 8008180:	4603      	mov	r3, r0
 8008182:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008186:	2b0c      	cmp	r3, #12
 8008188:	d82c      	bhi.n	80081e4 <UART_SetConfig+0x168>
 800818a:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <UART_SetConfig+0x114>)
 800818c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008190:	080081c5 	.word	0x080081c5
 8008194:	080081e5 	.word	0x080081e5
 8008198:	080081e5 	.word	0x080081e5
 800819c:	080081e5 	.word	0x080081e5
 80081a0:	080081d5 	.word	0x080081d5
 80081a4:	080081e5 	.word	0x080081e5
 80081a8:	080081e5 	.word	0x080081e5
 80081ac:	080081e5 	.word	0x080081e5
 80081b0:	080081cd 	.word	0x080081cd
 80081b4:	080081e5 	.word	0x080081e5
 80081b8:	080081e5 	.word	0x080081e5
 80081bc:	080081e5 	.word	0x080081e5
 80081c0:	080081dd 	.word	0x080081dd
 80081c4:	2300      	movs	r3, #0
 80081c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ca:	e042      	b.n	8008252 <UART_SetConfig+0x1d6>
 80081cc:	2302      	movs	r3, #2
 80081ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081d2:	e03e      	b.n	8008252 <UART_SetConfig+0x1d6>
 80081d4:	2304      	movs	r3, #4
 80081d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081da:	e03a      	b.n	8008252 <UART_SetConfig+0x1d6>
 80081dc:	2308      	movs	r3, #8
 80081de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e2:	e036      	b.n	8008252 <UART_SetConfig+0x1d6>
 80081e4:	2310      	movs	r3, #16
 80081e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ea:	e032      	b.n	8008252 <UART_SetConfig+0x1d6>
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a43      	ldr	r2, [pc, #268]	; (8008300 <UART_SetConfig+0x284>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d12a      	bne.n	800824c <UART_SetConfig+0x1d0>
 80081f6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80081fa:	f7ff fac1 	bl	8007780 <LL_RCC_GetLPUARTClockSource>
 80081fe:	4603      	mov	r3, r0
 8008200:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008204:	d01a      	beq.n	800823c <UART_SetConfig+0x1c0>
 8008206:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800820a:	d81b      	bhi.n	8008244 <UART_SetConfig+0x1c8>
 800820c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008210:	d00c      	beq.n	800822c <UART_SetConfig+0x1b0>
 8008212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008216:	d815      	bhi.n	8008244 <UART_SetConfig+0x1c8>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <UART_SetConfig+0x1a8>
 800821c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008220:	d008      	beq.n	8008234 <UART_SetConfig+0x1b8>
 8008222:	e00f      	b.n	8008244 <UART_SetConfig+0x1c8>
 8008224:	2300      	movs	r3, #0
 8008226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800822a:	e012      	b.n	8008252 <UART_SetConfig+0x1d6>
 800822c:	2302      	movs	r3, #2
 800822e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008232:	e00e      	b.n	8008252 <UART_SetConfig+0x1d6>
 8008234:	2304      	movs	r3, #4
 8008236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823a:	e00a      	b.n	8008252 <UART_SetConfig+0x1d6>
 800823c:	2308      	movs	r3, #8
 800823e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008242:	e006      	b.n	8008252 <UART_SetConfig+0x1d6>
 8008244:	2310      	movs	r3, #16
 8008246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824a:	e002      	b.n	8008252 <UART_SetConfig+0x1d6>
 800824c:	2310      	movs	r3, #16
 800824e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a2a      	ldr	r2, [pc, #168]	; (8008300 <UART_SetConfig+0x284>)
 8008258:	4293      	cmp	r3, r2
 800825a:	f040 80a4 	bne.w	80083a6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800825e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008262:	2b08      	cmp	r3, #8
 8008264:	d823      	bhi.n	80082ae <UART_SetConfig+0x232>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <UART_SetConfig+0x1f0>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008291 	.word	0x08008291
 8008270:	080082af 	.word	0x080082af
 8008274:	08008299 	.word	0x08008299
 8008278:	080082af 	.word	0x080082af
 800827c:	0800829f 	.word	0x0800829f
 8008280:	080082af 	.word	0x080082af
 8008284:	080082af 	.word	0x080082af
 8008288:	080082af 	.word	0x080082af
 800828c:	080082a7 	.word	0x080082a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008290:	f7fd ff48 	bl	8006124 <HAL_RCC_GetPCLK1Freq>
 8008294:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008296:	e010      	b.n	80082ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008298:	4b1c      	ldr	r3, [pc, #112]	; (800830c <UART_SetConfig+0x290>)
 800829a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800829c:	e00d      	b.n	80082ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800829e:	f7fd fe8d 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 80082a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082a4:	e009      	b.n	80082ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082ac:	e005      	b.n	80082ba <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8137 	beq.w	8008530 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	4a12      	ldr	r2, [pc, #72]	; (8008310 <UART_SetConfig+0x294>)
 80082c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082cc:	461a      	mov	r2, r3
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80082d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	4413      	add	r3, r2
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d305      	bcc.n	80082f2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d910      	bls.n	8008314 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082f8:	e11a      	b.n	8008530 <UART_SetConfig+0x4b4>
 80082fa:	bf00      	nop
 80082fc:	cfff69f3 	.word	0xcfff69f3
 8008300:	40008000 	.word	0x40008000
 8008304:	40013800 	.word	0x40013800
 8008308:	40004400 	.word	0x40004400
 800830c:	00f42400 	.word	0x00f42400
 8008310:	0801c03c 	.word	0x0801c03c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	2200      	movs	r2, #0
 8008318:	60bb      	str	r3, [r7, #8]
 800831a:	60fa      	str	r2, [r7, #12]
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	4a8e      	ldr	r2, [pc, #568]	; (800855c <UART_SetConfig+0x4e0>)
 8008322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008326:	b29b      	uxth	r3, r3
 8008328:	2200      	movs	r2, #0
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	607a      	str	r2, [r7, #4]
 800832e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008336:	f7f8 fc37 	bl	8000ba8 <__aeabi_uldivmod>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4610      	mov	r0, r2
 8008340:	4619      	mov	r1, r3
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	f04f 0300 	mov.w	r3, #0
 800834a:	020b      	lsls	r3, r1, #8
 800834c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008350:	0202      	lsls	r2, r0, #8
 8008352:	6979      	ldr	r1, [r7, #20]
 8008354:	6849      	ldr	r1, [r1, #4]
 8008356:	0849      	lsrs	r1, r1, #1
 8008358:	2000      	movs	r0, #0
 800835a:	460c      	mov	r4, r1
 800835c:	4605      	mov	r5, r0
 800835e:	eb12 0804 	adds.w	r8, r2, r4
 8008362:	eb43 0905 	adc.w	r9, r3, r5
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	469a      	mov	sl, r3
 800836e:	4693      	mov	fp, r2
 8008370:	4652      	mov	r2, sl
 8008372:	465b      	mov	r3, fp
 8008374:	4640      	mov	r0, r8
 8008376:	4649      	mov	r1, r9
 8008378:	f7f8 fc16 	bl	8000ba8 <__aeabi_uldivmod>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4613      	mov	r3, r2
 8008382:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800838a:	d308      	bcc.n	800839e <UART_SetConfig+0x322>
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008392:	d204      	bcs.n	800839e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6a3a      	ldr	r2, [r7, #32]
 800839a:	60da      	str	r2, [r3, #12]
 800839c:	e0c8      	b.n	8008530 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083a4:	e0c4      	b.n	8008530 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ae:	d168      	bne.n	8008482 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80083b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d828      	bhi.n	800840a <UART_SetConfig+0x38e>
 80083b8:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <UART_SetConfig+0x344>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	080083e5 	.word	0x080083e5
 80083c4:	080083ed 	.word	0x080083ed
 80083c8:	080083f5 	.word	0x080083f5
 80083cc:	0800840b 	.word	0x0800840b
 80083d0:	080083fb 	.word	0x080083fb
 80083d4:	0800840b 	.word	0x0800840b
 80083d8:	0800840b 	.word	0x0800840b
 80083dc:	0800840b 	.word	0x0800840b
 80083e0:	08008403 	.word	0x08008403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083e4:	f7fd fe9e 	bl	8006124 <HAL_RCC_GetPCLK1Freq>
 80083e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083ea:	e014      	b.n	8008416 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083ec:	f7fd feac 	bl	8006148 <HAL_RCC_GetPCLK2Freq>
 80083f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083f2:	e010      	b.n	8008416 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083f4:	4b5a      	ldr	r3, [pc, #360]	; (8008560 <UART_SetConfig+0x4e4>)
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083f8:	e00d      	b.n	8008416 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083fa:	f7fd fddf 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 80083fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008400:	e009      	b.n	8008416 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008406:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008408:	e005      	b.n	8008416 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008414:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 8089 	beq.w	8008530 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	4a4e      	ldr	r2, [pc, #312]	; (800855c <UART_SetConfig+0x4e0>)
 8008424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008428:	461a      	mov	r2, r3
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008430:	005a      	lsls	r2, r3, #1
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	085b      	lsrs	r3, r3, #1
 8008438:	441a      	add	r2, r3
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008442:	b29b      	uxth	r3, r3
 8008444:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	2b0f      	cmp	r3, #15
 800844a:	d916      	bls.n	800847a <UART_SetConfig+0x3fe>
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008452:	d212      	bcs.n	800847a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	b29b      	uxth	r3, r3
 8008458:	f023 030f 	bic.w	r3, r3, #15
 800845c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	085b      	lsrs	r3, r3, #1
 8008462:	b29b      	uxth	r3, r3
 8008464:	f003 0307 	and.w	r3, r3, #7
 8008468:	b29a      	uxth	r2, r3
 800846a:	8bfb      	ldrh	r3, [r7, #30]
 800846c:	4313      	orrs	r3, r2
 800846e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	8bfa      	ldrh	r2, [r7, #30]
 8008476:	60da      	str	r2, [r3, #12]
 8008478:	e05a      	b.n	8008530 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008480:	e056      	b.n	8008530 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008482:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008486:	2b08      	cmp	r3, #8
 8008488:	d827      	bhi.n	80084da <UART_SetConfig+0x45e>
 800848a:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <UART_SetConfig+0x414>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084b5 	.word	0x080084b5
 8008494:	080084bd 	.word	0x080084bd
 8008498:	080084c5 	.word	0x080084c5
 800849c:	080084db 	.word	0x080084db
 80084a0:	080084cb 	.word	0x080084cb
 80084a4:	080084db 	.word	0x080084db
 80084a8:	080084db 	.word	0x080084db
 80084ac:	080084db 	.word	0x080084db
 80084b0:	080084d3 	.word	0x080084d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084b4:	f7fd fe36 	bl	8006124 <HAL_RCC_GetPCLK1Freq>
 80084b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084ba:	e014      	b.n	80084e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084bc:	f7fd fe44 	bl	8006148 <HAL_RCC_GetPCLK2Freq>
 80084c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084c2:	e010      	b.n	80084e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084c4:	4b26      	ldr	r3, [pc, #152]	; (8008560 <UART_SetConfig+0x4e4>)
 80084c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084c8:	e00d      	b.n	80084e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ca:	f7fd fd77 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 80084ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084d0:	e009      	b.n	80084e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084d8:	e005      	b.n	80084e6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80084da:	2300      	movs	r3, #0
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084e4:	bf00      	nop
    }

    if (pclk != 0U)
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d021      	beq.n	8008530 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	4a1a      	ldr	r2, [pc, #104]	; (800855c <UART_SetConfig+0x4e0>)
 80084f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	085b      	lsrs	r3, r3, #1
 8008504:	441a      	add	r2, r3
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	fbb2 f3f3 	udiv	r3, r2, r3
 800850e:	b29b      	uxth	r3, r3
 8008510:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	2b0f      	cmp	r3, #15
 8008516:	d908      	bls.n	800852a <UART_SetConfig+0x4ae>
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800851e:	d204      	bcs.n	800852a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6a3a      	ldr	r2, [r7, #32]
 8008526:	60da      	str	r2, [r3, #12]
 8008528:	e002      	b.n	8008530 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2201      	movs	r2, #1
 8008534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2201      	movs	r2, #1
 800853c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2200      	movs	r2, #0
 8008544:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2200      	movs	r2, #0
 800854a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800854c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008550:	4618      	mov	r0, r3
 8008552:	3730      	adds	r7, #48	; 0x30
 8008554:	46bd      	mov	sp, r7
 8008556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800855a:	bf00      	nop
 800855c:	0801c03c 	.word	0x0801c03c
 8008560:	00f42400 	.word	0x00f42400

08008564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00a      	beq.n	800858e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d01a      	beq.n	800867a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008662:	d10a      	bne.n	800867a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	605a      	str	r2, [r3, #4]
  }
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr

080086a6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b086      	sub	sp, #24
 80086aa:	af02      	add	r7, sp, #8
 80086ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086b6:	f7f9 fbb3 	bl	8001e20 <HAL_GetTick>
 80086ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0308 	and.w	r3, r3, #8
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	d10e      	bne.n	80086e8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f82f 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e025      	b.n	8008734 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0304 	and.w	r3, r3, #4
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d10e      	bne.n	8008714 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f819 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e00f      	b.n	8008734 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2220      	movs	r2, #32
 8008718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2220      	movs	r2, #32
 8008720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b09c      	sub	sp, #112	; 0x70
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	4613      	mov	r3, r2
 800874a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800874c:	e0a9      	b.n	80088a2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800874e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008754:	f000 80a5 	beq.w	80088a2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008758:	f7f9 fb62 	bl	8001e20 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008764:	429a      	cmp	r2, r3
 8008766:	d302      	bcc.n	800876e <UART_WaitOnFlagUntilTimeout+0x32>
 8008768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800876a:	2b00      	cmp	r3, #0
 800876c:	d140      	bne.n	80087f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800877c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800877e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008782:	667b      	str	r3, [r7, #100]	; 0x64
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
 800878a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800878c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800878e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008792:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800879a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e6      	bne.n	800876e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3308      	adds	r3, #8
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	f023 0301 	bic.w	r3, r3, #1
 80087b6:	663b      	str	r3, [r7, #96]	; 0x60
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3308      	adds	r3, #8
 80087be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80087c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e5      	bne.n	80087a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2220      	movs	r2, #32
 80087e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e069      	b.n	80088c4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0304 	and.w	r3, r3, #4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d051      	beq.n	80088a2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800880c:	d149      	bne.n	80088a2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008816:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	e853 3f00 	ldrex	r3, [r3]
 8008824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800882c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008836:	637b      	str	r3, [r7, #52]	; 0x34
 8008838:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800883c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800883e:	e841 2300 	strex	r3, r2, [r1]
 8008842:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1e6      	bne.n	8008818 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3308      	adds	r3, #8
 8008850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	613b      	str	r3, [r7, #16]
   return(result);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f023 0301 	bic.w	r3, r3, #1
 8008860:	66bb      	str	r3, [r7, #104]	; 0x68
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3308      	adds	r3, #8
 8008868:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800886a:	623a      	str	r2, [r7, #32]
 800886c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	69f9      	ldr	r1, [r7, #28]
 8008870:	6a3a      	ldr	r2, [r7, #32]
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	61bb      	str	r3, [r7, #24]
   return(result);
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e5      	bne.n	800884a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2220      	movs	r2, #32
 8008882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2220      	movs	r2, #32
 800888a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2220      	movs	r2, #32
 8008892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e010      	b.n	80088c4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69da      	ldr	r2, [r3, #28]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4013      	ands	r3, r2
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	bf0c      	ite	eq
 80088b2:	2301      	moveq	r3, #1
 80088b4:	2300      	movne	r3, #0
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	461a      	mov	r2, r3
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	429a      	cmp	r2, r3
 80088be:	f43f af46 	beq.w	800874e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3770      	adds	r7, #112	; 0x70
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b0a3      	sub	sp, #140	; 0x8c
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	88fa      	ldrh	r2, [r7, #6]
 80088ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fe:	d10e      	bne.n	800891e <UART_Start_Receive_IT+0x52>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d105      	bne.n	8008914 <UART_Start_Receive_IT+0x48>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800890e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008912:	e02d      	b.n	8008970 <UART_Start_Receive_IT+0xa4>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	22ff      	movs	r2, #255	; 0xff
 8008918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800891c:	e028      	b.n	8008970 <UART_Start_Receive_IT+0xa4>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10d      	bne.n	8008942 <UART_Start_Receive_IT+0x76>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d104      	bne.n	8008938 <UART_Start_Receive_IT+0x6c>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	22ff      	movs	r2, #255	; 0xff
 8008932:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008936:	e01b      	b.n	8008970 <UART_Start_Receive_IT+0xa4>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	227f      	movs	r2, #127	; 0x7f
 800893c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008940:	e016      	b.n	8008970 <UART_Start_Receive_IT+0xa4>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800894a:	d10d      	bne.n	8008968 <UART_Start_Receive_IT+0x9c>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d104      	bne.n	800895e <UART_Start_Receive_IT+0x92>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	227f      	movs	r2, #127	; 0x7f
 8008958:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800895c:	e008      	b.n	8008970 <UART_Start_Receive_IT+0xa4>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	223f      	movs	r2, #63	; 0x3f
 8008962:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008966:	e003      	b.n	8008970 <UART_Start_Receive_IT+0xa4>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2222      	movs	r2, #34	; 0x22
 800897c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3308      	adds	r3, #8
 8008986:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008990:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008992:	f043 0301 	orr.w	r3, r3, #1
 8008996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3308      	adds	r3, #8
 80089a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80089a4:	673a      	str	r2, [r7, #112]	; 0x70
 80089a6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80089aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80089b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e3      	bne.n	8008980 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089c0:	d153      	bne.n	8008a6a <UART_Start_Receive_IT+0x19e>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089c8:	88fa      	ldrh	r2, [r7, #6]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d34d      	bcc.n	8008a6a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d6:	d107      	bne.n	80089e8 <UART_Start_Receive_IT+0x11c>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d103      	bne.n	80089e8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4a4a      	ldr	r2, [pc, #296]	; (8008b0c <UART_Start_Receive_IT+0x240>)
 80089e4:	671a      	str	r2, [r3, #112]	; 0x70
 80089e6:	e002      	b.n	80089ee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4a49      	ldr	r2, [pc, #292]	; (8008b10 <UART_Start_Receive_IT+0x244>)
 80089ec:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d01a      	beq.n	8008a34 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a22:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a28:	e841 2300 	strex	r3, r2, [r1]
 8008a2c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1e4      	bne.n	80089fe <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3308      	adds	r3, #8
 8008a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3308      	adds	r3, #8
 8008a52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008a54:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a56:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e5      	bne.n	8008a34 <UART_Start_Receive_IT+0x168>
 8008a68:	e04a      	b.n	8008b00 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a72:	d107      	bne.n	8008a84 <UART_Start_Receive_IT+0x1b8>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d103      	bne.n	8008a84 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4a25      	ldr	r2, [pc, #148]	; (8008b14 <UART_Start_Receive_IT+0x248>)
 8008a80:	671a      	str	r2, [r3, #112]	; 0x70
 8008a82:	e002      	b.n	8008a8a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4a24      	ldr	r2, [pc, #144]	; (8008b18 <UART_Start_Receive_IT+0x24c>)
 8008a88:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d019      	beq.n	8008ace <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	e853 3f00 	ldrex	r3, [r3]
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008aae:	677b      	str	r3, [r7, #116]	; 0x74
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ac0:	e841 2300 	strex	r3, r2, [r1]
 8008ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e6      	bne.n	8008a9a <UART_Start_Receive_IT+0x1ce>
 8008acc:	e018      	b.n	8008b00 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	613b      	str	r3, [r7, #16]
   return(result);
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f043 0320 	orr.w	r3, r3, #32
 8008ae2:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aec:	623b      	str	r3, [r7, #32]
 8008aee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af0:	69f9      	ldr	r1, [r7, #28]
 8008af2:	6a3a      	ldr	r2, [r7, #32]
 8008af4:	e841 2300 	strex	r3, r2, [r1]
 8008af8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1e6      	bne.n	8008ace <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	378c      	adds	r7, #140	; 0x8c
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bc80      	pop	{r7}
 8008b0a:	4770      	bx	lr
 8008b0c:	080093d9 	.word	0x080093d9
 8008b10:	080090e1 	.word	0x080090e1
 8008b14:	08008f7f 	.word	0x08008f7f
 8008b18:	08008e1f 	.word	0x08008e1f

08008b1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b08f      	sub	sp, #60	; 0x3c
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	e853 3f00 	ldrex	r3, [r3]
 8008b30:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b38:	637b      	str	r3, [r7, #52]	; 0x34
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b44:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b4a:	e841 2300 	strex	r3, r2, [r1]
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1e6      	bne.n	8008b24 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	e853 3f00 	ldrex	r3, [r3]
 8008b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3308      	adds	r3, #8
 8008b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b76:	61ba      	str	r2, [r7, #24]
 8008b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	6979      	ldr	r1, [r7, #20]
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	e841 2300 	strex	r3, r2, [r1]
 8008b82:	613b      	str	r3, [r7, #16]
   return(result);
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1e5      	bne.n	8008b56 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008b92:	bf00      	nop
 8008b94:	373c      	adds	r7, #60	; 0x3c
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr

08008b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b095      	sub	sp, #84	; 0x54
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc2:	643b      	str	r3, [r7, #64]	; 0x40
 8008bc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e6      	bne.n	8008ba4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bec:	f023 0301 	bic.w	r3, r3, #1
 8008bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e3      	bne.n	8008bd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d118      	bne.n	8008c48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	f023 0310 	bic.w	r3, r3, #16
 8008c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c34:	61bb      	str	r3, [r7, #24]
 8008c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6979      	ldr	r1, [r7, #20]
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	613b      	str	r3, [r7, #16]
   return(result);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e6      	bne.n	8008c16 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008c5c:	bf00      	nop
 8008c5e:	3754      	adds	r7, #84	; 0x54
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bc80      	pop	{r7}
 8008c64:	4770      	bx	lr

08008c66 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b090      	sub	sp, #64	; 0x40
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0320 	and.w	r3, r3, #32
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d137      	bne.n	8008cf2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c84:	2200      	movs	r2, #0
 8008c86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3308      	adds	r3, #8
 8008c90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	e853 3f00 	ldrex	r3, [r3]
 8008c98:	623b      	str	r3, [r7, #32]
   return(result);
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ca0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3308      	adds	r3, #8
 8008ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008caa:	633a      	str	r2, [r7, #48]	; 0x30
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cb2:	e841 2300 	strex	r3, r2, [r1]
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1e5      	bne.n	8008c8a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	e853 3f00 	ldrex	r3, [r3]
 8008cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cdc:	61fb      	str	r3, [r7, #28]
 8008cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce0:	69b9      	ldr	r1, [r7, #24]
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	e841 2300 	strex	r3, r2, [r1]
 8008ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e6      	bne.n	8008cbe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cf0:	e002      	b.n	8008cf8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008cf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008cf4:	f7f9 fd7c 	bl	80027f0 <HAL_UART_TxCpltCallback>
}
 8008cf8:	bf00      	nop
 8008cfa:	3740      	adds	r7, #64	; 0x40
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f7ff f996 	bl	8008040 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d14:	bf00      	nop
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d44:	2b80      	cmp	r3, #128	; 0x80
 8008d46:	d109      	bne.n	8008d5c <UART_DMAError+0x40>
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	2b21      	cmp	r3, #33	; 0x21
 8008d4c:	d106      	bne.n	8008d5c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008d56:	6978      	ldr	r0, [r7, #20]
 8008d58:	f7ff fee0 	bl	8008b1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d66:	2b40      	cmp	r3, #64	; 0x40
 8008d68:	d109      	bne.n	8008d7e <UART_DMAError+0x62>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b22      	cmp	r3, #34	; 0x22
 8008d6e:	d106      	bne.n	8008d7e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008d78:	6978      	ldr	r0, [r7, #20]
 8008d7a:	f7ff ff0f 	bl	8008b9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d84:	f043 0210 	orr.w	r2, r3, #16
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d8e:	6978      	ldr	r0, [r7, #20]
 8008d90:	f7ff f95f 	bl	8008052 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d94:	bf00      	nop
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f7ff f949 	bl	8008052 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de4:	61fb      	str	r3, [r7, #28]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	61bb      	str	r3, [r7, #24]
 8008df0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	6979      	ldr	r1, [r7, #20]
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	e841 2300 	strex	r3, r2, [r1]
 8008dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e6      	bne.n	8008dd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7f9 fced 	bl	80027f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e16:	bf00      	nop
 8008e18:	3720      	adds	r7, #32
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b096      	sub	sp, #88	; 0x58
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e36:	2b22      	cmp	r3, #34	; 0x22
 8008e38:	f040 8095 	bne.w	8008f66 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e46:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008e4a:	b2d9      	uxtb	r1, r3
 8008e4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e56:	400a      	ands	r2, r1
 8008e58:	b2d2      	uxtb	r2, r2
 8008e5a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d178      	bne.n	8008f76 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e98:	653b      	str	r3, [r7, #80]	; 0x50
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ea4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e6      	bne.n	8008e84 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ed6:	633a      	str	r2, [r7, #48]	; 0x30
 8008ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e5      	bne.n	8008eb6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2220      	movs	r2, #32
 8008eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d12e      	bne.n	8008f5e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	e853 3f00 	ldrex	r3, [r3]
 8008f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f023 0310 	bic.w	r3, r3, #16
 8008f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f24:	61fb      	str	r3, [r7, #28]
 8008f26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f28:	69b9      	ldr	r1, [r7, #24]
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	e841 2300 	strex	r3, r2, [r1]
 8008f30:	617b      	str	r3, [r7, #20]
   return(result);
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e6      	bne.n	8008f06 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	f003 0310 	and.w	r3, r3, #16
 8008f42:	2b10      	cmp	r3, #16
 8008f44:	d103      	bne.n	8008f4e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2210      	movs	r2, #16
 8008f4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff f884 	bl	8008064 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f5c:	e00b      	b.n	8008f76 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7f9 fc5c 	bl	800281c <HAL_UART_RxCpltCallback>
}
 8008f64:	e007      	b.n	8008f76 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699a      	ldr	r2, [r3, #24]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f042 0208 	orr.w	r2, r2, #8
 8008f74:	619a      	str	r2, [r3, #24]
}
 8008f76:	bf00      	nop
 8008f78:	3758      	adds	r7, #88	; 0x58
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b096      	sub	sp, #88	; 0x58
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f96:	2b22      	cmp	r3, #34	; 0x22
 8008f98:	f040 8095 	bne.w	80090c6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008faa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008fb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc0:	1c9a      	adds	r2, r3, #2
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d178      	bne.n	80090d6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009002:	643b      	str	r3, [r7, #64]	; 0x40
 8009004:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e6      	bne.n	8008fe4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	61fb      	str	r3, [r7, #28]
   return(result);
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	64bb      	str	r3, [r7, #72]	; 0x48
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3308      	adds	r3, #8
 8009034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009038:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800903c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e5      	bne.n	8009016 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2220      	movs	r2, #32
 800904e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800905c:	2b01      	cmp	r3, #1
 800905e:	d12e      	bne.n	80090be <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	e853 3f00 	ldrex	r3, [r3]
 8009072:	60bb      	str	r3, [r7, #8]
   return(result);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f023 0310 	bic.w	r3, r3, #16
 800907a:	647b      	str	r3, [r7, #68]	; 0x44
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	461a      	mov	r2, r3
 8009082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009084:	61bb      	str	r3, [r7, #24]
 8009086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	6979      	ldr	r1, [r7, #20]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	e841 2300 	strex	r3, r2, [r1]
 8009090:	613b      	str	r3, [r7, #16]
   return(result);
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e6      	bne.n	8009066 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	f003 0310 	and.w	r3, r3, #16
 80090a2:	2b10      	cmp	r3, #16
 80090a4:	d103      	bne.n	80090ae <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2210      	movs	r2, #16
 80090ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7fe ffd4 	bl	8008064 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090bc:	e00b      	b.n	80090d6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7f9 fbac 	bl	800281c <HAL_UART_RxCpltCallback>
}
 80090c4:	e007      	b.n	80090d6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	699a      	ldr	r2, [r3, #24]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f042 0208 	orr.w	r2, r2, #8
 80090d4:	619a      	str	r2, [r3, #24]
}
 80090d6:	bf00      	nop
 80090d8:	3758      	adds	r7, #88	; 0x58
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b0a6      	sub	sp, #152	; 0x98
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090ee:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009116:	2b22      	cmp	r3, #34	; 0x22
 8009118:	f040 814f 	bne.w	80093ba <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009122:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009126:	e0f6      	b.n	8009316 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009132:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009136:	b2d9      	uxtb	r1, r3
 8009138:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800913c:	b2da      	uxtb	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009142:	400a      	ands	r2, r1
 8009144:	b2d2      	uxtb	r2, r2
 8009146:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009158:	b29b      	uxth	r3, r3
 800915a:	3b01      	subs	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	69db      	ldr	r3, [r3, #28]
 800916a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800916e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	2b00      	cmp	r3, #0
 8009178:	d053      	beq.n	8009222 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800917a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b00      	cmp	r3, #0
 8009184:	d011      	beq.n	80091aa <UART_RxISR_8BIT_FIFOEN+0xca>
 8009186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800918a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00b      	beq.n	80091aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2201      	movs	r2, #1
 8009198:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a0:	f043 0201 	orr.w	r2, r3, #1
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d011      	beq.n	80091da <UART_RxISR_8BIT_FIFOEN+0xfa>
 80091b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00b      	beq.n	80091da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2202      	movs	r2, #2
 80091c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091d0:	f043 0204 	orr.w	r2, r3, #4
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091de:	f003 0304 	and.w	r3, r3, #4
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d011      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80091e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2204      	movs	r2, #4
 80091f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009200:	f043 0202 	orr.w	r2, r3, #2
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d006      	beq.n	8009222 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7fe ff1c 	bl	8008052 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009228:	b29b      	uxth	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d173      	bne.n	8009316 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009236:	e853 3f00 	ldrex	r3, [r3]
 800923a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800923c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800923e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009242:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009250:	66bb      	str	r3, [r7, #104]	; 0x68
 8009252:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009256:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800925e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e4      	bne.n	800922e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3308      	adds	r3, #8
 800926a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800927a:	f023 0301 	bic.w	r3, r3, #1
 800927e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3308      	adds	r3, #8
 8009286:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009288:	657a      	str	r2, [r7, #84]	; 0x54
 800928a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800928e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009290:	e841 2300 	strex	r3, r2, [r1]
 8009294:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e3      	bne.n	8009264 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2220      	movs	r2, #32
 80092a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d12e      	bne.n	8009310 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c8:	f023 0310 	bic.w	r3, r3, #16
 80092cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092d6:	643b      	str	r3, [r7, #64]	; 0x40
 80092d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092de:	e841 2300 	strex	r3, r2, [r1]
 80092e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1e6      	bne.n	80092b8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	f003 0310 	and.w	r3, r3, #16
 80092f4:	2b10      	cmp	r3, #16
 80092f6:	d103      	bne.n	8009300 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2210      	movs	r2, #16
 80092fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7fe feab 	bl	8008064 <HAL_UARTEx_RxEventCallback>
 800930e:	e002      	b.n	8009316 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7f9 fa83 	bl	800281c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009316:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800931a:	2b00      	cmp	r3, #0
 800931c:	d006      	beq.n	800932c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800931e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	f47f aefe 	bne.w	8009128 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009332:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009336:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800933a:	2b00      	cmp	r3, #0
 800933c:	d045      	beq.n	80093ca <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009344:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009348:	429a      	cmp	r2, r3
 800934a:	d23e      	bcs.n	80093ca <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3308      	adds	r3, #8
 8009352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	61fb      	str	r3, [r7, #28]
   return(result);
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009362:	673b      	str	r3, [r7, #112]	; 0x70
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800936c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800936e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e5      	bne.n	800934c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a14      	ldr	r2, [pc, #80]	; (80093d4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009384:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	60bb      	str	r3, [r7, #8]
   return(result);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f043 0320 	orr.w	r3, r3, #32
 800939a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	461a      	mov	r2, r3
 80093a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a4:	61bb      	str	r3, [r7, #24]
 80093a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	6979      	ldr	r1, [r7, #20]
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	613b      	str	r3, [r7, #16]
   return(result);
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e6      	bne.n	8009386 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093b8:	e007      	b.n	80093ca <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	699a      	ldr	r2, [r3, #24]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 0208 	orr.w	r2, r2, #8
 80093c8:	619a      	str	r2, [r3, #24]
}
 80093ca:	bf00      	nop
 80093cc:	3798      	adds	r7, #152	; 0x98
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	08008e1f 	.word	0x08008e1f

080093d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b0a8      	sub	sp, #160	; 0xa0
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093e6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800940e:	2b22      	cmp	r3, #34	; 0x22
 8009410:	f040 8153 	bne.w	80096ba <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800941a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800941e:	e0fa      	b.n	8009616 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800942e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009432:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009436:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800943a:	4013      	ands	r3, r2
 800943c:	b29a      	uxth	r2, r3
 800943e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009442:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009448:	1c9a      	adds	r2, r3, #2
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009454:	b29b      	uxth	r3, r3
 8009456:	3b01      	subs	r3, #1
 8009458:	b29a      	uxth	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800946a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800946e:	f003 0307 	and.w	r3, r3, #7
 8009472:	2b00      	cmp	r3, #0
 8009474:	d053      	beq.n	800951e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009476:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	d011      	beq.n	80094a6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009482:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00b      	beq.n	80094a6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2201      	movs	r2, #1
 8009494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800949c:	f043 0201 	orr.w	r2, r3, #1
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d011      	beq.n	80094d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80094b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00b      	beq.n	80094d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2202      	movs	r2, #2
 80094c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094cc:	f043 0204 	orr.w	r2, r3, #4
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094da:	f003 0304 	and.w	r3, r3, #4
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d011      	beq.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80094e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2204      	movs	r2, #4
 80094f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094fc:	f043 0202 	orr.w	r2, r3, #2
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800950c:	2b00      	cmp	r3, #0
 800950e:	d006      	beq.n	800951e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7fe fd9e 	bl	8008052 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009524:	b29b      	uxth	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	d175      	bne.n	8009616 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800953a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800953e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800954c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800954e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009552:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800955a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e4      	bne.n	800952a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3308      	adds	r3, #8
 8009566:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009576:	f023 0301 	bic.w	r3, r3, #1
 800957a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3308      	adds	r3, #8
 8009584:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009588:	65ba      	str	r2, [r7, #88]	; 0x58
 800958a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800958e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e1      	bne.n	8009560 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d12e      	bne.n	8009610 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c0:	e853 3f00 	ldrex	r3, [r3]
 80095c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c8:	f023 0310 	bic.w	r3, r3, #16
 80095cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095d6:	647b      	str	r3, [r7, #68]	; 0x44
 80095d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e6      	bne.n	80095b8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	f003 0310 	and.w	r3, r3, #16
 80095f4:	2b10      	cmp	r3, #16
 80095f6:	d103      	bne.n	8009600 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2210      	movs	r2, #16
 80095fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7fe fd2b 	bl	8008064 <HAL_UARTEx_RxEventCallback>
 800960e:	e002      	b.n	8009616 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7f9 f903 	bl	800281c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009616:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800961a:	2b00      	cmp	r3, #0
 800961c:	d006      	beq.n	800962c <UART_RxISR_16BIT_FIFOEN+0x254>
 800961e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b00      	cmp	r3, #0
 8009628:	f47f aefa 	bne.w	8009420 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009632:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009636:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800963a:	2b00      	cmp	r3, #0
 800963c:	d045      	beq.n	80096ca <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009644:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009648:	429a      	cmp	r2, r3
 800964a:	d23e      	bcs.n	80096ca <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3308      	adds	r3, #8
 8009652:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	e853 3f00 	ldrex	r3, [r3]
 800965a:	623b      	str	r3, [r7, #32]
   return(result);
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009662:	677b      	str	r3, [r7, #116]	; 0x74
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3308      	adds	r3, #8
 800966a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800966c:	633a      	str	r2, [r7, #48]	; 0x30
 800966e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009674:	e841 2300 	strex	r3, r2, [r1]
 8009678:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e5      	bne.n	800964c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a14      	ldr	r2, [pc, #80]	; (80096d4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009684:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	60fb      	str	r3, [r7, #12]
   return(result);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f043 0320 	orr.w	r3, r3, #32
 800969a:	673b      	str	r3, [r7, #112]	; 0x70
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	461a      	mov	r2, r3
 80096a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096a4:	61fb      	str	r3, [r7, #28]
 80096a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	69b9      	ldr	r1, [r7, #24]
 80096aa:	69fa      	ldr	r2, [r7, #28]
 80096ac:	e841 2300 	strex	r3, r2, [r1]
 80096b0:	617b      	str	r3, [r7, #20]
   return(result);
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e6      	bne.n	8009686 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096b8:	e007      	b.n	80096ca <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	699a      	ldr	r2, [r3, #24]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f042 0208 	orr.w	r2, r2, #8
 80096c8:	619a      	str	r2, [r3, #24]
}
 80096ca:	bf00      	nop
 80096cc:	37a0      	adds	r7, #160	; 0xa0
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	08008f7f 	.word	0x08008f7f

080096d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bc80      	pop	{r7}
 80096e8:	4770      	bx	lr

080096ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bc80      	pop	{r7}
 80096fa:	4770      	bx	lr

080096fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	bc80      	pop	{r7}
 800970c:	4770      	bx	lr

0800970e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b088      	sub	sp, #32
 8009712:	af02      	add	r7, sp, #8
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	1d3b      	adds	r3, r7, #4
 8009718:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009726:	2b01      	cmp	r3, #1
 8009728:	d101      	bne.n	800972e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800972a:	2302      	movs	r3, #2
 800972c:	e046      	b.n	80097bc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2224      	movs	r2, #36	; 0x24
 800973a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f022 0201 	bic.w	r2, r2, #1
 800974c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d105      	bne.n	8009774 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009768:	1d3b      	adds	r3, r7, #4
 800976a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 f911 	bl	8009996 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f042 0201 	orr.w	r2, r2, #1
 8009782:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009784:	f7f8 fb4c 	bl	8001e20 <HAL_GetTick>
 8009788:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800978a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2200      	movs	r2, #0
 8009794:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7fe ffcf 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	75fb      	strb	r3, [r7, #23]
 80097a8:	e003      	b.n	80097b2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b089      	sub	sp, #36	; 0x24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <HAL_UARTEx_EnableStopMode+0x16>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e021      	b.n	800981e <HAL_UARTEx_EnableStopMode+0x5a>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f043 0302 	orr.w	r3, r3, #2
 80097f6:	61fb      	str	r3, [r7, #28]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	461a      	mov	r2, r3
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	61bb      	str	r3, [r7, #24]
 8009802:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	6979      	ldr	r1, [r7, #20]
 8009806:	69ba      	ldr	r2, [r7, #24]
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	613b      	str	r3, [r7, #16]
   return(result);
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e6      	bne.n	80097e2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3724      	adds	r7, #36	; 0x24
 8009822:	46bd      	mov	sp, r7
 8009824:	bc80      	pop	{r7}
 8009826:	4770      	bx	lr

08009828 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009836:	2b01      	cmp	r3, #1
 8009838:	d101      	bne.n	800983e <HAL_UARTEx_EnableFifoMode+0x16>
 800983a:	2302      	movs	r3, #2
 800983c:	e02b      	b.n	8009896 <HAL_UARTEx_EnableFifoMode+0x6e>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2224      	movs	r2, #36	; 0x24
 800984a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0201 	bic.w	r2, r2, #1
 8009864:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800986c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009874:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f8ac 	bl	80099dc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d101      	bne.n	80098b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098b2:	2302      	movs	r3, #2
 80098b4:	e02d      	b.n	8009912 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2224      	movs	r2, #36	; 0x24
 80098c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 0201 	bic.w	r2, r2, #1
 80098dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f872 	bl	80099dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2220      	movs	r2, #32
 8009904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800992a:	2b01      	cmp	r3, #1
 800992c:	d101      	bne.n	8009932 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800992e:	2302      	movs	r3, #2
 8009930:	e02d      	b.n	800998e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2224      	movs	r2, #36	; 0x24
 800993e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f022 0201 	bic.w	r2, r2, #1
 8009958:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	430a      	orrs	r2, r1
 800996c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f834 	bl	80099dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2220      	movs	r2, #32
 8009980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009996:	b480      	push	{r7}
 8009998:	b085      	sub	sp, #20
 800999a:	af00      	add	r7, sp, #0
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	1d3b      	adds	r3, r7, #4
 80099a0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f023 0210 	bic.w	r2, r3, #16
 80099ae:	893b      	ldrh	r3, [r7, #8]
 80099b0:	4619      	mov	r1, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80099c4:	7abb      	ldrb	r3, [r7, #10]
 80099c6:	061a      	lsls	r2, r3, #24
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	430a      	orrs	r2, r1
 80099ce:	605a      	str	r2, [r3, #4]
}
 80099d0:	bf00      	nop
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bc80      	pop	{r7}
 80099d8:	4770      	bx	lr
	...

080099dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d108      	bne.n	80099fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099fc:	e031      	b.n	8009a62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099fe:	2308      	movs	r3, #8
 8009a00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a02:	2308      	movs	r3, #8
 8009a04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	0e5b      	lsrs	r3, r3, #25
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	f003 0307 	and.w	r3, r3, #7
 8009a14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	0f5b      	lsrs	r3, r3, #29
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	7b3a      	ldrb	r2, [r7, #12]
 8009a2a:	4910      	ldr	r1, [pc, #64]	; (8009a6c <UARTEx_SetNbDataToProcess+0x90>)
 8009a2c:	5c8a      	ldrb	r2, [r1, r2]
 8009a2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a32:	7b3a      	ldrb	r2, [r7, #12]
 8009a34:	490e      	ldr	r1, [pc, #56]	; (8009a70 <UARTEx_SetNbDataToProcess+0x94>)
 8009a36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a38:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	7b7a      	ldrb	r2, [r7, #13]
 8009a48:	4908      	ldr	r1, [pc, #32]	; (8009a6c <UARTEx_SetNbDataToProcess+0x90>)
 8009a4a:	5c8a      	ldrb	r2, [r1, r2]
 8009a4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a50:	7b7a      	ldrb	r2, [r7, #13]
 8009a52:	4907      	ldr	r1, [pc, #28]	; (8009a70 <UARTEx_SetNbDataToProcess+0x94>)
 8009a54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a56:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a62:	bf00      	nop
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bc80      	pop	{r7}
 8009a6a:	4770      	bx	lr
 8009a6c:	0801c054 	.word	0x0801c054
 8009a70:	0801c05c 	.word	0x0801c05c

08009a74 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009a78:	f7f8 f856 	bl	8001b28 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009a7c:	f000 f9ae 	bl	8009ddc <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009a80:	bf00      	nop
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a8c:	f010 fde6 	bl	801a65c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009a90:	bf00      	nop
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ad4 <DWT_Delay_us+0x40>)
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8009aa2:	f7fc fb2b 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	4a0b      	ldr	r2, [pc, #44]	; (8009ad8 <DWT_Delay_us+0x44>)
 8009aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8009aae:	0c9b      	lsrs	r3, r3, #18
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	fb02 f303 	mul.w	r3, r2, r3
 8009ab6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8009ab8:	bf00      	nop
 8009aba:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <DWT_Delay_us+0x40>)
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	1ad2      	subs	r2, r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d3f8      	bcc.n	8009aba <DWT_Delay_us+0x26>
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	e0001000 	.word	0xe0001000
 8009ad8:	431bde83 	.word	0x431bde83

08009adc <Set_Pin_Output>:
 */

#include "ds18b20.h"

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ae8:	f107 030c 	add.w	r3, r7, #12
 8009aec:	2200      	movs	r2, #0
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	605a      	str	r2, [r3, #4]
 8009af2:	609a      	str	r2, [r3, #8]
 8009af4:	60da      	str	r2, [r3, #12]
 8009af6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8009af8:	887b      	ldrh	r3, [r7, #2]
 8009afa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009afc:	2301      	movs	r3, #1
 8009afe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8009b04:	f107 030c 	add.w	r3, r7, #12
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7fa ffee 	bl	8004aec <HAL_GPIO_Init>
}
 8009b10:	bf00      	nop
 8009b12:	3720      	adds	r7, #32
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b24:	f107 030c 	add.w	r3, r7, #12
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	605a      	str	r2, [r3, #4]
 8009b2e:	609a      	str	r2, [r3, #8]
 8009b30:	60da      	str	r2, [r3, #12]
 8009b32:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8009b34:	887b      	ldrh	r3, [r7, #2]
 8009b36:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8009b40:	f107 030c 	add.w	r3, r7, #12
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7fa ffd0 	bl	8004aec <HAL_GPIO_Init>
}
 8009b4c:	bf00      	nop
 8009b4e:	3720      	adds	r7, #32
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <DS18B20_Write>:



void DS18B20_Write (uint8_t data)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8009b5e:	2104      	movs	r1, #4
 8009b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b64:	f7ff ffba 	bl	8009adc <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	e034      	b.n	8009bd8 <DS18B20_Write+0x84>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8009b6e:	79fa      	ldrb	r2, [r7, #7]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	fa42 f303 	asr.w	r3, r2, r3
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d016      	beq.n	8009bac <DS18B20_Write+0x58>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8009b7e:	2104      	movs	r1, #4
 8009b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b84:	f7ff ffaa 	bl	8009adc <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2104      	movs	r1, #4
 8009b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b90:	f7fb f9f1 	bl	8004f76 <HAL_GPIO_WritePin>
			DWT_Delay_us (1);  // wait for 1 us
 8009b94:	2001      	movs	r0, #1
 8009b96:	f7ff ff7d 	bl	8009a94 <DWT_Delay_us>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8009b9a:	2104      	movs	r1, #4
 8009b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ba0:	f7ff ffba 	bl	8009b18 <Set_Pin_Input>
			DWT_Delay_us (50);  // wait for 60 us
 8009ba4:	2032      	movs	r0, #50	; 0x32
 8009ba6:	f7ff ff75 	bl	8009a94 <DWT_Delay_us>
 8009baa:	e012      	b.n	8009bd2 <DS18B20_Write+0x7e>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8009bac:	2104      	movs	r1, #4
 8009bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bb2:	f7ff ff93 	bl	8009adc <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2104      	movs	r1, #4
 8009bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bbe:	f7fb f9da 	bl	8004f76 <HAL_GPIO_WritePin>
			DWT_Delay_us (50);  // wait for 60 us
 8009bc2:	2032      	movs	r0, #50	; 0x32
 8009bc4:	f7ff ff66 	bl	8009a94 <DWT_Delay_us>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8009bc8:	2104      	movs	r1, #4
 8009bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bce:	f7ff ffa3 	bl	8009b18 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b07      	cmp	r3, #7
 8009bdc:	ddc7      	ble.n	8009b6e <DS18B20_Write+0x1a>
		}
	}
}
 8009bde:	bf00      	nop
 8009be0:	bf00      	nop
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8009bf2:	2104      	movs	r1, #4
 8009bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bf8:	f7ff ff8e 	bl	8009b18 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	e02a      	b.n	8009c58 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8009c02:	2104      	movs	r1, #4
 8009c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c08:	f7ff ff68 	bl	8009adc <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	2104      	movs	r1, #4
 8009c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c14:	f7fb f9af 	bl	8004f76 <HAL_GPIO_WritePin>
		DWT_Delay_us (1);  // wait for > 1us
 8009c18:	2001      	movs	r0, #1
 8009c1a:	f7ff ff3b 	bl	8009a94 <DWT_Delay_us>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8009c1e:	2104      	movs	r1, #4
 8009c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c24:	f7ff ff78 	bl	8009b18 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8009c28:	2104      	movs	r1, #4
 8009c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c2e:	f7fb f98b 	bl	8004f48 <HAL_GPIO_ReadPin>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d009      	beq.n	8009c4c <DS18B20_Read+0x64>
		{
			value |= 1<<i;  // read = 1
 8009c38:	2201      	movs	r2, #1
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c40:	b25a      	sxtb	r2, r3
 8009c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	b25b      	sxtb	r3, r3
 8009c4a:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (50);  // wait for 60 us
 8009c4c:	2032      	movs	r0, #50	; 0x32
 8009c4e:	f7ff ff21 	bl	8009a94 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	3301      	adds	r3, #1
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b07      	cmp	r3, #7
 8009c5c:	ddd1      	ble.n	8009c02 <DS18B20_Read+0x1a>
	}
	return value;
 8009c5e:	79fb      	ldrb	r3, [r7, #7]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8009c72:	2104      	movs	r1, #4
 8009c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c78:	f7ff ff30 	bl	8009adc <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2104      	movs	r1, #4
 8009c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c84:	f7fb f977 	bl	8004f76 <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 8009c88:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8009c8c:	f7ff ff02 	bl	8009a94 <DWT_Delay_us>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8009c90:	2104      	movs	r1, #4
 8009c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c96:	f7ff ff3f 	bl	8009b18 <Set_Pin_Input>
	DWT_Delay_us (80);    // delay according to datasheet
 8009c9a:	2050      	movs	r0, #80	; 0x50
 8009c9c:	f7ff fefa 	bl	8009a94 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8009ca0:	2104      	movs	r1, #4
 8009ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ca6:	f7fb f94f 	bl	8004f48 <HAL_GPIO_ReadPin>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d102      	bne.n	8009cb6 <DS18B20_Start+0x4e>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	71fb      	strb	r3, [r7, #7]
 8009cb4:	e001      	b.n	8009cba <DS18B20_Start+0x52>
	else Response = -1;
 8009cb6:	23ff      	movs	r3, #255	; 0xff
 8009cb8:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (400); // 480 us delay totally.
 8009cba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009cbe:	f7ff fee9 	bl	8009a94 <DWT_Delay_us>

	return Response;
 8009cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <DS18B20_GetTemperature>:

float DS18B20_GetTemperature(){
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
	uint8_t Temp_byte1, Temp_byte2;
	uint16_t TEMP;

	float Temperature = 0;
 8009cd2:	f04f 0300 	mov.w	r3, #0
 8009cd6:	607b      	str	r3, [r7, #4]

	DS18B20_Start();
 8009cd8:	f7ff ffc6 	bl	8009c68 <DS18B20_Start>
	HAL_Delay (1);
 8009cdc:	2001      	movs	r0, #1
 8009cde:	f7f8 f8b3 	bl	8001e48 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 8009ce2:	20cc      	movs	r0, #204	; 0xcc
 8009ce4:	f7ff ff36 	bl	8009b54 <DS18B20_Write>
	DS18B20_Write (0x44);  // convert t
 8009ce8:	2044      	movs	r0, #68	; 0x44
 8009cea:	f7ff ff33 	bl	8009b54 <DS18B20_Write>
	HAL_Delay (800);
 8009cee:	f44f 7048 	mov.w	r0, #800	; 0x320
 8009cf2:	f7f8 f8a9 	bl	8001e48 <HAL_Delay>

	DS18B20_Start();
 8009cf6:	f7ff ffb7 	bl	8009c68 <DS18B20_Start>
	HAL_Delay(1);
 8009cfa:	2001      	movs	r0, #1
 8009cfc:	f7f8 f8a4 	bl	8001e48 <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 8009d00:	20cc      	movs	r0, #204	; 0xcc
 8009d02:	f7ff ff27 	bl	8009b54 <DS18B20_Write>
	DS18B20_Write (0xBE);  // Read Scratch-pad
 8009d06:	20be      	movs	r0, #190	; 0xbe
 8009d08:	f7ff ff24 	bl	8009b54 <DS18B20_Write>

    Temp_byte1 = DS18B20_Read();
 8009d0c:	f7ff ff6c 	bl	8009be8 <DS18B20_Read>
 8009d10:	4603      	mov	r3, r0
 8009d12:	70fb      	strb	r3, [r7, #3]
	Temp_byte2 = DS18B20_Read();
 8009d14:	f7ff ff68 	bl	8009be8 <DS18B20_Read>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	70bb      	strb	r3, [r7, #2]
	TEMP = (Temp_byte2<<8)|Temp_byte1;
 8009d1c:	78bb      	ldrb	r3, [r7, #2]
 8009d1e:	021b      	lsls	r3, r3, #8
 8009d20:	b21a      	sxth	r2, r3
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	b21b      	sxth	r3, r3
 8009d26:	4313      	orrs	r3, r2
 8009d28:	b21b      	sxth	r3, r3
 8009d2a:	803b      	strh	r3, [r7, #0]
	Temperature = (float)TEMP/16;
 8009d2c:	883b      	ldrh	r3, [r7, #0]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7f6 fd4c 	bl	80007cc <__aeabi_ui2f>
 8009d34:	4603      	mov	r3, r0
 8009d36:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7f6 fe52 	bl	80009e4 <__aeabi_fdiv>
 8009d40:	4603      	mov	r3, r0
 8009d42:	607b      	str	r3, [r7, #4]
	return Temperature;
 8009d44:	687b      	ldr	r3, [r7, #4]

}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8009d50:	b480      	push	{r7}
 8009d52:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8009d54:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <DWT_Delay_Init+0x58>)
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	4a13      	ldr	r2, [pc, #76]	; (8009da8 <DWT_Delay_Init+0x58>)
 8009d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d5e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8009d60:	4b11      	ldr	r3, [pc, #68]	; (8009da8 <DWT_Delay_Init+0x58>)
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	4a10      	ldr	r2, [pc, #64]	; (8009da8 <DWT_Delay_Init+0x58>)
 8009d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d6a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8009d6c:	4b0f      	ldr	r3, [pc, #60]	; (8009dac <DWT_Delay_Init+0x5c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a0e      	ldr	r2, [pc, #56]	; (8009dac <DWT_Delay_Init+0x5c>)
 8009d72:	f023 0301 	bic.w	r3, r3, #1
 8009d76:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8009d78:	4b0c      	ldr	r3, [pc, #48]	; (8009dac <DWT_Delay_Init+0x5c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a0b      	ldr	r2, [pc, #44]	; (8009dac <DWT_Delay_Init+0x5c>)
 8009d7e:	f043 0301 	orr.w	r3, r3, #1
 8009d82:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8009d84:	4b09      	ldr	r3, [pc, #36]	; (8009dac <DWT_Delay_Init+0x5c>)
 8009d86:	2200      	movs	r2, #0
 8009d88:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8009d8a:	bf00      	nop
     __ASM volatile ("NOP");
 8009d8c:	bf00      	nop
  __ASM volatile ("NOP");
 8009d8e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8009d90:	4b06      	ldr	r3, [pc, #24]	; (8009dac <DWT_Delay_Init+0x5c>)
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8009d98:	2300      	movs	r3, #0
 8009d9a:	e000      	b.n	8009d9e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8009d9c:	2301      	movs	r3, #1
  }
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bc80      	pop	{r7}
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	e000edf0 	.word	0xe000edf0
 8009dac:	e0001000 	.word	0xe0001000

08009db0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009db0:	b480      	push	{r7}
 8009db2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009db4:	f3bf 8f4f 	dsb	sy
}
 8009db8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009dba:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <__NVIC_SystemReset+0x24>)
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009dc2:	4904      	ldr	r1, [pc, #16]	; (8009dd4 <__NVIC_SystemReset+0x24>)
 8009dc4:	4b04      	ldr	r3, [pc, #16]	; (8009dd8 <__NVIC_SystemReset+0x28>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009dca:	f3bf 8f4f 	dsb	sy
}
 8009dce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009dd0:	bf00      	nop
 8009dd2:	e7fd      	b.n	8009dd0 <__NVIC_SystemReset+0x20>
 8009dd4:	e000ed00 	.word	0xe000ed00
 8009dd8:	05fa0004 	.word	0x05fa0004

08009ddc <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8009de6:	2300      	movs	r3, #0
 8009de8:	9302      	str	r3, [sp, #8]
 8009dea:	2302      	movs	r3, #2
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	2301      	movs	r3, #1
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	4b5a      	ldr	r3, [pc, #360]	; (8009f5c <LoRaWAN_Init+0x180>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	2100      	movs	r1, #0
 8009df8:	2002      	movs	r0, #2
 8009dfa:	f011 f87d 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9302      	str	r3, [sp, #8]
 8009e02:	2304      	movs	r3, #4
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	2302      	movs	r3, #2
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	4b55      	ldr	r3, [pc, #340]	; (8009f60 <LoRaWAN_Init+0x184>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2100      	movs	r1, #0
 8009e10:	2002      	movs	r0, #2
 8009e12:	f011 f871 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8009e16:	2300      	movs	r3, #0
 8009e18:	9302      	str	r3, [sp, #8]
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	2301      	movs	r3, #1
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	4b50      	ldr	r3, [pc, #320]	; (8009f64 <LoRaWAN_Init+0x188>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	2100      	movs	r1, #0
 8009e28:	2002      	movs	r0, #2
 8009e2a:	f011 f865 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8009e2e:	1d3b      	adds	r3, r7, #4
 8009e30:	4619      	mov	r1, r3
 8009e32:	2000      	movs	r0, #0
 8009e34:	f003 f8ea 	bl	800d00c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	0e1b      	lsrs	r3, r3, #24
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	0c1b      	lsrs	r3, r3, #16
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	4619      	mov	r1, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	0a1b      	lsrs	r3, r3, #8
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	9302      	str	r3, [sp, #8]
 8009e50:	9101      	str	r1, [sp, #4]
 8009e52:	9200      	str	r2, [sp, #0]
 8009e54:	4b44      	ldr	r3, [pc, #272]	; (8009f68 <LoRaWAN_Init+0x18c>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	2100      	movs	r1, #0
 8009e5a:	2002      	movs	r0, #2
 8009e5c:	f011 f84c 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8009e60:	1d3b      	adds	r3, r7, #4
 8009e62:	4619      	mov	r1, r3
 8009e64:	2001      	movs	r0, #1
 8009e66:	f003 f8d1 	bl	800d00c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	0e1b      	lsrs	r3, r3, #24
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	461a      	mov	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	0c1b      	lsrs	r3, r3, #16
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	4619      	mov	r1, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	0a1b      	lsrs	r3, r3, #8
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	b2c0      	uxtb	r0, r0
 8009e84:	9003      	str	r0, [sp, #12]
 8009e86:	9302      	str	r3, [sp, #8]
 8009e88:	9101      	str	r1, [sp, #4]
 8009e8a:	9200      	str	r2, [sp, #0]
 8009e8c:	4b37      	ldr	r3, [pc, #220]	; (8009f6c <LoRaWAN_Init+0x190>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2100      	movs	r1, #0
 8009e92:	2002      	movs	r0, #2
 8009e94:	f011 f830 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));


  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8009e98:	2300      	movs	r3, #0
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	4b34      	ldr	r3, [pc, #208]	; (8009f70 <LoRaWAN_Init+0x194>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009ea4:	4833      	ldr	r0, [pc, #204]	; (8009f74 <LoRaWAN_Init+0x198>)
 8009ea6:	f010 fd79 	bl	801a99c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8009eaa:	2300      	movs	r3, #0
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	4b32      	ldr	r3, [pc, #200]	; (8009f78 <LoRaWAN_Init+0x19c>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009eb6:	4831      	ldr	r0, [pc, #196]	; (8009f7c <LoRaWAN_Init+0x1a0>)
 8009eb8:	f010 fd70 	bl	801a99c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	4b2f      	ldr	r3, [pc, #188]	; (8009f80 <LoRaWAN_Init+0x1a4>)
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009ec8:	482e      	ldr	r0, [pc, #184]	; (8009f84 <LoRaWAN_Init+0x1a8>)
 8009eca:	f010 fd67 	bl	801a99c <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	4b2d      	ldr	r3, [pc, #180]	; (8009f88 <LoRaWAN_Init+0x1ac>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009eda:	482c      	ldr	r0, [pc, #176]	; (8009f8c <LoRaWAN_Init+0x1b0>)
 8009edc:	f010 fd5e 	bl	801a99c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009ee0:	4a2b      	ldr	r2, [pc, #172]	; (8009f90 <LoRaWAN_Init+0x1b4>)
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	f010 fcb5 	bl	801a854 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009eea:	4a2a      	ldr	r2, [pc, #168]	; (8009f94 <LoRaWAN_Init+0x1b8>)
 8009eec:	2100      	movs	r1, #0
 8009eee:	2002      	movs	r0, #2
 8009ef0:	f010 fcb0 	bl	801a854 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009ef4:	4a28      	ldr	r2, [pc, #160]	; (8009f98 <LoRaWAN_Init+0x1bc>)
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	2004      	movs	r0, #4
 8009efa:	f010 fcab 	bl	801a854 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009efe:	4a27      	ldr	r2, [pc, #156]	; (8009f9c <LoRaWAN_Init+0x1c0>)
 8009f00:	2100      	movs	r1, #0
 8009f02:	2008      	movs	r0, #8
 8009f04:	f010 fca6 	bl	801a854 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009f08:	f000 fcba 	bl	800a880 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8009f0c:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8009f10:	4823      	ldr	r0, [pc, #140]	; (8009fa0 <LoRaWAN_Init+0x1c4>)
 8009f12:	f002 f985 	bl	800c220 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009f16:	4823      	ldr	r0, [pc, #140]	; (8009fa4 <LoRaWAN_Init+0x1c8>)
 8009f18:	f002 f9ce 	bl	800c2b8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 8009f1c:	4819      	ldr	r0, [pc, #100]	; (8009f84 <LoRaWAN_Init+0x1a8>)
 8009f1e:	f010 fd73 	bl	801aa08 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 8009f22:	4b21      	ldr	r3, [pc, #132]	; (8009fa8 <LoRaWAN_Init+0x1cc>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	4a21      	ldr	r2, [pc, #132]	; (8009fac <LoRaWAN_Init+0x1d0>)
 8009f28:	7812      	ldrb	r2, [r2, #0]
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f002 fb15 	bl	800c55c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009f32:	4b1f      	ldr	r3, [pc, #124]	; (8009fb0 <LoRaWAN_Init+0x1d4>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10b      	bne.n	8009f52 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009f3a:	4b1e      	ldr	r3, [pc, #120]	; (8009fb4 <LoRaWAN_Init+0x1d8>)
 8009f3c:	6819      	ldr	r1, [r3, #0]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	4b1d      	ldr	r3, [pc, #116]	; (8009fb8 <LoRaWAN_Init+0x1dc>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	481d      	ldr	r0, [pc, #116]	; (8009fbc <LoRaWAN_Init+0x1e0>)
 8009f48:	f010 fd28 	bl	801a99c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009f4c:	481b      	ldr	r0, [pc, #108]	; (8009fbc <LoRaWAN_Init+0x1e0>)
 8009f4e:	f010 fd5b 	bl	801aa08 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009f52:	bf00      	nop
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	0801b5a0 	.word	0x0801b5a0
 8009f60:	0801b5c4 	.word	0x0801b5c4
 8009f64:	0801b5e8 	.word	0x0801b5e8
 8009f68:	0801b60c 	.word	0x0801b60c
 8009f6c:	0801b630 	.word	0x0801b630
 8009f70:	0800a371 	.word	0x0800a371
 8009f74:	2000046c 	.word	0x2000046c
 8009f78:	0800a383 	.word	0x0800a383
 8009f7c:	20000484 	.word	0x20000484
 8009f80:	0800a395 	.word	0x0800a395
 8009f84:	2000049c 	.word	0x2000049c
 8009f88:	0800a749 	.word	0x0800a749
 8009f8c:	20000360 	.word	0x20000360
 8009f90:	0800c539 	.word	0x0800c539
 8009f94:	0800a10d 	.word	0x0800a10d
 8009f98:	0800a76d 	.word	0x0800a76d
 8009f9c:	0800a6c9 	.word	0x0800a6c9
 8009fa0:	20000024 	.word	0x20000024
 8009fa4:	20000070 	.word	0x20000070
 8009fa8:	20000020 	.word	0x20000020
 8009fac:	20000021 	.word	0x20000021
 8009fb0:	20000344 	.word	0x20000344
 8009fb4:	20000084 	.word	0x20000084
 8009fb8:	0800a34d 	.word	0x0800a34d
 8009fbc:	20000348 	.word	0x20000348

08009fc0 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009fc0:	b5b0      	push	{r4, r5, r7, lr}
 8009fc2:	b08a      	sub	sp, #40	; 0x28
 8009fc4:	af06      	add	r7, sp, #24
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 8088 	beq.w	800a0e6 <OnRxData+0x126>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 8009fd6:	4846      	ldr	r0, [pc, #280]	; (800a0f0 <OnRxData+0x130>)
 8009fd8:	f010 fd16 	bl	801aa08 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d057      	beq.n	800a094 <OnRxData+0xd4>
    {
      if (appData != NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d054      	beq.n	800a094 <OnRxData+0xd4>
      {
        RxPort = appData->Port;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d04d      	beq.n	800a094 <OnRxData+0xd4>
        {
          switch (appData->Port)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d021      	beq.n	800a044 <OnRxData+0x84>
 800a000:	2b03      	cmp	r3, #3
 800a002:	d149      	bne.n	800a098 <OnRxData+0xd8>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	785b      	ldrb	r3, [r3, #1]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d117      	bne.n	800a03c <OnRxData+0x7c>
              {
                switch (appData->Buffer[0])
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d00e      	beq.n	800a034 <OnRxData+0x74>
 800a016:	2b02      	cmp	r3, #2
 800a018:	dc12      	bgt.n	800a040 <OnRxData+0x80>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <OnRxData+0x64>
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d004      	beq.n	800a02c <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800a022:	e00d      	b.n	800a040 <OnRxData+0x80>
                    LmHandlerRequestClass(CLASS_A);
 800a024:	2000      	movs	r0, #0
 800a026:	f002 fc35 	bl	800c894 <LmHandlerRequestClass>
                    break;
 800a02a:	e00a      	b.n	800a042 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_B);
 800a02c:	2001      	movs	r0, #1
 800a02e:	f002 fc31 	bl	800c894 <LmHandlerRequestClass>
                    break;
 800a032:	e006      	b.n	800a042 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_C);
 800a034:	2002      	movs	r0, #2
 800a036:	f002 fc2d 	bl	800c894 <LmHandlerRequestClass>
                    break;
 800a03a:	e002      	b.n	800a042 <OnRxData+0x82>
                }
              }
 800a03c:	bf00      	nop
 800a03e:	e02e      	b.n	800a09e <OnRxData+0xde>
                    break;
 800a040:	bf00      	nop
              break;
 800a042:	e02c      	b.n	800a09e <OnRxData+0xde>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	785b      	ldrb	r3, [r3, #1]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d127      	bne.n	800a09c <OnRxData+0xdc>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	b2da      	uxtb	r2, r3
 800a058:	4b26      	ldr	r3, [pc, #152]	; (800a0f4 <OnRxData+0x134>)
 800a05a:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800a05c:	4b25      	ldr	r3, [pc, #148]	; (800a0f4 <OnRxData+0x134>)
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10b      	bne.n	800a07c <OnRxData+0xbc>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800a064:	4b24      	ldr	r3, [pc, #144]	; (800a0f8 <OnRxData+0x138>)
 800a066:	2200      	movs	r2, #0
 800a068:	2100      	movs	r1, #0
 800a06a:	2003      	movs	r0, #3
 800a06c:	f010 ff44 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800a070:	2201      	movs	r2, #1
 800a072:	2120      	movs	r1, #32
 800a074:	4821      	ldr	r0, [pc, #132]	; (800a0fc <OnRxData+0x13c>)
 800a076:	f7fa ff7e 	bl	8004f76 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800a07a:	e00f      	b.n	800a09c <OnRxData+0xdc>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a07c:	4b20      	ldr	r3, [pc, #128]	; (800a100 <OnRxData+0x140>)
 800a07e:	2200      	movs	r2, #0
 800a080:	2100      	movs	r1, #0
 800a082:	2003      	movs	r0, #3
 800a084:	f010 ff38 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800a088:	2200      	movs	r2, #0
 800a08a:	2120      	movs	r1, #32
 800a08c:	481b      	ldr	r0, [pc, #108]	; (800a0fc <OnRxData+0x13c>)
 800a08e:	f7fa ff72 	bl	8004f76 <HAL_GPIO_WritePin>
              break;
 800a092:	e003      	b.n	800a09c <OnRxData+0xdc>

            default:

              break;
          }
        }
 800a094:	bf00      	nop
 800a096:	e002      	b.n	800a09e <OnRxData+0xde>
              break;
 800a098:	bf00      	nop
 800a09a:	e000      	b.n	800a09e <OnRxData+0xde>
              break;
 800a09c:	bf00      	nop
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	7c1b      	ldrb	r3, [r3, #16]
 800a0a2:	2b05      	cmp	r3, #5
 800a0a4:	d81f      	bhi.n	800a0e6 <OnRxData+0x126>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	7bfa      	ldrb	r2, [r7, #15]
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	7c09      	ldrb	r1, [r1, #16]
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	4912      	ldr	r1, [pc, #72]	; (800a104 <OnRxData+0x144>)
 800a0bc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a0c0:	6838      	ldr	r0, [r7, #0]
 800a0c2:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	6838      	ldr	r0, [r7, #0]
 800a0ca:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800a0ce:	9005      	str	r0, [sp, #20]
 800a0d0:	9504      	str	r5, [sp, #16]
 800a0d2:	9103      	str	r1, [sp, #12]
 800a0d4:	9402      	str	r4, [sp, #8]
 800a0d6:	9201      	str	r2, [sp, #4]
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	4b0b      	ldr	r3, [pc, #44]	; (800a108 <OnRxData+0x148>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2100      	movs	r1, #0
 800a0e0:	2003      	movs	r0, #3
 800a0e2:	f010 ff09 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a0e6:	bf00      	nop
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bdb0      	pop	{r4, r5, r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000484 	.word	0x20000484
 800a0f4:	2000046a 	.word	0x2000046a
 800a0f8:	0801b654 	.word	0x0801b654
 800a0fc:	48000400 	.word	0x48000400
 800a100:	0801b660 	.word	0x0801b660
 800a104:	20000008 	.word	0x20000008
 800a108:	0801b66c 	.word	0x0801b66c

0800a10c <SendTxData>:

static void SendTxData(void)
{
 800a10c:	b590      	push	{r4, r7, lr}
 800a10e:	b089      	sub	sp, #36	; 0x24
 800a110:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a112:	23ff      	movs	r3, #255	; 0xff
 800a114:	74fb      	strb	r3, [r7, #19]

  uint8_t  batteryLevel   = GetBatteryLevel();
 800a116:	f7f7 fd3d 	bl	8001b94 <GetBatteryLevel>
 800a11a:	4603      	mov	r3, r0
 800a11c:	74bb      	strb	r3, [r7, #18]
  uint8_t  temperature    = GetTemperatureLevel();
 800a11e:	f7f7 fd75 	bl	8001c0c <GetTemperatureLevel>
 800a122:	4603      	mov	r3, r0
 800a124:	747b      	strb	r3, [r7, #17]
  uint16_t moistureLevel1 = GetMoistureLevelDfRobot(ADC_CHANNEL_6);
 800a126:	4874      	ldr	r0, [pc, #464]	; (800a2f8 <SendTxData+0x1ec>)
 800a128:	f7f6 fff0 	bl	800110c <GetMoistureLevelDfRobot>
 800a12c:	4603      	mov	r3, r0
 800a12e:	81fb      	strh	r3, [r7, #14]
  uint16_t moistureLevel2 = GetMoistureLevel(ADC_CHANNEL_1);
 800a130:	4872      	ldr	r0, [pc, #456]	; (800a2fc <SendTxData+0x1f0>)
 800a132:	f7f7 f80d 	bl	8001150 <GetMoistureLevel>
 800a136:	4603      	mov	r3, r0
 800a138:	81bb      	strh	r3, [r7, #12]
  uint16_t moistureLevel3 = GetMoistureLevel(ADC_CHANNEL_3);
 800a13a:	4871      	ldr	r0, [pc, #452]	; (800a300 <SendTxData+0x1f4>)
 800a13c:	f7f7 f808 	bl	8001150 <GetMoistureLevel>
 800a140:	4603      	mov	r3, r0
 800a142:	817b      	strh	r3, [r7, #10]
  uint16_t moistureLevel4 = GetMoistureLevel(ADC_CHANNEL_0);
 800a144:	2001      	movs	r0, #1
 800a146:	f7f7 f803 	bl	8001150 <GetMoistureLevel>
 800a14a:	4603      	mov	r3, r0
 800a14c:	813b      	strh	r3, [r7, #8]

  APP_LOG(TS_ON, VLEVEL_M, "temperature: %d\r\n", temperature);
 800a14e:	7c7b      	ldrb	r3, [r7, #17]
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	4b6c      	ldr	r3, [pc, #432]	; (800a304 <SendTxData+0x1f8>)
 800a154:	2201      	movs	r2, #1
 800a156:	2100      	movs	r1, #0
 800a158:	2002      	movs	r0, #2
 800a15a:	f010 fecd 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "batteryLevel: %d\r\n", batteryLevel);
 800a15e:	7cbb      	ldrb	r3, [r7, #18]
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	4b69      	ldr	r3, [pc, #420]	; (800a308 <SendTxData+0x1fc>)
 800a164:	2201      	movs	r2, #1
 800a166:	2100      	movs	r1, #0
 800a168:	2002      	movs	r0, #2
 800a16a:	f010 fec5 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "moistureLevel1: %d\r\n", moistureLevel1);
 800a16e:	89fb      	ldrh	r3, [r7, #14]
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	4b66      	ldr	r3, [pc, #408]	; (800a30c <SendTxData+0x200>)
 800a174:	2201      	movs	r2, #1
 800a176:	2100      	movs	r1, #0
 800a178:	2002      	movs	r0, #2
 800a17a:	f010 febd 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "moistureLevel2: %d\r\n", moistureLevel2);
 800a17e:	89bb      	ldrh	r3, [r7, #12]
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	4b63      	ldr	r3, [pc, #396]	; (800a310 <SendTxData+0x204>)
 800a184:	2201      	movs	r2, #1
 800a186:	2100      	movs	r1, #0
 800a188:	2002      	movs	r0, #2
 800a18a:	f010 feb5 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "moistureLevel3: %d\r\n", moistureLevel3);
 800a18e:	897b      	ldrh	r3, [r7, #10]
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	4b60      	ldr	r3, [pc, #384]	; (800a314 <SendTxData+0x208>)
 800a194:	2201      	movs	r2, #1
 800a196:	2100      	movs	r1, #0
 800a198:	2002      	movs	r0, #2
 800a19a:	f010 fead 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "moistureLevel4: %d\r\n", moistureLevel4);
 800a19e:	893b      	ldrh	r3, [r7, #8]
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	4b5d      	ldr	r3, [pc, #372]	; (800a318 <SendTxData+0x20c>)
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	2002      	movs	r0, #2
 800a1aa:	f010 fea5 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "\r\n");
 800a1ae:	4b5b      	ldr	r3, [pc, #364]	; (800a31c <SendTxData+0x210>)
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	2002      	movs	r0, #2
 800a1b6:	f010 fe9f 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>

  UTIL_TIMER_Time_t nextTxIn = 0;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	607b      	str	r3, [r7, #4]

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a1c2:	4b57      	ldr	r3, [pc, #348]	; (800a320 <SendTxData+0x214>)
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 100 (fully charged) */
 800a1c8:	4b55      	ldr	r3, [pc, #340]	; (800a320 <SendTxData+0x214>)
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	1c59      	adds	r1, r3, #1
 800a1d0:	6079      	str	r1, [r7, #4]
 800a1d2:	18d4      	adds	r4, r2, r3
 800a1d4:	f7f7 fcde 	bl	8001b94 <GetBatteryLevel>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	7023      	strb	r3, [r4, #0]
  AppData.Buffer[i++] = (uint8_t)(moistureLevel1 & 0xFF);
 800a1dc:	4b50      	ldr	r3, [pc, #320]	; (800a320 <SendTxData+0x214>)
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	1c59      	adds	r1, r3, #1
 800a1e4:	6079      	str	r1, [r7, #4]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	89fa      	ldrh	r2, [r7, #14]
 800a1ea:	b2d2      	uxtb	r2, r2
 800a1ec:	701a      	strb	r2, [r3, #0]
//  AppData.Buffer[i++] = (uint8_t)((moistureLevel2 >> 8) & 0xFF);
  AppData.Buffer[i++] = (uint8_t)(moistureLevel2 & 0xFF);
 800a1ee:	4b4c      	ldr	r3, [pc, #304]	; (800a320 <SendTxData+0x214>)
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	1c59      	adds	r1, r3, #1
 800a1f6:	6079      	str	r1, [r7, #4]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	89ba      	ldrh	r2, [r7, #12]
 800a1fc:	b2d2      	uxtb	r2, r2
 800a1fe:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(moistureLevel3 & 0xFF);
 800a200:	4b47      	ldr	r3, [pc, #284]	; (800a320 <SendTxData+0x214>)
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	1c59      	adds	r1, r3, #1
 800a208:	6079      	str	r1, [r7, #4]
 800a20a:	4413      	add	r3, r2
 800a20c:	897a      	ldrh	r2, [r7, #10]
 800a20e:	b2d2      	uxtb	r2, r2
 800a210:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(moistureLevel4 & 0xFF);
 800a212:	4b43      	ldr	r3, [pc, #268]	; (800a320 <SendTxData+0x214>)
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	1c59      	adds	r1, r3, #1
 800a21a:	6079      	str	r1, [r7, #4]
 800a21c:	4413      	add	r3, r2
 800a21e:	893a      	ldrh	r2, [r7, #8]
 800a220:	b2d2      	uxtb	r2, r2
 800a222:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a224:	4b3e      	ldr	r3, [pc, #248]	; (800a320 <SendTxData+0x214>)
 800a226:	685a      	ldr	r2, [r3, #4]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	1c59      	adds	r1, r3, #1
 800a22c:	6079      	str	r1, [r7, #4]
 800a22e:	4413      	add	r3, r2
 800a230:	7c7a      	ldrb	r2, [r7, #17]
 800a232:	701a      	strb	r2, [r3, #0]

  AppData.BufferSize = i;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	b2da      	uxtb	r2, r3
 800a238:	4b39      	ldr	r3, [pc, #228]	; (800a320 <SendTxData+0x214>)
 800a23a:	705a      	strb	r2, [r3, #1]

  APP_LOG(TS_ON, VLEVEL_M, "AppData.BufferSize: %d\r\n", i);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	4b38      	ldr	r3, [pc, #224]	; (800a324 <SendTxData+0x218>)
 800a242:	2201      	movs	r2, #1
 800a244:	2100      	movs	r1, #0
 800a246:	2002      	movs	r0, #2
 800a248:	f010 fe56 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>


  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a24c:	4b36      	ldr	r3, [pc, #216]	; (800a328 <SendTxData+0x21c>)
 800a24e:	7a5b      	ldrb	r3, [r3, #9]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00d      	beq.n	800a270 <SendTxData+0x164>
 800a254:	f002 fa02 	bl	800c65c <LmHandlerJoinStatus>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d108      	bne.n	800a270 <SendTxData+0x164>
  {
	APP_LOG(TS_ON, VLEVEL_L, "(JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET)\r\n");
 800a25e:	4b33      	ldr	r3, [pc, #204]	; (800a32c <SendTxData+0x220>)
 800a260:	2201      	movs	r2, #1
 800a262:	2100      	movs	r1, #0
 800a264:	2001      	movs	r0, #1
 800a266:	f010 fe47 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a26a:	482f      	ldr	r0, [pc, #188]	; (800a328 <SendTxData+0x21c>)
 800a26c:	f010 fc3a 	bl	801aae4 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a270:	4b2f      	ldr	r3, [pc, #188]	; (800a330 <SendTxData+0x224>)
 800a272:	78db      	ldrb	r3, [r3, #3]
 800a274:	2200      	movs	r2, #0
 800a276:	4619      	mov	r1, r3
 800a278:	4829      	ldr	r0, [pc, #164]	; (800a320 <SendTxData+0x214>)
 800a27a:	f002 fa0b 	bl	800c694 <LmHandlerSend>
 800a27e:	4603      	mov	r3, r0
 800a280:	74fb      	strb	r3, [r7, #19]
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a282:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d106      	bne.n	800a298 <SendTxData+0x18c>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a28a:	4b2a      	ldr	r3, [pc, #168]	; (800a334 <SendTxData+0x228>)
 800a28c:	2201      	movs	r2, #1
 800a28e:	2100      	movs	r1, #0
 800a290:	2001      	movs	r0, #1
 800a292:	f010 fe31 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
 800a296:	e016      	b.n	800a2c6 <SendTxData+0x1ba>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a298:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a29c:	f113 0f06 	cmn.w	r3, #6
 800a2a0:	d111      	bne.n	800a2c6 <SendTxData+0x1ba>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a2a2:	f002 f951 	bl	800c548 <LmHandlerGetDutyCycleWaitTime>
 800a2a6:	6178      	str	r0, [r7, #20]
    if (nextTxIn > 0)
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00b      	beq.n	800a2c6 <SendTxData+0x1ba>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	4a21      	ldr	r2, [pc, #132]	; (800a338 <SendTxData+0x22c>)
 800a2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b6:	099b      	lsrs	r3, r3, #6
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	4b20      	ldr	r3, [pc, #128]	; (800a33c <SendTxData+0x230>)
 800a2bc:	2201      	movs	r2, #1
 800a2be:	2100      	movs	r1, #0
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	f010 fe19 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800a2c6:	4b1e      	ldr	r3, [pc, #120]	; (800a340 <SendTxData+0x234>)
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10f      	bne.n	800a2ee <SendTxData+0x1e2>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a2ce:	481d      	ldr	r0, [pc, #116]	; (800a344 <SendTxData+0x238>)
 800a2d0:	f010 fc08 	bl	801aae4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a2d4:	4b1c      	ldr	r3, [pc, #112]	; (800a348 <SendTxData+0x23c>)
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	bf38      	it	cc
 800a2de:	4613      	movcc	r3, r2
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4818      	ldr	r0, [pc, #96]	; (800a344 <SendTxData+0x238>)
 800a2e4:	f010 fc6e 	bl	801abc4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a2e8:	4816      	ldr	r0, [pc, #88]	; (800a344 <SendTxData+0x238>)
 800a2ea:	f010 fb8d 	bl	801aa08 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a2ee:	bf00      	nop
 800a2f0:	371c      	adds	r7, #28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd90      	pop	{r4, r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	18000040 	.word	0x18000040
 800a2fc:	04000002 	.word	0x04000002
 800a300:	0c000008 	.word	0x0c000008
 800a304:	0801b6b4 	.word	0x0801b6b4
 800a308:	0801b6c8 	.word	0x0801b6c8
 800a30c:	0801b6dc 	.word	0x0801b6dc
 800a310:	0801b6f4 	.word	0x0801b6f4
 800a314:	0801b70c 	.word	0x0801b70c
 800a318:	0801b724 	.word	0x0801b724
 800a31c:	0801b73c 	.word	0x0801b73c
 800a320:	20000088 	.word	0x20000088
 800a324:	0801b740 	.word	0x0801b740
 800a328:	2000049c 	.word	0x2000049c
 800a32c:	0801b75c 	.word	0x0801b75c
 800a330:	20000070 	.word	0x20000070
 800a334:	0801b7ac 	.word	0x0801b7ac
 800a338:	10624dd3 	.word	0x10624dd3
 800a33c:	0801b7bc 	.word	0x0801b7bc
 800a340:	20000344 	.word	0x20000344
 800a344:	20000348 	.word	0x20000348
 800a348:	20000084 	.word	0x20000084

0800a34c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a354:	2100      	movs	r1, #0
 800a356:	2002      	movs	r0, #2
 800a358:	f010 fa9e 	bl	801a898 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a35c:	4803      	ldr	r0, [pc, #12]	; (800a36c <OnTxTimerEvent+0x20>)
 800a35e:	f010 fb53 	bl	801aa08 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a362:	bf00      	nop
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20000348 	.word	0x20000348

0800a370 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bc80      	pop	{r7}
 800a380:	4770      	bx	lr

0800a382 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a382:	b480      	push	{r7}
 800a384:	b083      	sub	sp, #12
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a38a:	bf00      	nop
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	bc80      	pop	{r7}
 800a392:	4770      	bx	lr

0800a394 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bc80      	pop	{r7}
 800a3a4:	4770      	bx	lr
	...

0800a3a8 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af04      	add	r7, sp, #16
 800a3ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d041      	beq.n	800a43a <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d03d      	beq.n	800a43a <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a3be:	4821      	ldr	r0, [pc, #132]	; (800a444 <OnTxData+0x9c>)
 800a3c0:	f010 fb22 	bl	801aa08 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a3c4:	4b20      	ldr	r3, [pc, #128]	; (800a448 <OnTxData+0xa0>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	2002      	movs	r0, #2
 800a3cc:	f010 fd94 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	7c12      	ldrb	r2, [r2, #16]
 800a3d8:	4611      	mov	r1, r2
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a3e8:	9203      	str	r2, [sp, #12]
 800a3ea:	9002      	str	r0, [sp, #8]
 800a3ec:	9101      	str	r1, [sp, #4]
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	4b16      	ldr	r3, [pc, #88]	; (800a44c <OnTxData+0xa4>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	2003      	movs	r0, #3
 800a3f8:	f010 fd7e 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a3fc:	4b14      	ldr	r3, [pc, #80]	; (800a450 <OnTxData+0xa8>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	2100      	movs	r1, #0
 800a402:	2003      	movs	r0, #3
 800a404:	f010 fd78 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	7a1b      	ldrb	r3, [r3, #8]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d10e      	bne.n	800a42e <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	7a5b      	ldrb	r3, [r3, #9]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <OnTxData+0x74>
 800a418:	4b0e      	ldr	r3, [pc, #56]	; (800a454 <OnTxData+0xac>)
 800a41a:	e000      	b.n	800a41e <OnTxData+0x76>
 800a41c:	4b0e      	ldr	r3, [pc, #56]	; (800a458 <OnTxData+0xb0>)
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	4b0e      	ldr	r3, [pc, #56]	; (800a45c <OnTxData+0xb4>)
 800a422:	2200      	movs	r2, #0
 800a424:	2100      	movs	r1, #0
 800a426:	2003      	movs	r0, #3
 800a428:	f010 fd66 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a42c:	e005      	b.n	800a43a <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a42e:	4b0c      	ldr	r3, [pc, #48]	; (800a460 <OnTxData+0xb8>)
 800a430:	2200      	movs	r2, #0
 800a432:	2100      	movs	r1, #0
 800a434:	2003      	movs	r0, #3
 800a436:	f010 fd5f 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
}
 800a43a:	bf00      	nop
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	2000046c 	.word	0x2000046c
 800a448:	0801b7dc 	.word	0x0801b7dc
 800a44c:	0801b810 	.word	0x0801b810
 800a450:	0801b844 	.word	0x0801b844
 800a454:	0801b854 	.word	0x0801b854
 800a458:	0801b858 	.word	0x0801b858
 800a45c:	0801b860 	.word	0x0801b860
 800a460:	0801b874 	.word	0x0801b874

0800a464 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d039      	beq.n	800a4e6 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d11e      	bne.n	800a4ba <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800a47c:	2100      	movs	r1, #0
 800a47e:	2004      	movs	r0, #4
 800a480:	f010 fa0a 	bl	801a898 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800a484:	481a      	ldr	r0, [pc, #104]	; (800a4f0 <OnJoinRequest+0x8c>)
 800a486:	f010 fb2d 	bl	801aae4 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a48a:	4b1a      	ldr	r3, [pc, #104]	; (800a4f4 <OnJoinRequest+0x90>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	2100      	movs	r1, #0
 800a490:	2002      	movs	r0, #2
 800a492:	f010 fd31 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	799b      	ldrb	r3, [r3, #6]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d106      	bne.n	800a4ac <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a49e:	4b16      	ldr	r3, [pc, #88]	; (800a4f8 <OnJoinRequest+0x94>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	2002      	movs	r0, #2
 800a4a6:	f010 fd27 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a4aa:	e01c      	b.n	800a4e6 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a4ac:	4b13      	ldr	r3, [pc, #76]	; (800a4fc <OnJoinRequest+0x98>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	2002      	movs	r0, #2
 800a4b4:	f010 fd20 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
}
 800a4b8:	e015      	b.n	800a4e6 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a4ba:	4b11      	ldr	r3, [pc, #68]	; (800a500 <OnJoinRequest+0x9c>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2100      	movs	r1, #0
 800a4c0:	2002      	movs	r0, #2
 800a4c2:	f010 fd19 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	799b      	ldrb	r3, [r3, #6]
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d10b      	bne.n	800a4e6 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800a4ce:	4b0d      	ldr	r3, [pc, #52]	; (800a504 <OnJoinRequest+0xa0>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	2002      	movs	r0, #2
 800a4d6:	f010 fd0f 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800a4da:	4b0b      	ldr	r3, [pc, #44]	; (800a508 <OnJoinRequest+0xa4>)
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	2101      	movs	r1, #1
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f002 f83b 	bl	800c55c <LmHandlerJoin>
}
 800a4e6:	bf00      	nop
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	2000049c 	.word	0x2000049c
 800a4f4:	0801b884 	.word	0x0801b884
 800a4f8:	0801b89c 	.word	0x0801b89c
 800a4fc:	0801b8bc 	.word	0x0801b8bc
 800a500:	0801b8dc 	.word	0x0801b8dc
 800a504:	0801b8f8 	.word	0x0801b8f8
 800a508:	20000020 	.word	0x20000020

0800a50c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a50e:	b093      	sub	sp, #76	; 0x4c
 800a510:	af0c      	add	r7, sp, #48	; 0x30
 800a512:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d056      	beq.n	800a5c8 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	785b      	ldrb	r3, [r3, #1]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d008      	beq.n	800a534 <OnBeaconStatusChange+0x28>
 800a522:	2b03      	cmp	r3, #3
 800a524:	d049      	beq.n	800a5ba <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a526:	4b2b      	ldr	r3, [pc, #172]	; (800a5d4 <OnBeaconStatusChange+0xc8>)
 800a528:	2200      	movs	r2, #0
 800a52a:	2100      	movs	r1, #0
 800a52c:	2002      	movs	r0, #2
 800a52e:	f010 fce3 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a532:	e04a      	b.n	800a5ca <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	7c1b      	ldrb	r3, [r3, #16]
 800a538:	4618      	mov	r0, r3
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a540:	461c      	mov	r4, r3
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a548:	461d      	mov	r5, r3
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	6852      	ldr	r2, [r2, #4]
 800a552:	6979      	ldr	r1, [r7, #20]
 800a554:	7d49      	ldrb	r1, [r1, #21]
 800a556:	460e      	mov	r6, r1
 800a558:	6979      	ldr	r1, [r7, #20]
 800a55a:	7d89      	ldrb	r1, [r1, #22]
 800a55c:	6139      	str	r1, [r7, #16]
 800a55e:	6979      	ldr	r1, [r7, #20]
 800a560:	7dc9      	ldrb	r1, [r1, #23]
 800a562:	60f9      	str	r1, [r7, #12]
 800a564:	6979      	ldr	r1, [r7, #20]
 800a566:	7e09      	ldrb	r1, [r1, #24]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	6979      	ldr	r1, [r7, #20]
 800a56c:	7e49      	ldrb	r1, [r1, #25]
 800a56e:	6079      	str	r1, [r7, #4]
 800a570:	6979      	ldr	r1, [r7, #20]
 800a572:	7e89      	ldrb	r1, [r1, #26]
 800a574:	6039      	str	r1, [r7, #0]
 800a576:	6979      	ldr	r1, [r7, #20]
 800a578:	7ec9      	ldrb	r1, [r1, #27]
 800a57a:	910b      	str	r1, [sp, #44]	; 0x2c
 800a57c:	f8d7 c000 	ldr.w	ip, [r7]
 800a580:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800a584:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a588:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800a58c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a590:	f8cd c020 	str.w	ip, [sp, #32]
 800a594:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a598:	f8cd c01c 	str.w	ip, [sp, #28]
 800a59c:	6939      	ldr	r1, [r7, #16]
 800a59e:	9106      	str	r1, [sp, #24]
 800a5a0:	9605      	str	r6, [sp, #20]
 800a5a2:	9204      	str	r2, [sp, #16]
 800a5a4:	9303      	str	r3, [sp, #12]
 800a5a6:	9502      	str	r5, [sp, #8]
 800a5a8:	9401      	str	r4, [sp, #4]
 800a5aa:	9000      	str	r0, [sp, #0]
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <OnBeaconStatusChange+0xcc>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	2002      	movs	r0, #2
 800a5b4:	f010 fca0 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800a5b8:	e007      	b.n	800a5ca <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800a5ba:	4b08      	ldr	r3, [pc, #32]	; (800a5dc <OnBeaconStatusChange+0xd0>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2100      	movs	r1, #0
 800a5c0:	2002      	movs	r0, #2
 800a5c2:	f010 fc99 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a5c6:	e000      	b.n	800a5ca <OnBeaconStatusChange+0xbe>
      }
    }
  }
 800a5c8:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a5ca:	bf00      	nop
 800a5cc:	371c      	adds	r7, #28
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	0801b91c 	.word	0x0801b91c
 800a5d8:	0801b934 	.word	0x0801b934
 800a5dc:	0801b9a8 	.word	0x0801b9a8

0800a5e0 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	4a06      	ldr	r2, [pc, #24]	; (800a608 <OnClassChange+0x28>)
 800a5ee:	5cd3      	ldrb	r3, [r2, r3]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	4b06      	ldr	r3, [pc, #24]	; (800a60c <OnClassChange+0x2c>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	2002      	movs	r0, #2
 800a5fa:	f010 fc7d 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	0801b9e4 	.word	0x0801b9e4
 800a60c:	0801b9c8 	.word	0x0801b9c8

0800a610 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a614:	2100      	movs	r1, #0
 800a616:	2001      	movs	r0, #1
 800a618:	f010 f93e 	bl	801a898 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a61c:	bf00      	nop
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a628:	4a0d      	ldr	r2, [pc, #52]	; (800a660 <OnTxPeriodicityChanged+0x40>)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a62e:	4b0c      	ldr	r3, [pc, #48]	; (800a660 <OnTxPeriodicityChanged+0x40>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d103      	bne.n	800a63e <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a636:	4b0a      	ldr	r3, [pc, #40]	; (800a660 <OnTxPeriodicityChanged+0x40>)
 800a638:	f247 5230 	movw	r2, #30000	; 0x7530
 800a63c:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a63e:	4809      	ldr	r0, [pc, #36]	; (800a664 <OnTxPeriodicityChanged+0x44>)
 800a640:	f010 fa50 	bl	801aae4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a644:	4b06      	ldr	r3, [pc, #24]	; (800a660 <OnTxPeriodicityChanged+0x40>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4619      	mov	r1, r3
 800a64a:	4806      	ldr	r0, [pc, #24]	; (800a664 <OnTxPeriodicityChanged+0x44>)
 800a64c:	f010 faba 	bl	801abc4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a650:	4804      	ldr	r0, [pc, #16]	; (800a664 <OnTxPeriodicityChanged+0x44>)
 800a652:	f010 f9d9 	bl	801aa08 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20000084 	.word	0x20000084
 800a664:	20000348 	.word	0x20000348

0800a668 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4603      	mov	r3, r0
 800a670:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a672:	4a04      	ldr	r2, [pc, #16]	; (800a684 <OnTxFrameCtrlChanged+0x1c>)
 800a674:	79fb      	ldrb	r3, [r7, #7]
 800a676:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bc80      	pop	{r7}
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	20000070 	.word	0x20000070

0800a688 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a692:	4a04      	ldr	r2, [pc, #16]	; (800a6a4 <OnPingSlotPeriodicityChanged+0x1c>)
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bc80      	pop	{r7}
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	20000070 	.word	0x20000070

0800a6a8 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a6ac:	f002 fcdf 	bl	800d06e <LmHandlerHalt>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d106      	bne.n	800a6c4 <OnSystemReset+0x1c>
 800a6b6:	f001 ffd1 	bl	800c65c <LmHandlerJoinStatus>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d101      	bne.n	800a6c4 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a6c0:	f7ff fb76 	bl	8009db0 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a6c4:	bf00      	nop
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <StopJoin>:

static void StopJoin(void)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a6cc:	4817      	ldr	r0, [pc, #92]	; (800a72c <StopJoin+0x64>)
 800a6ce:	f010 fa09 	bl	801aae4 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a6d2:	f002 fcbf 	bl	800d054 <LmHandlerStop>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d006      	beq.n	800a6ea <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a6dc:	4b14      	ldr	r3, [pc, #80]	; (800a730 <StopJoin+0x68>)
 800a6de:	2200      	movs	r2, #0
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	2002      	movs	r0, #2
 800a6e4:	f010 fc08 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
 800a6e8:	e01a      	b.n	800a720 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a6ea:	4b12      	ldr	r3, [pc, #72]	; (800a734 <StopJoin+0x6c>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	2002      	movs	r0, #2
 800a6f2:	f010 fc01 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a6f6:	4b10      	ldr	r3, [pc, #64]	; (800a738 <StopJoin+0x70>)
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800a6fc:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <StopJoin+0x74>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	2100      	movs	r1, #0
 800a702:	2002      	movs	r0, #2
 800a704:	f010 fbf8 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a708:	480d      	ldr	r0, [pc, #52]	; (800a740 <StopJoin+0x78>)
 800a70a:	f001 fdd5 	bl	800c2b8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a70e:	4b0a      	ldr	r3, [pc, #40]	; (800a738 <StopJoin+0x70>)
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	2101      	movs	r1, #1
 800a714:	4618      	mov	r0, r3
 800a716:	f001 ff21 	bl	800c55c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a71a:	4804      	ldr	r0, [pc, #16]	; (800a72c <StopJoin+0x64>)
 800a71c:	f010 f974 	bl	801aa08 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a720:	4808      	ldr	r0, [pc, #32]	; (800a744 <StopJoin+0x7c>)
 800a722:	f010 f971 	bl	801aa08 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a726:	bf00      	nop
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	20000348 	.word	0x20000348
 800a730:	0801b9e8 	.word	0x0801b9e8
 800a734:	0801ba08 	.word	0x0801ba08
 800a738:	20000020 	.word	0x20000020
 800a73c:	0801ba1c 	.word	0x0801ba1c
 800a740:	20000070 	.word	0x20000070
 800a744:	20000360 	.word	0x20000360

0800a748 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a750:	4b05      	ldr	r3, [pc, #20]	; (800a768 <OnStopJoinTimerEvent+0x20>)
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	2b02      	cmp	r3, #2
 800a756:	d103      	bne.n	800a760 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a758:	2100      	movs	r1, #0
 800a75a:	2008      	movs	r0, #8
 800a75c:	f010 f89c 	bl	801a898 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a760:	bf00      	nop
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	20000020 	.word	0x20000020

0800a76c <StoreContext>:

static void StoreContext(void)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a772:	23ff      	movs	r3, #255	; 0xff
 800a774:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a776:	f002 fc87 	bl	800d088 <LmHandlerNvmDataStore>
 800a77a:	4603      	mov	r3, r0
 800a77c:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800a77e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a782:	f113 0f08 	cmn.w	r3, #8
 800a786:	d106      	bne.n	800a796 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800a788:	4b0a      	ldr	r3, [pc, #40]	; (800a7b4 <StoreContext+0x48>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	2100      	movs	r1, #0
 800a78e:	2002      	movs	r0, #2
 800a790:	f010 fbb2 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a794:	e00a      	b.n	800a7ac <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800a796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a79a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a79e:	d105      	bne.n	800a7ac <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800a7a0:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <StoreContext+0x4c>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	2002      	movs	r0, #2
 800a7a8:	f010 fba6 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
}
 800a7ac:	bf00      	nop
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	0801ba3c 	.word	0x0801ba3c
 800a7b8:	0801ba54 	.word	0x0801ba54

0800a7bc <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800a7c6:	79fb      	ldrb	r3, [r7, #7]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d106      	bne.n	800a7da <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800a7cc:	4b08      	ldr	r3, [pc, #32]	; (800a7f0 <OnNvmDataChange+0x34>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	2002      	movs	r0, #2
 800a7d4:	f010 fb90 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a7d8:	e005      	b.n	800a7e6 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800a7da:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <OnNvmDataChange+0x38>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	2002      	movs	r0, #2
 800a7e2:	f010 fb89 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	0801ba6c 	.word	0x0801ba6c
 800a7f4:	0801ba80 	.word	0x0801ba80

0800a7f8 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800a802:	f7f9 ff55 	bl	80046b0 <HAL_FLASH_Unlock>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d11c      	bne.n	800a846 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800a80c:	4b10      	ldr	r3, [pc, #64]	; (800a850 <OnStoreContextRequest+0x58>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	029a      	lsls	r2, r3, #10
 800a812:	4b10      	ldr	r3, [pc, #64]	; (800a854 <OnStoreContextRequest+0x5c>)
 800a814:	4013      	ands	r3, r2
 800a816:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800a81a:	fbb2 f1f3 	udiv	r1, r2, r3
 800a81e:	fb01 f303 	mul.w	r3, r1, r3
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	0adb      	lsrs	r3, r3, #11
 800a826:	2200      	movs	r2, #0
 800a828:	2101      	movs	r1, #1
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7f6 fe0f 	bl	800144e <FLASH_IF_EraseByPages>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d105      	bne.n	800a842 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800a836:	2300      	movs	r3, #0
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	6879      	ldr	r1, [r7, #4]
 800a83c:	4806      	ldr	r0, [pc, #24]	; (800a858 <OnStoreContextRequest+0x60>)
 800a83e:	f7f6 fd25 	bl	800128c <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800a842:	f7f9 ff57 	bl	80046f4 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a846:	bf00      	nop
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	1fff75e0 	.word	0x1fff75e0
 800a854:	03fffc00 	.word	0x03fffc00
 800a858:	0803f000 	.word	0x0803f000

0800a85c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	461a      	mov	r2, r3
 800a86c:	4903      	ldr	r1, [pc, #12]	; (800a87c <OnRestoreContextRequest+0x20>)
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f00f faf2 	bl	8019e58 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a874:	bf00      	nop
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	0803f000 	.word	0x0803f000

0800a880 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a884:	4b15      	ldr	r3, [pc, #84]	; (800a8dc <LoraInfo_Init+0x5c>)
 800a886:	2200      	movs	r2, #0
 800a888:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a88a:	4b14      	ldr	r3, [pc, #80]	; (800a8dc <LoraInfo_Init+0x5c>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a890:	4b12      	ldr	r3, [pc, #72]	; (800a8dc <LoraInfo_Init+0x5c>)
 800a892:	2200      	movs	r2, #0
 800a894:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a896:	4b11      	ldr	r3, [pc, #68]	; (800a8dc <LoraInfo_Init+0x5c>)
 800a898:	2200      	movs	r2, #0
 800a89a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800a89c:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <LoraInfo_Init+0x5c>)
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f043 0320 	orr.w	r3, r3, #32
 800a8a4:	4a0d      	ldr	r2, [pc, #52]	; (800a8dc <LoraInfo_Init+0x5c>)
 800a8a6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a8a8:	4b0c      	ldr	r3, [pc, #48]	; (800a8dc <LoraInfo_Init+0x5c>)
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10c      	bne.n	800a8ca <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a8b0:	4b0b      	ldr	r3, [pc, #44]	; (800a8e0 <LoraInfo_Init+0x60>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	f010 fb1e 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a8bc:	bf00      	nop
 800a8be:	f010 fb09 	bl	801aed4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d1fa      	bne.n	800a8be <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a8c8:	e7fe      	b.n	800a8c8 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a8ca:	4b04      	ldr	r3, [pc, #16]	; (800a8dc <LoraInfo_Init+0x5c>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a8d0:	4b02      	ldr	r3, [pc, #8]	; (800a8dc <LoraInfo_Init+0x5c>)
 800a8d2:	2203      	movs	r2, #3
 800a8d4:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a8d6:	bf00      	nop
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	200004b4 	.word	0x200004b4
 800a8e0:	0801ba94 	.word	0x0801ba94

0800a8e4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a8e8:	4b02      	ldr	r3, [pc, #8]	; (800a8f4 <LoraInfo_GetPtr+0x10>)
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bc80      	pop	{r7}
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	200004b4 	.word	0x200004b4

0800a8f8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800a8fc:	f7f7 ffdf 	bl	80028be <BSP_RADIO_Init>
 800a900:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a902:	4618      	mov	r0, r3
 800a904:	bd80      	pop	{r7, pc}

0800a906 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b082      	sub	sp, #8
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	4603      	mov	r3, r0
 800a90e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	4618      	mov	r0, r3
 800a914:	f7f8 f804 	bl	8002920 <BSP_RADIO_ConfigRFSwitch>
 800a918:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800a926:	f7f8 f849 	bl	80029bc <BSP_RADIO_GetTxConfig>
 800a92a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800a934:	f7f8 f849 	bl	80029ca <BSP_RADIO_IsTCXO>
 800a938:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800a942:	f7f8 f849 	bl	80029d8 <BSP_RADIO_IsDCDC>
 800a946:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a948:	4618      	mov	r0, r3
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	4603      	mov	r3, r0
 800a954:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800a956:	79fb      	ldrb	r3, [r7, #7]
 800a958:	4618      	mov	r0, r3
 800a95a:	f7f8 f844 	bl	80029e6 <BSP_RADIO_GetRFOMaxPowerConfig>
 800a95e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	33f1      	adds	r3, #241	; 0xf1
 800a974:	2210      	movs	r2, #16
 800a976:	2100      	movs	r1, #0
 800a978:	4618      	mov	r0, r3
 800a97a:	f00b ffa3 	bl	80168c4 <memset1>
    ctx->M_n = 0;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	22f0      	movs	r2, #240	; 0xf0
 800a98a:	2100      	movs	r1, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f00b ff99 	bl	80168c4 <memset1>
}
 800a992:	bf00      	nop
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b082      	sub	sp, #8
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	2110      	movs	r1, #16
 800a9aa:	6838      	ldr	r0, [r7, #0]
 800a9ac:	f000 fe5c 	bl	800b668 <lorawan_aes_set_key>
}
 800a9b0:	bf00      	nop
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08c      	sub	sp, #48	; 0x30
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 80a1 	beq.w	800ab12 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a9d6:	f1c3 0310 	rsb	r3, r3, #16
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	bf28      	it	cs
 800a9e0:	4613      	movcs	r3, r2
 800a9e2:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f203 1201 	addw	r2, r3, #257	; 0x101
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a9f0:	4413      	add	r3, r2
 800a9f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9f4:	b292      	uxth	r2, r2
 800a9f6:	68b9      	ldr	r1, [r7, #8]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f00b ff28 	bl	801684e <memcpy1>
        ctx->M_n += mlen;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	441a      	add	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa14:	2b0f      	cmp	r3, #15
 800aa16:	f240 808d 	bls.w	800ab34 <AES_CMAC_Update+0x17c>
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	f000 8088 	beq.w	800ab34 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800aa24:	2300      	movs	r3, #0
 800aa26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa28:	e015      	b.n	800aa56 <AES_CMAC_Update+0x9e>
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2e:	4413      	add	r3, r2
 800aa30:	33f1      	adds	r3, #241	; 0xf1
 800aa32:	781a      	ldrb	r2, [r3, #0]
 800aa34:	68f9      	ldr	r1, [r7, #12]
 800aa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa38:	440b      	add	r3, r1
 800aa3a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	4053      	eors	r3, r2
 800aa42:	b2d9      	uxtb	r1, r3
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa48:	4413      	add	r3, r2
 800aa4a:	33f1      	adds	r3, #241	; 0xf1
 800aa4c:	460a      	mov	r2, r1
 800aa4e:	701a      	strb	r2, [r3, #0]
 800aa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa52:	3301      	adds	r3, #1
 800aa54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa58:	2b0f      	cmp	r3, #15
 800aa5a:	dde6      	ble.n	800aa2a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800aa62:	f107 0314 	add.w	r3, r7, #20
 800aa66:	2210      	movs	r2, #16
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f00b fef0 	bl	801684e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	f107 0114 	add.w	r1, r7, #20
 800aa74:	f107 0314 	add.w	r3, r7, #20
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 fed3 	bl	800b824 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	33f1      	adds	r3, #241	; 0xf1
 800aa82:	f107 0114 	add.w	r1, r7, #20
 800aa86:	2210      	movs	r2, #16
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f00b fee0 	bl	801684e <memcpy1>

        data += mlen;
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	4413      	add	r3, r2
 800aa94:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800aa9e:	e038      	b.n	800ab12 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaa4:	e013      	b.n	800aace <AES_CMAC_Update+0x116>
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaaa:	4413      	add	r3, r2
 800aaac:	33f1      	adds	r3, #241	; 0xf1
 800aaae:	781a      	ldrb	r2, [r3, #0]
 800aab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab2:	68b9      	ldr	r1, [r7, #8]
 800aab4:	440b      	add	r3, r1
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	4053      	eors	r3, r2
 800aaba:	b2d9      	uxtb	r1, r3
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	4413      	add	r3, r2
 800aac2:	33f1      	adds	r3, #241	; 0xf1
 800aac4:	460a      	mov	r2, r1
 800aac6:	701a      	strb	r2, [r3, #0]
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	3301      	adds	r3, #1
 800aacc:	62bb      	str	r3, [r7, #40]	; 0x28
 800aace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad0:	2b0f      	cmp	r3, #15
 800aad2:	dde8      	ble.n	800aaa6 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800aada:	f107 0314 	add.w	r3, r7, #20
 800aade:	2210      	movs	r2, #16
 800aae0:	4618      	mov	r0, r3
 800aae2:	f00b feb4 	bl	801684e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	f107 0114 	add.w	r1, r7, #20
 800aaec:	f107 0314 	add.w	r3, r7, #20
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 fe97 	bl	800b824 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	33f1      	adds	r3, #241	; 0xf1
 800aafa:	f107 0114 	add.w	r1, r7, #20
 800aafe:	2210      	movs	r2, #16
 800ab00:	4618      	mov	r0, r3
 800ab02:	f00b fea4 	bl	801684e <memcpy1>

        data += 16;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	3310      	adds	r3, #16
 800ab0a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	3b10      	subs	r3, #16
 800ab10:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b10      	cmp	r3, #16
 800ab16:	d8c3      	bhi.n	800aaa0 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	b292      	uxth	r2, r2
 800ab22:	68b9      	ldr	r1, [r7, #8]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f00b fe92 	bl	801684e <memcpy1>
    ctx->M_n = len;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ab32:	e000      	b.n	800ab36 <AES_CMAC_Update+0x17e>
            return;
 800ab34:	bf00      	nop
}
 800ab36:	3730      	adds	r7, #48	; 0x30
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b092      	sub	sp, #72	; 0x48
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ab46:	f107 031c 	add.w	r3, r7, #28
 800ab4a:	2210      	movs	r2, #16
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f00b feb8 	bl	80168c4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	f107 011c 	add.w	r1, r7, #28
 800ab5a:	f107 031c 	add.w	r3, r7, #28
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 fe60 	bl	800b824 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ab64:	7f3b      	ldrb	r3, [r7, #28]
 800ab66:	b25b      	sxtb	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	da30      	bge.n	800abce <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab70:	e01b      	b.n	800abaa <AES_CMAC_Final+0x6e>
 800ab72:	f107 021c 	add.w	r2, r7, #28
 800ab76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab78:	4413      	add	r3, r2
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	005b      	lsls	r3, r3, #1
 800ab7e:	b25a      	sxtb	r2, r3
 800ab80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab82:	3301      	adds	r3, #1
 800ab84:	3348      	adds	r3, #72	; 0x48
 800ab86:	443b      	add	r3, r7
 800ab88:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ab8c:	09db      	lsrs	r3, r3, #7
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	b25b      	sxtb	r3, r3
 800ab92:	4313      	orrs	r3, r2
 800ab94:	b25b      	sxtb	r3, r3
 800ab96:	b2d9      	uxtb	r1, r3
 800ab98:	f107 021c 	add.w	r2, r7, #28
 800ab9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab9e:	4413      	add	r3, r2
 800aba0:	460a      	mov	r2, r1
 800aba2:	701a      	strb	r2, [r3, #0]
 800aba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aba6:	3301      	adds	r3, #1
 800aba8:	647b      	str	r3, [r7, #68]	; 0x44
 800abaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abac:	2b0e      	cmp	r3, #14
 800abae:	dde0      	ble.n	800ab72 <AES_CMAC_Final+0x36>
 800abb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800abbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abc0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800abc4:	43db      	mvns	r3, r3
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abcc:	e027      	b.n	800ac1e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800abce:	2300      	movs	r3, #0
 800abd0:	643b      	str	r3, [r7, #64]	; 0x40
 800abd2:	e01b      	b.n	800ac0c <AES_CMAC_Final+0xd0>
 800abd4:	f107 021c 	add.w	r2, r7, #28
 800abd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abda:	4413      	add	r3, r2
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	005b      	lsls	r3, r3, #1
 800abe0:	b25a      	sxtb	r2, r3
 800abe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abe4:	3301      	adds	r3, #1
 800abe6:	3348      	adds	r3, #72	; 0x48
 800abe8:	443b      	add	r3, r7
 800abea:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800abee:	09db      	lsrs	r3, r3, #7
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	b25b      	sxtb	r3, r3
 800abf4:	4313      	orrs	r3, r2
 800abf6:	b25b      	sxtb	r3, r3
 800abf8:	b2d9      	uxtb	r1, r3
 800abfa:	f107 021c 	add.w	r2, r7, #28
 800abfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac00:	4413      	add	r3, r2
 800ac02:	460a      	mov	r2, r1
 800ac04:	701a      	strb	r2, [r3, #0]
 800ac06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac08:	3301      	adds	r3, #1
 800ac0a:	643b      	str	r3, [r7, #64]	; 0x40
 800ac0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac0e:	2b0e      	cmp	r3, #14
 800ac10:	dde0      	ble.n	800abd4 <AES_CMAC_Final+0x98>
 800ac12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ac24:	2b10      	cmp	r3, #16
 800ac26:	d11d      	bne.n	800ac64 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ac28:	2300      	movs	r3, #0
 800ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac2c:	e016      	b.n	800ac5c <AES_CMAC_Final+0x120>
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac32:	4413      	add	r3, r2
 800ac34:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	f107 011c 	add.w	r1, r7, #28
 800ac3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac40:	440b      	add	r3, r1
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	4053      	eors	r3, r2
 800ac46:	b2d9      	uxtb	r1, r3
 800ac48:	683a      	ldr	r2, [r7, #0]
 800ac4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ac52:	460a      	mov	r2, r1
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac58:	3301      	adds	r3, #1
 800ac5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac5e:	2b0f      	cmp	r3, #15
 800ac60:	dde5      	ble.n	800ac2e <AES_CMAC_Final+0xf2>
 800ac62:	e096      	b.n	800ad92 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ac64:	7f3b      	ldrb	r3, [r7, #28]
 800ac66:	b25b      	sxtb	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	da30      	bge.n	800acce <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac70:	e01b      	b.n	800acaa <AES_CMAC_Final+0x16e>
 800ac72:	f107 021c 	add.w	r2, r7, #28
 800ac76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac78:	4413      	add	r3, r2
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	005b      	lsls	r3, r3, #1
 800ac7e:	b25a      	sxtb	r2, r3
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	3301      	adds	r3, #1
 800ac84:	3348      	adds	r3, #72	; 0x48
 800ac86:	443b      	add	r3, r7
 800ac88:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac8c:	09db      	lsrs	r3, r3, #7
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	b25b      	sxtb	r3, r3
 800ac92:	4313      	orrs	r3, r2
 800ac94:	b25b      	sxtb	r3, r3
 800ac96:	b2d9      	uxtb	r1, r3
 800ac98:	f107 021c 	add.w	r2, r7, #28
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9e:	4413      	add	r3, r2
 800aca0:	460a      	mov	r2, r1
 800aca2:	701a      	strb	r2, [r3, #0]
 800aca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca6:	3301      	adds	r3, #1
 800aca8:	63bb      	str	r3, [r7, #56]	; 0x38
 800acaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acac:	2b0e      	cmp	r3, #14
 800acae:	dde0      	ble.n	800ac72 <AES_CMAC_Final+0x136>
 800acb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acb4:	005b      	lsls	r3, r3, #1
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800acbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acc0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800acc4:	43db      	mvns	r3, r3
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800accc:	e027      	b.n	800ad1e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800acce:	2300      	movs	r3, #0
 800acd0:	637b      	str	r3, [r7, #52]	; 0x34
 800acd2:	e01b      	b.n	800ad0c <AES_CMAC_Final+0x1d0>
 800acd4:	f107 021c 	add.w	r2, r7, #28
 800acd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acda:	4413      	add	r3, r2
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	b25a      	sxtb	r2, r3
 800ace2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace4:	3301      	adds	r3, #1
 800ace6:	3348      	adds	r3, #72	; 0x48
 800ace8:	443b      	add	r3, r7
 800acea:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800acee:	09db      	lsrs	r3, r3, #7
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	b25b      	sxtb	r3, r3
 800acf4:	4313      	orrs	r3, r2
 800acf6:	b25b      	sxtb	r3, r3
 800acf8:	b2d9      	uxtb	r1, r3
 800acfa:	f107 021c 	add.w	r2, r7, #28
 800acfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad00:	4413      	add	r3, r2
 800ad02:	460a      	mov	r2, r1
 800ad04:	701a      	strb	r2, [r3, #0]
 800ad06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad08:	3301      	adds	r3, #1
 800ad0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0e:	2b0e      	cmp	r3, #14
 800ad10:	dde0      	ble.n	800acd4 <AES_CMAC_Final+0x198>
 800ad12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	4413      	add	r3, r2
 800ad28:	2280      	movs	r2, #128	; 0x80
 800ad2a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ad2e:	e007      	b.n	800ad40 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	4413      	add	r3, r2
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad46:	1c5a      	adds	r2, r3, #1
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad54:	2b0f      	cmp	r3, #15
 800ad56:	d9eb      	bls.n	800ad30 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800ad58:	2300      	movs	r3, #0
 800ad5a:	633b      	str	r3, [r7, #48]	; 0x30
 800ad5c:	e016      	b.n	800ad8c <AES_CMAC_Final+0x250>
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	4413      	add	r3, r2
 800ad64:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad68:	781a      	ldrb	r2, [r3, #0]
 800ad6a:	f107 011c 	add.w	r1, r7, #28
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad70:	440b      	add	r3, r1
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	4053      	eors	r3, r2
 800ad76:	b2d9      	uxtb	r1, r3
 800ad78:	683a      	ldr	r2, [r7, #0]
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad82:	460a      	mov	r2, r1
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad88:	3301      	adds	r3, #1
 800ad8a:	633b      	str	r3, [r7, #48]	; 0x30
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	2b0f      	cmp	r3, #15
 800ad90:	dde5      	ble.n	800ad5e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800ad92:	2300      	movs	r3, #0
 800ad94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad96:	e015      	b.n	800adc4 <AES_CMAC_Final+0x288>
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9c:	4413      	add	r3, r2
 800ad9e:	33f1      	adds	r3, #241	; 0xf1
 800ada0:	781a      	ldrb	r2, [r3, #0]
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada6:	440b      	add	r3, r1
 800ada8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	4053      	eors	r3, r2
 800adb0:	b2d9      	uxtb	r1, r3
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb6:	4413      	add	r3, r2
 800adb8:	33f1      	adds	r3, #241	; 0xf1
 800adba:	460a      	mov	r2, r1
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc0:	3301      	adds	r3, #1
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	2b0f      	cmp	r3, #15
 800adc8:	dde6      	ble.n	800ad98 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800add0:	f107 030c 	add.w	r3, r7, #12
 800add4:	2210      	movs	r2, #16
 800add6:	4618      	mov	r0, r3
 800add8:	f00b fd39 	bl	801684e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	f107 030c 	add.w	r3, r7, #12
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	4618      	mov	r0, r3
 800ade6:	f000 fd1d 	bl	800b824 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800adea:	f107 031c 	add.w	r3, r7, #28
 800adee:	2210      	movs	r2, #16
 800adf0:	2100      	movs	r1, #0
 800adf2:	4618      	mov	r0, r3
 800adf4:	f00b fd66 	bl	80168c4 <memset1>
}
 800adf8:	bf00      	nop
 800adfa:	3748      	adds	r7, #72	; 0x48
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	781a      	ldrb	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3301      	adds	r3, #1
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	7852      	ldrb	r2, [r2, #1]
 800ae1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3302      	adds	r3, #2
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	7892      	ldrb	r2, [r2, #2]
 800ae24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	3303      	adds	r3, #3
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	78d2      	ldrb	r2, [r2, #3]
 800ae2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	3304      	adds	r3, #4
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	7912      	ldrb	r2, [r2, #4]
 800ae38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3305      	adds	r3, #5
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	7952      	ldrb	r2, [r2, #5]
 800ae42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3306      	adds	r3, #6
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	7992      	ldrb	r2, [r2, #6]
 800ae4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3307      	adds	r3, #7
 800ae52:	683a      	ldr	r2, [r7, #0]
 800ae54:	79d2      	ldrb	r2, [r2, #7]
 800ae56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	7a12      	ldrb	r2, [r2, #8]
 800ae60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3309      	adds	r3, #9
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	7a52      	ldrb	r2, [r2, #9]
 800ae6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	330a      	adds	r3, #10
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	7a92      	ldrb	r2, [r2, #10]
 800ae74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	330b      	adds	r3, #11
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	7ad2      	ldrb	r2, [r2, #11]
 800ae7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	330c      	adds	r3, #12
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	7b12      	ldrb	r2, [r2, #12]
 800ae88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	330d      	adds	r3, #13
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	7b52      	ldrb	r2, [r2, #13]
 800ae92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	330e      	adds	r3, #14
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	7b92      	ldrb	r2, [r2, #14]
 800ae9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	330f      	adds	r3, #15
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	7bd2      	ldrb	r2, [r2, #15]
 800aea6:	701a      	strb	r2, [r3, #0]
#endif
}
 800aea8:	bf00      	nop
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bc80      	pop	{r7}
 800aeb0:	4770      	bx	lr

0800aeb2 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b085      	sub	sp, #20
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	60f8      	str	r0, [r7, #12]
 800aeba:	60b9      	str	r1, [r7, #8]
 800aebc:	4613      	mov	r3, r2
 800aebe:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800aec0:	e007      	b.n	800aed2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	1c53      	adds	r3, r2, #1
 800aec6:	60bb      	str	r3, [r7, #8]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	1c59      	adds	r1, r3, #1
 800aecc:	60f9      	str	r1, [r7, #12]
 800aece:	7812      	ldrb	r2, [r2, #0]
 800aed0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	1e5a      	subs	r2, r3, #1
 800aed6:	71fa      	strb	r2, [r7, #7]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1f2      	bne.n	800aec2 <copy_block_nn+0x10>
}
 800aedc:	bf00      	nop
 800aede:	bf00      	nop
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bc80      	pop	{r7}
 800aee6:	4770      	bx	lr

0800aee8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	781a      	ldrb	r2, [r3, #0]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	4053      	eors	r3, r2
 800aefc:	b2da      	uxtb	r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	3301      	adds	r3, #1
 800af06:	7819      	ldrb	r1, [r3, #0]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	3301      	adds	r3, #1
 800af0c:	781a      	ldrb	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	3301      	adds	r3, #1
 800af12:	404a      	eors	r2, r1
 800af14:	b2d2      	uxtb	r2, r2
 800af16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	3302      	adds	r3, #2
 800af1c:	7819      	ldrb	r1, [r3, #0]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	3302      	adds	r3, #2
 800af22:	781a      	ldrb	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3302      	adds	r3, #2
 800af28:	404a      	eors	r2, r1
 800af2a:	b2d2      	uxtb	r2, r2
 800af2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	3303      	adds	r3, #3
 800af32:	7819      	ldrb	r1, [r3, #0]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	3303      	adds	r3, #3
 800af38:	781a      	ldrb	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3303      	adds	r3, #3
 800af3e:	404a      	eors	r2, r1
 800af40:	b2d2      	uxtb	r2, r2
 800af42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3304      	adds	r3, #4
 800af48:	7819      	ldrb	r1, [r3, #0]
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	3304      	adds	r3, #4
 800af4e:	781a      	ldrb	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	3304      	adds	r3, #4
 800af54:	404a      	eors	r2, r1
 800af56:	b2d2      	uxtb	r2, r2
 800af58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	3305      	adds	r3, #5
 800af5e:	7819      	ldrb	r1, [r3, #0]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	3305      	adds	r3, #5
 800af64:	781a      	ldrb	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	3305      	adds	r3, #5
 800af6a:	404a      	eors	r2, r1
 800af6c:	b2d2      	uxtb	r2, r2
 800af6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	3306      	adds	r3, #6
 800af74:	7819      	ldrb	r1, [r3, #0]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	3306      	adds	r3, #6
 800af7a:	781a      	ldrb	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3306      	adds	r3, #6
 800af80:	404a      	eors	r2, r1
 800af82:	b2d2      	uxtb	r2, r2
 800af84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3307      	adds	r3, #7
 800af8a:	7819      	ldrb	r1, [r3, #0]
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	3307      	adds	r3, #7
 800af90:	781a      	ldrb	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3307      	adds	r3, #7
 800af96:	404a      	eors	r2, r1
 800af98:	b2d2      	uxtb	r2, r2
 800af9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	3308      	adds	r3, #8
 800afa0:	7819      	ldrb	r1, [r3, #0]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	3308      	adds	r3, #8
 800afa6:	781a      	ldrb	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	3308      	adds	r3, #8
 800afac:	404a      	eors	r2, r1
 800afae:	b2d2      	uxtb	r2, r2
 800afb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3309      	adds	r3, #9
 800afb6:	7819      	ldrb	r1, [r3, #0]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	3309      	adds	r3, #9
 800afbc:	781a      	ldrb	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	3309      	adds	r3, #9
 800afc2:	404a      	eors	r2, r1
 800afc4:	b2d2      	uxtb	r2, r2
 800afc6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	330a      	adds	r3, #10
 800afcc:	7819      	ldrb	r1, [r3, #0]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	330a      	adds	r3, #10
 800afd2:	781a      	ldrb	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	330a      	adds	r3, #10
 800afd8:	404a      	eors	r2, r1
 800afda:	b2d2      	uxtb	r2, r2
 800afdc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	330b      	adds	r3, #11
 800afe2:	7819      	ldrb	r1, [r3, #0]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	330b      	adds	r3, #11
 800afe8:	781a      	ldrb	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	330b      	adds	r3, #11
 800afee:	404a      	eors	r2, r1
 800aff0:	b2d2      	uxtb	r2, r2
 800aff2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	330c      	adds	r3, #12
 800aff8:	7819      	ldrb	r1, [r3, #0]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	330c      	adds	r3, #12
 800affe:	781a      	ldrb	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	330c      	adds	r3, #12
 800b004:	404a      	eors	r2, r1
 800b006:	b2d2      	uxtb	r2, r2
 800b008:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	330d      	adds	r3, #13
 800b00e:	7819      	ldrb	r1, [r3, #0]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	330d      	adds	r3, #13
 800b014:	781a      	ldrb	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	330d      	adds	r3, #13
 800b01a:	404a      	eors	r2, r1
 800b01c:	b2d2      	uxtb	r2, r2
 800b01e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	330e      	adds	r3, #14
 800b024:	7819      	ldrb	r1, [r3, #0]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	330e      	adds	r3, #14
 800b02a:	781a      	ldrb	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	330e      	adds	r3, #14
 800b030:	404a      	eors	r2, r1
 800b032:	b2d2      	uxtb	r2, r2
 800b034:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	330f      	adds	r3, #15
 800b03a:	7819      	ldrb	r1, [r3, #0]
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	330f      	adds	r3, #15
 800b040:	781a      	ldrb	r2, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	330f      	adds	r3, #15
 800b046:	404a      	eors	r2, r1
 800b048:	b2d2      	uxtb	r2, r2
 800b04a:	701a      	strb	r2, [r3, #0]
#endif
}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	bc80      	pop	{r7}
 800b054:	4770      	bx	lr

0800b056 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b056:	b480      	push	{r7}
 800b058:	b085      	sub	sp, #20
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	60f8      	str	r0, [r7, #12]
 800b05e:	60b9      	str	r1, [r7, #8]
 800b060:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	781a      	ldrb	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	4053      	eors	r3, r2
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	3301      	adds	r3, #1
 800b076:	7819      	ldrb	r1, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3301      	adds	r3, #1
 800b07c:	781a      	ldrb	r2, [r3, #0]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3301      	adds	r3, #1
 800b082:	404a      	eors	r2, r1
 800b084:	b2d2      	uxtb	r2, r2
 800b086:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	3302      	adds	r3, #2
 800b08c:	7819      	ldrb	r1, [r3, #0]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3302      	adds	r3, #2
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	3302      	adds	r3, #2
 800b098:	404a      	eors	r2, r1
 800b09a:	b2d2      	uxtb	r2, r2
 800b09c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	3303      	adds	r3, #3
 800b0a2:	7819      	ldrb	r1, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	3303      	adds	r3, #3
 800b0a8:	781a      	ldrb	r2, [r3, #0]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	3303      	adds	r3, #3
 800b0ae:	404a      	eors	r2, r1
 800b0b0:	b2d2      	uxtb	r2, r2
 800b0b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	3304      	adds	r3, #4
 800b0b8:	7819      	ldrb	r1, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3304      	adds	r3, #4
 800b0be:	781a      	ldrb	r2, [r3, #0]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	404a      	eors	r2, r1
 800b0c6:	b2d2      	uxtb	r2, r2
 800b0c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	3305      	adds	r3, #5
 800b0ce:	7819      	ldrb	r1, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3305      	adds	r3, #5
 800b0d4:	781a      	ldrb	r2, [r3, #0]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3305      	adds	r3, #5
 800b0da:	404a      	eors	r2, r1
 800b0dc:	b2d2      	uxtb	r2, r2
 800b0de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	3306      	adds	r3, #6
 800b0e4:	7819      	ldrb	r1, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3306      	adds	r3, #6
 800b0ea:	781a      	ldrb	r2, [r3, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3306      	adds	r3, #6
 800b0f0:	404a      	eors	r2, r1
 800b0f2:	b2d2      	uxtb	r2, r2
 800b0f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	3307      	adds	r3, #7
 800b0fa:	7819      	ldrb	r1, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	3307      	adds	r3, #7
 800b100:	781a      	ldrb	r2, [r3, #0]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3307      	adds	r3, #7
 800b106:	404a      	eors	r2, r1
 800b108:	b2d2      	uxtb	r2, r2
 800b10a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	3308      	adds	r3, #8
 800b110:	7819      	ldrb	r1, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	3308      	adds	r3, #8
 800b116:	781a      	ldrb	r2, [r3, #0]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	3308      	adds	r3, #8
 800b11c:	404a      	eors	r2, r1
 800b11e:	b2d2      	uxtb	r2, r2
 800b120:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	3309      	adds	r3, #9
 800b126:	7819      	ldrb	r1, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3309      	adds	r3, #9
 800b12c:	781a      	ldrb	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3309      	adds	r3, #9
 800b132:	404a      	eors	r2, r1
 800b134:	b2d2      	uxtb	r2, r2
 800b136:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	330a      	adds	r3, #10
 800b13c:	7819      	ldrb	r1, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	330a      	adds	r3, #10
 800b142:	781a      	ldrb	r2, [r3, #0]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	330a      	adds	r3, #10
 800b148:	404a      	eors	r2, r1
 800b14a:	b2d2      	uxtb	r2, r2
 800b14c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	330b      	adds	r3, #11
 800b152:	7819      	ldrb	r1, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	330b      	adds	r3, #11
 800b158:	781a      	ldrb	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	330b      	adds	r3, #11
 800b15e:	404a      	eors	r2, r1
 800b160:	b2d2      	uxtb	r2, r2
 800b162:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	330c      	adds	r3, #12
 800b168:	7819      	ldrb	r1, [r3, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	330c      	adds	r3, #12
 800b16e:	781a      	ldrb	r2, [r3, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	330c      	adds	r3, #12
 800b174:	404a      	eors	r2, r1
 800b176:	b2d2      	uxtb	r2, r2
 800b178:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	330d      	adds	r3, #13
 800b17e:	7819      	ldrb	r1, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	330d      	adds	r3, #13
 800b184:	781a      	ldrb	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	330d      	adds	r3, #13
 800b18a:	404a      	eors	r2, r1
 800b18c:	b2d2      	uxtb	r2, r2
 800b18e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	330e      	adds	r3, #14
 800b194:	7819      	ldrb	r1, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	330e      	adds	r3, #14
 800b19a:	781a      	ldrb	r2, [r3, #0]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	330e      	adds	r3, #14
 800b1a0:	404a      	eors	r2, r1
 800b1a2:	b2d2      	uxtb	r2, r2
 800b1a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	330f      	adds	r3, #15
 800b1aa:	7819      	ldrb	r1, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	330f      	adds	r3, #15
 800b1b0:	781a      	ldrb	r2, [r3, #0]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	330f      	adds	r3, #15
 800b1b6:	404a      	eors	r2, r1
 800b1b8:	b2d2      	uxtb	r2, r2
 800b1ba:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b1bc:	bf00      	nop
 800b1be:	3714      	adds	r7, #20
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bc80      	pop	{r7}
 800b1c4:	4770      	bx	lr

0800b1c6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b082      	sub	sp, #8
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff fe88 	bl	800aee8 <xor_block>
}
 800b1d8:	bf00      	nop
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4b48      	ldr	r3, [pc, #288]	; (800b310 <shift_sub_rows+0x130>)
 800b1f0:	5c9a      	ldrb	r2, [r3, r2]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	701a      	strb	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	3304      	adds	r3, #4
 800b202:	4a43      	ldr	r2, [pc, #268]	; (800b310 <shift_sub_rows+0x130>)
 800b204:	5c52      	ldrb	r2, [r2, r1]
 800b206:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	3308      	adds	r3, #8
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	4619      	mov	r1, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	3308      	adds	r3, #8
 800b214:	4a3e      	ldr	r2, [pc, #248]	; (800b310 <shift_sub_rows+0x130>)
 800b216:	5c52      	ldrb	r2, [r2, r1]
 800b218:	701a      	strb	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	330c      	adds	r3, #12
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	4619      	mov	r1, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	330c      	adds	r3, #12
 800b226:	4a3a      	ldr	r2, [pc, #232]	; (800b310 <shift_sub_rows+0x130>)
 800b228:	5c52      	ldrb	r2, [r2, r1]
 800b22a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	785b      	ldrb	r3, [r3, #1]
 800b230:	73fb      	strb	r3, [r7, #15]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3305      	adds	r3, #5
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	4619      	mov	r1, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3301      	adds	r3, #1
 800b23e:	4a34      	ldr	r2, [pc, #208]	; (800b310 <shift_sub_rows+0x130>)
 800b240:	5c52      	ldrb	r2, [r2, r1]
 800b242:	701a      	strb	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	3309      	adds	r3, #9
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	4619      	mov	r1, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3305      	adds	r3, #5
 800b250:	4a2f      	ldr	r2, [pc, #188]	; (800b310 <shift_sub_rows+0x130>)
 800b252:	5c52      	ldrb	r2, [r2, r1]
 800b254:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	330d      	adds	r3, #13
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	4619      	mov	r1, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3309      	adds	r3, #9
 800b262:	4a2b      	ldr	r2, [pc, #172]	; (800b310 <shift_sub_rows+0x130>)
 800b264:	5c52      	ldrb	r2, [r2, r1]
 800b266:	701a      	strb	r2, [r3, #0]
 800b268:	7bfa      	ldrb	r2, [r7, #15]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	330d      	adds	r3, #13
 800b26e:	4928      	ldr	r1, [pc, #160]	; (800b310 <shift_sub_rows+0x130>)
 800b270:	5c8a      	ldrb	r2, [r1, r2]
 800b272:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	789b      	ldrb	r3, [r3, #2]
 800b278:	73fb      	strb	r3, [r7, #15]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	330a      	adds	r3, #10
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	4619      	mov	r1, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3302      	adds	r3, #2
 800b286:	4a22      	ldr	r2, [pc, #136]	; (800b310 <shift_sub_rows+0x130>)
 800b288:	5c52      	ldrb	r2, [r2, r1]
 800b28a:	701a      	strb	r2, [r3, #0]
 800b28c:	7bfa      	ldrb	r2, [r7, #15]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	330a      	adds	r3, #10
 800b292:	491f      	ldr	r1, [pc, #124]	; (800b310 <shift_sub_rows+0x130>)
 800b294:	5c8a      	ldrb	r2, [r1, r2]
 800b296:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	799b      	ldrb	r3, [r3, #6]
 800b29c:	73fb      	strb	r3, [r7, #15]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	330e      	adds	r3, #14
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3306      	adds	r3, #6
 800b2aa:	4a19      	ldr	r2, [pc, #100]	; (800b310 <shift_sub_rows+0x130>)
 800b2ac:	5c52      	ldrb	r2, [r2, r1]
 800b2ae:	701a      	strb	r2, [r3, #0]
 800b2b0:	7bfa      	ldrb	r2, [r7, #15]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	330e      	adds	r3, #14
 800b2b6:	4916      	ldr	r1, [pc, #88]	; (800b310 <shift_sub_rows+0x130>)
 800b2b8:	5c8a      	ldrb	r2, [r1, r2]
 800b2ba:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	7bdb      	ldrb	r3, [r3, #15]
 800b2c0:	73fb      	strb	r3, [r7, #15]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	330b      	adds	r3, #11
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	330f      	adds	r3, #15
 800b2ce:	4a10      	ldr	r2, [pc, #64]	; (800b310 <shift_sub_rows+0x130>)
 800b2d0:	5c52      	ldrb	r2, [r2, r1]
 800b2d2:	701a      	strb	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	3307      	adds	r3, #7
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	4619      	mov	r1, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	330b      	adds	r3, #11
 800b2e0:	4a0b      	ldr	r2, [pc, #44]	; (800b310 <shift_sub_rows+0x130>)
 800b2e2:	5c52      	ldrb	r2, [r2, r1]
 800b2e4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3303      	adds	r3, #3
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3307      	adds	r3, #7
 800b2f2:	4a07      	ldr	r2, [pc, #28]	; (800b310 <shift_sub_rows+0x130>)
 800b2f4:	5c52      	ldrb	r2, [r2, r1]
 800b2f6:	701a      	strb	r2, [r3, #0]
 800b2f8:	7bfa      	ldrb	r2, [r7, #15]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	3303      	adds	r3, #3
 800b2fe:	4904      	ldr	r1, [pc, #16]	; (800b310 <shift_sub_rows+0x130>)
 800b300:	5c8a      	ldrb	r2, [r1, r2]
 800b302:	701a      	strb	r2, [r3, #0]
}
 800b304:	bf00      	nop
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	bc80      	pop	{r7}
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	0801c064 	.word	0x0801c064

0800b314 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b31c:	f107 0308 	add.w	r3, r7, #8
 800b320:	6879      	ldr	r1, [r7, #4]
 800b322:	4618      	mov	r0, r3
 800b324:	f7ff fd6c 	bl	800ae00 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b328:	7a3b      	ldrb	r3, [r7, #8]
 800b32a:	461a      	mov	r2, r3
 800b32c:	4b9a      	ldr	r3, [pc, #616]	; (800b598 <mix_sub_columns+0x284>)
 800b32e:	5c9a      	ldrb	r2, [r3, r2]
 800b330:	7b7b      	ldrb	r3, [r7, #13]
 800b332:	4619      	mov	r1, r3
 800b334:	4b99      	ldr	r3, [pc, #612]	; (800b59c <mix_sub_columns+0x288>)
 800b336:	5c5b      	ldrb	r3, [r3, r1]
 800b338:	4053      	eors	r3, r2
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	7cbb      	ldrb	r3, [r7, #18]
 800b33e:	4619      	mov	r1, r3
 800b340:	4b97      	ldr	r3, [pc, #604]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b342:	5c5b      	ldrb	r3, [r3, r1]
 800b344:	4053      	eors	r3, r2
 800b346:	b2da      	uxtb	r2, r3
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	4619      	mov	r1, r3
 800b34c:	4b94      	ldr	r3, [pc, #592]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b34e:	5c5b      	ldrb	r3, [r3, r1]
 800b350:	4053      	eors	r3, r2
 800b352:	b2da      	uxtb	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b358:	7a3b      	ldrb	r3, [r7, #8]
 800b35a:	461a      	mov	r2, r3
 800b35c:	4b90      	ldr	r3, [pc, #576]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b35e:	5c9a      	ldrb	r2, [r3, r2]
 800b360:	7b7b      	ldrb	r3, [r7, #13]
 800b362:	4619      	mov	r1, r3
 800b364:	4b8c      	ldr	r3, [pc, #560]	; (800b598 <mix_sub_columns+0x284>)
 800b366:	5c5b      	ldrb	r3, [r3, r1]
 800b368:	4053      	eors	r3, r2
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	7cbb      	ldrb	r3, [r7, #18]
 800b36e:	4619      	mov	r1, r3
 800b370:	4b8a      	ldr	r3, [pc, #552]	; (800b59c <mix_sub_columns+0x288>)
 800b372:	5c5b      	ldrb	r3, [r3, r1]
 800b374:	4053      	eors	r3, r2
 800b376:	b2d9      	uxtb	r1, r3
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	461a      	mov	r2, r3
 800b37c:	4b88      	ldr	r3, [pc, #544]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b37e:	5c9a      	ldrb	r2, [r3, r2]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	3301      	adds	r3, #1
 800b384:	404a      	eors	r2, r1
 800b386:	b2d2      	uxtb	r2, r2
 800b388:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b38a:	7a3b      	ldrb	r3, [r7, #8]
 800b38c:	461a      	mov	r2, r3
 800b38e:	4b84      	ldr	r3, [pc, #528]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b390:	5c9a      	ldrb	r2, [r3, r2]
 800b392:	7b7b      	ldrb	r3, [r7, #13]
 800b394:	4619      	mov	r1, r3
 800b396:	4b82      	ldr	r3, [pc, #520]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b398:	5c5b      	ldrb	r3, [r3, r1]
 800b39a:	4053      	eors	r3, r2
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	7cbb      	ldrb	r3, [r7, #18]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	4b7d      	ldr	r3, [pc, #500]	; (800b598 <mix_sub_columns+0x284>)
 800b3a4:	5c5b      	ldrb	r3, [r3, r1]
 800b3a6:	4053      	eors	r3, r2
 800b3a8:	b2d9      	uxtb	r1, r3
 800b3aa:	7dfb      	ldrb	r3, [r7, #23]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	4b7b      	ldr	r3, [pc, #492]	; (800b59c <mix_sub_columns+0x288>)
 800b3b0:	5c9a      	ldrb	r2, [r3, r2]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3302      	adds	r3, #2
 800b3b6:	404a      	eors	r2, r1
 800b3b8:	b2d2      	uxtb	r2, r2
 800b3ba:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b3bc:	7a3b      	ldrb	r3, [r7, #8]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	4b76      	ldr	r3, [pc, #472]	; (800b59c <mix_sub_columns+0x288>)
 800b3c2:	5c9a      	ldrb	r2, [r3, r2]
 800b3c4:	7b7b      	ldrb	r3, [r7, #13]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4b75      	ldr	r3, [pc, #468]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b3ca:	5c5b      	ldrb	r3, [r3, r1]
 800b3cc:	4053      	eors	r3, r2
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	7cbb      	ldrb	r3, [r7, #18]
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4b72      	ldr	r3, [pc, #456]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b3d6:	5c5b      	ldrb	r3, [r3, r1]
 800b3d8:	4053      	eors	r3, r2
 800b3da:	b2d9      	uxtb	r1, r3
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	4b6d      	ldr	r3, [pc, #436]	; (800b598 <mix_sub_columns+0x284>)
 800b3e2:	5c9a      	ldrb	r2, [r3, r2]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	3303      	adds	r3, #3
 800b3e8:	404a      	eors	r2, r1
 800b3ea:	b2d2      	uxtb	r2, r2
 800b3ec:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b3ee:	7b3b      	ldrb	r3, [r7, #12]
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	4b69      	ldr	r3, [pc, #420]	; (800b598 <mix_sub_columns+0x284>)
 800b3f4:	5c9a      	ldrb	r2, [r3, r2]
 800b3f6:	7c7b      	ldrb	r3, [r7, #17]
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	4b68      	ldr	r3, [pc, #416]	; (800b59c <mix_sub_columns+0x288>)
 800b3fc:	5c5b      	ldrb	r3, [r3, r1]
 800b3fe:	4053      	eors	r3, r2
 800b400:	b2da      	uxtb	r2, r3
 800b402:	7dbb      	ldrb	r3, [r7, #22]
 800b404:	4619      	mov	r1, r3
 800b406:	4b66      	ldr	r3, [pc, #408]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b408:	5c5b      	ldrb	r3, [r3, r1]
 800b40a:	4053      	eors	r3, r2
 800b40c:	b2d9      	uxtb	r1, r3
 800b40e:	7afb      	ldrb	r3, [r7, #11]
 800b410:	461a      	mov	r2, r3
 800b412:	4b63      	ldr	r3, [pc, #396]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b414:	5c9a      	ldrb	r2, [r3, r2]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3304      	adds	r3, #4
 800b41a:	404a      	eors	r2, r1
 800b41c:	b2d2      	uxtb	r2, r2
 800b41e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b420:	7b3b      	ldrb	r3, [r7, #12]
 800b422:	461a      	mov	r2, r3
 800b424:	4b5e      	ldr	r3, [pc, #376]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b426:	5c9a      	ldrb	r2, [r3, r2]
 800b428:	7c7b      	ldrb	r3, [r7, #17]
 800b42a:	4619      	mov	r1, r3
 800b42c:	4b5a      	ldr	r3, [pc, #360]	; (800b598 <mix_sub_columns+0x284>)
 800b42e:	5c5b      	ldrb	r3, [r3, r1]
 800b430:	4053      	eors	r3, r2
 800b432:	b2da      	uxtb	r2, r3
 800b434:	7dbb      	ldrb	r3, [r7, #22]
 800b436:	4619      	mov	r1, r3
 800b438:	4b58      	ldr	r3, [pc, #352]	; (800b59c <mix_sub_columns+0x288>)
 800b43a:	5c5b      	ldrb	r3, [r3, r1]
 800b43c:	4053      	eors	r3, r2
 800b43e:	b2d9      	uxtb	r1, r3
 800b440:	7afb      	ldrb	r3, [r7, #11]
 800b442:	461a      	mov	r2, r3
 800b444:	4b56      	ldr	r3, [pc, #344]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b446:	5c9a      	ldrb	r2, [r3, r2]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	3305      	adds	r3, #5
 800b44c:	404a      	eors	r2, r1
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b452:	7b3b      	ldrb	r3, [r7, #12]
 800b454:	461a      	mov	r2, r3
 800b456:	4b52      	ldr	r3, [pc, #328]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b458:	5c9a      	ldrb	r2, [r3, r2]
 800b45a:	7c7b      	ldrb	r3, [r7, #17]
 800b45c:	4619      	mov	r1, r3
 800b45e:	4b50      	ldr	r3, [pc, #320]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b460:	5c5b      	ldrb	r3, [r3, r1]
 800b462:	4053      	eors	r3, r2
 800b464:	b2da      	uxtb	r2, r3
 800b466:	7dbb      	ldrb	r3, [r7, #22]
 800b468:	4619      	mov	r1, r3
 800b46a:	4b4b      	ldr	r3, [pc, #300]	; (800b598 <mix_sub_columns+0x284>)
 800b46c:	5c5b      	ldrb	r3, [r3, r1]
 800b46e:	4053      	eors	r3, r2
 800b470:	b2d9      	uxtb	r1, r3
 800b472:	7afb      	ldrb	r3, [r7, #11]
 800b474:	461a      	mov	r2, r3
 800b476:	4b49      	ldr	r3, [pc, #292]	; (800b59c <mix_sub_columns+0x288>)
 800b478:	5c9a      	ldrb	r2, [r3, r2]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	3306      	adds	r3, #6
 800b47e:	404a      	eors	r2, r1
 800b480:	b2d2      	uxtb	r2, r2
 800b482:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b484:	7b3b      	ldrb	r3, [r7, #12]
 800b486:	461a      	mov	r2, r3
 800b488:	4b44      	ldr	r3, [pc, #272]	; (800b59c <mix_sub_columns+0x288>)
 800b48a:	5c9a      	ldrb	r2, [r3, r2]
 800b48c:	7c7b      	ldrb	r3, [r7, #17]
 800b48e:	4619      	mov	r1, r3
 800b490:	4b43      	ldr	r3, [pc, #268]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b492:	5c5b      	ldrb	r3, [r3, r1]
 800b494:	4053      	eors	r3, r2
 800b496:	b2da      	uxtb	r2, r3
 800b498:	7dbb      	ldrb	r3, [r7, #22]
 800b49a:	4619      	mov	r1, r3
 800b49c:	4b40      	ldr	r3, [pc, #256]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b49e:	5c5b      	ldrb	r3, [r3, r1]
 800b4a0:	4053      	eors	r3, r2
 800b4a2:	b2d9      	uxtb	r1, r3
 800b4a4:	7afb      	ldrb	r3, [r7, #11]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	4b3b      	ldr	r3, [pc, #236]	; (800b598 <mix_sub_columns+0x284>)
 800b4aa:	5c9a      	ldrb	r2, [r3, r2]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3307      	adds	r3, #7
 800b4b0:	404a      	eors	r2, r1
 800b4b2:	b2d2      	uxtb	r2, r2
 800b4b4:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b4b6:	7c3b      	ldrb	r3, [r7, #16]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	4b37      	ldr	r3, [pc, #220]	; (800b598 <mix_sub_columns+0x284>)
 800b4bc:	5c9a      	ldrb	r2, [r3, r2]
 800b4be:	7d7b      	ldrb	r3, [r7, #21]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4b36      	ldr	r3, [pc, #216]	; (800b59c <mix_sub_columns+0x288>)
 800b4c4:	5c5b      	ldrb	r3, [r3, r1]
 800b4c6:	4053      	eors	r3, r2
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	7abb      	ldrb	r3, [r7, #10]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	4b34      	ldr	r3, [pc, #208]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b4d0:	5c5b      	ldrb	r3, [r3, r1]
 800b4d2:	4053      	eors	r3, r2
 800b4d4:	b2d9      	uxtb	r1, r3
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	4b31      	ldr	r3, [pc, #196]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b4dc:	5c9a      	ldrb	r2, [r3, r2]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	404a      	eors	r2, r1
 800b4e4:	b2d2      	uxtb	r2, r2
 800b4e6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b4e8:	7c3b      	ldrb	r3, [r7, #16]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	4b2c      	ldr	r3, [pc, #176]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b4ee:	5c9a      	ldrb	r2, [r3, r2]
 800b4f0:	7d7b      	ldrb	r3, [r7, #21]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4b28      	ldr	r3, [pc, #160]	; (800b598 <mix_sub_columns+0x284>)
 800b4f6:	5c5b      	ldrb	r3, [r3, r1]
 800b4f8:	4053      	eors	r3, r2
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	7abb      	ldrb	r3, [r7, #10]
 800b4fe:	4619      	mov	r1, r3
 800b500:	4b26      	ldr	r3, [pc, #152]	; (800b59c <mix_sub_columns+0x288>)
 800b502:	5c5b      	ldrb	r3, [r3, r1]
 800b504:	4053      	eors	r3, r2
 800b506:	b2d9      	uxtb	r1, r3
 800b508:	7bfb      	ldrb	r3, [r7, #15]
 800b50a:	461a      	mov	r2, r3
 800b50c:	4b24      	ldr	r3, [pc, #144]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b50e:	5c9a      	ldrb	r2, [r3, r2]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	3309      	adds	r3, #9
 800b514:	404a      	eors	r2, r1
 800b516:	b2d2      	uxtb	r2, r2
 800b518:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b51a:	7c3b      	ldrb	r3, [r7, #16]
 800b51c:	461a      	mov	r2, r3
 800b51e:	4b20      	ldr	r3, [pc, #128]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b520:	5c9a      	ldrb	r2, [r3, r2]
 800b522:	7d7b      	ldrb	r3, [r7, #21]
 800b524:	4619      	mov	r1, r3
 800b526:	4b1e      	ldr	r3, [pc, #120]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b528:	5c5b      	ldrb	r3, [r3, r1]
 800b52a:	4053      	eors	r3, r2
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	7abb      	ldrb	r3, [r7, #10]
 800b530:	4619      	mov	r1, r3
 800b532:	4b19      	ldr	r3, [pc, #100]	; (800b598 <mix_sub_columns+0x284>)
 800b534:	5c5b      	ldrb	r3, [r3, r1]
 800b536:	4053      	eors	r3, r2
 800b538:	b2d9      	uxtb	r1, r3
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
 800b53c:	461a      	mov	r2, r3
 800b53e:	4b17      	ldr	r3, [pc, #92]	; (800b59c <mix_sub_columns+0x288>)
 800b540:	5c9a      	ldrb	r2, [r3, r2]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	330a      	adds	r3, #10
 800b546:	404a      	eors	r2, r1
 800b548:	b2d2      	uxtb	r2, r2
 800b54a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b54c:	7c3b      	ldrb	r3, [r7, #16]
 800b54e:	461a      	mov	r2, r3
 800b550:	4b12      	ldr	r3, [pc, #72]	; (800b59c <mix_sub_columns+0x288>)
 800b552:	5c9a      	ldrb	r2, [r3, r2]
 800b554:	7d7b      	ldrb	r3, [r7, #21]
 800b556:	4619      	mov	r1, r3
 800b558:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b55a:	5c5b      	ldrb	r3, [r3, r1]
 800b55c:	4053      	eors	r3, r2
 800b55e:	b2da      	uxtb	r2, r3
 800b560:	7abb      	ldrb	r3, [r7, #10]
 800b562:	4619      	mov	r1, r3
 800b564:	4b0e      	ldr	r3, [pc, #56]	; (800b5a0 <mix_sub_columns+0x28c>)
 800b566:	5c5b      	ldrb	r3, [r3, r1]
 800b568:	4053      	eors	r3, r2
 800b56a:	b2d9      	uxtb	r1, r3
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
 800b56e:	461a      	mov	r2, r3
 800b570:	4b09      	ldr	r3, [pc, #36]	; (800b598 <mix_sub_columns+0x284>)
 800b572:	5c9a      	ldrb	r2, [r3, r2]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	330b      	adds	r3, #11
 800b578:	404a      	eors	r2, r1
 800b57a:	b2d2      	uxtb	r2, r2
 800b57c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b57e:	7d3b      	ldrb	r3, [r7, #20]
 800b580:	461a      	mov	r2, r3
 800b582:	4b05      	ldr	r3, [pc, #20]	; (800b598 <mix_sub_columns+0x284>)
 800b584:	5c9a      	ldrb	r2, [r3, r2]
 800b586:	7a7b      	ldrb	r3, [r7, #9]
 800b588:	4619      	mov	r1, r3
 800b58a:	4b04      	ldr	r3, [pc, #16]	; (800b59c <mix_sub_columns+0x288>)
 800b58c:	5c5b      	ldrb	r3, [r3, r1]
 800b58e:	4053      	eors	r3, r2
 800b590:	b2da      	uxtb	r2, r3
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	4619      	mov	r1, r3
 800b596:	e005      	b.n	800b5a4 <mix_sub_columns+0x290>
 800b598:	0801c164 	.word	0x0801c164
 800b59c:	0801c264 	.word	0x0801c264
 800b5a0:	0801c064 	.word	0x0801c064
 800b5a4:	4b2d      	ldr	r3, [pc, #180]	; (800b65c <mix_sub_columns+0x348>)
 800b5a6:	5c5b      	ldrb	r3, [r3, r1]
 800b5a8:	4053      	eors	r3, r2
 800b5aa:	b2d9      	uxtb	r1, r3
 800b5ac:	7cfb      	ldrb	r3, [r7, #19]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	4b2a      	ldr	r3, [pc, #168]	; (800b65c <mix_sub_columns+0x348>)
 800b5b2:	5c9a      	ldrb	r2, [r3, r2]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	330c      	adds	r3, #12
 800b5b8:	404a      	eors	r2, r1
 800b5ba:	b2d2      	uxtb	r2, r2
 800b5bc:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b5be:	7d3b      	ldrb	r3, [r7, #20]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	4b26      	ldr	r3, [pc, #152]	; (800b65c <mix_sub_columns+0x348>)
 800b5c4:	5c9a      	ldrb	r2, [r3, r2]
 800b5c6:	7a7b      	ldrb	r3, [r7, #9]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4b25      	ldr	r3, [pc, #148]	; (800b660 <mix_sub_columns+0x34c>)
 800b5cc:	5c5b      	ldrb	r3, [r3, r1]
 800b5ce:	4053      	eors	r3, r2
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	7bbb      	ldrb	r3, [r7, #14]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	4b23      	ldr	r3, [pc, #140]	; (800b664 <mix_sub_columns+0x350>)
 800b5d8:	5c5b      	ldrb	r3, [r3, r1]
 800b5da:	4053      	eors	r3, r2
 800b5dc:	b2d9      	uxtb	r1, r3
 800b5de:	7cfb      	ldrb	r3, [r7, #19]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	4b1e      	ldr	r3, [pc, #120]	; (800b65c <mix_sub_columns+0x348>)
 800b5e4:	5c9a      	ldrb	r2, [r3, r2]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	330d      	adds	r3, #13
 800b5ea:	404a      	eors	r2, r1
 800b5ec:	b2d2      	uxtb	r2, r2
 800b5ee:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b5f0:	7d3b      	ldrb	r3, [r7, #20]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	4b19      	ldr	r3, [pc, #100]	; (800b65c <mix_sub_columns+0x348>)
 800b5f6:	5c9a      	ldrb	r2, [r3, r2]
 800b5f8:	7a7b      	ldrb	r3, [r7, #9]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	4b17      	ldr	r3, [pc, #92]	; (800b65c <mix_sub_columns+0x348>)
 800b5fe:	5c5b      	ldrb	r3, [r3, r1]
 800b600:	4053      	eors	r3, r2
 800b602:	b2da      	uxtb	r2, r3
 800b604:	7bbb      	ldrb	r3, [r7, #14]
 800b606:	4619      	mov	r1, r3
 800b608:	4b15      	ldr	r3, [pc, #84]	; (800b660 <mix_sub_columns+0x34c>)
 800b60a:	5c5b      	ldrb	r3, [r3, r1]
 800b60c:	4053      	eors	r3, r2
 800b60e:	b2d9      	uxtb	r1, r3
 800b610:	7cfb      	ldrb	r3, [r7, #19]
 800b612:	461a      	mov	r2, r3
 800b614:	4b13      	ldr	r3, [pc, #76]	; (800b664 <mix_sub_columns+0x350>)
 800b616:	5c9a      	ldrb	r2, [r3, r2]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	330e      	adds	r3, #14
 800b61c:	404a      	eors	r2, r1
 800b61e:	b2d2      	uxtb	r2, r2
 800b620:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b622:	7d3b      	ldrb	r3, [r7, #20]
 800b624:	461a      	mov	r2, r3
 800b626:	4b0f      	ldr	r3, [pc, #60]	; (800b664 <mix_sub_columns+0x350>)
 800b628:	5c9a      	ldrb	r2, [r3, r2]
 800b62a:	7a7b      	ldrb	r3, [r7, #9]
 800b62c:	4619      	mov	r1, r3
 800b62e:	4b0b      	ldr	r3, [pc, #44]	; (800b65c <mix_sub_columns+0x348>)
 800b630:	5c5b      	ldrb	r3, [r3, r1]
 800b632:	4053      	eors	r3, r2
 800b634:	b2da      	uxtb	r2, r3
 800b636:	7bbb      	ldrb	r3, [r7, #14]
 800b638:	4619      	mov	r1, r3
 800b63a:	4b08      	ldr	r3, [pc, #32]	; (800b65c <mix_sub_columns+0x348>)
 800b63c:	5c5b      	ldrb	r3, [r3, r1]
 800b63e:	4053      	eors	r3, r2
 800b640:	b2d9      	uxtb	r1, r3
 800b642:	7cfb      	ldrb	r3, [r7, #19]
 800b644:	461a      	mov	r2, r3
 800b646:	4b06      	ldr	r3, [pc, #24]	; (800b660 <mix_sub_columns+0x34c>)
 800b648:	5c9a      	ldrb	r2, [r3, r2]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	330f      	adds	r3, #15
 800b64e:	404a      	eors	r2, r1
 800b650:	b2d2      	uxtb	r2, r2
 800b652:	701a      	strb	r2, [r3, #0]
  }
 800b654:	bf00      	nop
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	0801c064 	.word	0x0801c064
 800b660:	0801c164 	.word	0x0801c164
 800b664:	0801c264 	.word	0x0801c264

0800b668 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	460b      	mov	r3, r1
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b676:	7afb      	ldrb	r3, [r7, #11]
 800b678:	3b10      	subs	r3, #16
 800b67a:	2b10      	cmp	r3, #16
 800b67c:	bf8c      	ite	hi
 800b67e:	2201      	movhi	r2, #1
 800b680:	2200      	movls	r2, #0
 800b682:	b2d2      	uxtb	r2, r2
 800b684:	2a00      	cmp	r2, #0
 800b686:	d10d      	bne.n	800b6a4 <lorawan_aes_set_key+0x3c>
 800b688:	2201      	movs	r2, #1
 800b68a:	fa02 f303 	lsl.w	r3, r2, r3
 800b68e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b696:	2b00      	cmp	r3, #0
 800b698:	bf14      	ite	ne
 800b69a:	2301      	movne	r3, #1
 800b69c:	2300      	moveq	r3, #0
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d105      	bne.n	800b6b0 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b6ac:	23ff      	movs	r3, #255	; 0xff
 800b6ae:	e0b2      	b.n	800b816 <lorawan_aes_set_key+0x1ae>
        break;
 800b6b0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	7afa      	ldrb	r2, [r7, #11]
 800b6b6:	68f9      	ldr	r1, [r7, #12]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff fbfa 	bl	800aeb2 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b6be:	7afb      	ldrb	r3, [r7, #11]
 800b6c0:	331c      	adds	r3, #28
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b6c8:	7c7b      	ldrb	r3, [r7, #17]
 800b6ca:	091b      	lsrs	r3, r3, #4
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b6d8:	7afb      	ldrb	r3, [r7, #11]
 800b6da:	75fb      	strb	r3, [r7, #23]
 800b6dc:	2301      	movs	r3, #1
 800b6de:	75bb      	strb	r3, [r7, #22]
 800b6e0:	e093      	b.n	800b80a <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
 800b6e4:	3b04      	subs	r3, #4
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	5cd3      	ldrb	r3, [r2, r3]
 800b6ea:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
 800b6ee:	3b03      	subs	r3, #3
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	5cd3      	ldrb	r3, [r2, r3]
 800b6f4:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	3b02      	subs	r3, #2
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	5cd3      	ldrb	r3, [r2, r3]
 800b6fe:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b700:	7dfb      	ldrb	r3, [r7, #23]
 800b702:	3b01      	subs	r3, #1
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	5cd3      	ldrb	r3, [r2, r3]
 800b708:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b70a:	7dfb      	ldrb	r3, [r7, #23]
 800b70c:	7afa      	ldrb	r2, [r7, #11]
 800b70e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b712:	fb01 f202 	mul.w	r2, r1, r2
 800b716:	1a9b      	subs	r3, r3, r2
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d127      	bne.n	800b76e <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800b71e:	7d7b      	ldrb	r3, [r7, #21]
 800b720:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b722:	7d3b      	ldrb	r3, [r7, #20]
 800b724:	4a3e      	ldr	r2, [pc, #248]	; (800b820 <lorawan_aes_set_key+0x1b8>)
 800b726:	5cd2      	ldrb	r2, [r2, r3]
 800b728:	7dbb      	ldrb	r3, [r7, #22]
 800b72a:	4053      	eors	r3, r2
 800b72c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b72e:	7cfb      	ldrb	r3, [r7, #19]
 800b730:	4a3b      	ldr	r2, [pc, #236]	; (800b820 <lorawan_aes_set_key+0x1b8>)
 800b732:	5cd3      	ldrb	r3, [r2, r3]
 800b734:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b736:	7cbb      	ldrb	r3, [r7, #18]
 800b738:	4a39      	ldr	r2, [pc, #228]	; (800b820 <lorawan_aes_set_key+0x1b8>)
 800b73a:	5cd3      	ldrb	r3, [r2, r3]
 800b73c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b73e:	7c3b      	ldrb	r3, [r7, #16]
 800b740:	4a37      	ldr	r2, [pc, #220]	; (800b820 <lorawan_aes_set_key+0x1b8>)
 800b742:	5cd3      	ldrb	r3, [r2, r3]
 800b744:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b746:	7dbb      	ldrb	r3, [r7, #22]
 800b748:	005b      	lsls	r3, r3, #1
 800b74a:	b25a      	sxtb	r2, r3
 800b74c:	7dbb      	ldrb	r3, [r7, #22]
 800b74e:	09db      	lsrs	r3, r3, #7
 800b750:	b2db      	uxtb	r3, r3
 800b752:	4619      	mov	r1, r3
 800b754:	0049      	lsls	r1, r1, #1
 800b756:	440b      	add	r3, r1
 800b758:	4619      	mov	r1, r3
 800b75a:	00c8      	lsls	r0, r1, #3
 800b75c:	4619      	mov	r1, r3
 800b75e:	4603      	mov	r3, r0
 800b760:	440b      	add	r3, r1
 800b762:	b2db      	uxtb	r3, r3
 800b764:	b25b      	sxtb	r3, r3
 800b766:	4053      	eors	r3, r2
 800b768:	b25b      	sxtb	r3, r3
 800b76a:	75bb      	strb	r3, [r7, #22]
 800b76c:	e01c      	b.n	800b7a8 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b76e:	7afb      	ldrb	r3, [r7, #11]
 800b770:	2b18      	cmp	r3, #24
 800b772:	d919      	bls.n	800b7a8 <lorawan_aes_set_key+0x140>
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	7afa      	ldrb	r2, [r7, #11]
 800b778:	fbb3 f1f2 	udiv	r1, r3, r2
 800b77c:	fb01 f202 	mul.w	r2, r1, r2
 800b780:	1a9b      	subs	r3, r3, r2
 800b782:	b2db      	uxtb	r3, r3
 800b784:	2b10      	cmp	r3, #16
 800b786:	d10f      	bne.n	800b7a8 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b788:	7d7b      	ldrb	r3, [r7, #21]
 800b78a:	4a25      	ldr	r2, [pc, #148]	; (800b820 <lorawan_aes_set_key+0x1b8>)
 800b78c:	5cd3      	ldrb	r3, [r2, r3]
 800b78e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b790:	7d3b      	ldrb	r3, [r7, #20]
 800b792:	4a23      	ldr	r2, [pc, #140]	; (800b820 <lorawan_aes_set_key+0x1b8>)
 800b794:	5cd3      	ldrb	r3, [r2, r3]
 800b796:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b798:	7cfb      	ldrb	r3, [r7, #19]
 800b79a:	4a21      	ldr	r2, [pc, #132]	; (800b820 <lorawan_aes_set_key+0x1b8>)
 800b79c:	5cd3      	ldrb	r3, [r2, r3]
 800b79e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b7a0:	7cbb      	ldrb	r3, [r7, #18]
 800b7a2:	4a1f      	ldr	r2, [pc, #124]	; (800b820 <lorawan_aes_set_key+0x1b8>)
 800b7a4:	5cd3      	ldrb	r3, [r2, r3]
 800b7a6:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b7a8:	7dfa      	ldrb	r2, [r7, #23]
 800b7aa:	7afb      	ldrb	r3, [r7, #11]
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b7b0:	7c3b      	ldrb	r3, [r7, #16]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	5cd1      	ldrb	r1, [r2, r3]
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
 800b7b8:	7d7a      	ldrb	r2, [r7, #21]
 800b7ba:	404a      	eors	r2, r1
 800b7bc:	b2d1      	uxtb	r1, r2
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b7c2:	7c3b      	ldrb	r3, [r7, #16]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	5cd1      	ldrb	r1, [r2, r3]
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	7d3a      	ldrb	r2, [r7, #20]
 800b7d0:	404a      	eors	r2, r1
 800b7d2:	b2d1      	uxtb	r1, r2
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b7d8:	7c3b      	ldrb	r3, [r7, #16]
 800b7da:	3302      	adds	r3, #2
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	5cd1      	ldrb	r1, [r2, r3]
 800b7e0:	7dfb      	ldrb	r3, [r7, #23]
 800b7e2:	3302      	adds	r3, #2
 800b7e4:	7cfa      	ldrb	r2, [r7, #19]
 800b7e6:	404a      	eors	r2, r1
 800b7e8:	b2d1      	uxtb	r1, r2
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b7ee:	7c3b      	ldrb	r3, [r7, #16]
 800b7f0:	3303      	adds	r3, #3
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	5cd1      	ldrb	r1, [r2, r3]
 800b7f6:	7dfb      	ldrb	r3, [r7, #23]
 800b7f8:	3303      	adds	r3, #3
 800b7fa:	7cba      	ldrb	r2, [r7, #18]
 800b7fc:	404a      	eors	r2, r1
 800b7fe:	b2d1      	uxtb	r1, r2
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	3304      	adds	r3, #4
 800b808:	75fb      	strb	r3, [r7, #23]
 800b80a:	7dfa      	ldrb	r2, [r7, #23]
 800b80c:	7c7b      	ldrb	r3, [r7, #17]
 800b80e:	429a      	cmp	r2, r3
 800b810:	f4ff af67 	bcc.w	800b6e2 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3718      	adds	r7, #24
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	0801c064 	.word	0x0801c064

0800b824 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b08a      	sub	sp, #40	; 0x28
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d038      	beq.n	800b8ac <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	f107 0314 	add.w	r3, r7, #20
 800b840:	68f9      	ldr	r1, [r7, #12]
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff fc07 	bl	800b056 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b848:	2301      	movs	r3, #1
 800b84a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b84e:	e014      	b.n	800b87a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b850:	f107 0314 	add.w	r3, r7, #20
 800b854:	4618      	mov	r0, r3
 800b856:	f7ff fd5d 	bl	800b314 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b860:	0112      	lsls	r2, r2, #4
 800b862:	441a      	add	r2, r3
 800b864:	f107 0314 	add.w	r3, r7, #20
 800b868:	4611      	mov	r1, r2
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff fcab 	bl	800b1c6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b874:	3301      	adds	r3, #1
 800b876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b880:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b884:	429a      	cmp	r2, r3
 800b886:	d3e3      	bcc.n	800b850 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b888:	f107 0314 	add.w	r3, r7, #20
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff fca7 	bl	800b1e0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b898:	0112      	lsls	r2, r2, #4
 800b89a:	441a      	add	r2, r3
 800b89c:	f107 0314 	add.w	r3, r7, #20
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	68b8      	ldr	r0, [r7, #8]
 800b8a4:	f7ff fbd7 	bl	800b056 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	e000      	b.n	800b8ae <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b8ac:	23ff      	movs	r3, #255	; 0xff
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3728      	adds	r7, #40	; 0x28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
	...

0800b8b8 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800b8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ba:	b09d      	sub	sp, #116	; 0x74
 800b8bc:	af10      	add	r7, sp, #64	; 0x40
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b8c4:	2306      	movs	r3, #6
 800b8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b8ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b8ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 f9a7 	bl	800bc28 <SecureElementGetKeyByID>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b8e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f040 80b0 	bne.w	800ba4a <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b8ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d106      	bne.n	800b900 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b8f2:	4b58      	ldr	r3, [pc, #352]	; (800ba54 <PrintKey+0x19c>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	2002      	movs	r0, #2
 800b8fa:	f00f fafd 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
 800b8fe:	e056      	b.n	800b9ae <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b904:	2b01      	cmp	r3, #1
 800b906:	d106      	bne.n	800b916 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b908:	4b53      	ldr	r3, [pc, #332]	; (800ba58 <PrintKey+0x1a0>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	2100      	movs	r1, #0
 800b90e:	2002      	movs	r0, #2
 800b910:	f00f faf2 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
 800b914:	e04b      	b.n	800b9ae <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	d106      	bne.n	800b92c <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b91e:	4b4f      	ldr	r3, [pc, #316]	; (800ba5c <PrintKey+0x1a4>)
 800b920:	2200      	movs	r2, #0
 800b922:	2100      	movs	r1, #0
 800b924:	2002      	movs	r0, #2
 800b926:	f00f fae7 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
 800b92a:	e040      	b.n	800b9ae <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b92c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b930:	2b02      	cmp	r3, #2
 800b932:	d106      	bne.n	800b942 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b934:	4b4a      	ldr	r3, [pc, #296]	; (800ba60 <PrintKey+0x1a8>)
 800b936:	2200      	movs	r2, #0
 800b938:	2100      	movs	r1, #0
 800b93a:	2002      	movs	r0, #2
 800b93c:	f00f fadc 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
 800b940:	e035      	b.n	800b9ae <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b946:	2b04      	cmp	r3, #4
 800b948:	d106      	bne.n	800b958 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b94a:	4b46      	ldr	r3, [pc, #280]	; (800ba64 <PrintKey+0x1ac>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	2100      	movs	r1, #0
 800b950:	2002      	movs	r0, #2
 800b952:	f00f fad1 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
 800b956:	e02a      	b.n	800b9ae <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b95c:	2b7f      	cmp	r3, #127	; 0x7f
 800b95e:	d106      	bne.n	800b96e <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b960:	4b41      	ldr	r3, [pc, #260]	; (800ba68 <PrintKey+0x1b0>)
 800b962:	2200      	movs	r2, #0
 800b964:	2100      	movs	r1, #0
 800b966:	2002      	movs	r0, #2
 800b968:	f00f fac6 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
 800b96c:	e01f      	b.n	800b9ae <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b96e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b972:	2b80      	cmp	r3, #128	; 0x80
 800b974:	d106      	bne.n	800b984 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b976:	4b3d      	ldr	r3, [pc, #244]	; (800ba6c <PrintKey+0x1b4>)
 800b978:	2200      	movs	r2, #0
 800b97a:	2100      	movs	r1, #0
 800b97c:	2002      	movs	r0, #2
 800b97e:	f00f fabb 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
 800b982:	e014      	b.n	800b9ae <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800b984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b988:	2b81      	cmp	r3, #129	; 0x81
 800b98a:	d106      	bne.n	800b99a <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800b98c:	4b38      	ldr	r3, [pc, #224]	; (800ba70 <PrintKey+0x1b8>)
 800b98e:	2200      	movs	r2, #0
 800b990:	2100      	movs	r1, #0
 800b992:	2002      	movs	r0, #2
 800b994:	f00f fab0 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
 800b998:	e009      	b.n	800b9ae <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800b99a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b99e:	2b82      	cmp	r3, #130	; 0x82
 800b9a0:	d105      	bne.n	800b9ae <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800b9a2:	4b34      	ldr	r3, [pc, #208]	; (800ba74 <PrintKey+0x1bc>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	2002      	movs	r0, #2
 800b9aa:	f00f faa5 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b0:	785b      	ldrb	r3, [r3, #1]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b6:	789b      	ldrb	r3, [r3, #2]
 800b9b8:	461c      	mov	r4, r3
 800b9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9bc:	78db      	ldrb	r3, [r3, #3]
 800b9be:	461d      	mov	r5, r3
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	791b      	ldrb	r3, [r3, #4]
 800b9c4:	461e      	mov	r6, r3
 800b9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c8:	795b      	ldrb	r3, [r3, #5]
 800b9ca:	623b      	str	r3, [r7, #32]
 800b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ce:	799b      	ldrb	r3, [r3, #6]
 800b9d0:	61fb      	str	r3, [r7, #28]
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	79db      	ldrb	r3, [r3, #7]
 800b9d6:	61bb      	str	r3, [r7, #24]
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	7a1b      	ldrb	r3, [r3, #8]
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e0:	7a5b      	ldrb	r3, [r3, #9]
 800b9e2:	613b      	str	r3, [r7, #16]
 800b9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e6:	7a9b      	ldrb	r3, [r3, #10]
 800b9e8:	60fb      	str	r3, [r7, #12]
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	7adb      	ldrb	r3, [r3, #11]
 800b9ee:	60bb      	str	r3, [r7, #8]
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	7b1b      	ldrb	r3, [r3, #12]
 800b9f4:	607b      	str	r3, [r7, #4]
 800b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f8:	7b5b      	ldrb	r3, [r3, #13]
 800b9fa:	603b      	str	r3, [r7, #0]
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	7b9b      	ldrb	r3, [r3, #14]
 800ba00:	4619      	mov	r1, r3
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	7bdb      	ldrb	r3, [r3, #15]
 800ba06:	461a      	mov	r2, r3
 800ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0a:	7c1b      	ldrb	r3, [r3, #16]
 800ba0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba0e:	920e      	str	r2, [sp, #56]	; 0x38
 800ba10:	910d      	str	r1, [sp, #52]	; 0x34
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	920c      	str	r2, [sp, #48]	; 0x30
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	920a      	str	r2, [sp, #40]	; 0x28
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	9209      	str	r2, [sp, #36]	; 0x24
 800ba22:	693a      	ldr	r2, [r7, #16]
 800ba24:	9208      	str	r2, [sp, #32]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	9207      	str	r2, [sp, #28]
 800ba2a:	69ba      	ldr	r2, [r7, #24]
 800ba2c:	9206      	str	r2, [sp, #24]
 800ba2e:	69fa      	ldr	r2, [r7, #28]
 800ba30:	9205      	str	r2, [sp, #20]
 800ba32:	6a3b      	ldr	r3, [r7, #32]
 800ba34:	9304      	str	r3, [sp, #16]
 800ba36:	9603      	str	r6, [sp, #12]
 800ba38:	9502      	str	r5, [sp, #8]
 800ba3a:	9401      	str	r4, [sp, #4]
 800ba3c:	9000      	str	r0, [sp, #0]
 800ba3e:	4b0e      	ldr	r3, [pc, #56]	; (800ba78 <PrintKey+0x1c0>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	2100      	movs	r1, #0
 800ba44:	2002      	movs	r0, #2
 800ba46:	f00f fa57 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800ba4a:	bf00      	nop
 800ba4c:	3734      	adds	r7, #52	; 0x34
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba52:	bf00      	nop
 800ba54:	0801bae4 	.word	0x0801bae4
 800ba58:	0801bafc 	.word	0x0801bafc
 800ba5c:	0801bb14 	.word	0x0801bb14
 800ba60:	0801bb2c 	.word	0x0801bb2c
 800ba64:	0801bb44 	.word	0x0801bb44
 800ba68:	0801bb5c 	.word	0x0801bb5c
 800ba6c:	0801bb74 	.word	0x0801bb74
 800ba70:	0801bb8c 	.word	0x0801bb8c
 800ba74:	0801bba4 	.word	0x0801bba4
 800ba78:	0801bbbc 	.word	0x0801bbbc

0800ba7c <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	4603      	mov	r3, r0
 800ba84:	6039      	str	r1, [r7, #0]
 800ba86:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]
 800ba8c:	e01a      	b.n	800bac4 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ba8e:	4b12      	ldr	r3, [pc, #72]	; (800bad8 <GetKeyByID+0x5c>)
 800ba90:	6819      	ldr	r1, [r3, #0]
 800ba92:	7bfa      	ldrb	r2, [r7, #15]
 800ba94:	4613      	mov	r3, r2
 800ba96:	011b      	lsls	r3, r3, #4
 800ba98:	4413      	add	r3, r2
 800ba9a:	440b      	add	r3, r1
 800ba9c:	3310      	adds	r3, #16
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	79fa      	ldrb	r2, [r7, #7]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d10b      	bne.n	800babe <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800baa6:	4b0c      	ldr	r3, [pc, #48]	; (800bad8 <GetKeyByID+0x5c>)
 800baa8:	6819      	ldr	r1, [r3, #0]
 800baaa:	7bfa      	ldrb	r2, [r7, #15]
 800baac:	4613      	mov	r3, r2
 800baae:	011b      	lsls	r3, r3, #4
 800bab0:	4413      	add	r3, r2
 800bab2:	3310      	adds	r3, #16
 800bab4:	18ca      	adds	r2, r1, r3
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800baba:	2300      	movs	r3, #0
 800babc:	e006      	b.n	800bacc <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800babe:	7bfb      	ldrb	r3, [r7, #15]
 800bac0:	3301      	adds	r3, #1
 800bac2:	73fb      	strb	r3, [r7, #15]
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
 800bac6:	2b09      	cmp	r3, #9
 800bac8:	d9e1      	bls.n	800ba8e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800baca:	2303      	movs	r3, #3
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bc80      	pop	{r7}
 800bad4:	4770      	bx	lr
 800bad6:	bf00      	nop
 800bad8:	200004c4 	.word	0x200004c4

0800badc <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800badc:	b590      	push	{r4, r7, lr}
 800bade:	b0d1      	sub	sp, #324	; 0x144
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800bae6:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800baea:	6020      	str	r0, [r4, #0]
 800baec:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800baf0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800baf4:	6001      	str	r1, [r0, #0]
 800baf6:	4619      	mov	r1, r3
 800baf8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bafc:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800bb00:	801a      	strh	r2, [r3, #0]
 800bb02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bb06:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800bb0a:	460a      	mov	r2, r1
 800bb0c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bb0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bb12:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <ComputeCmac+0x48>
 800bb1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d101      	bne.n	800bb28 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bb24:	2302      	movs	r3, #2
 800bb26:	e05c      	b.n	800bbe2 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bb28:	f107 0314 	add.w	r3, r7, #20
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe ff1b 	bl	800a968 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bb32:	f107 0210 	add.w	r2, r7, #16
 800bb36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bb3a:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	4611      	mov	r1, r2
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7ff ff9a 	bl	800ba7c <GetKeyByID>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bb4e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d143      	bne.n	800bbde <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bb56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bb5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	1c5a      	adds	r2, r3, #1
 800bb62:	f107 0314 	add.w	r3, r7, #20
 800bb66:	4611      	mov	r1, r2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe ff16 	bl	800a99a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bb6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bb72:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d009      	beq.n	800bb90 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bb7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bb80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800bb84:	f107 0014 	add.w	r0, r7, #20
 800bb88:	2210      	movs	r2, #16
 800bb8a:	6819      	ldr	r1, [r3, #0]
 800bb8c:	f7fe ff14 	bl	800a9b8 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bb90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bb94:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800bb98:	881a      	ldrh	r2, [r3, #0]
 800bb9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bb9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800bba2:	f107 0014 	add.w	r0, r7, #20
 800bba6:	6819      	ldr	r1, [r3, #0]
 800bba8:	f7fe ff06 	bl	800a9b8 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bbac:	f107 0214 	add.w	r2, r7, #20
 800bbb0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe ffc0 	bl	800ab3c <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bbbc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bbc0:	061a      	lsls	r2, r3, #24
 800bbc2:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800bbc6:	041b      	lsls	r3, r3, #16
 800bbc8:	431a      	orrs	r2, r3
 800bbca:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bbce:	021b      	lsls	r3, r3, #8
 800bbd0:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bbd2:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bbd6:	431a      	orrs	r2, r3
 800bbd8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bbdc:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bbde:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd90      	pop	{r4, r7, pc}

0800bbec <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	e00a      	b.n	800bc16 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bc00:	4a07      	ldr	r2, [pc, #28]	; (800bc20 <SecureElementInit+0x34>)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bc06:	4b06      	ldr	r3, [pc, #24]	; (800bc20 <SecureElementInit+0x34>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	22c0      	movs	r2, #192	; 0xc0
 800bc0c:	4905      	ldr	r1, [pc, #20]	; (800bc24 <SecureElementInit+0x38>)
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f00a fe1d 	bl	801684e <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	200004c4 	.word	0x200004c4
 800bc24:	0801c4f4 	.word	0x0801c4f4

0800bc28 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	4603      	mov	r3, r0
 800bc30:	6039      	str	r1, [r7, #0]
 800bc32:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bc34:	2300      	movs	r3, #0
 800bc36:	73fb      	strb	r3, [r7, #15]
 800bc38:	e01a      	b.n	800bc70 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bc3a:	4b12      	ldr	r3, [pc, #72]	; (800bc84 <SecureElementGetKeyByID+0x5c>)
 800bc3c:	6819      	ldr	r1, [r3, #0]
 800bc3e:	7bfa      	ldrb	r2, [r7, #15]
 800bc40:	4613      	mov	r3, r2
 800bc42:	011b      	lsls	r3, r3, #4
 800bc44:	4413      	add	r3, r2
 800bc46:	440b      	add	r3, r1
 800bc48:	3310      	adds	r3, #16
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	79fa      	ldrb	r2, [r7, #7]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d10b      	bne.n	800bc6a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800bc52:	4b0c      	ldr	r3, [pc, #48]	; (800bc84 <SecureElementGetKeyByID+0x5c>)
 800bc54:	6819      	ldr	r1, [r3, #0]
 800bc56:	7bfa      	ldrb	r2, [r7, #15]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	011b      	lsls	r3, r3, #4
 800bc5c:	4413      	add	r3, r2
 800bc5e:	3310      	adds	r3, #16
 800bc60:	18ca      	adds	r2, r1, r3
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bc66:	2300      	movs	r3, #0
 800bc68:	e006      	b.n	800bc78 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bc6a:	7bfb      	ldrb	r3, [r7, #15]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	73fb      	strb	r3, [r7, #15]
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
 800bc72:	2b09      	cmp	r3, #9
 800bc74:	d9e1      	bls.n	800bc3a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bc76:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bc80      	pop	{r7}
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	200004c4 	.word	0x200004c4

0800bc88 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800bc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc8a:	b08b      	sub	sp, #44	; 0x2c
 800bc8c:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bc8e:	4b3f      	ldr	r3, [pc, #252]	; (800bd8c <SecureElementPrintKeys+0x104>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	2100      	movs	r1, #0
 800bc94:	2002      	movs	r0, #2
 800bc96:	f00f f92f 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	f7ff fe0c 	bl	800b8b8 <PrintKey>
    PrintKey(NWK_KEY);
 800bca0:	2001      	movs	r0, #1
 800bca2:	f7ff fe09 	bl	800b8b8 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bca6:	4b3a      	ldr	r3, [pc, #232]	; (800bd90 <SecureElementPrintKeys+0x108>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2100      	movs	r1, #0
 800bcac:	2002      	movs	r0, #2
 800bcae:	f00f f923 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bcb2:	2003      	movs	r0, #3
 800bcb4:	f7ff fe00 	bl	800b8b8 <PrintKey>
    PrintKey(NWK_S_KEY);
 800bcb8:	2002      	movs	r0, #2
 800bcba:	f7ff fdfd 	bl	800b8b8 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800bcbe:	4b35      	ldr	r3, [pc, #212]	; (800bd94 <SecureElementPrintKeys+0x10c>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	2002      	movs	r0, #2
 800bcc6:	f00f f917 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bcca:	4b33      	ldr	r3, [pc, #204]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	4b31      	ldr	r3, [pc, #196]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	785b      	ldrb	r3, [r3, #1]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	4b2f      	ldr	r3, [pc, #188]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	789b      	ldrb	r3, [r3, #2]
 800bce0:	4618      	mov	r0, r3
 800bce2:	4b2d      	ldr	r3, [pc, #180]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	78db      	ldrb	r3, [r3, #3]
 800bce8:	461c      	mov	r4, r3
 800bcea:	4b2b      	ldr	r3, [pc, #172]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	791b      	ldrb	r3, [r3, #4]
 800bcf0:	461d      	mov	r5, r3
 800bcf2:	4b29      	ldr	r3, [pc, #164]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	795b      	ldrb	r3, [r3, #5]
 800bcf8:	461e      	mov	r6, r3
 800bcfa:	4b27      	ldr	r3, [pc, #156]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	799b      	ldrb	r3, [r3, #6]
 800bd00:	607b      	str	r3, [r7, #4]
 800bd02:	4b25      	ldr	r3, [pc, #148]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	79db      	ldrb	r3, [r3, #7]
 800bd08:	9307      	str	r3, [sp, #28]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	9306      	str	r3, [sp, #24]
 800bd0e:	9605      	str	r6, [sp, #20]
 800bd10:	9504      	str	r5, [sp, #16]
 800bd12:	9403      	str	r4, [sp, #12]
 800bd14:	9002      	str	r0, [sp, #8]
 800bd16:	9101      	str	r1, [sp, #4]
 800bd18:	9200      	str	r2, [sp, #0]
 800bd1a:	4b20      	ldr	r3, [pc, #128]	; (800bd9c <SecureElementPrintKeys+0x114>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	2100      	movs	r1, #0
 800bd20:	2002      	movs	r0, #2
 800bd22:	f00f f8e9 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bd26:	4b1c      	ldr	r3, [pc, #112]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	7a1b      	ldrb	r3, [r3, #8]
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	4b1a      	ldr	r3, [pc, #104]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	7a5b      	ldrb	r3, [r3, #9]
 800bd34:	4619      	mov	r1, r3
 800bd36:	4b18      	ldr	r3, [pc, #96]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	7a9b      	ldrb	r3, [r3, #10]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	4b16      	ldr	r3, [pc, #88]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	7adb      	ldrb	r3, [r3, #11]
 800bd44:	461c      	mov	r4, r3
 800bd46:	4b14      	ldr	r3, [pc, #80]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	7b1b      	ldrb	r3, [r3, #12]
 800bd4c:	461d      	mov	r5, r3
 800bd4e:	4b12      	ldr	r3, [pc, #72]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	7b5b      	ldrb	r3, [r3, #13]
 800bd54:	461e      	mov	r6, r3
 800bd56:	4b10      	ldr	r3, [pc, #64]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	7b9b      	ldrb	r3, [r3, #14]
 800bd5c:	607b      	str	r3, [r7, #4]
 800bd5e:	4b0e      	ldr	r3, [pc, #56]	; (800bd98 <SecureElementPrintKeys+0x110>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	7bdb      	ldrb	r3, [r3, #15]
 800bd64:	9307      	str	r3, [sp, #28]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	9306      	str	r3, [sp, #24]
 800bd6a:	9605      	str	r6, [sp, #20]
 800bd6c:	9504      	str	r5, [sp, #16]
 800bd6e:	9403      	str	r4, [sp, #12]
 800bd70:	9002      	str	r0, [sp, #8]
 800bd72:	9101      	str	r1, [sp, #4]
 800bd74:	9200      	str	r2, [sp, #0]
 800bd76:	4b0a      	ldr	r3, [pc, #40]	; (800bda0 <SecureElementPrintKeys+0x118>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	2002      	movs	r0, #2
 800bd7e:	f00f f8bb 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd8c:	0801bc10 	.word	0x0801bc10
 800bd90:	0801bc28 	.word	0x0801bc28
 800bd94:	0801bc40 	.word	0x0801bc40
 800bd98:	200004c4 	.word	0x200004c4
 800bd9c:	0801bc58 	.word	0x0801bc58
 800bda0:	0801bc98 	.word	0x0801bc98

0800bda4 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800bda8:	2004      	movs	r0, #4
 800bdaa:	f7ff fd85 	bl	800b8b8 <PrintKey>
    PrintKey(MC_KE_KEY);
 800bdae:	207f      	movs	r0, #127	; 0x7f
 800bdb0:	f7ff fd82 	bl	800b8b8 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800bdb4:	2002      	movs	r0, #2
 800bdb6:	f7ff fd7f 	bl	800b8b8 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800bdba:	2003      	movs	r0, #3
 800bdbc:	f7ff fd7c 	bl	800b8b8 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	bd80      	pop	{r7, pc}
	...

0800bdc8 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	6039      	str	r1, [r7, #0]
 800bdd2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d101      	bne.n	800bdde <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdda:	2302      	movs	r3, #2
 800bddc:	e04c      	b.n	800be78 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdde:	2300      	movs	r3, #0
 800bde0:	77fb      	strb	r3, [r7, #31]
 800bde2:	e045      	b.n	800be70 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bde4:	4b26      	ldr	r3, [pc, #152]	; (800be80 <SecureElementSetKey+0xb8>)
 800bde6:	6819      	ldr	r1, [r3, #0]
 800bde8:	7ffa      	ldrb	r2, [r7, #31]
 800bdea:	4613      	mov	r3, r2
 800bdec:	011b      	lsls	r3, r3, #4
 800bdee:	4413      	add	r3, r2
 800bdf0:	440b      	add	r3, r1
 800bdf2:	3310      	adds	r3, #16
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	79fa      	ldrb	r2, [r7, #7]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d136      	bne.n	800be6a <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	2b80      	cmp	r3, #128	; 0x80
 800be00:	d123      	bne.n	800be4a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800be02:	2306      	movs	r3, #6
 800be04:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800be06:	2300      	movs	r3, #0
 800be08:	60fb      	str	r3, [r7, #12]
 800be0a:	f107 0310 	add.w	r3, r7, #16
 800be0e:	2200      	movs	r2, #0
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	605a      	str	r2, [r3, #4]
 800be14:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800be16:	f107 030c 	add.w	r3, r7, #12
 800be1a:	227f      	movs	r2, #127	; 0x7f
 800be1c:	2110      	movs	r1, #16
 800be1e:	6838      	ldr	r0, [r7, #0]
 800be20:	f000 f87d 	bl	800bf1e <SecureElementAesEncrypt>
 800be24:	4603      	mov	r3, r0
 800be26:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800be28:	4b15      	ldr	r3, [pc, #84]	; (800be80 <SecureElementSetKey+0xb8>)
 800be2a:	6819      	ldr	r1, [r3, #0]
 800be2c:	7ffa      	ldrb	r2, [r7, #31]
 800be2e:	4613      	mov	r3, r2
 800be30:	011b      	lsls	r3, r3, #4
 800be32:	4413      	add	r3, r2
 800be34:	3310      	adds	r3, #16
 800be36:	440b      	add	r3, r1
 800be38:	3301      	adds	r3, #1
 800be3a:	f107 010c 	add.w	r1, r7, #12
 800be3e:	2210      	movs	r2, #16
 800be40:	4618      	mov	r0, r3
 800be42:	f00a fd04 	bl	801684e <memcpy1>
                return retval;
 800be46:	7fbb      	ldrb	r3, [r7, #30]
 800be48:	e016      	b.n	800be78 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800be4a:	4b0d      	ldr	r3, [pc, #52]	; (800be80 <SecureElementSetKey+0xb8>)
 800be4c:	6819      	ldr	r1, [r3, #0]
 800be4e:	7ffa      	ldrb	r2, [r7, #31]
 800be50:	4613      	mov	r3, r2
 800be52:	011b      	lsls	r3, r3, #4
 800be54:	4413      	add	r3, r2
 800be56:	3310      	adds	r3, #16
 800be58:	440b      	add	r3, r1
 800be5a:	3301      	adds	r3, #1
 800be5c:	2210      	movs	r2, #16
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	4618      	mov	r0, r3
 800be62:	f00a fcf4 	bl	801684e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800be66:	2300      	movs	r3, #0
 800be68:	e006      	b.n	800be78 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be6a:	7ffb      	ldrb	r3, [r7, #31]
 800be6c:	3301      	adds	r3, #1
 800be6e:	77fb      	strb	r3, [r7, #31]
 800be70:	7ffb      	ldrb	r3, [r7, #31]
 800be72:	2b09      	cmp	r3, #9
 800be74:	d9b6      	bls.n	800bde4 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be76:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3720      	adds	r7, #32
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	200004c4 	.word	0x200004c4

0800be84 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b086      	sub	sp, #24
 800be88:	af02      	add	r7, sp, #8
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	4611      	mov	r1, r2
 800be90:	461a      	mov	r2, r3
 800be92:	460b      	mov	r3, r1
 800be94:	80fb      	strh	r3, [r7, #6]
 800be96:	4613      	mov	r3, r2
 800be98:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800be9a:	797b      	ldrb	r3, [r7, #5]
 800be9c:	2b7e      	cmp	r3, #126	; 0x7e
 800be9e:	d901      	bls.n	800bea4 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bea0:	2303      	movs	r3, #3
 800bea2:	e009      	b.n	800beb8 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800bea4:	7979      	ldrb	r1, [r7, #5]
 800bea6:	88fa      	ldrh	r2, [r7, #6]
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	460b      	mov	r3, r1
 800beae:	68b9      	ldr	r1, [r7, #8]
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f7ff fe13 	bl	800badc <ComputeCmac>
 800beb6:	4603      	mov	r3, r0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b088      	sub	sp, #32
 800bec4:	af02      	add	r7, sp, #8
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	607a      	str	r2, [r7, #4]
 800beca:	461a      	mov	r2, r3
 800becc:	460b      	mov	r3, r1
 800bece:	817b      	strh	r3, [r7, #10]
 800bed0:	4613      	mov	r3, r2
 800bed2:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800beda:	2302      	movs	r3, #2
 800bedc:	e01b      	b.n	800bf16 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bede:	2306      	movs	r3, #6
 800bee0:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800bee2:	2300      	movs	r3, #0
 800bee4:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bee6:	7a79      	ldrb	r1, [r7, #9]
 800bee8:	897a      	ldrh	r2, [r7, #10]
 800beea:	f107 0310 	add.w	r3, r7, #16
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	460b      	mov	r3, r1
 800bef2:	68f9      	ldr	r1, [r7, #12]
 800bef4:	2000      	movs	r0, #0
 800bef6:	f7ff fdf1 	bl	800badc <ComputeCmac>
 800befa:	4603      	mov	r3, r0
 800befc:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800befe:	7dfb      	ldrb	r3, [r7, #23]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d001      	beq.n	800bf08 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800bf04:	7dfb      	ldrb	r3, [r7, #23]
 800bf06:	e006      	b.n	800bf16 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d001      	beq.n	800bf14 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bf10:	2301      	movs	r3, #1
 800bf12:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b0c2      	sub	sp, #264	; 0x108
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	60f8      	str	r0, [r7, #12]
 800bf26:	4608      	mov	r0, r1
 800bf28:	4611      	mov	r1, r2
 800bf2a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bf2e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800bf32:	6013      	str	r3, [r2, #0]
 800bf34:	4603      	mov	r3, r0
 800bf36:	817b      	strh	r3, [r7, #10]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d006      	beq.n	800bf50 <SecureElementAesEncrypt+0x32>
 800bf42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d101      	bne.n	800bf54 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf50:	2302      	movs	r3, #2
 800bf52:	e046      	b.n	800bfe2 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bf54:	897b      	ldrh	r3, [r7, #10]
 800bf56:	f003 030f 	and.w	r3, r3, #15
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d001      	beq.n	800bf64 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bf60:	2305      	movs	r3, #5
 800bf62:	e03e      	b.n	800bfe2 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bf64:	f107 0314 	add.w	r3, r7, #20
 800bf68:	22f0      	movs	r2, #240	; 0xf0
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f00a fca9 	bl	80168c4 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bf72:	f107 0210 	add.w	r2, r7, #16
 800bf76:	7a7b      	ldrb	r3, [r7, #9]
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7ff fd7e 	bl	800ba7c <GetKeyByID>
 800bf80:	4603      	mov	r3, r0
 800bf82:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bf86:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d127      	bne.n	800bfde <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	3301      	adds	r3, #1
 800bf92:	f107 0214 	add.w	r2, r7, #20
 800bf96:	2110      	movs	r1, #16
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7ff fb65 	bl	800b668 <lorawan_aes_set_key>

        uint8_t block = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800bfa4:	e018      	b.n	800bfd8 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800bfa6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	18d0      	adds	r0, r2, r3
 800bfae:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bfb2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bfb6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800bfba:	6812      	ldr	r2, [r2, #0]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	f107 0214 	add.w	r2, r7, #20
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	f7ff fc2e 	bl	800b824 <lorawan_aes_encrypt>
            block = block + 16;
 800bfc8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bfcc:	3310      	adds	r3, #16
 800bfce:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800bfd2:	897b      	ldrh	r3, [r7, #10]
 800bfd4:	3b10      	subs	r3, #16
 800bfd6:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800bfd8:	897b      	ldrh	r3, [r7, #10]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1e3      	bne.n	800bfa6 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bfde:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b088      	sub	sp, #32
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	70fb      	strb	r3, [r7, #3]
 800bff8:	4613      	mov	r3, r2
 800bffa:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c002:	2302      	movs	r3, #2
 800c004:	e02e      	b.n	800c064 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c006:	2306      	movs	r3, #6
 800c008:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c00a:	78bb      	ldrb	r3, [r7, #2]
 800c00c:	2b7f      	cmp	r3, #127	; 0x7f
 800c00e:	d104      	bne.n	800c01a <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c010:	78fb      	ldrb	r3, [r7, #3]
 800c012:	2b04      	cmp	r3, #4
 800c014:	d001      	beq.n	800c01a <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c016:	2303      	movs	r3, #3
 800c018:	e024      	b.n	800c064 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c01a:	2300      	movs	r3, #0
 800c01c:	60fb      	str	r3, [r7, #12]
 800c01e:	f107 0310 	add.w	r3, r7, #16
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	605a      	str	r2, [r3, #4]
 800c028:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c02a:	f107 030c 	add.w	r3, r7, #12
 800c02e:	78fa      	ldrb	r2, [r7, #3]
 800c030:	2110      	movs	r1, #16
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f7ff ff73 	bl	800bf1e <SecureElementAesEncrypt>
 800c038:	4603      	mov	r3, r0
 800c03a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c03c:	7ffb      	ldrb	r3, [r7, #31]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d001      	beq.n	800c046 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c042:	7ffb      	ldrb	r3, [r7, #31]
 800c044:	e00e      	b.n	800c064 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c046:	f107 020c 	add.w	r2, r7, #12
 800c04a:	78bb      	ldrb	r3, [r7, #2]
 800c04c:	4611      	mov	r1, r2
 800c04e:	4618      	mov	r0, r3
 800c050:	f7ff feba 	bl	800bdc8 <SecureElementSetKey>
 800c054:	4603      	mov	r3, r0
 800c056:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c058:	7ffb      	ldrb	r3, [r7, #31]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d001      	beq.n	800c062 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c05e:	7ffb      	ldrb	r3, [r7, #31]
 800c060:	e000      	b.n	800c064 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c062:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c064:	4618      	mov	r0, r3
 800c066:	3720      	adds	r7, #32
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	60b9      	str	r1, [r7, #8]
 800c074:	607b      	str	r3, [r7, #4]
 800c076:	4603      	mov	r3, r0
 800c078:	73fb      	strb	r3, [r7, #15]
 800c07a:	4613      	mov	r3, r2
 800c07c:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d005      	beq.n	800c090 <SecureElementProcessJoinAccept+0x24>
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	2b00      	cmp	r3, #0
 800c088:	d002      	beq.n	800c090 <SecureElementProcessJoinAccept+0x24>
 800c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d101      	bne.n	800c094 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c090:	2302      	movs	r3, #2
 800c092:	e064      	b.n	800c15e <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c094:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c098:	2b21      	cmp	r3, #33	; 0x21
 800c09a:	d901      	bls.n	800c0a0 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c09c:	2305      	movs	r3, #5
 800c09e:	e05e      	b.n	800c15e <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c0a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0b0:	f00a fbcd 	bl	801684e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	1c58      	adds	r0, r3, #1
 800c0b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	b299      	uxth	r1, r3
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	7dfa      	ldrb	r2, [r7, #23]
 800c0c8:	f7ff ff29 	bl	800bf1e <SecureElementAesEncrypt>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c0d2:	2307      	movs	r3, #7
 800c0d4:	e043      	b.n	800c15e <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d8:	330b      	adds	r3, #11
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	09db      	lsrs	r3, r3, #7
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c0e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0ec:	3b04      	subs	r3, #4
 800c0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0f0:	4413      	add	r3, r2
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c0f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0fa:	3b03      	subs	r3, #3
 800c0fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0fe:	4413      	add	r3, r2
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	021b      	lsls	r3, r3, #8
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	4313      	orrs	r3, r2
 800c108:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c10a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c10e:	3b02      	subs	r3, #2
 800c110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c112:	4413      	add	r3, r2
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	041b      	lsls	r3, r3, #16
 800c118:	693a      	ldr	r2, [r7, #16]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c11e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c122:	3b01      	subs	r3, #1
 800c124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c126:	4413      	add	r3, r2
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	061b      	lsls	r3, r3, #24
 800c12c:	693a      	ldr	r2, [r7, #16]
 800c12e:	4313      	orrs	r3, r2
 800c130:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10e      	bne.n	800c158 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c13a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c13e:	b29b      	uxth	r3, r3
 800c140:	3b04      	subs	r3, #4
 800c142:	b299      	uxth	r1, r3
 800c144:	2301      	movs	r3, #1
 800c146:	693a      	ldr	r2, [r7, #16]
 800c148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c14a:	f7ff feb9 	bl	800bec0 <SecureElementVerifyAesCmac>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d003      	beq.n	800c15c <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c154:	2301      	movs	r3, #1
 800c156:	e002      	b.n	800c15e <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c158:	2304      	movs	r3, #4
 800c15a:	e000      	b.n	800c15e <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
	...

0800c168 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c176:	2302      	movs	r3, #2
 800c178:	e006      	b.n	800c188 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c17a:	4b05      	ldr	r3, [pc, #20]	; (800c190 <SecureElementRandomNumber+0x28>)
 800c17c:	695b      	ldr	r3, [r3, #20]
 800c17e:	4798      	blx	r3
 800c180:	4602      	mov	r2, r0
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	0801c3ac 	.word	0x0801c3ac

0800c194 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1a2:	2302      	movs	r3, #2
 800c1a4:	e007      	b.n	800c1b6 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c1a6:	4b06      	ldr	r3, [pc, #24]	; (800c1c0 <SecureElementSetDevEui+0x2c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2208      	movs	r2, #8
 800c1ac:	6879      	ldr	r1, [r7, #4]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f00a fb4d 	bl	801684e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	200004c4 	.word	0x200004c4

0800c1c4 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c1c8:	4b02      	ldr	r3, [pc, #8]	; (800c1d4 <SecureElementGetDevEui+0x10>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bc80      	pop	{r7}
 800c1d2:	4770      	bx	lr
 800c1d4:	200004c4 	.word	0x200004c4

0800c1d8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	e008      	b.n	800c1fc <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c1ea:	4b06      	ldr	r3, [pc, #24]	; (800c204 <SecureElementSetJoinEui+0x2c>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3308      	adds	r3, #8
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f00a fb2a 	bl	801684e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	200004c4 	.word	0x200004c4

0800c208 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c208:	b480      	push	{r7}
 800c20a:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c20c:	4b03      	ldr	r3, [pc, #12]	; (800c21c <SecureElementGetJoinEui+0x14>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	3308      	adds	r3, #8
}
 800c212:	4618      	mov	r0, r3
 800c214:	46bd      	mov	sp, r7
 800c216:	bc80      	pop	{r7}
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	200004c4 	.word	0x200004c4

0800c220 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c22a:	4a1a      	ldr	r2, [pc, #104]	; (800c294 <LmHandlerInit+0x74>)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c230:	4b19      	ldr	r3, [pc, #100]	; (800c298 <LmHandlerInit+0x78>)
 800c232:	4a1a      	ldr	r2, [pc, #104]	; (800c29c <LmHandlerInit+0x7c>)
 800c234:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c236:	4b18      	ldr	r3, [pc, #96]	; (800c298 <LmHandlerInit+0x78>)
 800c238:	4a19      	ldr	r2, [pc, #100]	; (800c2a0 <LmHandlerInit+0x80>)
 800c23a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c23c:	4b16      	ldr	r3, [pc, #88]	; (800c298 <LmHandlerInit+0x78>)
 800c23e:	4a19      	ldr	r2, [pc, #100]	; (800c2a4 <LmHandlerInit+0x84>)
 800c240:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c242:	4b15      	ldr	r3, [pc, #84]	; (800c298 <LmHandlerInit+0x78>)
 800c244:	4a18      	ldr	r2, [pc, #96]	; (800c2a8 <LmHandlerInit+0x88>)
 800c246:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c248:	4b12      	ldr	r3, [pc, #72]	; (800c294 <LmHandlerInit+0x74>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a17      	ldr	r2, [pc, #92]	; (800c2ac <LmHandlerInit+0x8c>)
 800c250:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c252:	4b10      	ldr	r3, [pc, #64]	; (800c294 <LmHandlerInit+0x74>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	4a14      	ldr	r2, [pc, #80]	; (800c2ac <LmHandlerInit+0x8c>)
 800c25a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c25c:	4b0d      	ldr	r3, [pc, #52]	; (800c294 <LmHandlerInit+0x74>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	4a12      	ldr	r2, [pc, #72]	; (800c2ac <LmHandlerInit+0x8c>)
 800c264:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c266:	4b11      	ldr	r3, [pc, #68]	; (800c2ac <LmHandlerInit+0x8c>)
 800c268:	4a11      	ldr	r2, [pc, #68]	; (800c2b0 <LmHandlerInit+0x90>)
 800c26a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c26c:	4b09      	ldr	r3, [pc, #36]	; (800c294 <LmHandlerInit+0x74>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	4a0e      	ldr	r2, [pc, #56]	; (800c2ac <LmHandlerInit+0x8c>)
 800c274:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c276:	490f      	ldr	r1, [pc, #60]	; (800c2b4 <LmHandlerInit+0x94>)
 800c278:	2000      	movs	r0, #0
 800c27a:	f000 fd8f 	bl	800cd9c <LmHandlerPackageRegister>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	d002      	beq.n	800c28a <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c288:	e000      	b.n	800c28c <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	200004f0 	.word	0x200004f0
 800c298:	200004f4 	.word	0x200004f4
 800c29c:	0800ca69 	.word	0x0800ca69
 800c2a0:	0800cad1 	.word	0x0800cad1
 800c2a4:	0800cbad 	.word	0x0800cbad
 800c2a8:	0800ccc9 	.word	0x0800ccc9
 800c2ac:	20000504 	.word	0x20000504
 800c2b0:	0800d139 	.word	0x0800d139
 800c2b4:	200000a8 	.word	0x200000a8

0800c2b8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b094      	sub	sp, #80	; 0x50
 800c2bc:	af04      	add	r7, sp, #16
 800c2be:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c2c0:	2214      	movs	r2, #20
 800c2c2:	6879      	ldr	r1, [r7, #4]
 800c2c4:	488f      	ldr	r0, [pc, #572]	; (800c504 <LmHandlerConfigure+0x24c>)
 800c2c6:	f00d fdc7 	bl	8019e58 <UTIL_MEM_cpy_8>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c2ca:	f7fe fb0b 	bl	800a8e4 <LoraInfo_GetPtr>
 800c2ce:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c2d0:	4b8c      	ldr	r3, [pc, #560]	; (800c504 <LmHandlerConfigure+0x24c>)
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	4093      	lsls	r3, r2
 800c2da:	461a      	mov	r2, r3
 800c2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d106      	bne.n	800c2f4 <LmHandlerConfigure+0x3c>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c2e6:	4b88      	ldr	r3, [pc, #544]	; (800c508 <LmHandlerConfigure+0x250>)
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	f00e fe03 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c2f2:	e7fe      	b.n	800c2f2 <LmHandlerConfigure+0x3a>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c2f4:	4b83      	ldr	r3, [pc, #524]	; (800c504 <LmHandlerConfigure+0x24c>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	4984      	ldr	r1, [pc, #528]	; (800c50c <LmHandlerConfigure+0x254>)
 800c2fc:	4884      	ldr	r0, [pc, #528]	; (800c510 <LmHandlerConfigure+0x258>)
 800c2fe:	f004 fc1d 	bl	8010b3c <LoRaMacInitialization>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d002      	beq.n	800c30e <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800c308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c30c:	e0f5      	b.n	800c4fa <LmHandlerConfigure+0x242>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800c30e:	2326      	movs	r3, #38	; 0x26
 800c310:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c312:	f107 0318 	add.w	r3, r7, #24
 800c316:	4618      	mov	r0, r3
 800c318:	f005 f934 	bl	8011584 <LoRaMacMibSetRequestConfirm>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d103      	bne.n	800c32a <LmHandlerConfigure+0x72>
    {
        CtxRestoreDone = true;
 800c322:	4b7c      	ldr	r3, [pc, #496]	; (800c514 <LmHandlerConfigure+0x25c>)
 800c324:	2201      	movs	r2, #1
 800c326:	701a      	strb	r2, [r3, #0]
 800c328:	e02a      	b.n	800c380 <LmHandlerConfigure+0xc8>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c32a:	2327      	movs	r3, #39	; 0x27
 800c32c:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800c32e:	4b7a      	ldr	r3, [pc, #488]	; (800c518 <LmHandlerConfigure+0x260>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d00c      	beq.n	800c352 <LmHandlerConfigure+0x9a>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c338:	f107 0318 	add.w	r3, r7, #24
 800c33c:	4618      	mov	r0, r3
 800c33e:	f004 ff9b 	bl	8011278 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c342:	4b75      	ldr	r3, [pc, #468]	; (800c518 <LmHandlerConfigure+0x260>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	69fa      	ldr	r2, [r7, #28]
 800c34a:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800c34e:	4610      	mov	r0, r2
 800c350:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800c352:	2326      	movs	r3, #38	; 0x26
 800c354:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c356:	f107 0318 	add.w	r3, r7, #24
 800c35a:	4618      	mov	r0, r3
 800c35c:	f005 f912 	bl	8011584 <LoRaMacMibSetRequestConfirm>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d10c      	bne.n	800c380 <LmHandlerConfigure+0xc8>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c366:	2301      	movs	r3, #1
 800c368:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c36a:	f107 0318 	add.w	r3, r7, #24
 800c36e:	4618      	mov	r0, r3
 800c370:	f004 ff82 	bl	8011278 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800c374:	7f3b      	ldrb	r3, [r7, #28]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <LmHandlerConfigure+0xc8>
            {
                CtxRestoreDone = true;
 800c37a:	4b66      	ldr	r3, [pc, #408]	; (800c514 <LmHandlerConfigure+0x25c>)
 800c37c:	2201      	movs	r2, #1
 800c37e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800c380:	4b64      	ldr	r3, [pc, #400]	; (800c514 <LmHandlerConfigure+0x25c>)
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d02a      	beq.n	800c3de <LmHandlerConfigure+0x126>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c388:	4b63      	ldr	r3, [pc, #396]	; (800c518 <LmHandlerConfigure+0x260>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	69db      	ldr	r3, [r3, #28]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d004      	beq.n	800c39c <LmHandlerConfigure+0xe4>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c392:	4b61      	ldr	r3, [pc, #388]	; (800c518 <LmHandlerConfigure+0x260>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	69db      	ldr	r3, [r3, #28]
 800c398:	2000      	movs	r0, #0
 800c39a:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800c39c:	2306      	movs	r3, #6
 800c39e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c3a0:	f107 0318 	add.w	r3, r7, #24
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f004 ff67 	bl	8011278 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	4a5b      	ldr	r2, [pc, #364]	; (800c51c <LmHandlerConfigure+0x264>)
 800c3ae:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800c3b0:	2326      	movs	r3, #38	; 0x26
 800c3b2:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c3b4:	f107 0318 	add.w	r3, r7, #24
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f004 ff5d 	bl	8011278 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c3c4:	4b4f      	ldr	r3, [pc, #316]	; (800c504 <LmHandlerConfigure+0x24c>)
 800c3c6:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800c3ce:	4b4d      	ldr	r3, [pc, #308]	; (800c504 <LmHandlerConfigure+0x24c>)
 800c3d0:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800c3d8:	4b4a      	ldr	r3, [pc, #296]	; (800c504 <LmHandlerConfigure+0x24c>)
 800c3da:	709a      	strb	r2, [r3, #2]
 800c3dc:	e019      	b.n	800c412 <LmHandlerConfigure+0x15a>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800c3de:	2305      	movs	r3, #5
 800c3e0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c3e6:	f107 0318 	add.w	r3, r7, #24
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f005 f8ca 	bl	8011584 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c3f0:	4b49      	ldr	r3, [pc, #292]	; (800c518 <LmHandlerConfigure+0x260>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	4798      	blx	r3
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	4a48      	ldr	r2, [pc, #288]	; (800c51c <LmHandlerConfigure+0x264>)
 800c3fc:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800c3fe:	2306      	movs	r3, #6
 800c400:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c402:	4b46      	ldr	r3, [pc, #280]	; (800c51c <LmHandlerConfigure+0x264>)
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c408:	f107 0318 	add.w	r3, r7, #24
 800c40c:	4618      	mov	r0, r3
 800c40e:	f005 f8b9 	bl	8011584 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c412:	2302      	movs	r3, #2
 800c414:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c416:	f107 0318 	add.w	r3, r7, #24
 800c41a:	4618      	mov	r0, r3
 800c41c:	f004 ff2c 	bl	8011278 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	2208      	movs	r2, #8
 800c424:	4619      	mov	r1, r3
 800c426:	483d      	ldr	r0, [pc, #244]	; (800c51c <LmHandlerConfigure+0x264>)
 800c428:	f00a fa11 	bl	801684e <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c42c:	2303      	movs	r3, #3
 800c42e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c430:	f107 0318 	add.w	r3, r7, #24
 800c434:	4618      	mov	r0, r3
 800c436:	f004 ff1f 	bl	8011278 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	2208      	movs	r2, #8
 800c43e:	4619      	mov	r1, r3
 800c440:	4837      	ldr	r0, [pc, #220]	; (800c520 <LmHandlerConfigure+0x268>)
 800c442:	f00a fa04 	bl	801684e <memcpy1>

    SecureElementPrintKeys();
 800c446:	f7ff fc1f 	bl	800bc88 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c44a:	4b36      	ldr	r3, [pc, #216]	; (800c524 <LmHandlerConfigure+0x26c>)
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	461a      	mov	r2, r3
 800c450:	4b35      	ldr	r3, [pc, #212]	; (800c528 <LmHandlerConfigure+0x270>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	4619      	mov	r1, r3
 800c456:	4b35      	ldr	r3, [pc, #212]	; (800c52c <LmHandlerConfigure+0x274>)
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	4618      	mov	r0, r3
 800c45c:	4b34      	ldr	r3, [pc, #208]	; (800c530 <LmHandlerConfigure+0x278>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	9303      	str	r3, [sp, #12]
 800c462:	9002      	str	r0, [sp, #8]
 800c464:	9101      	str	r1, [sp, #4]
 800c466:	9200      	str	r2, [sp, #0]
 800c468:	4b32      	ldr	r3, [pc, #200]	; (800c534 <LmHandlerConfigure+0x27c>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	2100      	movs	r1, #0
 800c46e:	2002      	movs	r0, #2
 800c470:	f00e fd42 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c474:	230f      	movs	r3, #15
 800c476:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c478:	2301      	movs	r3, #1
 800c47a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c47c:	f107 0318 	add.w	r3, r7, #24
 800c480:	4618      	mov	r0, r3
 800c482:	f005 f87f 	bl	8011584 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c486:	2310      	movs	r3, #16
 800c488:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c48a:	2300      	movs	r3, #0
 800c48c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c48e:	f107 0318 	add.w	r3, r7, #24
 800c492:	4618      	mov	r0, r3
 800c494:	f005 f876 	bl	8011584 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c498:	2304      	movs	r3, #4
 800c49a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c49c:	4b19      	ldr	r3, [pc, #100]	; (800c504 <LmHandlerConfigure+0x24c>)
 800c49e:	789b      	ldrb	r3, [r3, #2]
 800c4a0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c4a2:	f107 0318 	add.w	r3, r7, #24
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f005 f86c 	bl	8011584 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c4ac:	2337      	movs	r3, #55	; 0x37
 800c4ae:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c4b0:	4b14      	ldr	r3, [pc, #80]	; (800c504 <LmHandlerConfigure+0x24c>)
 800c4b2:	691b      	ldr	r3, [r3, #16]
 800c4b4:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c4b6:	f107 0318 	add.w	r3, r7, #24
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f005 f862 	bl	8011584 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c4c0:	230f      	movs	r3, #15
 800c4c2:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c4c4:	4b0f      	ldr	r3, [pc, #60]	; (800c504 <LmHandlerConfigure+0x24c>)
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	f107 0210 	add.w	r2, r7, #16
 800c4cc:	4611      	mov	r1, r2
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f007 feaa 	bl	8014228 <RegionGetPhyParam>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	bf14      	ite	ne
 800c4de:	2301      	movne	r3, #1
 800c4e0:	2300      	moveq	r3, #0
 800c4e2:	b2da      	uxtb	r2, r3
 800c4e4:	4b07      	ldr	r3, [pc, #28]	; (800c504 <LmHandlerConfigure+0x24c>)
 800c4e6:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c4e8:	2014      	movs	r0, #20
 800c4ea:	f000 faa5 	bl	800ca38 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c4ee:	4b05      	ldr	r3, [pc, #20]	; (800c504 <LmHandlerConfigure+0x24c>)
 800c4f0:	799b      	ldrb	r3, [r3, #6]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f005 fdd6 	bl	80120a4 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3740      	adds	r7, #64	; 0x40
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	200004dc 	.word	0x200004dc
 800c508:	0801bcd8 	.word	0x0801bcd8
 800c50c:	20000504 	.word	0x20000504
 800c510:	200004f4 	.word	0x200004f4
 800c514:	2000060e 	.word	0x2000060e
 800c518:	200004f0 	.word	0x200004f0
 800c51c:	20000090 	.word	0x20000090
 800c520:	20000098 	.word	0x20000098
 800c524:	200000a7 	.word	0x200000a7
 800c528:	200000a6 	.word	0x200000a6
 800c52c:	200000a5 	.word	0x200000a5
 800c530:	200000a4 	.word	0x200000a4
 800c534:	0801bd24 	.word	0x0801bd24

0800c538 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c53c:	f002 fad0 	bl	800eae0 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c540:	f000 fd30 	bl	800cfa4 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c544:	bf00      	nop
 800c546:	bd80      	pop	{r7, pc}

0800c548 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c548:	b480      	push	{r7}
 800c54a:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c54c:	4b02      	ldr	r3, [pc, #8]	; (800c558 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c54e:	681b      	ldr	r3, [r3, #0]
}
 800c550:	4618      	mov	r0, r3
 800c552:	46bd      	mov	sp, r7
 800c554:	bc80      	pop	{r7}
 800c556:	4770      	bx	lr
 800c558:	20000518 	.word	0x20000518

0800c55c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b090      	sub	sp, #64	; 0x40
 800c560:	af00      	add	r7, sp, #0
 800c562:	4603      	mov	r3, r0
 800c564:	460a      	mov	r2, r1
 800c566:	71fb      	strb	r3, [r7, #7]
 800c568:	4613      	mov	r3, r2
 800c56a:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c56c:	2301      	movs	r3, #1
 800c56e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c572:	4b35      	ldr	r3, [pc, #212]	; (800c648 <LmHandlerJoin+0xec>)
 800c574:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c57e:	79fb      	ldrb	r3, [r7, #7]
 800c580:	2b02      	cmp	r3, #2
 800c582:	d110      	bne.n	800c5a6 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c584:	2302      	movs	r3, #2
 800c586:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c58a:	4b30      	ldr	r3, [pc, #192]	; (800c64c <LmHandlerJoin+0xf0>)
 800c58c:	2202      	movs	r2, #2
 800c58e:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c590:	4a2e      	ldr	r2, [pc, #184]	; (800c64c <LmHandlerJoin+0xf0>)
 800c592:	79bb      	ldrb	r3, [r7, #6]
 800c594:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c596:	f004 fd85 	bl	80110a4 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c59a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f005 fb4a 	bl	8011c38 <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800c5a4:	e04b      	b.n	800c63e <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c5ac:	4b27      	ldr	r3, [pc, #156]	; (800c64c <LmHandlerJoin+0xf0>)
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c5b2:	4b25      	ldr	r3, [pc, #148]	; (800c648 <LmHandlerJoin+0xec>)
 800c5b4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c5b8:	4b24      	ldr	r3, [pc, #144]	; (800c64c <LmHandlerJoin+0xf0>)
 800c5ba:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c5bc:	4b23      	ldr	r3, [pc, #140]	; (800c64c <LmHandlerJoin+0xf0>)
 800c5be:	2200      	movs	r2, #0
 800c5c0:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c5c2:	4a22      	ldr	r2, [pc, #136]	; (800c64c <LmHandlerJoin+0xf0>)
 800c5c4:	79bb      	ldrb	r3, [r7, #6]
 800c5c6:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800c5c8:	4b21      	ldr	r3, [pc, #132]	; (800c650 <LmHandlerJoin+0xf4>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	f083 0301 	eor.w	r3, r3, #1
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d01e      	beq.n	800c614 <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c5d6:	231e      	movs	r3, #30
 800c5d8:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c5da:	4b1b      	ldr	r3, [pc, #108]	; (800c648 <LmHandlerJoin+0xec>)
 800c5dc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c5e0:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c5e2:	f107 0308 	add.w	r3, r7, #8
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f004 ffcc 	bl	8011584 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c5ec:	231f      	movs	r3, #31
 800c5ee:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c5f0:	4b15      	ldr	r3, [pc, #84]	; (800c648 <LmHandlerJoin+0xec>)
 800c5f2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c5f6:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c5f8:	f107 0308 	add.w	r3, r7, #8
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f004 ffc1 	bl	8011584 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c602:	2328      	movs	r3, #40	; 0x28
 800c604:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c606:	4b13      	ldr	r3, [pc, #76]	; (800c654 <LmHandlerJoin+0xf8>)
 800c608:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c60a:	f107 0308 	add.w	r3, r7, #8
 800c60e:	4618      	mov	r0, r3
 800c610:	f004 ffb8 	bl	8011584 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c614:	f004 fd46 	bl	80110a4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c618:	2301      	movs	r3, #1
 800c61a:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c61c:	2301      	movs	r3, #1
 800c61e:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c620:	f107 0308 	add.w	r3, r7, #8
 800c624:	4618      	mov	r0, r3
 800c626:	f004 ffad 	bl	8011584 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c62a:	4b0b      	ldr	r3, [pc, #44]	; (800c658 <LmHandlerJoin+0xfc>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c630:	4806      	ldr	r0, [pc, #24]	; (800c64c <LmHandlerJoin+0xf0>)
 800c632:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c634:	4b04      	ldr	r3, [pc, #16]	; (800c648 <LmHandlerJoin+0xec>)
 800c636:	785b      	ldrb	r3, [r3, #1]
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 f92b 	bl	800c894 <LmHandlerRequestClass>
}
 800c63e:	bf00      	nop
 800c640:	3740      	adds	r7, #64	; 0x40
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	200004dc 	.word	0x200004dc
 800c64c:	200000b4 	.word	0x200000b4
 800c650:	2000060e 	.word	0x2000060e
 800c654:	01000300 	.word	0x01000300
 800c658:	200004f0 	.word	0x200004f0

0800c65c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08a      	sub	sp, #40	; 0x28
 800c660:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c662:	2301      	movs	r3, #1
 800c664:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c666:	463b      	mov	r3, r7
 800c668:	4618      	mov	r0, r3
 800c66a:	f004 fe05 	bl	8011278 <LoRaMacMibGetRequestConfirm>
 800c66e:	4603      	mov	r3, r0
 800c670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d106      	bne.n	800c68a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c67c:	793b      	ldrb	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c682:	2300      	movs	r3, #0
 800c684:	e002      	b.n	800c68c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c686:	2301      	movs	r3, #1
 800c688:	e000      	b.n	800c68c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c68a:	2300      	movs	r3, #0
    }
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3728      	adds	r7, #40	; 0x28
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b08a      	sub	sp, #40	; 0x28
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	70fb      	strb	r3, [r7, #3]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c6a4:	23ff      	movs	r3, #255	; 0xff
 800c6a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c6aa:	f001 ffa7 	bl	800e5fc <LoRaMacIsBusy>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c6b4:	f06f 0301 	mvn.w	r3, #1
 800c6b8:	e0b6      	b.n	800c828 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c6ba:	f7ff ffcf 	bl	800c65c <LmHandlerJoinStatus>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d00a      	beq.n	800c6da <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c6c4:	4b5a      	ldr	r3, [pc, #360]	; (800c830 <LmHandlerSend+0x19c>)
 800c6c6:	799b      	ldrb	r3, [r3, #6]
 800c6c8:	4a59      	ldr	r2, [pc, #356]	; (800c830 <LmHandlerSend+0x19c>)
 800c6ca:	79d2      	ldrb	r2, [r2, #7]
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7ff ff44 	bl	800c55c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c6d4:	f06f 0302 	mvn.w	r3, #2
 800c6d8:	e0a6      	b.n	800c828 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c6da:	4b56      	ldr	r3, [pc, #344]	; (800c834 <LmHandlerSend+0x1a0>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	4798      	blx	r3
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00d      	beq.n	800c704 <LmHandlerSend+0x70>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	781a      	ldrb	r2, [r3, #0]
 800c6ec:	4b51      	ldr	r3, [pc, #324]	; (800c834 <LmHandlerSend+0x1a0>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d006      	beq.n	800c704 <LmHandlerSend+0x70>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d002      	beq.n	800c704 <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c6fe:	f06f 0303 	mvn.w	r3, #3
 800c702:	e091      	b.n	800c828 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c704:	4a4c      	ldr	r2, [pc, #304]	; (800c838 <LmHandlerSend+0x1a4>)
 800c706:	78fb      	ldrb	r3, [r7, #3]
 800c708:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c70a:	78fb      	ldrb	r3, [r7, #3]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	bf14      	ite	ne
 800c710:	2301      	movne	r3, #1
 800c712:	2300      	moveq	r3, #0
 800c714:	b2db      	uxtb	r3, r3
 800c716:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c718:	4b48      	ldr	r3, [pc, #288]	; (800c83c <LmHandlerSend+0x1a8>)
 800c71a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c71e:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	785b      	ldrb	r3, [r3, #1]
 800c724:	f107 020c 	add.w	r2, r7, #12
 800c728:	4611      	mov	r1, r2
 800c72a:	4618      	mov	r0, r3
 800c72c:	f004 fd1c 	bl	8011168 <LoRaMacQueryTxPossible>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d009      	beq.n	800c74a <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c736:	2300      	movs	r3, #0
 800c738:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c73e:	2300      	movs	r3, #0
 800c740:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c742:	23f9      	movs	r3, #249	; 0xf9
 800c744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c748:	e009      	b.n	800c75e <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	785b      	ldrb	r3, [r3, #1]
 800c754:	b29b      	uxth	r3, r3
 800c756:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c75e:	4b36      	ldr	r3, [pc, #216]	; (800c838 <LmHandlerSend+0x1a4>)
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	3310      	adds	r3, #16
 800c764:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c768:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c76c:	4b33      	ldr	r3, [pc, #204]	; (800c83c <LmHandlerSend+0x1a8>)
 800c76e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c772:	4b31      	ldr	r3, [pc, #196]	; (800c838 <LmHandlerSend+0x1a4>)
 800c774:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c776:	78ba      	ldrb	r2, [r7, #2]
 800c778:	f107 0310 	add.w	r3, r7, #16
 800c77c:	4611      	mov	r1, r2
 800c77e:	4618      	mov	r0, r3
 800c780:	f005 fb9a 	bl	8011eb8 <LoRaMacMcpsRequest>
 800c784:	4603      	mov	r3, r0
 800c786:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	4a2c      	ldr	r2, [pc, #176]	; (800c840 <LmHandlerSend+0x1ac>)
 800c78e:	6013      	str	r3, [r2, #0]

    switch (status)
 800c790:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c794:	2b11      	cmp	r3, #17
 800c796:	d840      	bhi.n	800c81a <LmHandlerSend+0x186>
 800c798:	a201      	add	r2, pc, #4	; (adr r2, 800c7a0 <LmHandlerSend+0x10c>)
 800c79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79e:	bf00      	nop
 800c7a0:	0800c7e9 	.word	0x0800c7e9
 800c7a4:	0800c7fb 	.word	0x0800c7fb
 800c7a8:	0800c81b 	.word	0x0800c81b
 800c7ac:	0800c81b 	.word	0x0800c81b
 800c7b0:	0800c81b 	.word	0x0800c81b
 800c7b4:	0800c81b 	.word	0x0800c81b
 800c7b8:	0800c81b 	.word	0x0800c81b
 800c7bc:	0800c803 	.word	0x0800c803
 800c7c0:	0800c81b 	.word	0x0800c81b
 800c7c4:	0800c81b 	.word	0x0800c81b
 800c7c8:	0800c81b 	.word	0x0800c81b
 800c7cc:	0800c813 	.word	0x0800c813
 800c7d0:	0800c81b 	.word	0x0800c81b
 800c7d4:	0800c81b 	.word	0x0800c81b
 800c7d8:	0800c7fb 	.word	0x0800c7fb
 800c7dc:	0800c7fb 	.word	0x0800c7fb
 800c7e0:	0800c7fb 	.word	0x0800c7fb
 800c7e4:	0800c80b 	.word	0x0800c80b
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800c7e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7ec:	f113 0f07 	cmn.w	r3, #7
 800c7f0:	d017      	beq.n	800c822 <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800c7f8:	e013      	b.n	800c822 <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c7fa:	23fe      	movs	r3, #254	; 0xfe
 800c7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c800:	e010      	b.n	800c824 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c802:	23fd      	movs	r3, #253	; 0xfd
 800c804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c808:	e00c      	b.n	800c824 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c80a:	23fb      	movs	r3, #251	; 0xfb
 800c80c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c810:	e008      	b.n	800c824 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c812:	23fa      	movs	r3, #250	; 0xfa
 800c814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c818:	e004      	b.n	800c824 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c81a:	23ff      	movs	r3, #255	; 0xff
 800c81c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c820:	e000      	b.n	800c824 <LmHandlerSend+0x190>
            break;
 800c822:	bf00      	nop
    }

    return lmhStatus;
 800c824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3728      	adds	r7, #40	; 0x28
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	200000b4 	.word	0x200000b4
 800c834:	200004c8 	.word	0x200004c8
 800c838:	200000bc 	.word	0x200000bc
 800c83c:	200004dc 	.word	0x200004dc
 800c840:	20000518 	.word	0x20000518

0800c844 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c84a:	230a      	movs	r3, #10
 800c84c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c84e:	463b      	mov	r3, r7
 800c850:	4618      	mov	r0, r3
 800c852:	f005 f9f1 	bl	8011c38 <LoRaMacMlmeRequest>
 800c856:	4603      	mov	r3, r0
 800c858:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	4a06      	ldr	r2, [pc, #24]	; (800c878 <LmHandlerDeviceTimeReq+0x34>)
 800c85e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c860:	7dfb      	ldrb	r3, [r7, #23]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d101      	bne.n	800c86a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c866:	2300      	movs	r3, #0
 800c868:	e001      	b.n	800c86e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c86a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	20000518 	.word	0x20000518

0800c87c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	4603      	mov	r3, r0
 800c884:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	370c      	adds	r7, #12
 800c88e:	46bd      	mov	sp, r7
 800c890:	bc80      	pop	{r7}
 800c892:	4770      	bx	lr

0800c894 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b08c      	sub	sp, #48	; 0x30
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c8a4:	f001 feaa 	bl	800e5fc <LoRaMacIsBusy>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d002      	beq.n	800c8b4 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c8ae:	f06f 0301 	mvn.w	r3, #1
 800c8b2:	e073      	b.n	800c99c <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c8b4:	f7ff fed2 	bl	800c65c <LmHandlerJoinStatus>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d002      	beq.n	800c8c4 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c8be:	f06f 0302 	mvn.w	r3, #2
 800c8c2:	e06b      	b.n	800c99c <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c8c8:	f107 0308 	add.w	r3, r7, #8
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f004 fcd3 	bl	8011278 <LoRaMacMibGetRequestConfirm>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d002      	beq.n	800c8de <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c8d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8dc:	e05e      	b.n	800c99c <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800c8de:	7b3b      	ldrb	r3, [r7, #12]
 800c8e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c8e4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c8e8:	79fb      	ldrb	r3, [r7, #7]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d04d      	beq.n	800c98a <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800c8ee:	79fb      	ldrb	r3, [r7, #7]
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	d028      	beq.n	800c946 <LmHandlerRequestClass+0xb2>
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	dc4a      	bgt.n	800c98e <LmHandlerRequestClass+0xfa>
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <LmHandlerRequestClass+0x6e>
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d01e      	beq.n	800c93e <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800c900:	e045      	b.n	800c98e <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800c902:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c906:	2b00      	cmp	r3, #0
 800c908:	d043      	beq.n	800c992 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800c90a:	79fb      	ldrb	r3, [r7, #7]
 800c90c:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c90e:	f107 0308 	add.w	r3, r7, #8
 800c912:	4618      	mov	r0, r3
 800c914:	f004 fe36 	bl	8011584 <LoRaMacMibSetRequestConfirm>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10b      	bne.n	800c936 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c91e:	4b21      	ldr	r3, [pc, #132]	; (800c9a4 <LmHandlerRequestClass+0x110>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c924:	2b00      	cmp	r3, #0
 800c926:	d034      	beq.n	800c992 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c928:	4b1e      	ldr	r3, [pc, #120]	; (800c9a4 <LmHandlerRequestClass+0x110>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c92e:	79fa      	ldrb	r2, [r7, #7]
 800c930:	4610      	mov	r0, r2
 800c932:	4798      	blx	r3
            break;
 800c934:	e02d      	b.n	800c992 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c936:	23ff      	movs	r3, #255	; 0xff
 800c938:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c93c:	e029      	b.n	800c992 <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c93e:	23ff      	movs	r3, #255	; 0xff
 800c940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c944:	e028      	b.n	800c998 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800c946:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d003      	beq.n	800c956 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c94e:	23ff      	movs	r3, #255	; 0xff
 800c950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c954:	e01f      	b.n	800c996 <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800c956:	79fb      	ldrb	r3, [r7, #7]
 800c958:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c95a:	f107 0308 	add.w	r3, r7, #8
 800c95e:	4618      	mov	r0, r3
 800c960:	f004 fe10 	bl	8011584 <LoRaMacMibSetRequestConfirm>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10b      	bne.n	800c982 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c96a:	4b0e      	ldr	r3, [pc, #56]	; (800c9a4 <LmHandlerRequestClass+0x110>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c970:	2b00      	cmp	r3, #0
 800c972:	d010      	beq.n	800c996 <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c974:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <LmHandlerRequestClass+0x110>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97a:	79fa      	ldrb	r2, [r7, #7]
 800c97c:	4610      	mov	r0, r2
 800c97e:	4798      	blx	r3
            break;
 800c980:	e009      	b.n	800c996 <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c982:	23ff      	movs	r3, #255	; 0xff
 800c984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c988:	e005      	b.n	800c996 <LmHandlerRequestClass+0x102>
        }
    }
 800c98a:	bf00      	nop
 800c98c:	e004      	b.n	800c998 <LmHandlerRequestClass+0x104>
            break;
 800c98e:	bf00      	nop
 800c990:	e002      	b.n	800c998 <LmHandlerRequestClass+0x104>
            break;
 800c992:	bf00      	nop
 800c994:	e000      	b.n	800c998 <LmHandlerRequestClass+0x104>
            break;
 800c996:	bf00      	nop
    return errorStatus;
 800c998:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3730      	adds	r7, #48	; 0x30
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	200004f0 	.word	0x200004f0

0800c9a8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08c      	sub	sp, #48	; 0x30
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d102      	bne.n	800c9bc <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9ba:	e010      	b.n	800c9de <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c9c0:	f107 030c 	add.w	r3, r7, #12
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f004 fc57 	bl	8011278 <LoRaMacMibGetRequestConfirm>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d002      	beq.n	800c9d6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9d4:	e003      	b.n	800c9de <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c9d6:	7c3a      	ldrb	r2, [r7, #16]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3730      	adds	r7, #48	; 0x30
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
	...

0800c9e8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08c      	sub	sp, #48	; 0x30
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d102      	bne.n	800c9fc <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9fa:	e016      	b.n	800ca2a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c9fc:	231f      	movs	r3, #31
 800c9fe:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800ca00:	f107 030c 	add.w	r3, r7, #12
 800ca04:	4618      	mov	r0, r3
 800ca06:	f004 fc37 	bl	8011278 <LoRaMacMibGetRequestConfirm>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ca10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca14:	e009      	b.n	800ca2a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800ca16:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f993 2000 	ldrsb.w	r2, [r3]
 800ca24:	4b03      	ldr	r3, [pc, #12]	; (800ca34 <LmHandlerGetTxDatarate+0x4c>)
 800ca26:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3730      	adds	r7, #48	; 0x30
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	200004dc 	.word	0x200004dc

0800ca38 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08c      	sub	sp, #48	; 0x30
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ca40:	2322      	movs	r3, #34	; 0x22
 800ca42:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ca48:	f107 030c 	add.w	r3, r7, #12
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f004 fd99 	bl	8011584 <LoRaMacMibSetRequestConfirm>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d002      	beq.n	800ca5e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800ca58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca5c:	e000      	b.n	800ca60 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3730      	adds	r7, #48	; 0x30
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800ca70:	4b15      	ldr	r3, [pc, #84]	; (800cac8 <McpsConfirm+0x60>)
 800ca72:	2201      	movs	r2, #1
 800ca74:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	785a      	ldrb	r2, [r3, #1]
 800ca7a:	4b13      	ldr	r3, [pc, #76]	; (800cac8 <McpsConfirm+0x60>)
 800ca7c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	789b      	ldrb	r3, [r3, #2]
 800ca82:	b25a      	sxtb	r2, r3
 800ca84:	4b10      	ldr	r3, [pc, #64]	; (800cac8 <McpsConfirm+0x60>)
 800ca86:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	4a0e      	ldr	r2, [pc, #56]	; (800cac8 <McpsConfirm+0x60>)
 800ca8e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800ca96:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <McpsConfirm+0x60>)
 800ca98:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	4b09      	ldr	r3, [pc, #36]	; (800cac8 <McpsConfirm+0x60>)
 800caa2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	791b      	ldrb	r3, [r3, #4]
 800caa8:	461a      	mov	r2, r3
 800caaa:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <McpsConfirm+0x60>)
 800caac:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800caae:	4b07      	ldr	r3, [pc, #28]	; (800cacc <McpsConfirm+0x64>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cab4:	4804      	ldr	r0, [pc, #16]	; (800cac8 <McpsConfirm+0x60>)
 800cab6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800cab8:	6879      	ldr	r1, [r7, #4]
 800caba:	2000      	movs	r0, #0
 800cabc:	f000 f9de 	bl	800ce7c <LmHandlerPackagesNotify>
}
 800cac0:	bf00      	nop
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	200000bc 	.word	0x200000bc
 800cacc:	200004f0 	.word	0x200004f0

0800cad0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b088      	sub	sp, #32
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800cada:	2300      	movs	r3, #0
 800cadc:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800cade:	4b31      	ldr	r3, [pc, #196]	; (800cba4 <McpsIndication+0xd4>)
 800cae0:	2201      	movs	r2, #1
 800cae2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	785a      	ldrb	r2, [r3, #1]
 800cae8:	4b2e      	ldr	r3, [pc, #184]	; (800cba4 <McpsIndication+0xd4>)
 800caea:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800caec:	4b2d      	ldr	r3, [pc, #180]	; (800cba4 <McpsIndication+0xd4>)
 800caee:	785b      	ldrb	r3, [r3, #1]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d153      	bne.n	800cb9c <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	791b      	ldrb	r3, [r3, #4]
 800caf8:	b25a      	sxtb	r2, r3
 800cafa:	4b2a      	ldr	r3, [pc, #168]	; (800cba4 <McpsIndication+0xd4>)
 800cafc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb04:	b25a      	sxtb	r2, r3
 800cb06:	4b27      	ldr	r3, [pc, #156]	; (800cba4 <McpsIndication+0xd4>)
 800cb08:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cb10:	4b24      	ldr	r3, [pc, #144]	; (800cba4 <McpsIndication+0xd4>)
 800cb12:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	78da      	ldrb	r2, [r3, #3]
 800cb18:	4b22      	ldr	r3, [pc, #136]	; (800cba4 <McpsIndication+0xd4>)
 800cb1a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	4a20      	ldr	r2, [pc, #128]	; (800cba4 <McpsIndication+0xd4>)
 800cb22:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	78db      	ldrb	r3, [r3, #3]
 800cb28:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	7b1b      	ldrb	r3, [r3, #12]
 800cb2e:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800cb36:	4b1c      	ldr	r3, [pc, #112]	; (800cba8 <McpsIndication+0xd8>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3c:	f107 0218 	add.w	r2, r7, #24
 800cb40:	4918      	ldr	r1, [pc, #96]	; (800cba4 <McpsIndication+0xd4>)
 800cb42:	4610      	mov	r0, r2
 800cb44:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800cb46:	4b18      	ldr	r3, [pc, #96]	; (800cba8 <McpsIndication+0xd8>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d007      	beq.n	800cb60 <McpsIndication+0x90>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	7e1b      	ldrb	r3, [r3, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d003      	beq.n	800cb60 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cb58:	4b13      	ldr	r3, [pc, #76]	; (800cba8 <McpsIndication+0xd8>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5e:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cb60:	6879      	ldr	r1, [r7, #4]
 800cb62:	2001      	movs	r0, #1
 800cb64:	f000 f98a 	bl	800ce7c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800cb68:	f107 0317 	add.w	r3, r7, #23
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff ff1b 	bl	800c9a8 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	795b      	ldrb	r3, [r3, #5]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d111      	bne.n	800cb9e <McpsIndication+0xce>
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10e      	bne.n	800cb9e <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800cb80:	2300      	movs	r3, #0
 800cb82:	733b      	strb	r3, [r7, #12]
 800cb84:	2300      	movs	r3, #0
 800cb86:	737b      	strb	r3, [r7, #13]
 800cb88:	2300      	movs	r3, #0
 800cb8a:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800cb8c:	f107 030c 	add.w	r3, r7, #12
 800cb90:	2201      	movs	r2, #1
 800cb92:	2100      	movs	r1, #0
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7ff fd7d 	bl	800c694 <LmHandlerSend>
 800cb9a:	e000      	b.n	800cb9e <McpsIndication+0xce>
        return;
 800cb9c:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800cb9e:	3720      	adds	r7, #32
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	200000d8 	.word	0x200000d8
 800cba8:	200004f0 	.word	0x200004f0

0800cbac <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08c      	sub	sp, #48	; 0x30
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cbb4:	4b3d      	ldr	r3, [pc, #244]	; (800ccac <MlmeConfirm+0x100>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	785a      	ldrb	r2, [r3, #1]
 800cbbe:	4b3b      	ldr	r3, [pc, #236]	; (800ccac <MlmeConfirm+0x100>)
 800cbc0:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cbc2:	4b3b      	ldr	r3, [pc, #236]	; (800ccb0 <MlmeConfirm+0x104>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc8:	4838      	ldr	r0, [pc, #224]	; (800ccac <MlmeConfirm+0x100>)
 800cbca:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cbcc:	6879      	ldr	r1, [r7, #4]
 800cbce:	2002      	movs	r0, #2
 800cbd0:	f000 f954 	bl	800ce7c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	2b0c      	cmp	r3, #12
 800cbdc:	d85e      	bhi.n	800cc9c <MlmeConfirm+0xf0>
 800cbde:	a201      	add	r2, pc, #4	; (adr r2, 800cbe4 <MlmeConfirm+0x38>)
 800cbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe4:	0800cc19 	.word	0x0800cc19
 800cbe8:	0800cc9d 	.word	0x0800cc9d
 800cbec:	0800cc9d 	.word	0x0800cc9d
 800cbf0:	0800cc6b 	.word	0x0800cc6b
 800cbf4:	0800cc9d 	.word	0x0800cc9d
 800cbf8:	0800cc9d 	.word	0x0800cc9d
 800cbfc:	0800cc9d 	.word	0x0800cc9d
 800cc00:	0800cc9d 	.word	0x0800cc9d
 800cc04:	0800cc9d 	.word	0x0800cc9d
 800cc08:	0800cc9d 	.word	0x0800cc9d
 800cc0c:	0800cc9d 	.word	0x0800cc9d
 800cc10:	0800cc83 	.word	0x0800cc83
 800cc14:	0800cc9d 	.word	0x0800cc9d
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800cc18:	2306      	movs	r3, #6
 800cc1a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cc1c:	f107 030c 	add.w	r3, r7, #12
 800cc20:	4618      	mov	r0, r3
 800cc22:	f004 fb29 	bl	8011278 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	4a22      	ldr	r2, [pc, #136]	; (800ccb4 <MlmeConfirm+0x108>)
 800cc2a:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cc2c:	4822      	ldr	r0, [pc, #136]	; (800ccb8 <MlmeConfirm+0x10c>)
 800cc2e:	f7ff fedb 	bl	800c9e8 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	785b      	ldrb	r3, [r3, #1]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d108      	bne.n	800cc4c <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cc3a:	4b20      	ldr	r3, [pc, #128]	; (800ccbc <MlmeConfirm+0x110>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cc40:	4b1f      	ldr	r3, [pc, #124]	; (800ccc0 <MlmeConfirm+0x114>)
 800cc42:	785b      	ldrb	r3, [r3, #1]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff fe25 	bl	800c894 <LmHandlerRequestClass>
 800cc4a:	e002      	b.n	800cc52 <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cc4c:	4b1b      	ldr	r3, [pc, #108]	; (800ccbc <MlmeConfirm+0x110>)
 800cc4e:	22ff      	movs	r2, #255	; 0xff
 800cc50:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cc52:	4b17      	ldr	r3, [pc, #92]	; (800ccb0 <MlmeConfirm+0x104>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc58:	4818      	ldr	r0, [pc, #96]	; (800ccbc <MlmeConfirm+0x110>)
 800cc5a:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	785b      	ldrb	r3, [r3, #1]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d11d      	bne.n	800cca0 <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 800cc64:	f7ff f89e 	bl	800bda4 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800cc68:	e01a      	b.n	800cca0 <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800cc6a:	4b16      	ldr	r3, [pc, #88]	; (800ccc4 <MlmeConfirm+0x118>)
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	7a1a      	ldrb	r2, [r3, #8]
 800cc74:	4b13      	ldr	r3, [pc, #76]	; (800ccc4 <MlmeConfirm+0x118>)
 800cc76:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	7a5a      	ldrb	r2, [r3, #9]
 800cc7c:	4b11      	ldr	r3, [pc, #68]	; (800ccc4 <MlmeConfirm+0x118>)
 800cc7e:	74da      	strb	r2, [r3, #19]
        }
        break;
 800cc80:	e00f      	b.n	800cca2 <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	785b      	ldrb	r3, [r3, #1]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d105      	bne.n	800cc96 <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800cc8a:	4b0d      	ldr	r3, [pc, #52]	; (800ccc0 <MlmeConfirm+0x114>)
 800cc8c:	7b1b      	ldrb	r3, [r3, #12]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7ff fdf4 	bl	800c87c <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800cc94:	e005      	b.n	800cca2 <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 800cc96:	f7ff fdd5 	bl	800c844 <LmHandlerDeviceTimeReq>
        break;
 800cc9a:	e002      	b.n	800cca2 <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800cc9c:	bf00      	nop
 800cc9e:	e000      	b.n	800cca2 <MlmeConfirm+0xf6>
        break;
 800cca0:	bf00      	nop
    }
}
 800cca2:	bf00      	nop
 800cca4:	3730      	adds	r7, #48	; 0x30
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	200000bc 	.word	0x200000bc
 800ccb0:	200004f0 	.word	0x200004f0
 800ccb4:	20000090 	.word	0x20000090
 800ccb8:	200000b8 	.word	0x200000b8
 800ccbc:	200000b4 	.word	0x200000b4
 800ccc0:	200004dc 	.word	0x200004dc
 800ccc4:	200000d8 	.word	0x200000d8

0800ccc8 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ccd2:	4b2f      	ldr	r3, [pc, #188]	; (800cd90 <MlmeIndication+0xc8>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	785a      	ldrb	r2, [r3, #1]
 800ccdc:	4b2c      	ldr	r3, [pc, #176]	; (800cd90 <MlmeIndication+0xc8>)
 800ccde:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	789b      	ldrb	r3, [r3, #2]
 800cce4:	b25a      	sxtb	r2, r3
 800cce6:	4b2a      	ldr	r3, [pc, #168]	; (800cd90 <MlmeIndication+0xc8>)
 800cce8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ccf0:	b25a      	sxtb	r2, r3
 800ccf2:	4b27      	ldr	r3, [pc, #156]	; (800cd90 <MlmeIndication+0xc8>)
 800ccf4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ccfc:	4b24      	ldr	r3, [pc, #144]	; (800cd90 <MlmeIndication+0xc8>)
 800ccfe:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	78da      	ldrb	r2, [r3, #3]
 800cd04:	4b22      	ldr	r3, [pc, #136]	; (800cd90 <MlmeIndication+0xc8>)
 800cd06:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	4a20      	ldr	r2, [pc, #128]	; (800cd90 <MlmeIndication+0xc8>)
 800cd0e:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b0b      	cmp	r3, #11
 800cd16:	d009      	beq.n	800cd2c <MlmeIndication+0x64>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	2b0f      	cmp	r3, #15
 800cd1e:	d005      	beq.n	800cd2c <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cd20:	4b1c      	ldr	r3, [pc, #112]	; (800cd94 <MlmeIndication+0xcc>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd26:	491a      	ldr	r1, [pc, #104]	; (800cd90 <MlmeIndication+0xc8>)
 800cd28:	2000      	movs	r0, #0
 800cd2a:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800cd2c:	6879      	ldr	r1, [r7, #4]
 800cd2e:	2003      	movs	r0, #3
 800cd30:	f000 f8a4 	bl	800ce7c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	2b0f      	cmp	r3, #15
 800cd3a:	d01e      	beq.n	800cd7a <MlmeIndication+0xb2>
 800cd3c:	2b0f      	cmp	r3, #15
 800cd3e:	dc1e      	bgt.n	800cd7e <MlmeIndication+0xb6>
 800cd40:	2b07      	cmp	r3, #7
 800cd42:	d002      	beq.n	800cd4a <MlmeIndication+0x82>
 800cd44:	2b0b      	cmp	r3, #11
 800cd46:	d01c      	beq.n	800cd82 <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800cd48:	e019      	b.n	800cd7e <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	723b      	strb	r3, [r7, #8]
 800cd4e:	2300      	movs	r3, #0
 800cd50:	727b      	strb	r3, [r7, #9]
 800cd52:	2300      	movs	r3, #0
 800cd54:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800cd56:	4b10      	ldr	r3, [pc, #64]	; (800cd98 <MlmeIndication+0xd0>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	4798      	blx	r3
 800cd5e:	4603      	mov	r3, r0
 800cd60:	f083 0301 	eor.w	r3, r3, #1
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00d      	beq.n	800cd86 <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800cd6a:	f107 0308 	add.w	r3, r7, #8
 800cd6e:	2201      	movs	r2, #1
 800cd70:	2100      	movs	r1, #0
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7ff fc8e 	bl	800c694 <LmHandlerSend>
        break;
 800cd78:	e005      	b.n	800cd86 <MlmeIndication+0xbe>
        break;
 800cd7a:	bf00      	nop
 800cd7c:	e004      	b.n	800cd88 <MlmeIndication+0xc0>
        break;
 800cd7e:	bf00      	nop
 800cd80:	e002      	b.n	800cd88 <MlmeIndication+0xc0>
        break;
 800cd82:	bf00      	nop
 800cd84:	e000      	b.n	800cd88 <MlmeIndication+0xc0>
        break;
 800cd86:	bf00      	nop
    }
}
 800cd88:	bf00      	nop
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	200000d8 	.word	0x200000d8
 800cd94:	200004f0 	.word	0x200004f0
 800cd98:	200004c8 	.word	0x200004c8

0800cd9c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	4603      	mov	r3, r0
 800cda4:	6039      	str	r1, [r7, #0]
 800cda6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cdac:	79fb      	ldrb	r3, [r7, #7]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d103      	bne.n	800cdba <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cdb2:	f000 f9f7 	bl	800d1a4 <LmhpCompliancePackageFactory>
 800cdb6:	60f8      	str	r0, [r7, #12]
            break;
 800cdb8:	e000      	b.n	800cdbc <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cdba:	bf00      	nop
        }
    }
    if( package != NULL )
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d02b      	beq.n	800ce1a <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800cdc2:	79fb      	ldrb	r3, [r7, #7]
 800cdc4:	4918      	ldr	r1, [pc, #96]	; (800ce28 <LmHandlerPackageRegister+0x8c>)
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cdcc:	79fb      	ldrb	r3, [r7, #7]
 800cdce:	4a16      	ldr	r2, [pc, #88]	; (800ce28 <LmHandlerPackageRegister+0x8c>)
 800cdd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdd4:	4a15      	ldr	r2, [pc, #84]	; (800ce2c <LmHandlerPackageRegister+0x90>)
 800cdd6:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800cdd8:	79fb      	ldrb	r3, [r7, #7]
 800cdda:	4a13      	ldr	r2, [pc, #76]	; (800ce28 <LmHandlerPackageRegister+0x8c>)
 800cddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde0:	4a13      	ldr	r2, [pc, #76]	; (800ce30 <LmHandlerPackageRegister+0x94>)
 800cde2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	4a10      	ldr	r2, [pc, #64]	; (800ce28 <LmHandlerPackageRegister+0x8c>)
 800cde8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdec:	4a11      	ldr	r2, [pc, #68]	; (800ce34 <LmHandlerPackageRegister+0x98>)
 800cdee:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cdf0:	4b11      	ldr	r3, [pc, #68]	; (800ce38 <LmHandlerPackageRegister+0x9c>)
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	79fb      	ldrb	r3, [r7, #7]
 800cdf6:	490c      	ldr	r1, [pc, #48]	; (800ce28 <LmHandlerPackageRegister+0x8c>)
 800cdf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cdfc:	6992      	ldr	r2, [r2, #24]
 800cdfe:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	4a09      	ldr	r2, [pc, #36]	; (800ce28 <LmHandlerPackageRegister+0x8c>)
 800ce04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	4a0c      	ldr	r2, [pc, #48]	; (800ce3c <LmHandlerPackageRegister+0xa0>)
 800ce0c:	6851      	ldr	r1, [r2, #4]
 800ce0e:	4a0b      	ldr	r2, [pc, #44]	; (800ce3c <LmHandlerPackageRegister+0xa0>)
 800ce10:	7852      	ldrb	r2, [r2, #1]
 800ce12:	6838      	ldr	r0, [r7, #0]
 800ce14:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800ce16:	2300      	movs	r3, #0
 800ce18:	e001      	b.n	800ce1e <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ce1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	200004c8 	.word	0x200004c8
 800ce2c:	0800c55d 	.word	0x0800c55d
 800ce30:	0800c695 	.word	0x0800c695
 800ce34:	0800c845 	.word	0x0800c845
 800ce38:	200004f0 	.word	0x200004f0
 800ce3c:	200000ec 	.word	0x200000ec

0800ce40 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800ce4a:	79fb      	ldrb	r3, [r7, #7]
 800ce4c:	2b04      	cmp	r3, #4
 800ce4e:	d80e      	bhi.n	800ce6e <LmHandlerPackageIsInitialized+0x2e>
 800ce50:	79fb      	ldrb	r3, [r7, #7]
 800ce52:	4a09      	ldr	r2, [pc, #36]	; (800ce78 <LmHandlerPackageIsInitialized+0x38>)
 800ce54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d007      	beq.n	800ce6e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800ce5e:	79fb      	ldrb	r3, [r7, #7]
 800ce60:	4a05      	ldr	r2, [pc, #20]	; (800ce78 <LmHandlerPackageIsInitialized+0x38>)
 800ce62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	4798      	blx	r3
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	e000      	b.n	800ce70 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800ce6e:	2300      	movs	r3, #0
    }
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	200004c8 	.word	0x200004c8

0800ce7c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	6039      	str	r1, [r7, #0]
 800ce86:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce88:	2300      	movs	r3, #0
 800ce8a:	73fb      	strb	r3, [r7, #15]
 800ce8c:	e07e      	b.n	800cf8c <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 800ce8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce92:	4a43      	ldr	r2, [pc, #268]	; (800cfa0 <LmHandlerPackagesNotify+0x124>)
 800ce94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d066      	beq.n	800cf6a <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	d865      	bhi.n	800cf6e <LmHandlerPackagesNotify+0xf2>
 800cea2:	a201      	add	r2, pc, #4	; (adr r2, 800cea8 <LmHandlerPackagesNotify+0x2c>)
 800cea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea8:	0800ceb9 	.word	0x0800ceb9
 800ceac:	0800cedb 	.word	0x0800cedb
 800ceb0:	0800cf27 	.word	0x0800cf27
 800ceb4:	0800cf49 	.word	0x0800cf49
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800ceb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cebc:	4a38      	ldr	r2, [pc, #224]	; (800cfa0 <LmHandlerPackagesNotify+0x124>)
 800cebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cec2:	699b      	ldr	r3, [r3, #24]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d054      	beq.n	800cf72 <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cecc:	4a34      	ldr	r2, [pc, #208]	; (800cfa0 <LmHandlerPackagesNotify+0x124>)
 800cece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ced2:	699b      	ldr	r3, [r3, #24]
 800ced4:	6838      	ldr	r0, [r7, #0]
 800ced6:	4798      	blx	r3
                    }
                    break;
 800ced8:	e04b      	b.n	800cf72 <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ceda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cede:	4a30      	ldr	r2, [pc, #192]	; (800cfa0 <LmHandlerPackagesNotify+0x124>)
 800cee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cee4:	69db      	ldr	r3, [r3, #28]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d045      	beq.n	800cf76 <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800ceea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ceee:	4a2c      	ldr	r2, [pc, #176]	; (800cfa0 <LmHandlerPackagesNotify+0x124>)
 800cef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cef4:	781a      	ldrb	r2, [r3, #0]
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d00a      	beq.n	800cf14 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cefe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d137      	bne.n	800cf76 <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800cf06:	4b26      	ldr	r3, [pc, #152]	; (800cfa0 <LmHandlerPackagesNotify+0x124>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	4798      	blx	r3
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d030      	beq.n	800cf76 <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800cf14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf18:	4a21      	ldr	r2, [pc, #132]	; (800cfa0 <LmHandlerPackagesNotify+0x124>)
 800cf1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf1e:	69db      	ldr	r3, [r3, #28]
 800cf20:	6838      	ldr	r0, [r7, #0]
 800cf22:	4798      	blx	r3
                    }
                    break;
 800cf24:	e027      	b.n	800cf76 <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cf26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf2a:	4a1d      	ldr	r2, [pc, #116]	; (800cfa0 <LmHandlerPackagesNotify+0x124>)
 800cf2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf30:	6a1b      	ldr	r3, [r3, #32]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d021      	beq.n	800cf7a <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800cf36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf3a:	4a19      	ldr	r2, [pc, #100]	; (800cfa0 <LmHandlerPackagesNotify+0x124>)
 800cf3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf40:	6a1b      	ldr	r3, [r3, #32]
 800cf42:	6838      	ldr	r0, [r7, #0]
 800cf44:	4798      	blx	r3
                    }
                    break;
 800cf46:	e018      	b.n	800cf7a <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800cf48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf4c:	4a14      	ldr	r2, [pc, #80]	; (800cfa0 <LmHandlerPackagesNotify+0x124>)
 800cf4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d012      	beq.n	800cf7e <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800cf58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf5c:	4a10      	ldr	r2, [pc, #64]	; (800cfa0 <LmHandlerPackagesNotify+0x124>)
 800cf5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf64:	6838      	ldr	r0, [r7, #0]
 800cf66:	4798      	blx	r3
                    }
                    break;
 800cf68:	e009      	b.n	800cf7e <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 800cf6a:	bf00      	nop
 800cf6c:	e008      	b.n	800cf80 <LmHandlerPackagesNotify+0x104>
                    break;
 800cf6e:	bf00      	nop
 800cf70:	e006      	b.n	800cf80 <LmHandlerPackagesNotify+0x104>
                    break;
 800cf72:	bf00      	nop
 800cf74:	e004      	b.n	800cf80 <LmHandlerPackagesNotify+0x104>
                    break;
 800cf76:	bf00      	nop
 800cf78:	e002      	b.n	800cf80 <LmHandlerPackagesNotify+0x104>
                    break;
 800cf7a:	bf00      	nop
 800cf7c:	e000      	b.n	800cf80 <LmHandlerPackagesNotify+0x104>
                    break;
 800cf7e:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cf80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	3301      	adds	r3, #1
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	73fb      	strb	r3, [r7, #15]
 800cf8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf90:	2b04      	cmp	r3, #4
 800cf92:	f77f af7c 	ble.w	800ce8e <LmHandlerPackagesNotify+0x12>
    }
}
 800cf96:	bf00      	nop
 800cf98:	bf00      	nop
 800cf9a:	3710      	adds	r7, #16
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	200004c8 	.word	0x200004c8

0800cfa4 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cfaa:	2300      	movs	r3, #0
 800cfac:	71fb      	strb	r3, [r7, #7]
 800cfae:	e022      	b.n	800cff6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cfb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfb4:	4a14      	ldr	r2, [pc, #80]	; (800d008 <LmHandlerPackagesProcess+0x64>)
 800cfb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d015      	beq.n	800cfea <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cfbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfc2:	4a11      	ldr	r2, [pc, #68]	; (800d008 <LmHandlerPackagesProcess+0x64>)
 800cfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00d      	beq.n	800cfea <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff ff35 	bl	800ce40 <LmHandlerPackageIsInitialized>
 800cfd6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d006      	beq.n	800cfea <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800cfdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfe0:	4a09      	ldr	r2, [pc, #36]	; (800d008 <LmHandlerPackagesProcess+0x64>)
 800cfe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cfea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	3301      	adds	r3, #1
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	71fb      	strb	r3, [r7, #7]
 800cff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cffa:	2b04      	cmp	r3, #4
 800cffc:	ddd8      	ble.n	800cfb0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800cffe:	bf00      	nop
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	200004c8 	.word	0x200004c8

0800d00c <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	4603      	mov	r3, r0
 800d014:	6039      	str	r1, [r7, #0]
 800d016:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d102      	bne.n	800d024 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d022:	e00e      	b.n	800d042 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d002      	beq.n	800d030 <LmHandlerGetVersion+0x24>
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d004      	beq.n	800d038 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800d02e:	e007      	b.n	800d040 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	4a06      	ldr	r2, [pc, #24]	; (800d04c <LmHandlerGetVersion+0x40>)
 800d034:	601a      	str	r2, [r3, #0]
            break;
 800d036:	e003      	b.n	800d040 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	4a05      	ldr	r2, [pc, #20]	; (800d050 <LmHandlerGetVersion+0x44>)
 800d03c:	601a      	str	r2, [r3, #0]
            break;
 800d03e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	bc80      	pop	{r7}
 800d04a:	4770      	bx	lr
 800d04c:	01000300 	.word	0x01000300
 800d050:	01010003 	.word	0x01010003

0800d054 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800d058:	f005 f842 	bl	80120e0 <LoRaMacDeInitialization>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d101      	bne.n	800d066 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d062:	2300      	movs	r3, #0
 800d064:	e001      	b.n	800d06a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d066:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800d072:	f004 f841 	bl	80110f8 <LoRaMacHalt>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d101      	bne.n	800d080 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d07c:	2300      	movs	r3, #0
 800d07e:	e001      	b.n	800d084 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d080:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d084:	4618      	mov	r0, r3
 800d086:	bd80      	pop	{r7, pc}

0800d088 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08e      	sub	sp, #56	; 0x38
 800d08c:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d08e:	2300      	movs	r3, #0
 800d090:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800d094:	2300      	movs	r3, #0
 800d096:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800d098:	f7ff ffe9 	bl	800d06e <LmHandlerHalt>
 800d09c:	4603      	mov	r3, r0
 800d09e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800d0a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d12f      	bne.n	800d10a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d0aa:	f000 f859 	bl	800d160 <NvmDataMgmtStoreBegin>
 800d0ae:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b2:	f113 0f02 	cmn.w	r3, #2
 800d0b6:	d103      	bne.n	800d0c0 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d0b8:	23f8      	movs	r3, #248	; 0xf8
 800d0ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d0be:	e01c      	b.n	800d0fa <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d104      	bne.n	800d0d0 <LmHandlerNvmDataStore+0x48>
 800d0c6:	4b1b      	ldr	r3, [pc, #108]	; (800d134 <LmHandlerNvmDataStore+0xac>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	695b      	ldr	r3, [r3, #20]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d103      	bne.n	800d0d8 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d0d0:	23ff      	movs	r3, #255	; 0xff
 800d0d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d0d6:	e010      	b.n	800d0fa <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800d0d8:	2326      	movs	r3, #38	; 0x26
 800d0da:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800d0dc:	1d3b      	adds	r3, r7, #4
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f004 f8ca 	bl	8011278 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800d0e8:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 800d0ec:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800d0ee:	4b11      	ldr	r3, [pc, #68]	; (800d134 <LmHandlerNvmDataStore+0xac>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	695b      	ldr	r3, [r3, #20]
 800d0f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0f8:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d0fa:	f000 f847 	bl	800d18c <NvmDataMgmtStoreEnd>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d104:	23ff      	movs	r3, #255	; 0xff
 800d106:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800d10a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d109      	bne.n	800d126 <LmHandlerNvmDataStore+0x9e>
 800d112:	4b08      	ldr	r3, [pc, #32]	; (800d134 <LmHandlerNvmDataStore+0xac>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	69db      	ldr	r3, [r3, #28]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d004      	beq.n	800d126 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d11c:	4b05      	ldr	r3, [pc, #20]	; (800d134 <LmHandlerNvmDataStore+0xac>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	69db      	ldr	r3, [r3, #28]
 800d122:	2001      	movs	r0, #1
 800d124:	4798      	blx	r3
    }

    return lmhStatus;
 800d126:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3738      	adds	r7, #56	; 0x38
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	200004f0 	.word	0x200004f0

0800d138 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	4603      	mov	r3, r0
 800d140:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d142:	4b06      	ldr	r3, [pc, #24]	; (800d15c <NvmDataMgmtEvent+0x24>)
 800d144:	881a      	ldrh	r2, [r3, #0]
 800d146:	88fb      	ldrh	r3, [r7, #6]
 800d148:	4313      	orrs	r3, r2
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	4b03      	ldr	r3, [pc, #12]	; (800d15c <NvmDataMgmtEvent+0x24>)
 800d14e:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d150:	bf00      	nop
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	bc80      	pop	{r7}
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	20000610 	.word	0x20000610

0800d160 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d164:	4b08      	ldr	r3, [pc, #32]	; (800d188 <NvmDataMgmtStoreBegin+0x28>)
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d102      	bne.n	800d172 <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800d16c:	f06f 0301 	mvn.w	r3, #1
 800d170:	e008      	b.n	800d184 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d172:	f003 ffa5 	bl	80110c0 <LoRaMacStop>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d002      	beq.n	800d182 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d17c:	f06f 0302 	mvn.w	r3, #2
 800d180:	e000      	b.n	800d184 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d182:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d184:	4618      	mov	r0, r3
 800d186:	bd80      	pop	{r7, pc}
 800d188:	20000610 	.word	0x20000610

0800d18c <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d190:	4b03      	ldr	r3, [pc, #12]	; (800d1a0 <NvmDataMgmtStoreEnd+0x14>)
 800d192:	2200      	movs	r2, #0
 800d194:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800d196:	f003 ff85 	bl	80110a4 <LoRaMacStart>
    return NVM_DATA_OK;
 800d19a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	20000610 	.word	0x20000610

0800d1a4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800d1a8:	4b02      	ldr	r3, [pc, #8]	; (800d1b4 <LmhpCompliancePackageFactory+0x10>)
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bc80      	pop	{r7}
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	200000f4 	.word	0x200000f4

0800d1b8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00f      	beq.n	800d1ec <LmhpComplianceInit+0x34>
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00c      	beq.n	800d1ec <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800d1d2:	4a0c      	ldr	r2, [pc, #48]	; (800d204 <LmhpComplianceInit+0x4c>)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800d1d8:	4a0b      	ldr	r2, [pc, #44]	; (800d208 <LmhpComplianceInit+0x50>)
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d1de:	4a0a      	ldr	r2, [pc, #40]	; (800d208 <LmhpComplianceInit+0x50>)
 800d1e0:	79fb      	ldrb	r3, [r7, #7]
 800d1e2:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800d1e4:	4b08      	ldr	r3, [pc, #32]	; (800d208 <LmhpComplianceInit+0x50>)
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	701a      	strb	r2, [r3, #0]
 800d1ea:	e006      	b.n	800d1fa <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800d1ec:	4b05      	ldr	r3, [pc, #20]	; (800d204 <LmhpComplianceInit+0x4c>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d1f2:	4b05      	ldr	r3, [pc, #20]	; (800d208 <LmhpComplianceInit+0x50>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	701a      	strb	r2, [r3, #0]
    }
}
 800d1f8:	bf00      	nop
 800d1fa:	bf00      	nop
 800d1fc:	3714      	adds	r7, #20
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bc80      	pop	{r7}
 800d202:	4770      	bx	lr
 800d204:	20000640 	.word	0x20000640
 800d208:	2000062c 	.word	0x2000062c

0800d20c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d20c:	b480      	push	{r7}
 800d20e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d210:	4b02      	ldr	r3, [pc, #8]	; (800d21c <LmhpComplianceIsInitialized+0x10>)
 800d212:	781b      	ldrb	r3, [r3, #0]
}
 800d214:	4618      	mov	r0, r3
 800d216:	46bd      	mov	sp, r7
 800d218:	bc80      	pop	{r7}
 800d21a:	4770      	bx	lr
 800d21c:	2000062c 	.word	0x2000062c

0800d220 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800d220:	b480      	push	{r7}
 800d222:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d224:	4b07      	ldr	r3, [pc, #28]	; (800d244 <LmhpComplianceIsRunning+0x24>)
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	f083 0301 	eor.w	r3, r3, #1
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d001      	beq.n	800d236 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800d232:	2300      	movs	r3, #0
 800d234:	e001      	b.n	800d23a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800d236:	4b03      	ldr	r3, [pc, #12]	; (800d244 <LmhpComplianceIsRunning+0x24>)
 800d238:	785b      	ldrb	r3, [r3, #1]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bc80      	pop	{r7}
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	2000062c 	.word	0x2000062c

0800d248 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800d250:	4b0f      	ldr	r3, [pc, #60]	; (800d290 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	f083 0301 	eor.w	r3, r3, #1
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d112      	bne.n	800d284 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d25e:	4b0c      	ldr	r3, [pc, #48]	; (800d290 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d260:	785b      	ldrb	r3, [r3, #1]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d00f      	beq.n	800d286 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d10b      	bne.n	800d286 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d272:	2b00      	cmp	r3, #0
 800d274:	d007      	beq.n	800d286 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d276:	4b06      	ldr	r3, [pc, #24]	; (800d290 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d278:	899b      	ldrh	r3, [r3, #12]
 800d27a:	3301      	adds	r3, #1
 800d27c:	b29a      	uxth	r2, r3
 800d27e:	4b04      	ldr	r3, [pc, #16]	; (800d290 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d280:	819a      	strh	r2, [r3, #12]
 800d282:	e000      	b.n	800d286 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800d284:	bf00      	nop
    }
}
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	bc80      	pop	{r7}
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	2000062c 	.word	0x2000062c

0800d294 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d29c:	4b12      	ldr	r3, [pc, #72]	; (800d2e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	f083 0301 	eor.w	r3, r3, #1
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d116      	bne.n	800d2d8 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d2aa:	4b0f      	ldr	r3, [pc, #60]	; (800d2e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2ac:	785b      	ldrb	r3, [r3, #1]
 800d2ae:	f083 0301 	eor.w	r3, r3, #1
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d111      	bne.n	800d2dc <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	d10e      	bne.n	800d2de <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800d2c0:	4b09      	ldr	r3, [pc, #36]	; (800d2e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	7a1a      	ldrb	r2, [r3, #8]
 800d2ca:	4b07      	ldr	r3, [pc, #28]	; (800d2e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2cc:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	7a5a      	ldrb	r2, [r3, #9]
 800d2d2:	4b05      	ldr	r3, [pc, #20]	; (800d2e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2d4:	741a      	strb	r2, [r3, #16]
 800d2d6:	e002      	b.n	800d2de <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d2d8:	bf00      	nop
 800d2da:	e000      	b.n	800d2de <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d2dc:	bf00      	nop
    }
}
 800d2de:	370c      	adds	r7, #12
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bc80      	pop	{r7}
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	2000062c 	.word	0x2000062c

0800d2ec <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d2f2:	4b33      	ldr	r3, [pc, #204]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	f083 0301 	eor.w	r3, r3, #1
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d002      	beq.n	800d306 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d304:	e057      	b.n	800d3b6 <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 800d306:	4b2e      	ldr	r3, [pc, #184]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d308:	785b      	ldrb	r3, [r3, #1]
 800d30a:	f083 0301 	eor.w	r3, r3, #1
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d314:	2300      	movs	r3, #0
 800d316:	e04e      	b.n	800d3b6 <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d318:	4b29      	ldr	r3, [pc, #164]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d31a:	7b9b      	ldrb	r3, [r3, #14]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d019      	beq.n	800d354 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d320:	4b27      	ldr	r3, [pc, #156]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d322:	2200      	movs	r2, #0
 800d324:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d326:	4b26      	ldr	r3, [pc, #152]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d328:	2203      	movs	r2, #3
 800d32a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d32c:	4b24      	ldr	r3, [pc, #144]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	2205      	movs	r2, #5
 800d332:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d334:	4b22      	ldr	r3, [pc, #136]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	3301      	adds	r3, #1
 800d33a:	4a21      	ldr	r2, [pc, #132]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d33c:	7bd2      	ldrb	r2, [r2, #15]
 800d33e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d340:	4b1f      	ldr	r3, [pc, #124]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	3302      	adds	r3, #2
 800d346:	4a1e      	ldr	r2, [pc, #120]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d348:	7c12      	ldrb	r2, [r2, #16]
 800d34a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d34c:	4b1c      	ldr	r3, [pc, #112]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d34e:	2201      	movs	r2, #1
 800d350:	709a      	strb	r2, [r3, #2]
 800d352:	e01c      	b.n	800d38e <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d354:	4b1a      	ldr	r3, [pc, #104]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d356:	789b      	ldrb	r3, [r3, #2]
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d005      	beq.n	800d368 <LmhpComplianceTxProcess+0x7c>
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	d116      	bne.n	800d38e <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d360:	4b17      	ldr	r3, [pc, #92]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d362:	2201      	movs	r2, #1
 800d364:	709a      	strb	r2, [r3, #2]
            break;
 800d366:	e012      	b.n	800d38e <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d368:	4b15      	ldr	r3, [pc, #84]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d36a:	2202      	movs	r2, #2
 800d36c:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d36e:	4b14      	ldr	r3, [pc, #80]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d370:	899b      	ldrh	r3, [r3, #12]
 800d372:	0a1b      	lsrs	r3, r3, #8
 800d374:	b29a      	uxth	r2, r3
 800d376:	4b12      	ldr	r3, [pc, #72]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	b2d2      	uxtb	r2, r2
 800d37c:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d37e:	4b10      	ldr	r3, [pc, #64]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d380:	899a      	ldrh	r2, [r3, #12]
 800d382:	4b0f      	ldr	r3, [pc, #60]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	3301      	adds	r3, #1
 800d388:	b2d2      	uxtb	r2, r2
 800d38a:	701a      	strb	r2, [r3, #0]
            break;
 800d38c:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d38e:	23e0      	movs	r3, #224	; 0xe0
 800d390:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d392:	4b0b      	ldr	r3, [pc, #44]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d394:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d396:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d398:	4b09      	ldr	r3, [pc, #36]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d39a:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d39c:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d39e:	4809      	ldr	r0, [pc, #36]	; (800d3c4 <LmhpComplianceTxProcess+0xd8>)
 800d3a0:	f00d fb32 	bl	801aa08 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800d3a4:	4b08      	ldr	r3, [pc, #32]	; (800d3c8 <LmhpComplianceTxProcess+0xdc>)
 800d3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a8:	4a05      	ldr	r2, [pc, #20]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d3aa:	78d2      	ldrb	r2, [r2, #3]
 800d3ac:	4611      	mov	r1, r2
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	4798      	blx	r3
 800d3b4:	4603      	mov	r3, r0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3708      	adds	r7, #8
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	2000062c 	.word	0x2000062c
 800d3c4:	20000614 	.word	0x20000614
 800d3c8:	200000f4 	.word	0x200000f4

0800d3cc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b0a2      	sub	sp, #136	; 0x88
 800d3d0:	af02      	add	r7, sp, #8
 800d3d2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d3d4:	4ba3      	ldr	r3, [pc, #652]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	f083 0301 	eor.w	r3, r3, #1
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f040 81c2 	bne.w	800d768 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	7b5b      	ldrb	r3, [r3, #13]
 800d3e8:	f083 0301 	eor.w	r3, r3, #1
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f040 81bc 	bne.w	800d76c <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d3f4:	4b9b      	ldr	r3, [pc, #620]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d3f6:	785b      	ldrb	r3, [r3, #1]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00c      	beq.n	800d416 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	7b9b      	ldrb	r3, [r3, #14]
 800d400:	f083 0301 	eor.w	r3, r3, #1
 800d404:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d406:	2b00      	cmp	r3, #0
 800d408:	d005      	beq.n	800d416 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d40a:	4b96      	ldr	r3, [pc, #600]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d40c:	899b      	ldrh	r3, [r3, #12]
 800d40e:	3301      	adds	r3, #1
 800d410:	b29a      	uxth	r2, r3
 800d412:	4b94      	ldr	r3, [pc, #592]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d414:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	78db      	ldrb	r3, [r3, #3]
 800d41a:	2be0      	cmp	r3, #224	; 0xe0
 800d41c:	f040 81a8 	bne.w	800d770 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d420:	4b90      	ldr	r3, [pc, #576]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d422:	785b      	ldrb	r3, [r3, #1]
 800d424:	f083 0301 	eor.w	r3, r3, #1
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d060      	beq.n	800d4f0 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	7b1b      	ldrb	r3, [r3, #12]
 800d432:	2b04      	cmp	r3, #4
 800d434:	f040 81a1 	bne.w	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d43e:	2b01      	cmp	r3, #1
 800d440:	f040 819b 	bne.w	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	3301      	adds	r3, #1
 800d44a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	f040 8194 	bne.w	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	3302      	adds	r3, #2
 800d458:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	f040 818d 	bne.w	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	3303      	adds	r3, #3
 800d466:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d468:	2b01      	cmp	r3, #1
 800d46a:	f040 8186 	bne.w	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d46e:	4b7d      	ldr	r3, [pc, #500]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d470:	2200      	movs	r2, #0
 800d472:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d474:	4b7b      	ldr	r3, [pc, #492]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d476:	22e0      	movs	r2, #224	; 0xe0
 800d478:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d47a:	4b7a      	ldr	r3, [pc, #488]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d47c:	2202      	movs	r2, #2
 800d47e:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d480:	4b78      	ldr	r3, [pc, #480]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d482:	2200      	movs	r2, #0
 800d484:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d486:	4b77      	ldr	r3, [pc, #476]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d488:	2200      	movs	r2, #0
 800d48a:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d48c:	4b75      	ldr	r3, [pc, #468]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d48e:	2200      	movs	r2, #0
 800d490:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d492:	4b74      	ldr	r3, [pc, #464]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d494:	2200      	movs	r2, #0
 800d496:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d498:	4b72      	ldr	r3, [pc, #456]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d49a:	2201      	movs	r2, #1
 800d49c:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d49e:	4b71      	ldr	r3, [pc, #452]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d4a4:	2304      	movs	r3, #4
 800d4a6:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d4ac:	f107 0308 	add.w	r3, r7, #8
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f004 f867 	bl	8011584 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	f004 fdf4 	bl	80120a4 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d4bc:	4b6a      	ldr	r3, [pc, #424]	; (800d668 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d003      	beq.n	800d4ce <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d4c6:	4b68      	ldr	r3, [pc, #416]	; (800d668 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	4b66      	ldr	r3, [pc, #408]	; (800d66c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d4da:	4865      	ldr	r0, [pc, #404]	; (800d670 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d4dc:	f00d fa5e 	bl	801a99c <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d4e0:	f241 3188 	movw	r1, #5000	; 0x1388
 800d4e4:	4862      	ldr	r0, [pc, #392]	; (800d670 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d4e6:	f00d fb6d 	bl	801abc4 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d4ea:	f7ff feff 	bl	800d2ec <LmhpComplianceTxProcess>
 800d4ee:	e144      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	781a      	ldrb	r2, [r3, #0]
 800d4f6:	4b5b      	ldr	r3, [pc, #364]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d4f8:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d4fa:	4b5a      	ldr	r3, [pc, #360]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d4fc:	789b      	ldrb	r3, [r3, #2]
 800d4fe:	2b0a      	cmp	r3, #10
 800d500:	f200 8138 	bhi.w	800d774 <LmhpComplianceOnMcpsIndication+0x3a8>
 800d504:	a201      	add	r2, pc, #4	; (adr r2, 800d50c <LmhpComplianceOnMcpsIndication+0x140>)
 800d506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d50a:	bf00      	nop
 800d50c:	0800d539 	.word	0x0800d539
 800d510:	0800d583 	.word	0x0800d583
 800d514:	0800d58b 	.word	0x0800d58b
 800d518:	0800d599 	.word	0x0800d599
 800d51c:	0800d5a7 	.word	0x0800d5a7
 800d520:	0800d5ff 	.word	0x0800d5ff
 800d524:	0800d611 	.word	0x0800d611
 800d528:	0800d679 	.word	0x0800d679
 800d52c:	0800d721 	.word	0x0800d721
 800d530:	0800d733 	.word	0x0800d733
 800d534:	0800d74d 	.word	0x0800d74d
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d538:	484d      	ldr	r0, [pc, #308]	; (800d670 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d53a:	f00d fad3 	bl	801aae4 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d53e:	4b49      	ldr	r3, [pc, #292]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d540:	2200      	movs	r2, #0
 800d542:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d544:	4b47      	ldr	r3, [pc, #284]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d546:	2200      	movs	r2, #0
 800d548:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800d54a:	2304      	movs	r3, #4
 800d54c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d54e:	4b46      	ldr	r3, [pc, #280]	; (800d668 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d556:	f107 0308 	add.w	r3, r7, #8
 800d55a:	4618      	mov	r0, r3
 800d55c:	f004 f812 	bl	8011584 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d560:	4b41      	ldr	r3, [pc, #260]	; (800d668 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	785b      	ldrb	r3, [r3, #1]
 800d566:	4618      	mov	r0, r3
 800d568:	f004 fd9c 	bl	80120a4 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d56c:	4b3e      	ldr	r3, [pc, #248]	; (800d668 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	689b      	ldr	r3, [r3, #8]
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 8100 	beq.w	800d778 <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d578:	4b3b      	ldr	r3, [pc, #236]	; (800d668 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	4798      	blx	r3
                }
            }
            break;
 800d580:	e0fa      	b.n	800d778 <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d582:	4b38      	ldr	r3, [pc, #224]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d584:	2202      	movs	r2, #2
 800d586:	719a      	strb	r2, [r3, #6]
            break;
 800d588:	e0f7      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d58a:	4b36      	ldr	r3, [pc, #216]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d58c:	2201      	movs	r2, #1
 800d58e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d590:	4b34      	ldr	r3, [pc, #208]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d592:	2201      	movs	r2, #1
 800d594:	709a      	strb	r2, [r3, #2]
            break;
 800d596:	e0f0      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d598:	4b32      	ldr	r3, [pc, #200]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d59e:	4b31      	ldr	r3, [pc, #196]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	709a      	strb	r2, [r3, #2]
            break;
 800d5a4:	e0e9      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	7b1a      	ldrb	r2, [r3, #12]
 800d5aa:	4b2e      	ldr	r3, [pc, #184]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d5ac:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d5ae:	4b2d      	ldr	r3, [pc, #180]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	2204      	movs	r2, #4
 800d5b4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d5bc:	e012      	b.n	800d5e4 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	689a      	ldr	r2, [r3, #8]
 800d5c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5c6:	4413      	add	r3, r2
 800d5c8:	781a      	ldrb	r2, [r3, #0]
 800d5ca:	4b26      	ldr	r3, [pc, #152]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d5cc:	6899      	ldr	r1, [r3, #8]
 800d5ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5d2:	440b      	add	r3, r1
 800d5d4:	3201      	adds	r2, #1
 800d5d6:	b2d2      	uxtb	r2, r2
 800d5d8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d5da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5de:	3301      	adds	r3, #1
 800d5e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d5e4:	4b1f      	ldr	r3, [pc, #124]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d5e6:	795a      	ldrb	r2, [r3, #5]
 800d5e8:	4b1e      	ldr	r3, [pc, #120]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d5ea:	799b      	ldrb	r3, [r3, #6]
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	bf28      	it	cs
 800d5f0:	4613      	movcs	r3, r2
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d3e0      	bcc.n	800d5be <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d5fc:	e0bd      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d5fe:	2304      	movs	r3, #4
 800d600:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d604:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d608:	4618      	mov	r0, r3
 800d60a:	f004 fb15 	bl	8011c38 <LoRaMacMlmeRequest>
            }
            break;
 800d60e:	e0b4      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d610:	4817      	ldr	r0, [pc, #92]	; (800d670 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d612:	f00d fa67 	bl	801aae4 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d616:	4b13      	ldr	r3, [pc, #76]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d618:	2200      	movs	r2, #0
 800d61a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d61c:	4b11      	ldr	r3, [pc, #68]	; (800d664 <LmhpComplianceOnMcpsIndication+0x298>)
 800d61e:	2200      	movs	r2, #0
 800d620:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800d622:	2304      	movs	r3, #4
 800d624:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d626:	4b10      	ldr	r3, [pc, #64]	; (800d668 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d62e:	f107 0308 	add.w	r3, r7, #8
 800d632:	4618      	mov	r0, r3
 800d634:	f003 ffa6 	bl	8011584 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d638:	4b0b      	ldr	r3, [pc, #44]	; (800d668 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	785b      	ldrb	r3, [r3, #1]
 800d63e:	4618      	mov	r0, r3
 800d640:	f004 fd30 	bl	80120a4 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d644:	4b08      	ldr	r3, [pc, #32]	; (800d668 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d003      	beq.n	800d656 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d64e:	4b06      	ldr	r3, [pc, #24]	; (800d668 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d656:	4b07      	ldr	r3, [pc, #28]	; (800d674 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800d658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d65a:	2101      	movs	r1, #1
 800d65c:	2002      	movs	r0, #2
 800d65e:	4798      	blx	r3
            }
            break;
 800d660:	e08b      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
 800d662:	bf00      	nop
 800d664:	2000062c 	.word	0x2000062c
 800d668:	20000640 	.word	0x20000640
 800d66c:	0800d791 	.word	0x0800d791
 800d670:	20000614 	.word	0x20000614
 800d674:	200000f4 	.word	0x200000f4
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	7b1b      	ldrb	r3, [r3, #12]
 800d67c:	2b03      	cmp	r3, #3
 800d67e:	d113      	bne.n	800d6a8 <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d680:	2305      	movs	r3, #5
 800d682:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	3301      	adds	r3, #1
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	021b      	lsls	r3, r3, #8
 800d690:	b21a      	sxth	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	3302      	adds	r3, #2
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	b21b      	sxth	r3, r3
 800d69c:	4313      	orrs	r3, r2
 800d69e:	b21b      	sxth	r3, r3
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d6a6:	e032      	b.n	800d70e <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	7b1b      	ldrb	r3, [r3, #12]
 800d6ac:	2b07      	cmp	r3, #7
 800d6ae:	d12e      	bne.n	800d70e <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d6b0:	2306      	movs	r3, #6
 800d6b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	021b      	lsls	r3, r3, #8
 800d6c0:	b21a      	sxth	r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	3302      	adds	r3, #2
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	b21b      	sxth	r3, r3
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	b21b      	sxth	r3, r3
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	689b      	ldr	r3, [r3, #8]
 800d6da:	3303      	adds	r3, #3
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	041a      	lsls	r2, r3, #16
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	021b      	lsls	r3, r3, #8
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	6892      	ldr	r2, [r2, #8]
 800d6f0:	3205      	adds	r2, #5
 800d6f2:	7812      	ldrb	r2, [r2, #0]
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	2364      	movs	r3, #100	; 0x64
 800d6fa:	fb02 f303 	mul.w	r3, r2, r3
 800d6fe:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	3306      	adds	r3, #6
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	b25b      	sxtb	r3, r3
 800d70a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d70e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d712:	4618      	mov	r0, r3
 800d714:	f004 fa90 	bl	8011c38 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d718:	4b19      	ldr	r3, [pc, #100]	; (800d780 <LmhpComplianceOnMcpsIndication+0x3b4>)
 800d71a:	2201      	movs	r2, #1
 800d71c:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d71e:	e02c      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d720:	230a      	movs	r3, #10
 800d722:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d726:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d72a:	4618      	mov	r0, r3
 800d72c:	f004 fa84 	bl	8011c38 <LoRaMacMlmeRequest>
            }
            break;
 800d730:	e023      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d732:	2300      	movs	r3, #0
 800d734:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	3301      	adds	r3, #1
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d740:	f107 0308 	add.w	r3, r7, #8
 800d744:	4618      	mov	r0, r3
 800d746:	f003 ff1d 	bl	8011584 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d74a:	e016      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d74c:	230d      	movs	r3, #13
 800d74e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	689b      	ldr	r3, [r3, #8]
 800d756:	785b      	ldrb	r3, [r3, #1]
 800d758:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d75c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d760:	4618      	mov	r0, r3
 800d762:	f004 fa69 	bl	8011c38 <LoRaMacMlmeRequest>
            }
            break;
 800d766:	e008      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800d768:	bf00      	nop
 800d76a:	e006      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800d76c:	bf00      	nop
 800d76e:	e004      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800d770:	bf00      	nop
 800d772:	e002      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 800d774:	bf00      	nop
 800d776:	e000      	b.n	800d77a <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 800d778:	bf00      	nop
        }
    }
}
 800d77a:	3780      	adds	r7, #128	; 0x80
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	2000062c 	.word	0x2000062c

0800d784 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d784:	b480      	push	{r7}
 800d786:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d788:	bf00      	nop
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bc80      	pop	{r7}
 800d78e:	4770      	bx	lr

0800d790 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d798:	f7ff fda8 	bl	800d2ec <LmhpComplianceTxProcess>
}
 800d79c:	bf00      	nop
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d7a4:	b590      	push	{r4, r7, lr}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d7aa:	f00d fab5 	bl	801ad18 <UTIL_TIMER_GetCurrentTime>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	4a16      	ldr	r2, [pc, #88]	; (800d80c <OnRadioTxDone+0x68>)
 800d7b2:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d7b4:	4c16      	ldr	r4, [pc, #88]	; (800d810 <OnRadioTxDone+0x6c>)
 800d7b6:	463b      	mov	r3, r7
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f00c fc27 	bl	801a00c <SysTimeGet>
 800d7be:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d7c2:	463a      	mov	r2, r7
 800d7c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7c8:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d7cc:	4a11      	ldr	r2, [pc, #68]	; (800d814 <OnRadioTxDone+0x70>)
 800d7ce:	7813      	ldrb	r3, [r2, #0]
 800d7d0:	f043 0310 	orr.w	r3, r3, #16
 800d7d4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d7d6:	4b0e      	ldr	r3, [pc, #56]	; (800d810 <OnRadioTxDone+0x6c>)
 800d7d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00a      	beq.n	800d7f6 <OnRadioTxDone+0x52>
 800d7e0:	4b0b      	ldr	r3, [pc, #44]	; (800d810 <OnRadioTxDone+0x6c>)
 800d7e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7e6:	691b      	ldr	r3, [r3, #16]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d004      	beq.n	800d7f6 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d7ec:	4b08      	ldr	r3, [pc, #32]	; (800d810 <OnRadioTxDone+0x6c>)
 800d7ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d7f6:	4b08      	ldr	r3, [pc, #32]	; (800d818 <OnRadioTxDone+0x74>)
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	2002      	movs	r0, #2
 800d7fe:	f00d fb7b 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d802:	bf00      	nop
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	bd90      	pop	{r4, r7, pc}
 800d80a:	bf00      	nop
 800d80c:	200019a4 	.word	0x200019a4
 800d810:	20000644 	.word	0x20000644
 800d814:	200019a0 	.word	0x200019a0
 800d818:	0801bd50 	.word	0x0801bd50

0800d81c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	4608      	mov	r0, r1
 800d826:	4611      	mov	r1, r2
 800d828:	461a      	mov	r2, r3
 800d82a:	4603      	mov	r3, r0
 800d82c:	817b      	strh	r3, [r7, #10]
 800d82e:	460b      	mov	r3, r1
 800d830:	813b      	strh	r3, [r7, #8]
 800d832:	4613      	mov	r3, r2
 800d834:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d836:	f00d fa6f 	bl	801ad18 <UTIL_TIMER_GetCurrentTime>
 800d83a:	4603      	mov	r3, r0
 800d83c:	4a16      	ldr	r2, [pc, #88]	; (800d898 <OnRadioRxDone+0x7c>)
 800d83e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d840:	4a15      	ldr	r2, [pc, #84]	; (800d898 <OnRadioRxDone+0x7c>)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d846:	4a14      	ldr	r2, [pc, #80]	; (800d898 <OnRadioRxDone+0x7c>)
 800d848:	897b      	ldrh	r3, [r7, #10]
 800d84a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d84c:	4a12      	ldr	r2, [pc, #72]	; (800d898 <OnRadioRxDone+0x7c>)
 800d84e:	893b      	ldrh	r3, [r7, #8]
 800d850:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d852:	4a11      	ldr	r2, [pc, #68]	; (800d898 <OnRadioRxDone+0x7c>)
 800d854:	79fb      	ldrb	r3, [r7, #7]
 800d856:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d858:	4a10      	ldr	r2, [pc, #64]	; (800d89c <OnRadioRxDone+0x80>)
 800d85a:	7813      	ldrb	r3, [r2, #0]
 800d85c:	f043 0308 	orr.w	r3, r3, #8
 800d860:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d862:	4b0f      	ldr	r3, [pc, #60]	; (800d8a0 <OnRadioRxDone+0x84>)
 800d864:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00a      	beq.n	800d882 <OnRadioRxDone+0x66>
 800d86c:	4b0c      	ldr	r3, [pc, #48]	; (800d8a0 <OnRadioRxDone+0x84>)
 800d86e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d872:	691b      	ldr	r3, [r3, #16]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d004      	beq.n	800d882 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d878:	4b09      	ldr	r3, [pc, #36]	; (800d8a0 <OnRadioRxDone+0x84>)
 800d87a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d882:	4b08      	ldr	r3, [pc, #32]	; (800d8a4 <OnRadioRxDone+0x88>)
 800d884:	2201      	movs	r2, #1
 800d886:	2100      	movs	r1, #0
 800d888:	2002      	movs	r0, #2
 800d88a:	f00d fb35 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d88e:	bf00      	nop
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	200019a8 	.word	0x200019a8
 800d89c:	200019a0 	.word	0x200019a0
 800d8a0:	20000644 	.word	0x20000644
 800d8a4:	0801bd60 	.word	0x0801bd60

0800d8a8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d8ac:	4a0e      	ldr	r2, [pc, #56]	; (800d8e8 <OnRadioTxTimeout+0x40>)
 800d8ae:	7813      	ldrb	r3, [r2, #0]
 800d8b0:	f043 0304 	orr.w	r3, r3, #4
 800d8b4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d8b6:	4b0d      	ldr	r3, [pc, #52]	; (800d8ec <OnRadioTxTimeout+0x44>)
 800d8b8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00a      	beq.n	800d8d6 <OnRadioTxTimeout+0x2e>
 800d8c0:	4b0a      	ldr	r3, [pc, #40]	; (800d8ec <OnRadioTxTimeout+0x44>)
 800d8c2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d004      	beq.n	800d8d6 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d8cc:	4b07      	ldr	r3, [pc, #28]	; (800d8ec <OnRadioTxTimeout+0x44>)
 800d8ce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d8d6:	4b06      	ldr	r3, [pc, #24]	; (800d8f0 <OnRadioTxTimeout+0x48>)
 800d8d8:	2201      	movs	r2, #1
 800d8da:	2100      	movs	r1, #0
 800d8dc:	2002      	movs	r0, #2
 800d8de:	f00d fb0b 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d8e2:	bf00      	nop
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	200019a0 	.word	0x200019a0
 800d8ec:	20000644 	.word	0x20000644
 800d8f0:	0801bd70 	.word	0x0801bd70

0800d8f4 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d8f8:	4a0b      	ldr	r2, [pc, #44]	; (800d928 <OnRadioRxError+0x34>)
 800d8fa:	7813      	ldrb	r3, [r2, #0]
 800d8fc:	f043 0302 	orr.w	r3, r3, #2
 800d900:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d902:	4b0a      	ldr	r3, [pc, #40]	; (800d92c <OnRadioRxError+0x38>)
 800d904:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d00a      	beq.n	800d922 <OnRadioRxError+0x2e>
 800d90c:	4b07      	ldr	r3, [pc, #28]	; (800d92c <OnRadioRxError+0x38>)
 800d90e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d912:	691b      	ldr	r3, [r3, #16]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d004      	beq.n	800d922 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d918:	4b04      	ldr	r3, [pc, #16]	; (800d92c <OnRadioRxError+0x38>)
 800d91a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	4798      	blx	r3
    }
}
 800d922:	bf00      	nop
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	200019a0 	.word	0x200019a0
 800d92c:	20000644 	.word	0x20000644

0800d930 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d934:	4a0e      	ldr	r2, [pc, #56]	; (800d970 <OnRadioRxTimeout+0x40>)
 800d936:	7813      	ldrb	r3, [r2, #0]
 800d938:	f043 0301 	orr.w	r3, r3, #1
 800d93c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d93e:	4b0d      	ldr	r3, [pc, #52]	; (800d974 <OnRadioRxTimeout+0x44>)
 800d940:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00a      	beq.n	800d95e <OnRadioRxTimeout+0x2e>
 800d948:	4b0a      	ldr	r3, [pc, #40]	; (800d974 <OnRadioRxTimeout+0x44>)
 800d94a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d94e:	691b      	ldr	r3, [r3, #16]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d004      	beq.n	800d95e <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d954:	4b07      	ldr	r3, [pc, #28]	; (800d974 <OnRadioRxTimeout+0x44>)
 800d956:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d95e:	4b06      	ldr	r3, [pc, #24]	; (800d978 <OnRadioRxTimeout+0x48>)
 800d960:	2201      	movs	r2, #1
 800d962:	2100      	movs	r1, #0
 800d964:	2002      	movs	r0, #2
 800d966:	f00d fac7 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d96a:	bf00      	nop
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	200019a0 	.word	0x200019a0
 800d974:	20000644 	.word	0x20000644
 800d978:	0801bd80 	.word	0x0801bd80

0800d97c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d97c:	b480      	push	{r7}
 800d97e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d980:	4b08      	ldr	r3, [pc, #32]	; (800d9a4 <UpdateRxSlotIdleState+0x28>)
 800d982:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d986:	2b02      	cmp	r3, #2
 800d988:	d004      	beq.n	800d994 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d98a:	4b07      	ldr	r3, [pc, #28]	; (800d9a8 <UpdateRxSlotIdleState+0x2c>)
 800d98c:	2206      	movs	r2, #6
 800d98e:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d992:	e003      	b.n	800d99c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d994:	4b04      	ldr	r3, [pc, #16]	; (800d9a8 <UpdateRxSlotIdleState+0x2c>)
 800d996:	2202      	movs	r2, #2
 800d998:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 800d99c:	bf00      	nop
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bc80      	pop	{r7}
 800d9a2:	4770      	bx	lr
 800d9a4:	20000b50 	.word	0x20000b50
 800d9a8:	20000644 	.word	0x20000644

0800d9ac <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b08e      	sub	sp, #56	; 0x38
 800d9b0:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d9b2:	4b44      	ldr	r3, [pc, #272]	; (800dac4 <ProcessRadioTxDone+0x118>)
 800d9b4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d002      	beq.n	800d9c2 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d9bc:	4b42      	ldr	r3, [pc, #264]	; (800dac8 <ProcessRadioTxDone+0x11c>)
 800d9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c0:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d9c2:	4b42      	ldr	r3, [pc, #264]	; (800dacc <ProcessRadioTxDone+0x120>)
 800d9c4:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	4841      	ldr	r0, [pc, #260]	; (800dad0 <ProcessRadioTxDone+0x124>)
 800d9cc:	f00d f8fa 	bl	801abc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d9d0:	483f      	ldr	r0, [pc, #252]	; (800dad0 <ProcessRadioTxDone+0x124>)
 800d9d2:	f00d f819 	bl	801aa08 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d9d6:	4b3d      	ldr	r3, [pc, #244]	; (800dacc <ProcessRadioTxDone+0x120>)
 800d9d8:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d9dc:	4619      	mov	r1, r3
 800d9de:	483d      	ldr	r0, [pc, #244]	; (800dad4 <ProcessRadioTxDone+0x128>)
 800d9e0:	f00d f8f0 	bl	801abc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d9e4:	483b      	ldr	r0, [pc, #236]	; (800dad4 <ProcessRadioTxDone+0x128>)
 800d9e6:	f00d f80f 	bl	801aa08 <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d9ea:	4b36      	ldr	r3, [pc, #216]	; (800dac4 <ProcessRadioTxDone+0x118>)
 800d9ec:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d9f0:	2b02      	cmp	r3, #2
 800d9f2:	d004      	beq.n	800d9fe <ProcessRadioTxDone+0x52>
 800d9f4:	4b35      	ldr	r3, [pc, #212]	; (800dacc <ProcessRadioTxDone+0x120>)
 800d9f6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d019      	beq.n	800da32 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d9fe:	2316      	movs	r3, #22
 800da00:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da04:	4b2f      	ldr	r3, [pc, #188]	; (800dac4 <ProcessRadioTxDone+0x118>)
 800da06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da0a:	f107 0220 	add.w	r2, r7, #32
 800da0e:	4611      	mov	r1, r2
 800da10:	4618      	mov	r0, r3
 800da12:	f006 fc09 	bl	8014228 <RegionGetPhyParam>
 800da16:	4603      	mov	r3, r0
 800da18:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800da1a:	4b2c      	ldr	r3, [pc, #176]	; (800dacc <ProcessRadioTxDone+0x120>)
 800da1c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	4413      	add	r3, r2
 800da24:	4619      	mov	r1, r3
 800da26:	482c      	ldr	r0, [pc, #176]	; (800dad8 <ProcessRadioTxDone+0x12c>)
 800da28:	f00d f8cc 	bl	801abc4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800da2c:	482a      	ldr	r0, [pc, #168]	; (800dad8 <ProcessRadioTxDone+0x12c>)
 800da2e:	f00c ffeb 	bl	801aa08 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800da32:	4b2a      	ldr	r3, [pc, #168]	; (800dadc <ProcessRadioTxDone+0x130>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a23      	ldr	r2, [pc, #140]	; (800dac4 <ProcessRadioTxDone+0x118>)
 800da38:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800da3a:	4b24      	ldr	r3, [pc, #144]	; (800dacc <ProcessRadioTxDone+0x120>)
 800da3c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800da40:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800da42:	4b26      	ldr	r3, [pc, #152]	; (800dadc <ProcessRadioTxDone+0x130>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800da48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da4c:	4618      	mov	r0, r3
 800da4e:	f00c fb15 	bl	801a07c <SysTimeGetMcuTime>
 800da52:	4638      	mov	r0, r7
 800da54:	4b1b      	ldr	r3, [pc, #108]	; (800dac4 <ProcessRadioTxDone+0x118>)
 800da56:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800da5a:	9200      	str	r2, [sp, #0]
 800da5c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800da60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800da64:	ca06      	ldmia	r2, {r1, r2}
 800da66:	f00c fa6a 	bl	8019f3e <SysTimeSub>
 800da6a:	f107 0314 	add.w	r3, r7, #20
 800da6e:	463a      	mov	r2, r7
 800da70:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da74:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800da78:	4b14      	ldr	r3, [pc, #80]	; (800dacc <ProcessRadioTxDone+0x120>)
 800da7a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800da7e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800da80:	2301      	movs	r3, #1
 800da82:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800da84:	4b0f      	ldr	r3, [pc, #60]	; (800dac4 <ProcessRadioTxDone+0x118>)
 800da86:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d101      	bne.n	800da92 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800da8e:	2300      	movs	r3, #0
 800da90:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800da92:	4b0c      	ldr	r3, [pc, #48]	; (800dac4 <ProcessRadioTxDone+0x118>)
 800da94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da98:	f107 0208 	add.w	r2, r7, #8
 800da9c:	4611      	mov	r1, r2
 800da9e:	4618      	mov	r0, r3
 800daa0:	f006 fbda 	bl	8014258 <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800daa4:	4b09      	ldr	r3, [pc, #36]	; (800dacc <ProcessRadioTxDone+0x120>)
 800daa6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800daaa:	f083 0301 	eor.w	r3, r3, #1
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d003      	beq.n	800dabc <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dab4:	4b05      	ldr	r3, [pc, #20]	; (800dacc <ProcessRadioTxDone+0x120>)
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 800dabc:	bf00      	nop
 800dabe:	3730      	adds	r7, #48	; 0x30
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	20000b50 	.word	0x20000b50
 800dac8:	0801c3ac 	.word	0x0801c3ac
 800dacc:	20000644 	.word	0x20000644
 800dad0:	200009c4 	.word	0x200009c4
 800dad4:	200009dc 	.word	0x200009dc
 800dad8:	20000a3c 	.word	0x20000a3c
 800dadc:	200019a4 	.word	0x200019a4

0800dae0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800dae4:	4b10      	ldr	r3, [pc, #64]	; (800db28 <PrepareRxDoneAbort+0x48>)
 800dae6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800daea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daee:	4a0e      	ldr	r2, [pc, #56]	; (800db28 <PrepareRxDoneAbort+0x48>)
 800daf0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800daf4:	4b0c      	ldr	r3, [pc, #48]	; (800db28 <PrepareRxDoneAbort+0x48>)
 800daf6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d002      	beq.n	800db04 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800dafe:	2000      	movs	r0, #0
 800db00:	f001 f8f2 	bl	800ece8 <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800db04:	4a08      	ldr	r2, [pc, #32]	; (800db28 <PrepareRxDoneAbort+0x48>)
 800db06:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800db0a:	f043 0302 	orr.w	r3, r3, #2
 800db0e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 800db12:	4a05      	ldr	r2, [pc, #20]	; (800db28 <PrepareRxDoneAbort+0x48>)
 800db14:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800db18:	f043 0320 	orr.w	r3, r3, #32
 800db1c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 800db20:	f7ff ff2c 	bl	800d97c <UpdateRxSlotIdleState>
}
 800db24:	bf00      	nop
 800db26:	bd80      	pop	{r7, pc}
 800db28:	20000644 	.word	0x20000644

0800db2c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800db2c:	b5b0      	push	{r4, r5, r7, lr}
 800db2e:	b0a6      	sub	sp, #152	; 0x98
 800db30:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800db32:	2313      	movs	r3, #19
 800db34:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800db38:	4bb9      	ldr	r3, [pc, #740]	; (800de20 <ProcessRadioRxDone+0x2f4>)
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800db3e:	4bb8      	ldr	r3, [pc, #736]	; (800de20 <ProcessRadioRxDone+0x2f4>)
 800db40:	891b      	ldrh	r3, [r3, #8]
 800db42:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800db46:	4bb6      	ldr	r3, [pc, #728]	; (800de20 <ProcessRadioRxDone+0x2f4>)
 800db48:	895b      	ldrh	r3, [r3, #10]
 800db4a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800db4e:	4bb4      	ldr	r3, [pc, #720]	; (800de20 <ProcessRadioRxDone+0x2f4>)
 800db50:	7b1b      	ldrb	r3, [r3, #12]
 800db52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800db56:	2300      	movs	r3, #0
 800db58:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800db5c:	2300      	movs	r3, #0
 800db5e:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800db60:	4bb0      	ldr	r3, [pc, #704]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800db62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800db66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800db70:	2301      	movs	r3, #1
 800db72:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800db76:	4bac      	ldr	r3, [pc, #688]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800db7e:	4aaa      	ldr	r2, [pc, #680]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800db80:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800db84:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 800db88:	4aa7      	ldr	r2, [pc, #668]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800db8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800db8e:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800db92:	4ba5      	ldr	r3, [pc, #660]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800db94:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 800db98:	4ba3      	ldr	r3, [pc, #652]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800db9a:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 800db9e:	4ba2      	ldr	r3, [pc, #648]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800dba6:	4ba0      	ldr	r3, [pc, #640]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800dbae:	4b9e      	ldr	r3, [pc, #632]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800dbb6:	4b9c      	ldr	r3, [pc, #624]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800dbbe:	4b9a      	ldr	r3, [pc, #616]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800dbc6:	4b98      	ldr	r3, [pc, #608]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800dbce:	4b96      	ldr	r3, [pc, #600]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800dbd6:	4b94      	ldr	r3, [pc, #592]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dbde:	4b92      	ldr	r3, [pc, #584]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800dbe6:	4b90      	ldr	r3, [pc, #576]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dbee:	4b8e      	ldr	r3, [pc, #568]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800dbf6:	4b8d      	ldr	r3, [pc, #564]	; (800de2c <ProcessRadioRxDone+0x300>)
 800dbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfa:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800dbfc:	488c      	ldr	r0, [pc, #560]	; (800de30 <ProcessRadioRxDone+0x304>)
 800dbfe:	f00c ff71 	bl	801aae4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800dc02:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc06:	4619      	mov	r1, r3
 800dc08:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dc0a:	f004 fbaa 	bl	8012362 <LoRaMacClassBRxBeacon>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00a      	beq.n	800dc2a <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800dc14:	4a84      	ldr	r2, [pc, #528]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dc16:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800dc1a:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800dc1e:	4a82      	ldr	r2, [pc, #520]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dc20:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dc24:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 800dc28:	e3c7      	b.n	800e3ba <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dc2a:	4b7e      	ldr	r3, [pc, #504]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dc2c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d11e      	bne.n	800dc72 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dc34:	f004 fba8 	bl	8012388 <LoRaMacClassBIsPingExpected>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d00a      	beq.n	800dc54 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dc3e:	2000      	movs	r0, #0
 800dc40:	f004 fb59 	bl	80122f6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dc44:	2000      	movs	r0, #0
 800dc46:	f004 fb7a 	bl	801233e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dc4a:	4b77      	ldr	r3, [pc, #476]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dc4c:	2204      	movs	r2, #4
 800dc4e:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800dc52:	e00e      	b.n	800dc72 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dc54:	f004 fb9f 	bl	8012396 <LoRaMacClassBIsMulticastExpected>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d009      	beq.n	800dc72 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dc5e:	2000      	movs	r0, #0
 800dc60:	f004 fb53 	bl	801230a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dc64:	2000      	movs	r0, #0
 800dc66:	f004 fb73 	bl	8012350 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800dc6a:	4b6f      	ldr	r3, [pc, #444]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dc6c:	2205      	movs	r2, #5
 800dc6e:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800dc72:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dc76:	1c5a      	adds	r2, r3, #1
 800dc78:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc80:	4413      	add	r3, r2
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800dc88:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dc8c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	3b01      	subs	r3, #1
 800dc94:	2b06      	cmp	r3, #6
 800dc96:	f200 836a 	bhi.w	800e36e <ProcessRadioRxDone+0x842>
 800dc9a:	a201      	add	r2, pc, #4	; (adr r2, 800dca0 <ProcessRadioRxDone+0x174>)
 800dc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca0:	0800dcbd 	.word	0x0800dcbd
 800dca4:	0800e36f 	.word	0x0800e36f
 800dca8:	0800de3d 	.word	0x0800de3d
 800dcac:	0800e36f 	.word	0x0800e36f
 800dcb0:	0800de35 	.word	0x0800de35
 800dcb4:	0800e36f 	.word	0x0800e36f
 800dcb8:	0800e315 	.word	0x0800e315
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dcbc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dcc0:	2b10      	cmp	r3, #16
 800dcc2:	d806      	bhi.n	800dcd2 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dcc4:	4b58      	ldr	r3, [pc, #352]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dccc:	f7ff ff08 	bl	800dae0 <PrepareRxDoneAbort>
                return;
 800dcd0:	e373      	b.n	800e3ba <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 800dcd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcd4:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800dcd6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dcde:	4b51      	ldr	r3, [pc, #324]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dce0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d006      	beq.n	800dcf6 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dce8:	4b4f      	ldr	r3, [pc, #316]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800dcea:	2201      	movs	r2, #1
 800dcec:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dcf0:	f7ff fef6 	bl	800dae0 <PrepareRxDoneAbort>
                return;
 800dcf4:	e361      	b.n	800e3ba <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800dcf6:	f7fe fa87 	bl	800c208 <SecureElementGetJoinEui>
 800dcfa:	4601      	mov	r1, r0
 800dcfc:	f107 0308 	add.w	r3, r7, #8
 800dd00:	461a      	mov	r2, r3
 800dd02:	20ff      	movs	r0, #255	; 0xff
 800dd04:	f005 fd14 	bl	8013730 <LoRaMacCryptoHandleJoinAccept>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800dd0e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d172      	bne.n	800ddfc <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800dd16:	7c7b      	ldrb	r3, [r7, #17]
 800dd18:	461a      	mov	r2, r3
 800dd1a:	4b42      	ldr	r3, [pc, #264]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd1c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800dd20:	4b40      	ldr	r3, [pc, #256]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd22:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800dd26:	7cbb      	ldrb	r3, [r7, #18]
 800dd28:	021b      	lsls	r3, r3, #8
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	4a3d      	ldr	r2, [pc, #244]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd2e:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800dd32:	4b3c      	ldr	r3, [pc, #240]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd34:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800dd38:	7cfb      	ldrb	r3, [r7, #19]
 800dd3a:	041b      	lsls	r3, r3, #16
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	4a39      	ldr	r2, [pc, #228]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd40:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	4a37      	ldr	r2, [pc, #220]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd48:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800dd4c:	7e3b      	ldrb	r3, [r7, #24]
 800dd4e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	461a      	mov	r2, r3
 800dd56:	4b33      	ldr	r3, [pc, #204]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd58:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd5c:	7e3b      	ldrb	r3, [r7, #24]
 800dd5e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	461a      	mov	r2, r3
 800dd66:	4b2f      	ldr	r3, [pc, #188]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd68:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd6c:	7e3b      	ldrb	r3, [r7, #24]
 800dd6e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	461a      	mov	r2, r3
 800dd76:	4b2b      	ldr	r3, [pc, #172]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800dd7c:	7e7b      	ldrb	r3, [r7, #25]
 800dd7e:	461a      	mov	r2, r3
 800dd80:	4b28      	ldr	r3, [pc, #160]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd82:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800dd84:	4b27      	ldr	r3, [pc, #156]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d102      	bne.n	800dd92 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800dd8c:	4b25      	ldr	r3, [pc, #148]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd8e:	2201      	movs	r2, #1
 800dd90:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800dd92:	4b24      	ldr	r3, [pc, #144]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dd94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dd9a:	fb02 f303 	mul.w	r3, r2, r3
 800dd9e:	4a21      	ldr	r2, [pc, #132]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dda0:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800dda2:	4b20      	ldr	r3, [pc, #128]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dda4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dda6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800ddaa:	4a1e      	ldr	r2, [pc, #120]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800ddac:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800ddae:	4b1d      	ldr	r3, [pc, #116]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ddb6:	f107 0308 	add.w	r3, r7, #8
 800ddba:	3312      	adds	r3, #18
 800ddbc:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ddbe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	3b11      	subs	r3, #17
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ddcc:	4b15      	ldr	r3, [pc, #84]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800ddce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddd2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ddd6:	4611      	mov	r1, r2
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f006 fa77 	bl	80142cc <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ddde:	4b11      	ldr	r3, [pc, #68]	; (800de24 <ProcessRadioRxDone+0x2f8>)
 800dde0:	2202      	movs	r2, #2
 800dde2:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dde6:	2001      	movs	r0, #1
 800dde8:	f004 ff9a 	bl	8012d20 <LoRaMacConfirmQueueIsCmdActive>
 800ddec:	4603      	mov	r3, r0
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00e      	beq.n	800de10 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ddf2:	2101      	movs	r1, #1
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	f004 ff07 	bl	8012c08 <LoRaMacConfirmQueueSetStatus>
 800ddfa:	e009      	b.n	800de10 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ddfc:	2001      	movs	r0, #1
 800ddfe:	f004 ff8f 	bl	8012d20 <LoRaMacConfirmQueueIsCmdActive>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d003      	beq.n	800de10 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800de08:	2101      	movs	r1, #1
 800de0a:	2007      	movs	r0, #7
 800de0c:	f004 fefc 	bl	8012c08 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800de10:	4a05      	ldr	r2, [pc, #20]	; (800de28 <ProcessRadioRxDone+0x2fc>)
 800de12:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800de16:	f043 0308 	orr.w	r3, r3, #8
 800de1a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800de1e:	e2ad      	b.n	800e37c <ProcessRadioRxDone+0x850>
 800de20:	200019a8 	.word	0x200019a8
 800de24:	20000b50 	.word	0x20000b50
 800de28:	20000644 	.word	0x20000644
 800de2c:	0801c3ac 	.word	0x0801c3ac
 800de30:	200009dc 	.word	0x200009dc
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800de34:	4bb0      	ldr	r3, [pc, #704]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800de36:	2201      	movs	r2, #1
 800de38:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800de3c:	4baf      	ldr	r3, [pc, #700]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800de3e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800de42:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800de46:	4bac      	ldr	r3, [pc, #688]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800de48:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800de4c:	b25b      	sxtb	r3, r3
 800de4e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800de52:	230d      	movs	r3, #13
 800de54:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800de58:	4ba8      	ldr	r3, [pc, #672]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800de5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d002      	beq.n	800de68 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800de62:	230e      	movs	r3, #14
 800de64:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de68:	4ba4      	ldr	r3, [pc, #656]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800de6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de6e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800de72:	4611      	mov	r1, r2
 800de74:	4618      	mov	r0, r3
 800de76:	f006 f9d7 	bl	8014228 <RegionGetPhyParam>
 800de7a:	4603      	mov	r3, r0
 800de7c:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800de7e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800de82:	3b0d      	subs	r3, #13
 800de84:	b29b      	uxth	r3, r3
 800de86:	b21b      	sxth	r3, r3
 800de88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de8c:	b21a      	sxth	r2, r3
 800de8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de90:	b21b      	sxth	r3, r3
 800de92:	429a      	cmp	r2, r3
 800de94:	dc03      	bgt.n	800de9e <ProcessRadioRxDone+0x372>
 800de96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800de9a:	2b0b      	cmp	r3, #11
 800de9c:	d806      	bhi.n	800deac <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de9e:	4b96      	ldr	r3, [pc, #600]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dea6:	f7ff fe1b 	bl	800dae0 <PrepareRxDoneAbort>
                return;
 800deaa:	e286      	b.n	800e3ba <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 800deac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800deae:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800deb0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800deba:	4b91      	ldr	r3, [pc, #580]	; (800e100 <ProcessRadioRxDone+0x5d4>)
 800debc:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800debe:	23ff      	movs	r3, #255	; 0xff
 800dec0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dec8:	4618      	mov	r0, r3
 800deca:	f005 ff30 	bl	8013d2e <LoRaMacParserData>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d006      	beq.n	800dee2 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ded4:	4b88      	ldr	r3, [pc, #544]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800ded6:	2201      	movs	r2, #1
 800ded8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dedc:	f7ff fe00 	bl	800dae0 <PrepareRxDoneAbort>
                return;
 800dee0:	e26b      	b.n	800e3ba <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800dee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee4:	4a84      	ldr	r2, [pc, #528]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800dee6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800deea:	1cba      	adds	r2, r7, #2
 800deec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800def0:	4611      	mov	r1, r2
 800def2:	4618      	mov	r0, r3
 800def4:	f002 fc9e 	bl	8010834 <DetermineFrameType>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d006      	beq.n	800df0c <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800defe:	4b7e      	ldr	r3, [pc, #504]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800df00:	2201      	movs	r2, #1
 800df02:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800df06:	f7ff fdeb 	bl	800dae0 <PrepareRxDoneAbort>
                return;
 800df0a:	e256      	b.n	800e3ba <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800df12:	2300      	movs	r3, #0
 800df14:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800df16:	2300      	movs	r3, #0
 800df18:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800df1c:	e049      	b.n	800dfb2 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df1e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df22:	4a76      	ldr	r2, [pc, #472]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800df24:	212c      	movs	r1, #44	; 0x2c
 800df26:	fb01 f303 	mul.w	r3, r1, r3
 800df2a:	4413      	add	r3, r2
 800df2c:	33dc      	adds	r3, #220	; 0xdc
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df32:	429a      	cmp	r2, r3
 800df34:	d138      	bne.n	800dfa8 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800df36:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df3a:	4a70      	ldr	r2, [pc, #448]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800df3c:	212c      	movs	r1, #44	; 0x2c
 800df3e:	fb01 f303 	mul.w	r3, r1, r3
 800df42:	4413      	add	r3, r2
 800df44:	33da      	adds	r3, #218	; 0xda
 800df46:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d02d      	beq.n	800dfa8 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800df4c:	2301      	movs	r3, #1
 800df4e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800df52:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df56:	4a69      	ldr	r2, [pc, #420]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800df58:	212c      	movs	r1, #44	; 0x2c
 800df5a:	fb01 f303 	mul.w	r3, r1, r3
 800df5e:	4413      	add	r3, r2
 800df60:	33db      	adds	r3, #219	; 0xdb
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800df68:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df6c:	4a63      	ldr	r2, [pc, #396]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800df6e:	212c      	movs	r1, #44	; 0x2c
 800df70:	fb01 f303 	mul.w	r3, r1, r3
 800df74:	4413      	add	r3, r2
 800df76:	33f8      	adds	r3, #248	; 0xf8
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800df7e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df82:	4a5e      	ldr	r2, [pc, #376]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800df84:	212c      	movs	r1, #44	; 0x2c
 800df86:	fb01 f303 	mul.w	r3, r1, r3
 800df8a:	4413      	add	r3, r2
 800df8c:	33dc      	adds	r3, #220	; 0xdc
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800df94:	4b59      	ldr	r3, [pc, #356]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800df96:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800df9a:	2b02      	cmp	r3, #2
 800df9c:	d10e      	bne.n	800dfbc <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800df9e:	4b56      	ldr	r3, [pc, #344]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800dfa0:	2203      	movs	r2, #3
 800dfa2:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 800dfa6:	e009      	b.n	800dfbc <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dfa8:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dfac:	3301      	adds	r3, #1
 800dfae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dfb2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d0b1      	beq.n	800df1e <ProcessRadioRxDone+0x3f2>
 800dfba:	e000      	b.n	800dfbe <ProcessRadioRxDone+0x492>
                    break;
 800dfbc:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfbe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d117      	bne.n	800dff6 <ProcessRadioRxDone+0x4ca>
 800dfc6:	78bb      	ldrb	r3, [r7, #2]
 800dfc8:	2b03      	cmp	r3, #3
 800dfca:	d10d      	bne.n	800dfe8 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dfcc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfd0:	f003 0320 	and.w	r3, r3, #32
 800dfd4:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d106      	bne.n	800dfe8 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dfda:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfe2:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d006      	beq.n	800dff6 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dfe8:	4b43      	ldr	r3, [pc, #268]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800dfea:	2201      	movs	r2, #1
 800dfec:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dff0:	f7ff fd76 	bl	800dae0 <PrepareRxDoneAbort>
                return;
 800dff4:	e1e1      	b.n	800e3ba <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800dff6:	2315      	movs	r3, #21
 800dff8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dffc:	4b3f      	ldr	r3, [pc, #252]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800dffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e002:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e006:	4611      	mov	r1, r2
 800e008:	4618      	mov	r0, r3
 800e00a:	f006 f90d 	bl	8014228 <RegionGetPhyParam>
 800e00e:	4603      	mov	r3, r0
 800e010:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800e012:	78b9      	ldrb	r1, [r7, #2]
 800e014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e016:	b29b      	uxth	r3, r3
 800e018:	4d38      	ldr	r5, [pc, #224]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800e01a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e01e:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e022:	1d3a      	adds	r2, r7, #4
 800e024:	9202      	str	r2, [sp, #8]
 800e026:	1cfa      	adds	r2, r7, #3
 800e028:	9201      	str	r2, [sp, #4]
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800e030:	4622      	mov	r2, r4
 800e032:	f000 fe8f 	bl	800ed54 <GetFCntDown>
 800e036:	4603      	mov	r3, r0
 800e038:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e03c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e040:	2b00      	cmp	r3, #0
 800e042:	d035      	beq.n	800e0b0 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e044:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e048:	2b07      	cmp	r3, #7
 800e04a:	d119      	bne.n	800e080 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e04c:	4b2a      	ldr	r3, [pc, #168]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800e04e:	2208      	movs	r2, #8
 800e050:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800e054:	4b29      	ldr	r3, [pc, #164]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800e056:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d11d      	bne.n	800e09a <ProcessRadioRxDone+0x56e>
 800e05e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e062:	f023 031f 	bic.w	r3, r3, #31
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2ba0      	cmp	r3, #160	; 0xa0
 800e06a:	d116      	bne.n	800e09a <ProcessRadioRxDone+0x56e>
 800e06c:	4b23      	ldr	r3, [pc, #140]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800e06e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e072:	429a      	cmp	r2, r3
 800e074:	d111      	bne.n	800e09a <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800e076:	4b21      	ldr	r3, [pc, #132]	; (800e0fc <ProcessRadioRxDone+0x5d0>)
 800e078:	2201      	movs	r2, #1
 800e07a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800e07e:	e00c      	b.n	800e09a <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800e080:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e084:	2b08      	cmp	r3, #8
 800e086:	d104      	bne.n	800e092 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800e088:	4b1b      	ldr	r3, [pc, #108]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800e08a:	220a      	movs	r2, #10
 800e08c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e090:	e003      	b.n	800e09a <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e092:	4b19      	ldr	r3, [pc, #100]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800e094:	2201      	movs	r2, #1
 800e096:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4a16      	ldr	r2, [pc, #88]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800e09e:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4a14      	ldr	r2, [pc, #80]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800e0a6:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 800e0aa:	f7ff fd19 	bl	800dae0 <PrepareRxDoneAbort>
                return;
 800e0ae:	e184      	b.n	800e3ba <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e0b0:	78fa      	ldrb	r2, [r7, #3]
 800e0b2:	6879      	ldr	r1, [r7, #4]
 800e0b4:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e0b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0bc:	9300      	str	r3, [sp, #0]
 800e0be:	460b      	mov	r3, r1
 800e0c0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e0c4:	f005 fc80 	bl	80139c8 <LoRaMacCryptoUnsecureMessage>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e0ce:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d016      	beq.n	800e104 <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e0d6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e0da:	2b02      	cmp	r3, #2
 800e0dc:	d104      	bne.n	800e0e8 <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e0de:	4b06      	ldr	r3, [pc, #24]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800e0e0:	220b      	movs	r2, #11
 800e0e2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e0e6:	e003      	b.n	800e0f0 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e0e8:	4b03      	ldr	r3, [pc, #12]	; (800e0f8 <ProcessRadioRxDone+0x5cc>)
 800e0ea:	220c      	movs	r2, #12
 800e0ec:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800e0f0:	f7ff fcf6 	bl	800dae0 <PrepareRxDoneAbort>
                return;
 800e0f4:	e161      	b.n	800e3ba <ProcessRadioRxDone+0x88e>
 800e0f6:	bf00      	nop
 800e0f8:	20000644 	.word	0x20000644
 800e0fc:	20000b50 	.word	0x20000b50
 800e100:	2000087c 	.word	0x2000087c
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e104:	4bae      	ldr	r3, [pc, #696]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e106:	2200      	movs	r2, #0
 800e108:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800e10c:	4aac      	ldr	r2, [pc, #688]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e10e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e112:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e116:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e11a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	461a      	mov	r2, r3
 800e122:	4ba7      	ldr	r3, [pc, #668]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e124:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800e128:	4ba5      	ldr	r3, [pc, #660]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e12a:	2200      	movs	r2, #0
 800e12c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800e130:	4ba3      	ldr	r3, [pc, #652]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e132:	2200      	movs	r2, #0
 800e134:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4aa1      	ldr	r2, [pc, #644]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e13c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4a9f      	ldr	r2, [pc, #636]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e144:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e148:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e14c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	bf14      	ite	ne
 800e156:	2301      	movne	r3, #1
 800e158:	2300      	moveq	r3, #0
 800e15a:	b2da      	uxtb	r2, r3
 800e15c:	4b98      	ldr	r3, [pc, #608]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e15e:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e162:	4b97      	ldr	r3, [pc, #604]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e164:	2200      	movs	r2, #0
 800e166:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e16a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e16e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e172:	b2db      	uxtb	r3, r3
 800e174:	2b00      	cmp	r3, #0
 800e176:	bf14      	ite	ne
 800e178:	2301      	movne	r3, #1
 800e17a:	2300      	moveq	r3, #0
 800e17c:	b2da      	uxtb	r2, r3
 800e17e:	4b90      	ldr	r3, [pc, #576]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e180:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e184:	4b8e      	ldr	r3, [pc, #568]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e186:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d004      	beq.n	800e198 <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e18e:	4b8c      	ldr	r3, [pc, #560]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e190:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e194:	2b01      	cmp	r3, #1
 800e196:	d102      	bne.n	800e19e <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e198:	4b8a      	ldr	r3, [pc, #552]	; (800e3c4 <ProcessRadioRxDone+0x898>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e19e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d104      	bne.n	800e1b0 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e1a6:	4b86      	ldr	r3, [pc, #536]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e1ae:	e01f      	b.n	800e1f0 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e1b0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e1b4:	f023 031f 	bic.w	r3, r3, #31
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	2ba0      	cmp	r3, #160	; 0xa0
 800e1bc:	d110      	bne.n	800e1e0 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e1be:	4b81      	ldr	r3, [pc, #516]	; (800e3c4 <ProcessRadioRxDone+0x898>)
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e1c6:	4b7f      	ldr	r3, [pc, #508]	; (800e3c4 <ProcessRadioRxDone+0x898>)
 800e1c8:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d102      	bne.n	800e1d6 <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e1d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1d2:	4a7c      	ldr	r2, [pc, #496]	; (800e3c4 <ProcessRadioRxDone+0x898>)
 800e1d4:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e1d6:	4b7a      	ldr	r3, [pc, #488]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e1de:	e007      	b.n	800e1f0 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e1e0:	4b78      	ldr	r3, [pc, #480]	; (800e3c4 <ProcessRadioRxDone+0x898>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e1e8:	4b75      	ldr	r3, [pc, #468]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e1f0:	4b73      	ldr	r3, [pc, #460]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e1f2:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800e1f6:	4a72      	ldr	r2, [pc, #456]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e1f8:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800e1fc:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800e200:	4618      	mov	r0, r3
 800e202:	f001 fee9 	bl	800ffd8 <RemoveMacCommands>

            switch( fType )
 800e206:	78bb      	ldrb	r3, [r7, #2]
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d874      	bhi.n	800e2f6 <ProcessRadioRxDone+0x7ca>
 800e20c:	a201      	add	r2, pc, #4	; (adr r2, 800e214 <ProcessRadioRxDone+0x6e8>)
 800e20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e212:	bf00      	nop
 800e214:	0800e225 	.word	0x0800e225
 800e218:	0800e275 	.word	0x0800e275
 800e21c:	0800e2ab 	.word	0x0800e2ab
 800e220:	0800e2d1 	.word	0x0800e2d1
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e224:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e228:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	461c      	mov	r4, r3
 800e230:	4b63      	ldr	r3, [pc, #396]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e232:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800e236:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e23a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e23e:	f102 0010 	add.w	r0, r2, #16
 800e242:	9300      	str	r3, [sp, #0]
 800e244:	460b      	mov	r3, r1
 800e246:	4622      	mov	r2, r4
 800e248:	2100      	movs	r1, #0
 800e24a:	f000 fee5 	bl	800f018 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e24e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e252:	4b5b      	ldr	r3, [pc, #364]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e254:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e25a:	4a59      	ldr	r2, [pc, #356]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e25c:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e260:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e264:	4b56      	ldr	r3, [pc, #344]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e266:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e26a:	4b55      	ldr	r3, [pc, #340]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e26c:	2201      	movs	r2, #1
 800e26e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e272:	e047      	b.n	800e304 <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e274:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e278:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	461c      	mov	r4, r3
 800e280:	4b4f      	ldr	r3, [pc, #316]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e282:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800e286:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e28a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e28e:	f102 0010 	add.w	r0, r2, #16
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	460b      	mov	r3, r1
 800e296:	4622      	mov	r2, r4
 800e298:	2100      	movs	r1, #0
 800e29a:	f000 febd 	bl	800f018 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e29e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2a2:	4b47      	ldr	r3, [pc, #284]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e2a4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e2a8:	e02c      	b.n	800e304 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e2aa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e2ac:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e2b0:	4b43      	ldr	r3, [pc, #268]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e2b2:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800e2b6:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e2ba:	9300      	str	r3, [sp, #0]
 800e2bc:	460b      	mov	r3, r1
 800e2be:	2100      	movs	r1, #0
 800e2c0:	f000 feaa 	bl	800f018 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2c4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2c8:	4b3d      	ldr	r3, [pc, #244]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e2ca:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e2ce:	e019      	b.n	800e304 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2d0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2d4:	4b3a      	ldr	r3, [pc, #232]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e2d6:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e2da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2dc:	4a38      	ldr	r2, [pc, #224]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e2de:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e2e2:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e2e6:	4b36      	ldr	r3, [pc, #216]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e2e8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e2ec:	4b34      	ldr	r3, [pc, #208]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e2f4:	e006      	b.n	800e304 <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e2f6:	4b32      	ldr	r3, [pc, #200]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800e2fe:	f7ff fbef 	bl	800dae0 <PrepareRxDoneAbort>
                    break;
 800e302:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e304:	4a2e      	ldr	r2, [pc, #184]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e306:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e30a:	f043 0302 	orr.w	r3, r3, #2
 800e30e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 800e312:	e033      	b.n	800e37c <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e314:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e318:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e31a:	18d1      	adds	r1, r2, r3
 800e31c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e320:	b29b      	uxth	r3, r3
 800e322:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	b29b      	uxth	r3, r3
 800e32a:	461a      	mov	r2, r3
 800e32c:	4826      	ldr	r0, [pc, #152]	; (800e3c8 <ProcessRadioRxDone+0x89c>)
 800e32e:	f008 fa8e 	bl	801684e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e332:	4b23      	ldr	r3, [pc, #140]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e334:	2203      	movs	r2, #3
 800e336:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e33a:	4b21      	ldr	r3, [pc, #132]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e342:	4b1f      	ldr	r3, [pc, #124]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e344:	4a20      	ldr	r2, [pc, #128]	; (800e3c8 <ProcessRadioRxDone+0x89c>)
 800e346:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e34a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e34e:	b2da      	uxtb	r2, r3
 800e350:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e354:	1ad3      	subs	r3, r2, r3
 800e356:	b2da      	uxtb	r2, r3
 800e358:	4b19      	ldr	r3, [pc, #100]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e35a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e35e:	4a18      	ldr	r2, [pc, #96]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e360:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e364:	f043 0302 	orr.w	r3, r3, #2
 800e368:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800e36c:	e006      	b.n	800e37c <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e36e:	4b14      	ldr	r3, [pc, #80]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e370:	2201      	movs	r2, #1
 800e372:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e376:	f7ff fbb3 	bl	800dae0 <PrepareRxDoneAbort>
            break;
 800e37a:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e37c:	4b10      	ldr	r3, [pc, #64]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e37e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e382:	2b00      	cmp	r3, #0
 800e384:	d008      	beq.n	800e398 <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e386:	4b0e      	ldr	r3, [pc, #56]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e388:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00b      	beq.n	800e3a8 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e390:	2000      	movs	r0, #0
 800e392:	f000 fca9 	bl	800ece8 <OnAckTimeoutTimerEvent>
 800e396:	e007      	b.n	800e3a8 <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e398:	4b0a      	ldr	r3, [pc, #40]	; (800e3c4 <ProcessRadioRxDone+0x898>)
 800e39a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e39e:	2b02      	cmp	r3, #2
 800e3a0:	d102      	bne.n	800e3a8 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	f000 fca0 	bl	800ece8 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e3a8:	4a05      	ldr	r2, [pc, #20]	; (800e3c0 <ProcessRadioRxDone+0x894>)
 800e3aa:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e3ae:	f043 0320 	orr.w	r3, r3, #32
 800e3b2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e3b6:	f7ff fae1 	bl	800d97c <UpdateRxSlotIdleState>
}
 800e3ba:	3788      	adds	r7, #136	; 0x88
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bdb0      	pop	{r4, r5, r7, pc}
 800e3c0:	20000644 	.word	0x20000644
 800e3c4:	20000b50 	.word	0x20000b50
 800e3c8:	2000087c 	.word	0x2000087c

0800e3cc <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e3d0:	4b11      	ldr	r3, [pc, #68]	; (800e418 <ProcessRadioTxTimeout+0x4c>)
 800e3d2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e3d6:	2b02      	cmp	r3, #2
 800e3d8:	d002      	beq.n	800e3e0 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e3da:	4b10      	ldr	r3, [pc, #64]	; (800e41c <ProcessRadioTxTimeout+0x50>)
 800e3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3de:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e3e0:	f7ff facc 	bl	800d97c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e3e4:	4b0e      	ldr	r3, [pc, #56]	; (800e420 <ProcessRadioTxTimeout+0x54>)
 800e3e6:	2202      	movs	r2, #2
 800e3e8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e3ec:	2002      	movs	r0, #2
 800e3ee:	f004 fc63 	bl	8012cb8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e3f2:	4b0b      	ldr	r3, [pc, #44]	; (800e420 <ProcessRadioTxTimeout+0x54>)
 800e3f4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d003      	beq.n	800e404 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800e3fc:	4b08      	ldr	r3, [pc, #32]	; (800e420 <ProcessRadioTxTimeout+0x54>)
 800e3fe:	2201      	movs	r2, #1
 800e400:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e404:	4a06      	ldr	r2, [pc, #24]	; (800e420 <ProcessRadioTxTimeout+0x54>)
 800e406:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e40a:	f043 0320 	orr.w	r3, r3, #32
 800e40e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 800e412:	bf00      	nop
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	20000b50 	.word	0x20000b50
 800e41c:	0801c3ac 	.word	0x0801c3ac
 800e420:	20000644 	.word	0x20000644

0800e424 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	4603      	mov	r3, r0
 800e42c:	460a      	mov	r2, r1
 800e42e:	71fb      	strb	r3, [r7, #7]
 800e430:	4613      	mov	r3, r2
 800e432:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e434:	2300      	movs	r3, #0
 800e436:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e438:	4b40      	ldr	r3, [pc, #256]	; (800e53c <HandleRadioRxErrorTimeout+0x118>)
 800e43a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e43e:	2b02      	cmp	r3, #2
 800e440:	d002      	beq.n	800e448 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e442:	4b3f      	ldr	r3, [pc, #252]	; (800e540 <HandleRadioRxErrorTimeout+0x11c>)
 800e444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e446:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e448:	f003 ff97 	bl	801237a <LoRaMacClassBIsBeaconExpected>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d007      	beq.n	800e462 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e452:	2002      	movs	r0, #2
 800e454:	f003 ff45 	bl	80122e2 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e458:	2000      	movs	r0, #0
 800e45a:	f003 ff67 	bl	801232c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e45e:	2301      	movs	r3, #1
 800e460:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e462:	4b36      	ldr	r3, [pc, #216]	; (800e53c <HandleRadioRxErrorTimeout+0x118>)
 800e464:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d119      	bne.n	800e4a0 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e46c:	f003 ff8c 	bl	8012388 <LoRaMacClassBIsPingExpected>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d007      	beq.n	800e486 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e476:	2000      	movs	r0, #0
 800e478:	f003 ff3d 	bl	80122f6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e47c:	2000      	movs	r0, #0
 800e47e:	f003 ff5e 	bl	801233e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e482:	2301      	movs	r3, #1
 800e484:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e486:	f003 ff86 	bl	8012396 <LoRaMacClassBIsMulticastExpected>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d007      	beq.n	800e4a0 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e490:	2000      	movs	r0, #0
 800e492:	f003 ff3a 	bl	801230a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e496:	2000      	movs	r0, #0
 800e498:	f003 ff5a 	bl	8012350 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e49c:	2301      	movs	r3, #1
 800e49e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e4a0:	7bfb      	ldrb	r3, [r7, #15]
 800e4a2:	f083 0301 	eor.w	r3, r3, #1
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d040      	beq.n	800e52e <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e4ac:	4b25      	ldr	r3, [pc, #148]	; (800e544 <HandleRadioRxErrorTimeout+0x120>)
 800e4ae:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d122      	bne.n	800e4fc <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e4b6:	4b23      	ldr	r3, [pc, #140]	; (800e544 <HandleRadioRxErrorTimeout+0x120>)
 800e4b8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d003      	beq.n	800e4c8 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e4c0:	4a20      	ldr	r2, [pc, #128]	; (800e544 <HandleRadioRxErrorTimeout+0x120>)
 800e4c2:	79fb      	ldrb	r3, [r7, #7]
 800e4c4:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e4c8:	79fb      	ldrb	r3, [r7, #7]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f004 fbf4 	bl	8012cb8 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e4d0:	4b1a      	ldr	r3, [pc, #104]	; (800e53c <HandleRadioRxErrorTimeout+0x118>)
 800e4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f00c fc31 	bl	801ad3c <UTIL_TIMER_GetElapsedTime>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	4b19      	ldr	r3, [pc, #100]	; (800e544 <HandleRadioRxErrorTimeout+0x120>)
 800e4de:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d323      	bcc.n	800e52e <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e4e6:	4818      	ldr	r0, [pc, #96]	; (800e548 <HandleRadioRxErrorTimeout+0x124>)
 800e4e8:	f00c fafc 	bl	801aae4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e4ec:	4a15      	ldr	r2, [pc, #84]	; (800e544 <HandleRadioRxErrorTimeout+0x120>)
 800e4ee:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e4f2:	f043 0320 	orr.w	r3, r3, #32
 800e4f6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800e4fa:	e018      	b.n	800e52e <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e4fc:	4b11      	ldr	r3, [pc, #68]	; (800e544 <HandleRadioRxErrorTimeout+0x120>)
 800e4fe:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e506:	4a0f      	ldr	r2, [pc, #60]	; (800e544 <HandleRadioRxErrorTimeout+0x120>)
 800e508:	79bb      	ldrb	r3, [r7, #6]
 800e50a:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e50e:	79bb      	ldrb	r3, [r7, #6]
 800e510:	4618      	mov	r0, r3
 800e512:	f004 fbd1 	bl	8012cb8 <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e516:	4b09      	ldr	r3, [pc, #36]	; (800e53c <HandleRadioRxErrorTimeout+0x118>)
 800e518:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e51c:	2b02      	cmp	r3, #2
 800e51e:	d006      	beq.n	800e52e <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e520:	4a08      	ldr	r2, [pc, #32]	; (800e544 <HandleRadioRxErrorTimeout+0x120>)
 800e522:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e526:	f043 0320 	orr.w	r3, r3, #32
 800e52a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e52e:	f7ff fa25 	bl	800d97c <UpdateRxSlotIdleState>
}
 800e532:	bf00      	nop
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	20000b50 	.word	0x20000b50
 800e540:	0801c3ac 	.word	0x0801c3ac
 800e544:	20000644 	.word	0x20000644
 800e548:	200009dc 	.word	0x200009dc

0800e54c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e550:	2106      	movs	r1, #6
 800e552:	2005      	movs	r0, #5
 800e554:	f7ff ff66 	bl	800e424 <HandleRadioRxErrorTimeout>
}
 800e558:	bf00      	nop
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e560:	2104      	movs	r1, #4
 800e562:	2003      	movs	r0, #3
 800e564:	f7ff ff5e 	bl	800e424 <HandleRadioRxErrorTimeout>
}
 800e568:	bf00      	nop
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e572:	f3ef 8310 	mrs	r3, PRIMASK
 800e576:	607b      	str	r3, [r7, #4]
  return(result);
 800e578:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e57a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e57c:	b672      	cpsid	i
}
 800e57e:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e580:	4b1d      	ldr	r3, [pc, #116]	; (800e5f8 <LoRaMacHandleIrqEvents+0x8c>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e586:	4b1c      	ldr	r3, [pc, #112]	; (800e5f8 <LoRaMacHandleIrqEvents+0x8c>)
 800e588:	2200      	movs	r2, #0
 800e58a:	601a      	str	r2, [r3, #0]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	f383 8810 	msr	PRIMASK, r3
}
 800e596:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d027      	beq.n	800e5ee <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e59e:	783b      	ldrb	r3, [r7, #0]
 800e5a0:	f003 0310 	and.w	r3, r3, #16
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d001      	beq.n	800e5ae <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e5aa:	f7ff f9ff 	bl	800d9ac <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e5ae:	783b      	ldrb	r3, [r7, #0]
 800e5b0:	f003 0308 	and.w	r3, r3, #8
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e5ba:	f7ff fab7 	bl	800db2c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e5be:	783b      	ldrb	r3, [r7, #0]
 800e5c0:	f003 0304 	and.w	r3, r3, #4
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e5ca:	f7ff feff 	bl	800e3cc <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e5ce:	783b      	ldrb	r3, [r7, #0]
 800e5d0:	f003 0302 	and.w	r3, r3, #2
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d001      	beq.n	800e5de <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e5da:	f7ff ffb7 	bl	800e54c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e5de:	783b      	ldrb	r3, [r7, #0]
 800e5e0:	f003 0301 	and.w	r3, r3, #1
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d001      	beq.n	800e5ee <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e5ea:	f7ff ffb7 	bl	800e55c <ProcessRadioRxTimeout>
        }
    }
}
 800e5ee:	bf00      	nop
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	200019a0 	.word	0x200019a0

0800e5fc <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e600:	4b08      	ldr	r3, [pc, #32]	; (800e624 <LoRaMacIsBusy+0x28>)
 800e602:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e606:	2b00      	cmp	r3, #0
 800e608:	d106      	bne.n	800e618 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e60a:	4b06      	ldr	r3, [pc, #24]	; (800e624 <LoRaMacIsBusy+0x28>)
 800e60c:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e610:	2b01      	cmp	r3, #1
 800e612:	d101      	bne.n	800e618 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e614:	2300      	movs	r3, #0
 800e616:	e000      	b.n	800e61a <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e618:	2301      	movs	r3, #1
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bc80      	pop	{r7}
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	20000644 	.word	0x20000644

0800e628 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	4603      	mov	r3, r0
 800e630:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e632:	4a04      	ldr	r2, [pc, #16]	; (800e644 <LoRaMacEnableRequests+0x1c>)
 800e634:	79fb      	ldrb	r3, [r7, #7]
 800e636:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 800e63a:	bf00      	nop
 800e63c:	370c      	adds	r7, #12
 800e63e:	46bd      	mov	sp, r7
 800e640:	bc80      	pop	{r7}
 800e642:	4770      	bx	lr
 800e644:	20000644 	.word	0x20000644

0800e648 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e64e:	4b2c      	ldr	r3, [pc, #176]	; (800e700 <LoRaMacHandleRequestEvents+0xb8>)
 800e650:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e654:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e656:	4b2a      	ldr	r3, [pc, #168]	; (800e700 <LoRaMacHandleRequestEvents+0xb8>)
 800e658:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d14a      	bne.n	800e6f6 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e660:	4b27      	ldr	r3, [pc, #156]	; (800e700 <LoRaMacHandleRequestEvents+0xb8>)
 800e662:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d006      	beq.n	800e67e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e670:	4a23      	ldr	r2, [pc, #140]	; (800e700 <LoRaMacHandleRequestEvents+0xb8>)
 800e672:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e676:	f36f 0300 	bfc	r3, #0, #1
 800e67a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e67e:	4b20      	ldr	r3, [pc, #128]	; (800e700 <LoRaMacHandleRequestEvents+0xb8>)
 800e680:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e684:	f003 0304 	and.w	r3, r3, #4
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d006      	beq.n	800e69c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e68e:	4a1c      	ldr	r2, [pc, #112]	; (800e700 <LoRaMacHandleRequestEvents+0xb8>)
 800e690:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e694:	f36f 0382 	bfc	r3, #2, #1
 800e698:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e69c:	2001      	movs	r0, #1
 800e69e:	f7ff ffc3 	bl	800e628 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e6a2:	793b      	ldrb	r3, [r7, #4]
 800e6a4:	f003 0301 	and.w	r3, r3, #1
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d005      	beq.n	800e6ba <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e6ae:	4b14      	ldr	r3, [pc, #80]	; (800e700 <LoRaMacHandleRequestEvents+0xb8>)
 800e6b0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4813      	ldr	r0, [pc, #76]	; (800e704 <LoRaMacHandleRequestEvents+0xbc>)
 800e6b8:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e6ba:	793b      	ldrb	r3, [r7, #4]
 800e6bc:	f003 0304 	and.w	r3, r3, #4
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d00e      	beq.n	800e6e4 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e6c6:	4810      	ldr	r0, [pc, #64]	; (800e708 <LoRaMacHandleRequestEvents+0xc0>)
 800e6c8:	f004 fb44 	bl	8012d54 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e6cc:	f004 fb8e 	bl	8012dec <LoRaMacConfirmQueueGetCnt>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d006      	beq.n	800e6e4 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e6d6:	4a0a      	ldr	r2, [pc, #40]	; (800e700 <LoRaMacHandleRequestEvents+0xb8>)
 800e6d8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e6dc:	f043 0304 	orr.w	r3, r3, #4
 800e6e0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e6e4:	f003 fe75 	bl	80123d2 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e6e8:	4a05      	ldr	r2, [pc, #20]	; (800e700 <LoRaMacHandleRequestEvents+0xb8>)
 800e6ea:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e6ee:	f36f 1345 	bfc	r3, #5, #1
 800e6f2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 800e6f6:	bf00      	nop
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	20000644 	.word	0x20000644
 800e704:	20000a7c 	.word	0x20000a7c
 800e708:	20000a90 	.word	0x20000a90

0800e70c <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e712:	4b07      	ldr	r3, [pc, #28]	; (800e730 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800e714:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d105      	bne.n	800e728 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e71c:	2300      	movs	r3, #0
 800e71e:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e720:	1dfb      	adds	r3, r7, #7
 800e722:	4618      	mov	r0, r3
 800e724:	f004 f8fc 	bl	8012920 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800e728:	bf00      	nop
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	20000644 	.word	0x20000644

0800e734 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e738:	4b16      	ldr	r3, [pc, #88]	; (800e794 <LoRaMacHandleIndicationEvents+0x60>)
 800e73a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e73e:	f003 0308 	and.w	r3, r3, #8
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00d      	beq.n	800e764 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e748:	4a12      	ldr	r2, [pc, #72]	; (800e794 <LoRaMacHandleIndicationEvents+0x60>)
 800e74a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e74e:	f36f 03c3 	bfc	r3, #3, #1
 800e752:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e756:	4b0f      	ldr	r3, [pc, #60]	; (800e794 <LoRaMacHandleIndicationEvents+0x60>)
 800e758:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e75c:	68db      	ldr	r3, [r3, #12]
 800e75e:	490e      	ldr	r1, [pc, #56]	; (800e798 <LoRaMacHandleIndicationEvents+0x64>)
 800e760:	480e      	ldr	r0, [pc, #56]	; (800e79c <LoRaMacHandleIndicationEvents+0x68>)
 800e762:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e764:	4b0b      	ldr	r3, [pc, #44]	; (800e794 <LoRaMacHandleIndicationEvents+0x60>)
 800e766:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e76a:	f003 0302 	and.w	r3, r3, #2
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	2b00      	cmp	r3, #0
 800e772:	d00d      	beq.n	800e790 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e774:	4a07      	ldr	r2, [pc, #28]	; (800e794 <LoRaMacHandleIndicationEvents+0x60>)
 800e776:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e77a:	f36f 0341 	bfc	r3, #1, #1
 800e77e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e782:	4b04      	ldr	r3, [pc, #16]	; (800e794 <LoRaMacHandleIndicationEvents+0x60>)
 800e784:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	4903      	ldr	r1, [pc, #12]	; (800e798 <LoRaMacHandleIndicationEvents+0x64>)
 800e78c:	4804      	ldr	r0, [pc, #16]	; (800e7a0 <LoRaMacHandleIndicationEvents+0x6c>)
 800e78e:	4798      	blx	r3
    }
}
 800e790:	bf00      	nop
 800e792:	bd80      	pop	{r7, pc}
 800e794:	20000644 	.word	0x20000644
 800e798:	20000ac4 	.word	0x20000ac4
 800e79c:	20000aa4 	.word	0x20000aa4
 800e7a0:	20000a60 	.word	0x20000a60

0800e7a4 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e7aa:	4b32      	ldr	r3, [pc, #200]	; (800e874 <LoRaMacHandleMcpsRequest+0xd0>)
 800e7ac:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e7b0:	f003 0301 	and.w	r3, r3, #1
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d058      	beq.n	800e86c <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e7c2:	4b2c      	ldr	r3, [pc, #176]	; (800e874 <LoRaMacHandleMcpsRequest+0xd0>)
 800e7c4:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d004      	beq.n	800e7d6 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e7cc:	4b29      	ldr	r3, [pc, #164]	; (800e874 <LoRaMacHandleMcpsRequest+0xd0>)
 800e7ce:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e7d2:	2b03      	cmp	r3, #3
 800e7d4:	d104      	bne.n	800e7e0 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e7d6:	f002 f87b 	bl	80108d0 <CheckRetransUnconfirmedUplink>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	71fb      	strb	r3, [r7, #7]
 800e7de:	e020      	b.n	800e822 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e7e0:	4b24      	ldr	r3, [pc, #144]	; (800e874 <LoRaMacHandleMcpsRequest+0xd0>)
 800e7e2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d11b      	bne.n	800e822 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800e7ea:	4b22      	ldr	r3, [pc, #136]	; (800e874 <LoRaMacHandleMcpsRequest+0xd0>)
 800e7ec:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d014      	beq.n	800e81e <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e7f4:	f002 f898 	bl	8010928 <CheckRetransConfirmedUplink>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e7fc:	4b1e      	ldr	r3, [pc, #120]	; (800e878 <LoRaMacHandleMcpsRequest+0xd4>)
 800e7fe:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800e802:	2b00      	cmp	r3, #0
 800e804:	d10d      	bne.n	800e822 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e806:	79fb      	ldrb	r3, [r7, #7]
 800e808:	f083 0301 	eor.w	r3, r3, #1
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d002      	beq.n	800e818 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e812:	f002 f905 	bl	8010a20 <AckTimeoutRetriesProcess>
 800e816:	e004      	b.n	800e822 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e818:	f002 f940 	bl	8010a9c <AckTimeoutRetriesFinalize>
 800e81c:	e001      	b.n	800e822 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e81e:	2301      	movs	r3, #1
 800e820:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800e822:	79fb      	ldrb	r3, [r7, #7]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00d      	beq.n	800e844 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e828:	4814      	ldr	r0, [pc, #80]	; (800e87c <LoRaMacHandleMcpsRequest+0xd8>)
 800e82a:	f00c f95b 	bl	801aae4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e82e:	4b11      	ldr	r3, [pc, #68]	; (800e874 <LoRaMacHandleMcpsRequest+0xd0>)
 800e830:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e834:	f023 0320 	bic.w	r3, r3, #32
 800e838:	4a0e      	ldr	r2, [pc, #56]	; (800e874 <LoRaMacHandleMcpsRequest+0xd0>)
 800e83a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e83e:	f002 f895 	bl	801096c <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e842:	e013      	b.n	800e86c <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e844:	79bb      	ldrb	r3, [r7, #6]
 800e846:	f083 0301 	eor.w	r3, r3, #1
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00d      	beq.n	800e86c <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e850:	4a08      	ldr	r2, [pc, #32]	; (800e874 <LoRaMacHandleMcpsRequest+0xd0>)
 800e852:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e856:	f36f 1345 	bfc	r3, #5, #1
 800e85a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 800e85e:	4b05      	ldr	r3, [pc, #20]	; (800e874 <LoRaMacHandleMcpsRequest+0xd0>)
 800e860:	2200      	movs	r2, #0
 800e862:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e866:	2000      	movs	r0, #0
 800e868:	f000 f994 	bl	800eb94 <OnTxDelayedTimerEvent>
}
 800e86c:	bf00      	nop
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	20000644 	.word	0x20000644
 800e878:	20000b50 	.word	0x20000b50
 800e87c:	200009ac 	.word	0x200009ac

0800e880 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e884:	4b1b      	ldr	r3, [pc, #108]	; (800e8f4 <LoRaMacHandleMlmeRequest+0x74>)
 800e886:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e88a:	f003 0304 	and.w	r3, r3, #4
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	2b00      	cmp	r3, #0
 800e892:	d02c      	beq.n	800e8ee <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e894:	2001      	movs	r0, #1
 800e896:	f004 fa43 	bl	8012d20 <LoRaMacConfirmQueueIsCmdActive>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d012      	beq.n	800e8c6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e8a0:	2001      	movs	r0, #1
 800e8a2:	f004 f9df 	bl	8012c64 <LoRaMacConfirmQueueGetStatus>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d103      	bne.n	800e8b4 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e8ac:	4b11      	ldr	r3, [pc, #68]	; (800e8f4 <LoRaMacHandleMlmeRequest+0x74>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e8b4:	4b0f      	ldr	r3, [pc, #60]	; (800e8f4 <LoRaMacHandleMlmeRequest+0x74>)
 800e8b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e8ba:	f023 0302 	bic.w	r3, r3, #2
 800e8be:	4a0d      	ldr	r2, [pc, #52]	; (800e8f4 <LoRaMacHandleMlmeRequest+0x74>)
 800e8c0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800e8c4:	e013      	b.n	800e8ee <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e8c6:	2005      	movs	r0, #5
 800e8c8:	f004 fa2a 	bl	8012d20 <LoRaMacConfirmQueueIsCmdActive>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d105      	bne.n	800e8de <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e8d2:	2006      	movs	r0, #6
 800e8d4:	f004 fa24 	bl	8012d20 <LoRaMacConfirmQueueIsCmdActive>
 800e8d8:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d007      	beq.n	800e8ee <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e8de:	4b05      	ldr	r3, [pc, #20]	; (800e8f4 <LoRaMacHandleMlmeRequest+0x74>)
 800e8e0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e8e4:	f023 0302 	bic.w	r3, r3, #2
 800e8e8:	4a02      	ldr	r2, [pc, #8]	; (800e8f4 <LoRaMacHandleMlmeRequest+0x74>)
 800e8ea:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e8ee:	bf00      	nop
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	20000644 	.word	0x20000644

0800e8f8 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e8fc:	200c      	movs	r0, #12
 800e8fe:	f004 fa0f 	bl	8012d20 <LoRaMacConfirmQueueIsCmdActive>
 800e902:	4603      	mov	r3, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d019      	beq.n	800e93c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e908:	4b0e      	ldr	r3, [pc, #56]	; (800e944 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e90a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e90e:	f003 0301 	and.w	r3, r3, #1
 800e912:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e914:	2b00      	cmp	r3, #0
 800e916:	d111      	bne.n	800e93c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e918:	4b0a      	ldr	r3, [pc, #40]	; (800e944 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e91a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e91e:	f003 0304 	and.w	r3, r3, #4
 800e922:	b2db      	uxtb	r3, r3
 800e924:	2b00      	cmp	r3, #0
 800e926:	d009      	beq.n	800e93c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e928:	4b06      	ldr	r3, [pc, #24]	; (800e944 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e92a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e92e:	f023 0302 	bic.w	r3, r3, #2
 800e932:	4a04      	ldr	r2, [pc, #16]	; (800e944 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e934:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e938:	2301      	movs	r3, #1
 800e93a:	e000      	b.n	800e93e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	20000644 	.word	0x20000644

0800e948 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800e948:	b480      	push	{r7}
 800e94a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e94c:	4b0d      	ldr	r3, [pc, #52]	; (800e984 <LoRaMacCheckForRxAbort+0x3c>)
 800e94e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00f      	beq.n	800e97a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e95a:	4b0a      	ldr	r3, [pc, #40]	; (800e984 <LoRaMacCheckForRxAbort+0x3c>)
 800e95c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e964:	4a07      	ldr	r2, [pc, #28]	; (800e984 <LoRaMacCheckForRxAbort+0x3c>)
 800e966:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e96a:	4b06      	ldr	r3, [pc, #24]	; (800e984 <LoRaMacCheckForRxAbort+0x3c>)
 800e96c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e970:	f023 0302 	bic.w	r3, r3, #2
 800e974:	4a03      	ldr	r2, [pc, #12]	; (800e984 <LoRaMacCheckForRxAbort+0x3c>)
 800e976:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e97a:	bf00      	nop
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bc80      	pop	{r7}
 800e980:	4770      	bx	lr
 800e982:	bf00      	nop
 800e984:	20000644 	.word	0x20000644

0800e988 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b084      	sub	sp, #16
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e990:	2300      	movs	r3, #0
 800e992:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e994:	2300      	movs	r3, #0
 800e996:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e998:	4b50      	ldr	r3, [pc, #320]	; (800eadc <LoRaMacHandleNvm+0x154>)
 800e99a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f040 8098 	bne.w	800ead4 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2124      	movs	r1, #36	; 0x24
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f007 ffa5 	bl	80168f8 <Crc32>
 800e9ae:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d006      	beq.n	800e9c8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e9c0:	89fb      	ldrh	r3, [r7, #14]
 800e9c2:	f043 0301 	orr.w	r3, r3, #1
 800e9c6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	3328      	adds	r3, #40	; 0x28
 800e9cc:	2114      	movs	r1, #20
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f007 ff92 	bl	80168f8 <Crc32>
 800e9d4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9da:	68ba      	ldr	r2, [r7, #8]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d006      	beq.n	800e9ee <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e9e6:	89fb      	ldrh	r3, [r7, #14]
 800e9e8:	f043 0302 	orr.w	r3, r3, #2
 800e9ec:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	3340      	adds	r3, #64	; 0x40
 800e9f2:	21dc      	movs	r1, #220	; 0xdc
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f007 ff7f 	bl	80168f8 <Crc32>
 800e9fa:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ea02:	68ba      	ldr	r2, [r7, #8]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d007      	beq.n	800ea18 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ea10:	89fb      	ldrh	r3, [r7, #14]
 800ea12:	f043 0304 	orr.w	r3, r3, #4
 800ea16:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ea1e:	21bc      	movs	r1, #188	; 0xbc
 800ea20:	4618      	mov	r0, r3
 800ea22:	f007 ff69 	bl	80168f8 <Crc32>
 800ea26:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d007      	beq.n	800ea44 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ea3c:	89fb      	ldrh	r3, [r7, #14]
 800ea3e:	f043 0308 	orr.w	r3, r3, #8
 800ea42:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800ea4a:	2190      	movs	r1, #144	; 0x90
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f007 ff53 	bl	80168f8 <Crc32>
 800ea52:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ea5a:	68ba      	ldr	r2, [r7, #8]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d007      	beq.n	800ea70 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	68ba      	ldr	r2, [r7, #8]
 800ea64:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ea68:	89fb      	ldrh	r3, [r7, #14]
 800ea6a:	f043 0310 	orr.w	r3, r3, #16
 800ea6e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800ea76:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f007 ff3c 	bl	80168f8 <Crc32>
 800ea80:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 800ea88:	68ba      	ldr	r2, [r7, #8]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d007      	beq.n	800ea9e <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800ea96:	89fb      	ldrh	r3, [r7, #14]
 800ea98:	f043 0320 	orr.w	r3, r3, #32
 800ea9c:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800eaa4:	2114      	movs	r1, #20
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f007 ff26 	bl	80168f8 <Crc32>
 800eaac:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 800eab4:	68ba      	ldr	r2, [r7, #8]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d007      	beq.n	800eaca <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800eac2:	89fb      	ldrh	r3, [r7, #14]
 800eac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eac8:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800eaca:	89fb      	ldrh	r3, [r7, #14]
 800eacc:	4618      	mov	r0, r3
 800eace:	f001 ff89 	bl	80109e4 <CallNvmDataChangeCallback>
 800ead2:	e000      	b.n	800ead6 <LoRaMacHandleNvm+0x14e>
        return;
 800ead4:	bf00      	nop
}
 800ead6:	3710      	adds	r7, #16
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	20000644 	.word	0x20000644

0800eae0 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800eae6:	2300      	movs	r3, #0
 800eae8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800eaea:	f7ff fd3f 	bl	800e56c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800eaee:	f003 fcd4 	bl	801249a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800eaf2:	4b26      	ldr	r3, [pc, #152]	; (800eb8c <LoRaMacProcess+0xac>)
 800eaf4:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800eaf8:	f003 0320 	and.w	r3, r3, #32
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d025      	beq.n	800eb4e <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800eb02:	2000      	movs	r0, #0
 800eb04:	f7ff fd90 	bl	800e628 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800eb08:	f7ff ff1e 	bl	800e948 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800eb0c:	f001 fffa 	bl	8010b04 <IsRequestPending>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d006      	beq.n	800eb24 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800eb16:	f7ff feef 	bl	800e8f8 <LoRaMacCheckForBeaconAcquisition>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	79fb      	ldrb	r3, [r7, #7]
 800eb20:	4313      	orrs	r3, r2
 800eb22:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d103      	bne.n	800eb32 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800eb2a:	f7ff fea9 	bl	800e880 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800eb2e:	f7ff fe39 	bl	800e7a4 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800eb32:	f7ff fd89 	bl	800e648 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800eb36:	f7ff fde9 	bl	800e70c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800eb3a:	2001      	movs	r0, #1
 800eb3c:	f7ff fd74 	bl	800e628 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800eb40:	4a12      	ldr	r2, [pc, #72]	; (800eb8c <LoRaMacProcess+0xac>)
 800eb42:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800eb46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb4a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 800eb4e:	f7ff fdf1 	bl	800e734 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800eb52:	4b0e      	ldr	r3, [pc, #56]	; (800eb8c <LoRaMacProcess+0xac>)
 800eb54:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d101      	bne.n	800eb60 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800eb5c:	f001 fb7e 	bl	801025c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800eb60:	4b0a      	ldr	r3, [pc, #40]	; (800eb8c <LoRaMacProcess+0xac>)
 800eb62:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800eb66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d009      	beq.n	800eb84 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800eb70:	4a06      	ldr	r2, [pc, #24]	; (800eb8c <LoRaMacProcess+0xac>)
 800eb72:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800eb76:	f36f 1386 	bfc	r3, #6, #1
 800eb7a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 800eb7e:	4804      	ldr	r0, [pc, #16]	; (800eb90 <LoRaMacProcess+0xb0>)
 800eb80:	f7ff ff02 	bl	800e988 <LoRaMacHandleNvm>
    }
}
 800eb84:	bf00      	nop
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	20000644 	.word	0x20000644
 800eb90:	20000b50 	.word	0x20000b50

0800eb94 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800eb9c:	4817      	ldr	r0, [pc, #92]	; (800ebfc <OnTxDelayedTimerEvent+0x68>)
 800eb9e:	f00b ffa1 	bl	801aae4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800eba2:	4b17      	ldr	r3, [pc, #92]	; (800ec00 <OnTxDelayedTimerEvent+0x6c>)
 800eba4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eba8:	f023 0320 	bic.w	r3, r3, #32
 800ebac:	4a14      	ldr	r2, [pc, #80]	; (800ec00 <OnTxDelayedTimerEvent+0x6c>)
 800ebae:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ebb2:	2001      	movs	r0, #1
 800ebb4:	f001 f8e6 	bl	800fd84 <ScheduleTx>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d018      	beq.n	800ebf0 <OnTxDelayedTimerEvent+0x5c>
 800ebbe:	2b0b      	cmp	r3, #11
 800ebc0:	d016      	beq.n	800ebf0 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ebc2:	4b10      	ldr	r3, [pc, #64]	; (800ec04 <OnTxDelayedTimerEvent+0x70>)
 800ebc4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	4b0d      	ldr	r3, [pc, #52]	; (800ec00 <OnTxDelayedTimerEvent+0x6c>)
 800ebcc:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ebd0:	4b0b      	ldr	r3, [pc, #44]	; (800ec00 <OnTxDelayedTimerEvent+0x6c>)
 800ebd2:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800ebd6:	4b0a      	ldr	r3, [pc, #40]	; (800ec00 <OnTxDelayedTimerEvent+0x6c>)
 800ebd8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ebdc:	4b08      	ldr	r3, [pc, #32]	; (800ec00 <OnTxDelayedTimerEvent+0x6c>)
 800ebde:	2209      	movs	r2, #9
 800ebe0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ebe4:	2009      	movs	r0, #9
 800ebe6:	f004 f867 	bl	8012cb8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ebea:	f001 febf 	bl	801096c <StopRetransmission>
            break;
 800ebee:	e000      	b.n	800ebf2 <OnTxDelayedTimerEvent+0x5e>
            break;
 800ebf0:	bf00      	nop
        }
    }
}
 800ebf2:	bf00      	nop
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	200009ac 	.word	0x200009ac
 800ec00:	20000644 	.word	0x20000644
 800ec04:	20000b50 	.word	0x20000b50

0800ec08 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ec10:	4b14      	ldr	r3, [pc, #80]	; (800ec64 <OnRxWindow1TimerEvent+0x5c>)
 800ec12:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ec16:	4b13      	ldr	r3, [pc, #76]	; (800ec64 <OnRxWindow1TimerEvent+0x5c>)
 800ec18:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ec1c:	4b12      	ldr	r3, [pc, #72]	; (800ec68 <OnRxWindow1TimerEvent+0x60>)
 800ec1e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ec22:	b25a      	sxtb	r2, r3
 800ec24:	4b0f      	ldr	r3, [pc, #60]	; (800ec64 <OnRxWindow1TimerEvent+0x5c>)
 800ec26:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec2a:	4b0f      	ldr	r3, [pc, #60]	; (800ec68 <OnRxWindow1TimerEvent+0x60>)
 800ec2c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ec30:	4b0c      	ldr	r3, [pc, #48]	; (800ec64 <OnRxWindow1TimerEvent+0x5c>)
 800ec32:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ec36:	4b0c      	ldr	r3, [pc, #48]	; (800ec68 <OnRxWindow1TimerEvent+0x60>)
 800ec38:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ec3c:	4b09      	ldr	r3, [pc, #36]	; (800ec64 <OnRxWindow1TimerEvent+0x5c>)
 800ec3e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ec42:	4b08      	ldr	r3, [pc, #32]	; (800ec64 <OnRxWindow1TimerEvent+0x5c>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ec4a:	4b06      	ldr	r3, [pc, #24]	; (800ec64 <OnRxWindow1TimerEvent+0x5c>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ec52:	4906      	ldr	r1, [pc, #24]	; (800ec6c <OnRxWindow1TimerEvent+0x64>)
 800ec54:	4806      	ldr	r0, [pc, #24]	; (800ec70 <OnRxWindow1TimerEvent+0x68>)
 800ec56:	f001 facd 	bl	80101f4 <RxWindowSetup>
}
 800ec5a:	bf00      	nop
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	20000644 	.word	0x20000644
 800ec68:	20000b50 	.word	0x20000b50
 800ec6c:	200009fc 	.word	0x200009fc
 800ec70:	200009c4 	.word	0x200009c4

0800ec74 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ec7c:	4b16      	ldr	r3, [pc, #88]	; (800ecd8 <OnRxWindow2TimerEvent+0x64>)
 800ec7e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d023      	beq.n	800ecce <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ec86:	4b14      	ldr	r3, [pc, #80]	; (800ecd8 <OnRxWindow2TimerEvent+0x64>)
 800ec88:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ec8c:	4b12      	ldr	r3, [pc, #72]	; (800ecd8 <OnRxWindow2TimerEvent+0x64>)
 800ec8e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ec92:	4b12      	ldr	r3, [pc, #72]	; (800ecdc <OnRxWindow2TimerEvent+0x68>)
 800ec94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec96:	4a10      	ldr	r2, [pc, #64]	; (800ecd8 <OnRxWindow2TimerEvent+0x64>)
 800ec98:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec9c:	4b0f      	ldr	r3, [pc, #60]	; (800ecdc <OnRxWindow2TimerEvent+0x68>)
 800ec9e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eca2:	4b0d      	ldr	r3, [pc, #52]	; (800ecd8 <OnRxWindow2TimerEvent+0x64>)
 800eca4:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eca8:	4b0c      	ldr	r3, [pc, #48]	; (800ecdc <OnRxWindow2TimerEvent+0x68>)
 800ecaa:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ecae:	4b0a      	ldr	r3, [pc, #40]	; (800ecd8 <OnRxWindow2TimerEvent+0x64>)
 800ecb0:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ecb4:	4b08      	ldr	r3, [pc, #32]	; (800ecd8 <OnRxWindow2TimerEvent+0x64>)
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ecbc:	4b06      	ldr	r3, [pc, #24]	; (800ecd8 <OnRxWindow2TimerEvent+0x64>)
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ecc4:	4906      	ldr	r1, [pc, #24]	; (800ece0 <OnRxWindow2TimerEvent+0x6c>)
 800ecc6:	4807      	ldr	r0, [pc, #28]	; (800ece4 <OnRxWindow2TimerEvent+0x70>)
 800ecc8:	f001 fa94 	bl	80101f4 <RxWindowSetup>
 800eccc:	e000      	b.n	800ecd0 <OnRxWindow2TimerEvent+0x5c>
        return;
 800ecce:	bf00      	nop
}
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	20000644 	.word	0x20000644
 800ecdc:	20000b50 	.word	0x20000b50
 800ece0:	20000a10 	.word	0x20000a10
 800ece4:	200009dc 	.word	0x200009dc

0800ece8 <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ecf0:	4815      	ldr	r0, [pc, #84]	; (800ed48 <OnAckTimeoutTimerEvent+0x60>)
 800ecf2:	f00b fef7 	bl	801aae4 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ecf6:	4b15      	ldr	r3, [pc, #84]	; (800ed4c <OnAckTimeoutTimerEvent+0x64>)
 800ecf8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d003      	beq.n	800ed08 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800ed00:	4b12      	ldr	r3, [pc, #72]	; (800ed4c <OnAckTimeoutTimerEvent+0x64>)
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ed08:	4b11      	ldr	r3, [pc, #68]	; (800ed50 <OnAckTimeoutTimerEvent+0x68>)
 800ed0a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ed0e:	2b02      	cmp	r3, #2
 800ed10:	d106      	bne.n	800ed20 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ed12:	4a0e      	ldr	r2, [pc, #56]	; (800ed4c <OnAckTimeoutTimerEvent+0x64>)
 800ed14:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ed18:	f043 0320 	orr.w	r3, r3, #32
 800ed1c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ed20:	4b0a      	ldr	r3, [pc, #40]	; (800ed4c <OnAckTimeoutTimerEvent+0x64>)
 800ed22:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00a      	beq.n	800ed40 <OnAckTimeoutTimerEvent+0x58>
 800ed2a:	4b08      	ldr	r3, [pc, #32]	; (800ed4c <OnAckTimeoutTimerEvent+0x64>)
 800ed2c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed30:	691b      	ldr	r3, [r3, #16]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d004      	beq.n	800ed40 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ed36:	4b05      	ldr	r3, [pc, #20]	; (800ed4c <OnAckTimeoutTimerEvent+0x64>)
 800ed38:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed3c:	691b      	ldr	r3, [r3, #16]
 800ed3e:	4798      	blx	r3
    }
}
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	20000a3c 	.word	0x20000a3c
 800ed4c:	20000644 	.word	0x20000644
 800ed50:	20000b50 	.word	0x20000b50

0800ed54 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60ba      	str	r2, [r7, #8]
 800ed5c:	607b      	str	r3, [r7, #4]
 800ed5e:	4603      	mov	r3, r0
 800ed60:	73fb      	strb	r3, [r7, #15]
 800ed62:	460b      	mov	r3, r1
 800ed64:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d005      	beq.n	800ed78 <GetFCntDown+0x24>
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d002      	beq.n	800ed78 <GetFCntDown+0x24>
 800ed72:	6a3b      	ldr	r3, [r7, #32]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d101      	bne.n	800ed7c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ed78:	230a      	movs	r3, #10
 800ed7a:	e029      	b.n	800edd0 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ed7c:	7bfb      	ldrb	r3, [r7, #15]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d016      	beq.n	800edb0 <GetFCntDown+0x5c>
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d118      	bne.n	800edb8 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ed86:	79bb      	ldrb	r3, [r7, #6]
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d10d      	bne.n	800eda8 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ed8c:	7bbb      	ldrb	r3, [r7, #14]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d002      	beq.n	800ed98 <GetFCntDown+0x44>
 800ed92:	7bbb      	ldrb	r3, [r7, #14]
 800ed94:	2b03      	cmp	r3, #3
 800ed96:	d103      	bne.n	800eda0 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	2202      	movs	r2, #2
 800ed9c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800ed9e:	e00d      	b.n	800edbc <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	2201      	movs	r2, #1
 800eda4:	701a      	strb	r2, [r3, #0]
            break;
 800eda6:	e009      	b.n	800edbc <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	2203      	movs	r2, #3
 800edac:	701a      	strb	r2, [r3, #0]
            break;
 800edae:	e005      	b.n	800edbc <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	2204      	movs	r2, #4
 800edb4:	701a      	strb	r2, [r3, #0]
            break;
 800edb6:	e001      	b.n	800edbc <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800edb8:	2305      	movs	r3, #5
 800edba:	e009      	b.n	800edd0 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	7818      	ldrb	r0, [r3, #0]
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	89db      	ldrh	r3, [r3, #14]
 800edc4:	461a      	mov	r2, r3
 800edc6:	8b39      	ldrh	r1, [r7, #24]
 800edc8:	6a3b      	ldr	r3, [r7, #32]
 800edca:	f004 fb9f 	bl	801350c <LoRaMacCryptoGetFCntDown>
 800edce:	4603      	mov	r3, r0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800edd8:	b5b0      	push	{r4, r5, r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	4603      	mov	r3, r0
 800ede0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ede2:	2303      	movs	r3, #3
 800ede4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800ede6:	4b61      	ldr	r3, [pc, #388]	; (800ef6c <SwitchClass+0x194>)
 800ede8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800edec:	2b02      	cmp	r3, #2
 800edee:	f000 80a5 	beq.w	800ef3c <SwitchClass+0x164>
 800edf2:	2b02      	cmp	r3, #2
 800edf4:	f300 80b4 	bgt.w	800ef60 <SwitchClass+0x188>
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d003      	beq.n	800ee04 <SwitchClass+0x2c>
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	f000 808f 	beq.w	800ef20 <SwitchClass+0x148>
 800ee02:	e0ad      	b.n	800ef60 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ee04:	79fb      	ldrb	r3, [r7, #7]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d107      	bne.n	800ee1a <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ee0a:	4b58      	ldr	r3, [pc, #352]	; (800ef6c <SwitchClass+0x194>)
 800ee0c:	4a57      	ldr	r2, [pc, #348]	; (800ef6c <SwitchClass+0x194>)
 800ee0e:	336c      	adds	r3, #108	; 0x6c
 800ee10:	3264      	adds	r2, #100	; 0x64
 800ee12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee16:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ee1a:	79fb      	ldrb	r3, [r7, #7]
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d10c      	bne.n	800ee3a <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ee20:	79fb      	ldrb	r3, [r7, #7]
 800ee22:	4618      	mov	r0, r3
 800ee24:	f003 fadb 	bl	80123de <LoRaMacClassBSwitchClass>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ee2c:	7bfb      	ldrb	r3, [r7, #15]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d103      	bne.n	800ee3a <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee32:	4a4e      	ldr	r2, [pc, #312]	; (800ef6c <SwitchClass+0x194>)
 800ee34:	79fb      	ldrb	r3, [r7, #7]
 800ee36:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800ee3a:	79fb      	ldrb	r3, [r7, #7]
 800ee3c:	2b02      	cmp	r3, #2
 800ee3e:	f040 808a 	bne.w	800ef56 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee42:	4a4a      	ldr	r2, [pc, #296]	; (800ef6c <SwitchClass+0x194>)
 800ee44:	79fb      	ldrb	r3, [r7, #7]
 800ee46:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ee4a:	4a49      	ldr	r2, [pc, #292]	; (800ef70 <SwitchClass+0x198>)
 800ee4c:	4b48      	ldr	r3, [pc, #288]	; (800ef70 <SwitchClass+0x198>)
 800ee4e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ee52:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ee56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee5a:	682b      	ldr	r3, [r5, #0]
 800ee5c:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ee5e:	4b44      	ldr	r3, [pc, #272]	; (800ef70 <SwitchClass+0x198>)
 800ee60:	2202      	movs	r2, #2
 800ee62:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee66:	2300      	movs	r3, #0
 800ee68:	73bb      	strb	r3, [r7, #14]
 800ee6a:	e049      	b.n	800ef00 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ee6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee70:	4a3e      	ldr	r2, [pc, #248]	; (800ef6c <SwitchClass+0x194>)
 800ee72:	212c      	movs	r1, #44	; 0x2c
 800ee74:	fb01 f303 	mul.w	r3, r1, r3
 800ee78:	4413      	add	r3, r2
 800ee7a:	33da      	adds	r3, #218	; 0xda
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d038      	beq.n	800eef4 <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ee82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee86:	4a39      	ldr	r2, [pc, #228]	; (800ef6c <SwitchClass+0x194>)
 800ee88:	212c      	movs	r1, #44	; 0x2c
 800ee8a:	fb01 f303 	mul.w	r3, r1, r3
 800ee8e:	4413      	add	r3, r2
 800ee90:	33f0      	adds	r3, #240	; 0xf0
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a35      	ldr	r2, [pc, #212]	; (800ef6c <SwitchClass+0x194>)
 800ee96:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ee98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee9c:	4a33      	ldr	r2, [pc, #204]	; (800ef6c <SwitchClass+0x194>)
 800ee9e:	212c      	movs	r1, #44	; 0x2c
 800eea0:	fb01 f303 	mul.w	r3, r1, r3
 800eea4:	4413      	add	r3, r2
 800eea6:	33f4      	adds	r3, #244	; 0xf4
 800eea8:	f993 3000 	ldrsb.w	r3, [r3]
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	4b2f      	ldr	r3, [pc, #188]	; (800ef6c <SwitchClass+0x194>)
 800eeb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800eeb4:	4b2e      	ldr	r3, [pc, #184]	; (800ef70 <SwitchClass+0x198>)
 800eeb6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800eeba:	4b2d      	ldr	r3, [pc, #180]	; (800ef70 <SwitchClass+0x198>)
 800eebc:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800eec0:	4b2a      	ldr	r3, [pc, #168]	; (800ef6c <SwitchClass+0x194>)
 800eec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec4:	4a2a      	ldr	r2, [pc, #168]	; (800ef70 <SwitchClass+0x198>)
 800eec6:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eeca:	4b28      	ldr	r3, [pc, #160]	; (800ef6c <SwitchClass+0x194>)
 800eecc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eed0:	4b27      	ldr	r3, [pc, #156]	; (800ef70 <SwitchClass+0x198>)
 800eed2:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eed6:	4b25      	ldr	r3, [pc, #148]	; (800ef6c <SwitchClass+0x194>)
 800eed8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800eedc:	4b24      	ldr	r3, [pc, #144]	; (800ef70 <SwitchClass+0x198>)
 800eede:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800eee2:	4b23      	ldr	r3, [pc, #140]	; (800ef70 <SwitchClass+0x198>)
 800eee4:	2203      	movs	r2, #3
 800eee6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800eeea:	4b21      	ldr	r3, [pc, #132]	; (800ef70 <SwitchClass+0x198>)
 800eeec:	2201      	movs	r2, #1
 800eeee:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800eef2:	e009      	b.n	800ef08 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	3301      	adds	r3, #1
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	73bb      	strb	r3, [r7, #14]
 800ef00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	ddb1      	ble.n	800ee6c <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ef08:	4b19      	ldr	r3, [pc, #100]	; (800ef70 <SwitchClass+0x198>)
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ef10:	4b18      	ldr	r3, [pc, #96]	; (800ef74 <SwitchClass+0x19c>)
 800ef12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef14:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ef16:	f001 f9a1 	bl	801025c <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ef1e:	e01a      	b.n	800ef56 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ef20:	79fb      	ldrb	r3, [r7, #7]
 800ef22:	4618      	mov	r0, r3
 800ef24:	f003 fa5b 	bl	80123de <LoRaMacClassBSwitchClass>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ef2c:	7bfb      	ldrb	r3, [r7, #15]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d113      	bne.n	800ef5a <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef32:	4a0e      	ldr	r2, [pc, #56]	; (800ef6c <SwitchClass+0x194>)
 800ef34:	79fb      	ldrb	r3, [r7, #7]
 800ef36:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 800ef3a:	e00e      	b.n	800ef5a <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ef3c:	79fb      	ldrb	r3, [r7, #7]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d10d      	bne.n	800ef5e <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef42:	4a0a      	ldr	r2, [pc, #40]	; (800ef6c <SwitchClass+0x194>)
 800ef44:	79fb      	ldrb	r3, [r7, #7]
 800ef46:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ef4a:	4b0a      	ldr	r3, [pc, #40]	; (800ef74 <SwitchClass+0x19c>)
 800ef4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef4e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ef50:	2300      	movs	r3, #0
 800ef52:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ef54:	e003      	b.n	800ef5e <SwitchClass+0x186>
            break;
 800ef56:	bf00      	nop
 800ef58:	e002      	b.n	800ef60 <SwitchClass+0x188>
            break;
 800ef5a:	bf00      	nop
 800ef5c:	e000      	b.n	800ef60 <SwitchClass+0x188>
            break;
 800ef5e:	bf00      	nop
        }
    }

    return status;
 800ef60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bdb0      	pop	{r4, r5, r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	20000b50 	.word	0x20000b50
 800ef70:	20000644 	.word	0x20000644
 800ef74:	0801c3ac 	.word	0x0801c3ac

0800ef78 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b086      	sub	sp, #24
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	4603      	mov	r3, r0
 800ef80:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ef82:	4b10      	ldr	r3, [pc, #64]	; (800efc4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ef84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ef88:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ef8a:	79fb      	ldrb	r3, [r7, #7]
 800ef8c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ef8e:	230d      	movs	r3, #13
 800ef90:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ef92:	4b0c      	ldr	r3, [pc, #48]	; (800efc4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ef94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ef9c:	230e      	movs	r3, #14
 800ef9e:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800efa0:	4b08      	ldr	r3, [pc, #32]	; (800efc4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800efa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efa6:	f107 0210 	add.w	r2, r7, #16
 800efaa:	4611      	mov	r1, r2
 800efac:	4618      	mov	r0, r3
 800efae:	f005 f93b 	bl	8014228 <RegionGetPhyParam>
 800efb2:	4603      	mov	r3, r0
 800efb4:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	b2db      	uxtb	r3, r3
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3718      	adds	r7, #24
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	20000b50 	.word	0x20000b50

0800efc8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	4603      	mov	r3, r0
 800efd0:	71fb      	strb	r3, [r7, #7]
 800efd2:	460b      	mov	r3, r1
 800efd4:	71bb      	strb	r3, [r7, #6]
 800efd6:	4613      	mov	r3, r2
 800efd8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800efda:	2300      	movs	r3, #0
 800efdc:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800efde:	2300      	movs	r3, #0
 800efe0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800efe2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7ff ffc6 	bl	800ef78 <GetMaxAppPayloadWithoutFOptsLength>
 800efec:	4603      	mov	r3, r0
 800efee:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800eff0:	79fb      	ldrb	r3, [r7, #7]
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	797b      	ldrb	r3, [r7, #5]
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	4413      	add	r3, r2
 800effa:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800effc:	89ba      	ldrh	r2, [r7, #12]
 800effe:	89fb      	ldrh	r3, [r7, #14]
 800f000:	429a      	cmp	r2, r3
 800f002:	d804      	bhi.n	800f00e <ValidatePayloadLength+0x46>
 800f004:	89bb      	ldrh	r3, [r7, #12]
 800f006:	2bff      	cmp	r3, #255	; 0xff
 800f008:	d801      	bhi.n	800f00e <ValidatePayloadLength+0x46>
    {
        return true;
 800f00a:	2301      	movs	r3, #1
 800f00c:	e000      	b.n	800f010 <ValidatePayloadLength+0x48>
    }
    return false;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f018:	b590      	push	{r4, r7, lr}
 800f01a:	b0a5      	sub	sp, #148	; 0x94
 800f01c:	af02      	add	r7, sp, #8
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	4608      	mov	r0, r1
 800f022:	4611      	mov	r1, r2
 800f024:	461a      	mov	r2, r3
 800f026:	4603      	mov	r3, r0
 800f028:	70fb      	strb	r3, [r7, #3]
 800f02a:	460b      	mov	r3, r1
 800f02c:	70bb      	strb	r3, [r7, #2]
 800f02e:	4613      	mov	r3, r2
 800f030:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f032:	2300      	movs	r3, #0
 800f034:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800f038:	2300      	movs	r3, #0
 800f03a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f03e:	2300      	movs	r3, #0
 800f040:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f044:	f000 bc6d 	b.w	800f922 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f048:	78fb      	ldrb	r3, [r7, #3]
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	4413      	add	r3, r2
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	4618      	mov	r0, r3
 800f052:	f003 fc8d 	bl	8012970 <LoRaMacCommandsGetCmdSize>
 800f056:	4603      	mov	r3, r0
 800f058:	461a      	mov	r2, r3
 800f05a:	78fb      	ldrb	r3, [r7, #3]
 800f05c:	441a      	add	r2, r3
 800f05e:	78bb      	ldrb	r3, [r7, #2]
 800f060:	429a      	cmp	r2, r3
 800f062:	f300 8464 	bgt.w	800f92e <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f066:	78fb      	ldrb	r3, [r7, #3]
 800f068:	1c5a      	adds	r2, r3, #1
 800f06a:	70fa      	strb	r2, [r7, #3]
 800f06c:	461a      	mov	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4413      	add	r3, r2
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	3b02      	subs	r3, #2
 800f076:	2b11      	cmp	r3, #17
 800f078:	f200 845b 	bhi.w	800f932 <ProcessMacCommands+0x91a>
 800f07c:	a201      	add	r2, pc, #4	; (adr r2, 800f084 <ProcessMacCommands+0x6c>)
 800f07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f082:	bf00      	nop
 800f084:	0800f0cd 	.word	0x0800f0cd
 800f088:	0800f10f 	.word	0x0800f10f
 800f08c:	0800f22b 	.word	0x0800f22b
 800f090:	0800f269 	.word	0x0800f269
 800f094:	0800f355 	.word	0x0800f355
 800f098:	0800f3b1 	.word	0x0800f3b1
 800f09c:	0800f46d 	.word	0x0800f46d
 800f0a0:	0800f4c3 	.word	0x0800f4c3
 800f0a4:	0800f5a7 	.word	0x0800f5a7
 800f0a8:	0800f933 	.word	0x0800f933
 800f0ac:	0800f933 	.word	0x0800f933
 800f0b0:	0800f64d 	.word	0x0800f64d
 800f0b4:	0800f933 	.word	0x0800f933
 800f0b8:	0800f933 	.word	0x0800f933
 800f0bc:	0800f763 	.word	0x0800f763
 800f0c0:	0800f797 	.word	0x0800f797
 800f0c4:	0800f827 	.word	0x0800f827
 800f0c8:	0800f89d 	.word	0x0800f89d
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f0cc:	2004      	movs	r0, #4
 800f0ce:	f003 fe27 	bl	8012d20 <LoRaMacConfirmQueueIsCmdActive>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	f000 8424 	beq.w	800f922 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f0da:	2104      	movs	r1, #4
 800f0dc:	2000      	movs	r0, #0
 800f0de:	f003 fd93 	bl	8012c08 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f0e2:	78fb      	ldrb	r3, [r7, #3]
 800f0e4:	1c5a      	adds	r2, r3, #1
 800f0e6:	70fa      	strb	r2, [r7, #3]
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	781a      	ldrb	r2, [r3, #0]
 800f0f0:	4bac      	ldr	r3, [pc, #688]	; (800f3a4 <ProcessMacCommands+0x38c>)
 800f0f2:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f0f6:	78fb      	ldrb	r3, [r7, #3]
 800f0f8:	1c5a      	adds	r2, r3, #1
 800f0fa:	70fa      	strb	r2, [r7, #3]
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4413      	add	r3, r2
 800f102:	781a      	ldrb	r2, [r3, #0]
 800f104:	4ba7      	ldr	r3, [pc, #668]	; (800f3a4 <ProcessMacCommands+0x38c>)
 800f106:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800f10a:	f000 bc0a 	b.w	800f922 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f10e:	2300      	movs	r3, #0
 800f110:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f114:	2300      	movs	r3, #0
 800f116:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800f11a:	2300      	movs	r3, #0
 800f11c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f120:	2300      	movs	r3, #0
 800f122:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800f126:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f12a:	f083 0301 	eor.w	r3, r3, #1
 800f12e:	b2db      	uxtb	r3, r3
 800f130:	2b00      	cmp	r3, #0
 800f132:	d078      	beq.n	800f226 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800f134:	2301      	movs	r3, #1
 800f136:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800f13a:	78fb      	ldrb	r3, [r7, #3]
 800f13c:	3b01      	subs	r3, #1
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	4413      	add	r3, r2
 800f142:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f144:	78ba      	ldrb	r2, [r7, #2]
 800f146:	78fb      	ldrb	r3, [r7, #3]
 800f148:	1ad3      	subs	r3, r2, r3
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	3301      	adds	r3, #1
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f154:	4b94      	ldr	r3, [pc, #592]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f156:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800f15a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f15e:	4b92      	ldr	r3, [pc, #584]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f160:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f164:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f168:	4b8f      	ldr	r3, [pc, #572]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f16a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f16e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f172:	4b8d      	ldr	r3, [pc, #564]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f174:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f178:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f17c:	4b8a      	ldr	r3, [pc, #552]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f17e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f182:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f186:	4b88      	ldr	r3, [pc, #544]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f188:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f18c:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f18e:	4b86      	ldr	r3, [pc, #536]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f190:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f194:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800f198:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800f19c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f1a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f1a4:	9301      	str	r3, [sp, #4]
 800f1a6:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800f1aa:	9300      	str	r3, [sp, #0]
 800f1ac:	4623      	mov	r3, r4
 800f1ae:	f005 f8f8 	bl	80143a2 <RegionLinkAdrReq>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800f1b8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f1bc:	f003 0307 	and.w	r3, r3, #7
 800f1c0:	2b07      	cmp	r3, #7
 800f1c2:	d10e      	bne.n	800f1e2 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f1c4:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800f1c8:	4b77      	ldr	r3, [pc, #476]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f1ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f1ce:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800f1d2:	4b75      	ldr	r3, [pc, #468]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f1d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f1d8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800f1dc:	4b72      	ldr	r3, [pc, #456]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f1de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f1e8:	e00b      	b.n	800f202 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f1ea:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	2003      	movs	r0, #3
 800f1f4:	f003 fa6c 	bl	80126d0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f1f8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f202:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f206:	4a69      	ldr	r2, [pc, #420]	; (800f3ac <ProcessMacCommands+0x394>)
 800f208:	fba2 2303 	umull	r2, r3, r2, r3
 800f20c:	089b      	lsrs	r3, r3, #2
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800f214:	429a      	cmp	r2, r3
 800f216:	d3e8      	bcc.n	800f1ea <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800f218:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f21c:	78fb      	ldrb	r3, [r7, #3]
 800f21e:	4413      	add	r3, r2
 800f220:	b2db      	uxtb	r3, r3
 800f222:	3b01      	subs	r3, #1
 800f224:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f226:	bf00      	nop
 800f228:	e37b      	b.n	800f922 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f22a:	78fb      	ldrb	r3, [r7, #3]
 800f22c:	1c5a      	adds	r2, r3, #1
 800f22e:	70fa      	strb	r2, [r7, #3]
 800f230:	461a      	mov	r2, r3
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4413      	add	r3, r2
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	f003 030f 	and.w	r3, r3, #15
 800f23c:	b2da      	uxtb	r2, r3
 800f23e:	4b5a      	ldr	r3, [pc, #360]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f240:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f244:	4b58      	ldr	r3, [pc, #352]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f246:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800f24a:	461a      	mov	r2, r3
 800f24c:	2301      	movs	r3, #1
 800f24e:	4093      	lsls	r3, r2
 800f250:	b29a      	uxth	r2, r3
 800f252:	4b55      	ldr	r3, [pc, #340]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f254:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f258:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f25c:	2200      	movs	r2, #0
 800f25e:	4619      	mov	r1, r3
 800f260:	2004      	movs	r0, #4
 800f262:	f003 fa35 	bl	80126d0 <LoRaMacCommandsAddCmd>
                break;
 800f266:	e35c      	b.n	800f922 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f268:	2307      	movs	r3, #7
 800f26a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f26e:	78fb      	ldrb	r3, [r7, #3]
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	4413      	add	r3, r2
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	091b      	lsrs	r3, r3, #4
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	b25b      	sxtb	r3, r3
 800f27c:	f003 0307 	and.w	r3, r3, #7
 800f280:	b25b      	sxtb	r3, r3
 800f282:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f286:	78fb      	ldrb	r3, [r7, #3]
 800f288:	687a      	ldr	r2, [r7, #4]
 800f28a:	4413      	add	r3, r2
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	b25b      	sxtb	r3, r3
 800f290:	f003 030f 	and.w	r3, r3, #15
 800f294:	b25b      	sxtb	r3, r3
 800f296:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f29a:	78fb      	ldrb	r3, [r7, #3]
 800f29c:	3301      	adds	r3, #1
 800f29e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f2a0:	78fb      	ldrb	r3, [r7, #3]
 800f2a2:	1c5a      	adds	r2, r3, #1
 800f2a4:	70fa      	strb	r2, [r7, #3]
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f2b0:	78fb      	ldrb	r3, [r7, #3]
 800f2b2:	1c5a      	adds	r2, r3, #1
 800f2b4:	70fa      	strb	r2, [r7, #3]
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	021a      	lsls	r2, r3, #8
 800f2c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f2c6:	78fb      	ldrb	r3, [r7, #3]
 800f2c8:	1c5a      	adds	r2, r3, #1
 800f2ca:	70fa      	strb	r2, [r7, #3]
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	041a      	lsls	r2, r3, #16
 800f2d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2de:	2264      	movs	r2, #100	; 0x64
 800f2e0:	fb02 f303 	mul.w	r3, r2, r3
 800f2e4:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f2e6:	4b30      	ldr	r3, [pc, #192]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f2e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2ec:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f2f0:	4611      	mov	r1, r2
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f005 f86f 	bl	80143d6 <RegionRxParamSetupReq>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f2fe:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f302:	f003 0307 	and.w	r3, r3, #7
 800f306:	2b07      	cmp	r3, #7
 800f308:	d117      	bne.n	800f33a <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f30a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f30e:	b2da      	uxtb	r2, r3
 800f310:	4b25      	ldr	r3, [pc, #148]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f312:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f316:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f31a:	b2da      	uxtb	r2, r3
 800f31c:	4b22      	ldr	r3, [pc, #136]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f31e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f324:	4a20      	ldr	r2, [pc, #128]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f326:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f32a:	4a1f      	ldr	r2, [pc, #124]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f32c:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f32e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f332:	b2da      	uxtb	r2, r3
 800f334:	4b1c      	ldr	r3, [pc, #112]	; (800f3a8 <ProcessMacCommands+0x390>)
 800f336:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f33a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f33e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f342:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f346:	2201      	movs	r2, #1
 800f348:	4619      	mov	r1, r3
 800f34a:	2005      	movs	r0, #5
 800f34c:	f003 f9c0 	bl	80126d0 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f350:	bf00      	nop
 800f352:	e2e6      	b.n	800f922 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f354:	23ff      	movs	r3, #255	; 0xff
 800f356:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f35a:	4b12      	ldr	r3, [pc, #72]	; (800f3a4 <ProcessMacCommands+0x38c>)
 800f35c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f360:	2b00      	cmp	r3, #0
 800f362:	d00d      	beq.n	800f380 <ProcessMacCommands+0x368>
 800f364:	4b0f      	ldr	r3, [pc, #60]	; (800f3a4 <ProcessMacCommands+0x38c>)
 800f366:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d007      	beq.n	800f380 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f370:	4b0c      	ldr	r3, [pc, #48]	; (800f3a4 <ProcessMacCommands+0x38c>)
 800f372:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4798      	blx	r3
 800f37a:	4603      	mov	r3, r0
 800f37c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f380:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f384:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f388:	787b      	ldrb	r3, [r7, #1]
 800f38a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f394:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f398:	2202      	movs	r2, #2
 800f39a:	4619      	mov	r1, r3
 800f39c:	2006      	movs	r0, #6
 800f39e:	f003 f997 	bl	80126d0 <LoRaMacCommandsAddCmd>
                break;
 800f3a2:	e2be      	b.n	800f922 <ProcessMacCommands+0x90a>
 800f3a4:	20000644 	.word	0x20000644
 800f3a8:	20000b50 	.word	0x20000b50
 800f3ac:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f3b0:	2303      	movs	r3, #3
 800f3b2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f3b6:	78fb      	ldrb	r3, [r7, #3]
 800f3b8:	1c5a      	adds	r2, r3, #1
 800f3ba:	70fa      	strb	r2, [r7, #3]
 800f3bc:	461a      	mov	r2, r3
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	b25b      	sxtb	r3, r3
 800f3c6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f3ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f3ce:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f3d0:	78fb      	ldrb	r3, [r7, #3]
 800f3d2:	1c5a      	adds	r2, r3, #1
 800f3d4:	70fa      	strb	r2, [r7, #3]
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4413      	add	r3, r2
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f3e0:	78fb      	ldrb	r3, [r7, #3]
 800f3e2:	1c5a      	adds	r2, r3, #1
 800f3e4:	70fa      	strb	r2, [r7, #3]
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	021a      	lsls	r2, r3, #8
 800f3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f3f6:	78fb      	ldrb	r3, [r7, #3]
 800f3f8:	1c5a      	adds	r2, r3, #1
 800f3fa:	70fa      	strb	r2, [r7, #3]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	4413      	add	r3, r2
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	041a      	lsls	r2, r3, #16
 800f406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f408:	4313      	orrs	r3, r2
 800f40a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f40e:	2264      	movs	r2, #100	; 0x64
 800f410:	fb02 f303 	mul.w	r3, r2, r3
 800f414:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f416:	2300      	movs	r3, #0
 800f418:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f41a:	78fb      	ldrb	r3, [r7, #3]
 800f41c:	1c5a      	adds	r2, r3, #1
 800f41e:	70fa      	strb	r2, [r7, #3]
 800f420:	461a      	mov	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4413      	add	r3, r2
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	b25b      	sxtb	r3, r3
 800f42a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f42e:	4b85      	ldr	r3, [pc, #532]	; (800f644 <ProcessMacCommands+0x62c>)
 800f430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f434:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f438:	4611      	mov	r1, r2
 800f43a:	4618      	mov	r0, r3
 800f43c:	f004 ffde 	bl	80143fc <RegionNewChannelReq>
 800f440:	4603      	mov	r3, r0
 800f442:	b2db      	uxtb	r3, r3
 800f444:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f448:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f44c:	b25b      	sxtb	r3, r3
 800f44e:	2b00      	cmp	r3, #0
 800f450:	db0a      	blt.n	800f468 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 800f452:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f456:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f45a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f45e:	2201      	movs	r2, #1
 800f460:	4619      	mov	r1, r3
 800f462:	2007      	movs	r0, #7
 800f464:	f003 f934 	bl	80126d0 <LoRaMacCommandsAddCmd>
                }
                break;
 800f468:	bf00      	nop
 800f46a:	e25a      	b.n	800f922 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f46c:	78fb      	ldrb	r3, [r7, #3]
 800f46e:	1c5a      	adds	r2, r3, #1
 800f470:	70fa      	strb	r2, [r7, #3]
 800f472:	461a      	mov	r2, r3
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4413      	add	r3, r2
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	f003 030f 	and.w	r3, r3, #15
 800f47e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f482:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f486:	2b00      	cmp	r3, #0
 800f488:	d104      	bne.n	800f494 <ProcessMacCommands+0x47c>
                {
                    delay++;
 800f48a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f48e:	3301      	adds	r3, #1
 800f490:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f494:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f49c:	fb02 f303 	mul.w	r3, r2, r3
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	4b68      	ldr	r3, [pc, #416]	; (800f644 <ProcessMacCommands+0x62c>)
 800f4a4:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f4a6:	4b67      	ldr	r3, [pc, #412]	; (800f644 <ProcessMacCommands+0x62c>)
 800f4a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4aa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f4ae:	4a65      	ldr	r2, [pc, #404]	; (800f644 <ProcessMacCommands+0x62c>)
 800f4b0:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f4b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	2008      	movs	r0, #8
 800f4bc:	f003 f908 	bl	80126d0 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f4c0:	e22f      	b.n	800f922 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f4c2:	78fb      	ldrb	r3, [r7, #3]
 800f4c4:	1c5a      	adds	r2, r3, #1
 800f4c6:	70fa      	strb	r2, [r7, #3]
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f4e0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f4e4:	f003 0320 	and.w	r3, r3, #32
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d002      	beq.n	800f4f2 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f4f2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f4f6:	f003 0310 	and.w	r3, r3, #16
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d002      	beq.n	800f504 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f4fe:	2301      	movs	r3, #1
 800f500:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f504:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f508:	f003 030f 	and.w	r3, r3, #15
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f512:	4b4c      	ldr	r3, [pc, #304]	; (800f644 <ProcessMacCommands+0x62c>)
 800f514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f518:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f51c:	4611      	mov	r1, r2
 800f51e:	4618      	mov	r0, r3
 800f520:	f004 ff7f 	bl	8014422 <RegionTxParamSetupReq>
 800f524:	4603      	mov	r3, r0
 800f526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f52a:	d03a      	beq.n	800f5a2 <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f52c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f530:	4b44      	ldr	r3, [pc, #272]	; (800f644 <ProcessMacCommands+0x62c>)
 800f532:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f536:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f53a:	4b42      	ldr	r3, [pc, #264]	; (800f644 <ProcessMacCommands+0x62c>)
 800f53c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f540:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f544:	461a      	mov	r2, r3
 800f546:	4b40      	ldr	r3, [pc, #256]	; (800f648 <ProcessMacCommands+0x630>)
 800f548:	5c9b      	ldrb	r3, [r3, r2]
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7f1 f93e 	bl	80007cc <__aeabi_ui2f>
 800f550:	4603      	mov	r3, r0
 800f552:	4a3c      	ldr	r2, [pc, #240]	; (800f644 <ProcessMacCommands+0x62c>)
 800f554:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f556:	2302      	movs	r3, #2
 800f558:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f55c:	4b39      	ldr	r3, [pc, #228]	; (800f644 <ProcessMacCommands+0x62c>)
 800f55e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f562:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f566:	4b37      	ldr	r3, [pc, #220]	; (800f644 <ProcessMacCommands+0x62c>)
 800f568:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f56c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f570:	4611      	mov	r1, r2
 800f572:	4618      	mov	r0, r3
 800f574:	f004 fe58 	bl	8014228 <RegionGetPhyParam>
 800f578:	4603      	mov	r3, r0
 800f57a:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57e:	b25a      	sxtb	r2, r3
 800f580:	4b30      	ldr	r3, [pc, #192]	; (800f644 <ProcessMacCommands+0x62c>)
 800f582:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f586:	4293      	cmp	r3, r2
 800f588:	bfb8      	it	lt
 800f58a:	4613      	movlt	r3, r2
 800f58c:	b25a      	sxtb	r2, r3
 800f58e:	4b2d      	ldr	r3, [pc, #180]	; (800f644 <ProcessMacCommands+0x62c>)
 800f590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f594:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f598:	2200      	movs	r2, #0
 800f59a:	4619      	mov	r1, r3
 800f59c:	2009      	movs	r0, #9
 800f59e:	f003 f897 	bl	80126d0 <LoRaMacCommandsAddCmd>
                }
                break;
 800f5a2:	bf00      	nop
 800f5a4:	e1bd      	b.n	800f922 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f5a6:	2303      	movs	r3, #3
 800f5a8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f5ac:	78fb      	ldrb	r3, [r7, #3]
 800f5ae:	1c5a      	adds	r2, r3, #1
 800f5b0:	70fa      	strb	r2, [r7, #3]
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4413      	add	r3, r2
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f5be:	78fb      	ldrb	r3, [r7, #3]
 800f5c0:	1c5a      	adds	r2, r3, #1
 800f5c2:	70fa      	strb	r2, [r7, #3]
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f5ce:	78fb      	ldrb	r3, [r7, #3]
 800f5d0:	1c5a      	adds	r2, r3, #1
 800f5d2:	70fa      	strb	r2, [r7, #3]
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4413      	add	r3, r2
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	021a      	lsls	r2, r3, #8
 800f5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e0:	4313      	orrs	r3, r2
 800f5e2:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f5e4:	78fb      	ldrb	r3, [r7, #3]
 800f5e6:	1c5a      	adds	r2, r3, #1
 800f5e8:	70fa      	strb	r2, [r7, #3]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	041a      	lsls	r2, r3, #16
 800f5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	2264      	movs	r2, #100	; 0x64
 800f5fe:	fb02 f303 	mul.w	r3, r2, r3
 800f602:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f604:	4b0f      	ldr	r3, [pc, #60]	; (800f644 <ProcessMacCommands+0x62c>)
 800f606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f60a:	f107 0220 	add.w	r2, r7, #32
 800f60e:	4611      	mov	r1, r2
 800f610:	4618      	mov	r0, r3
 800f612:	f004 ff19 	bl	8014448 <RegionDlChannelReq>
 800f616:	4603      	mov	r3, r0
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f61e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f622:	b25b      	sxtb	r3, r3
 800f624:	2b00      	cmp	r3, #0
 800f626:	db0a      	blt.n	800f63e <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 800f628:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f62c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f630:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f634:	2201      	movs	r2, #1
 800f636:	4619      	mov	r1, r3
 800f638:	200a      	movs	r0, #10
 800f63a:	f003 f849 	bl	80126d0 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800f63e:	bf00      	nop
 800f640:	e16f      	b.n	800f922 <ProcessMacCommands+0x90a>
 800f642:	bf00      	nop
 800f644:	20000b50 	.word	0x20000b50
 800f648:	0801c364 	.word	0x0801c364
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f64c:	200a      	movs	r0, #10
 800f64e:	f003 fb67 	bl	8012d20 <LoRaMacConfirmQueueIsCmdActive>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	f000 8164 	beq.w	800f922 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f65a:	210a      	movs	r1, #10
 800f65c:	2000      	movs	r0, #0
 800f65e:	f003 fad3 	bl	8012c08 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800f662:	f107 0318 	add.w	r3, r7, #24
 800f666:	2200      	movs	r2, #0
 800f668:	601a      	str	r2, [r3, #0]
 800f66a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f66c:	f107 0310 	add.w	r3, r7, #16
 800f670:	2200      	movs	r2, #0
 800f672:	601a      	str	r2, [r3, #0]
 800f674:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f676:	f107 0308 	add.w	r3, r7, #8
 800f67a:	2200      	movs	r2, #0
 800f67c:	601a      	str	r2, [r3, #0]
 800f67e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f680:	78fb      	ldrb	r3, [r7, #3]
 800f682:	1c5a      	adds	r2, r3, #1
 800f684:	70fa      	strb	r2, [r7, #3]
 800f686:	461a      	mov	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4413      	add	r3, r2
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f690:	78fb      	ldrb	r3, [r7, #3]
 800f692:	1c5a      	adds	r2, r3, #1
 800f694:	70fa      	strb	r2, [r7, #3]
 800f696:	461a      	mov	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	4413      	add	r3, r2
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	021a      	lsls	r2, r3, #8
 800f6a0:	69bb      	ldr	r3, [r7, #24]
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f6a6:	78fb      	ldrb	r3, [r7, #3]
 800f6a8:	1c5a      	adds	r2, r3, #1
 800f6aa:	70fa      	strb	r2, [r7, #3]
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4413      	add	r3, r2
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	041a      	lsls	r2, r3, #16
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f6bc:	78fb      	ldrb	r3, [r7, #3]
 800f6be:	1c5a      	adds	r2, r3, #1
 800f6c0:	70fa      	strb	r2, [r7, #3]
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	061a      	lsls	r2, r3, #24
 800f6cc:	69bb      	ldr	r3, [r7, #24]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f6d2:	78fb      	ldrb	r3, [r7, #3]
 800f6d4:	1c5a      	adds	r2, r3, #1
 800f6d6:	70fa      	strb	r2, [r7, #3]
 800f6d8:	461a      	mov	r2, r3
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4413      	add	r3, r2
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	b21b      	sxth	r3, r3
 800f6e2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f6e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f6ee:	fb02 f303 	mul.w	r3, r2, r3
 800f6f2:	121b      	asrs	r3, r3, #8
 800f6f4:	b21b      	sxth	r3, r3
 800f6f6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f6f8:	f107 0310 	add.w	r3, r7, #16
 800f6fc:	f107 0218 	add.w	r2, r7, #24
 800f700:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f704:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f708:	693a      	ldr	r2, [r7, #16]
 800f70a:	4b8c      	ldr	r3, [pc, #560]	; (800f93c <ProcessMacCommands+0x924>)
 800f70c:	4413      	add	r3, r2
 800f70e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f710:	f107 0308 	add.w	r3, r7, #8
 800f714:	4618      	mov	r0, r3
 800f716:	f00a fc79 	bl	801a00c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f71a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f71e:	4b88      	ldr	r3, [pc, #544]	; (800f940 <ProcessMacCommands+0x928>)
 800f720:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f724:	9200      	str	r2, [sp, #0]
 800f726:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f72a:	f107 0210 	add.w	r2, r7, #16
 800f72e:	ca06      	ldmia	r2, {r1, r2}
 800f730:	f00a fc05 	bl	8019f3e <SysTimeSub>
 800f734:	f107 0010 	add.w	r0, r7, #16
 800f738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f73a:	9300      	str	r3, [sp, #0]
 800f73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f73e:	f107 0208 	add.w	r2, r7, #8
 800f742:	ca06      	ldmia	r2, {r1, r2}
 800f744:	f00a fbc2 	bl	8019ecc <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f748:	f107 0310 	add.w	r3, r7, #16
 800f74c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f750:	f00a fc2e 	bl	8019fb0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f754:	f002 fe81 	bl	801245a <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f758:	4b79      	ldr	r3, [pc, #484]	; (800f940 <ProcessMacCommands+0x928>)
 800f75a:	2201      	movs	r2, #1
 800f75c:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800f760:	e0df      	b.n	800f922 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f762:	200d      	movs	r0, #13
 800f764:	f003 fadc 	bl	8012d20 <LoRaMacConfirmQueueIsCmdActive>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f000 80d9 	beq.w	800f922 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f770:	210d      	movs	r1, #13
 800f772:	2000      	movs	r0, #0
 800f774:	f003 fa48 	bl	8012c08 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f778:	4b71      	ldr	r3, [pc, #452]	; (800f940 <ProcessMacCommands+0x928>)
 800f77a:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800f77e:	2b04      	cmp	r3, #4
 800f780:	f000 80cf 	beq.w	800f922 <ProcessMacCommands+0x90a>
 800f784:	4b6e      	ldr	r3, [pc, #440]	; (800f940 <ProcessMacCommands+0x928>)
 800f786:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800f78a:	2b05      	cmp	r3, #5
 800f78c:	f000 80c9 	beq.w	800f922 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f790:	f002 fe44 	bl	801241c <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f794:	e0c5      	b.n	800f922 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f796:	2303      	movs	r3, #3
 800f798:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f79c:	2300      	movs	r3, #0
 800f79e:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f7a0:	78fb      	ldrb	r3, [r7, #3]
 800f7a2:	1c5a      	adds	r2, r3, #1
 800f7a4:	70fa      	strb	r2, [r7, #3]
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4413      	add	r3, r2
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f7b0:	78fb      	ldrb	r3, [r7, #3]
 800f7b2:	1c5a      	adds	r2, r3, #1
 800f7b4:	70fa      	strb	r2, [r7, #3]
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4413      	add	r3, r2
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	021b      	lsls	r3, r3, #8
 800f7c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f7c6:	78fb      	ldrb	r3, [r7, #3]
 800f7c8:	1c5a      	adds	r2, r3, #1
 800f7ca:	70fa      	strb	r2, [r7, #3]
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	041b      	lsls	r3, r3, #16
 800f7d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f7dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7de:	2264      	movs	r2, #100	; 0x64
 800f7e0:	fb02 f303 	mul.w	r3, r2, r3
 800f7e4:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f7e6:	78fb      	ldrb	r3, [r7, #3]
 800f7e8:	1c5a      	adds	r2, r3, #1
 800f7ea:	70fa      	strb	r2, [r7, #3]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	f003 030f 	and.w	r3, r3, #15
 800f7f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f7fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f800:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f802:	4618      	mov	r0, r3
 800f804:	f002 fe10 	bl	8012428 <LoRaMacClassBPingSlotChannelReq>
 800f808:	4603      	mov	r3, r0
 800f80a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f80e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f812:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f816:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f81a:	2201      	movs	r2, #1
 800f81c:	4619      	mov	r1, r3
 800f81e:	2011      	movs	r0, #17
 800f820:	f002 ff56 	bl	80126d0 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800f824:	e07d      	b.n	800f922 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f826:	200e      	movs	r0, #14
 800f828:	f003 fa7a 	bl	8012d20 <LoRaMacConfirmQueueIsCmdActive>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d077      	beq.n	800f922 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f832:	210e      	movs	r1, #14
 800f834:	2000      	movs	r0, #0
 800f836:	f003 f9e7 	bl	8012c08 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f83a:	2300      	movs	r3, #0
 800f83c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f840:	2300      	movs	r3, #0
 800f842:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f846:	78fb      	ldrb	r3, [r7, #3]
 800f848:	1c5a      	adds	r2, r3, #1
 800f84a:	70fa      	strb	r2, [r7, #3]
 800f84c:	461a      	mov	r2, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4413      	add	r3, r2
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f858:	78fb      	ldrb	r3, [r7, #3]
 800f85a:	1c5a      	adds	r2, r3, #1
 800f85c:	70fa      	strb	r2, [r7, #3]
 800f85e:	461a      	mov	r2, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4413      	add	r3, r2
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	021b      	lsls	r3, r3, #8
 800f868:	b21a      	sxth	r2, r3
 800f86a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f86e:	4313      	orrs	r3, r2
 800f870:	b21b      	sxth	r3, r3
 800f872:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f876:	78fb      	ldrb	r3, [r7, #3]
 800f878:	1c5a      	adds	r2, r3, #1
 800f87a:	70fa      	strb	r2, [r7, #3]
 800f87c:	461a      	mov	r2, r3
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	4413      	add	r3, r2
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f888:	4b2e      	ldr	r3, [pc, #184]	; (800f944 <ProcessMacCommands+0x92c>)
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f890:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f894:	4618      	mov	r0, r3
 800f896:	f002 fdd3 	bl	8012440 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f89a:	e042      	b.n	800f922 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f89c:	2300      	movs	r3, #0
 800f89e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f8a2:	78fb      	ldrb	r3, [r7, #3]
 800f8a4:	1c5a      	adds	r2, r3, #1
 800f8a6:	70fa      	strb	r2, [r7, #3]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f8b4:	78fb      	ldrb	r3, [r7, #3]
 800f8b6:	1c5a      	adds	r2, r3, #1
 800f8b8:	70fa      	strb	r2, [r7, #3]
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4413      	add	r3, r2
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	021b      	lsls	r3, r3, #8
 800f8c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f8ce:	78fb      	ldrb	r3, [r7, #3]
 800f8d0:	1c5a      	adds	r2, r3, #1
 800f8d2:	70fa      	strb	r2, [r7, #3]
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4413      	add	r3, r2
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	041b      	lsls	r3, r3, #16
 800f8de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f8e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f8ec:	2264      	movs	r2, #100	; 0x64
 800f8ee:	fb02 f303 	mul.w	r3, r2, r3
 800f8f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f8f6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f8fa:	f002 fdb4 	bl	8012466 <LoRaMacClassBBeaconFreqReq>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d003      	beq.n	800f90c <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 800f904:	2301      	movs	r3, #1
 800f906:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f90a:	e002      	b.n	800f912 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f90c:	2300      	movs	r3, #0
 800f90e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f912:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f916:	2201      	movs	r2, #1
 800f918:	4619      	mov	r1, r3
 800f91a:	2013      	movs	r0, #19
 800f91c:	f002 fed8 	bl	80126d0 <LoRaMacCommandsAddCmd>
                }
                break;
 800f920:	bf00      	nop
    while( macIndex < commandsSize )
 800f922:	78fa      	ldrb	r2, [r7, #3]
 800f924:	78bb      	ldrb	r3, [r7, #2]
 800f926:	429a      	cmp	r2, r3
 800f928:	f4ff ab8e 	bcc.w	800f048 <ProcessMacCommands+0x30>
 800f92c:	e002      	b.n	800f934 <ProcessMacCommands+0x91c>
            return;
 800f92e:	bf00      	nop
 800f930:	e000      	b.n	800f934 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f932:	bf00      	nop
        }
    }
}
 800f934:	378c      	adds	r7, #140	; 0x8c
 800f936:	46bd      	mov	sp, r7
 800f938:	bd90      	pop	{r4, r7, pc}
 800f93a:	bf00      	nop
 800f93c:	12d53d80 	.word	0x12d53d80
 800f940:	20000644 	.word	0x20000644
 800f944:	200019a8 	.word	0x200019a8

0800f948 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b08e      	sub	sp, #56	; 0x38
 800f94c:	af02      	add	r7, sp, #8
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	607a      	str	r2, [r7, #4]
 800f952:	461a      	mov	r2, r3
 800f954:	460b      	mov	r3, r1
 800f956:	72fb      	strb	r3, [r7, #11]
 800f958:	4613      	mov	r3, r2
 800f95a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f95c:	2303      	movs	r3, #3
 800f95e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f962:	4b65      	ldr	r3, [pc, #404]	; (800faf8 <Send+0x1b0>)
 800f964:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f968:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f96c:	4b62      	ldr	r3, [pc, #392]	; (800faf8 <Send+0x1b0>)
 800f96e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f972:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f976:	4b60      	ldr	r3, [pc, #384]	; (800faf8 <Send+0x1b0>)
 800f978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f97a:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f97c:	4b5e      	ldr	r3, [pc, #376]	; (800faf8 <Send+0x1b0>)
 800f97e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f982:	2b00      	cmp	r3, #0
 800f984:	d101      	bne.n	800f98a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f986:	2307      	movs	r3, #7
 800f988:	e0b1      	b.n	800faee <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f98a:	4b5b      	ldr	r3, [pc, #364]	; (800faf8 <Send+0x1b0>)
 800f98c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800f990:	2b00      	cmp	r3, #0
 800f992:	d102      	bne.n	800f99a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f994:	4b58      	ldr	r3, [pc, #352]	; (800faf8 <Send+0x1b0>)
 800f996:	2200      	movs	r2, #0
 800f998:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f99a:	2300      	movs	r3, #0
 800f99c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f9a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9a4:	f36f 0303 	bfc	r3, #0, #4
 800f9a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f9ac:	4b52      	ldr	r3, [pc, #328]	; (800faf8 <Send+0x1b0>)
 800f9ae:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800f9b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9b6:	f362 13c7 	bfi	r3, r2, #7, #1
 800f9ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f9be:	4b4e      	ldr	r3, [pc, #312]	; (800faf8 <Send+0x1b0>)
 800f9c0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d106      	bne.n	800f9d6 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f9c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9cc:	f043 0310 	orr.w	r3, r3, #16
 800f9d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800f9d4:	e005      	b.n	800f9e2 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f9d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9da:	f36f 1304 	bfc	r3, #4, #1
 800f9de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f9e2:	4b45      	ldr	r3, [pc, #276]	; (800faf8 <Send+0x1b0>)
 800f9e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d005      	beq.n	800f9f8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f9ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9f0:	f043 0320 	orr.w	r3, r3, #32
 800f9f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800f9f8:	4b3f      	ldr	r3, [pc, #252]	; (800faf8 <Send+0x1b0>)
 800f9fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f9fe:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800fa00:	2301      	movs	r3, #1
 800fa02:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fa04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa08:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	bf14      	ite	ne
 800fa12:	2301      	movne	r3, #1
 800fa14:	2300      	moveq	r3, #0
 800fa16:	b2db      	uxtb	r3, r3
 800fa18:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fa1a:	4b37      	ldr	r3, [pc, #220]	; (800faf8 <Send+0x1b0>)
 800fa1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa1e:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800fa20:	4b36      	ldr	r3, [pc, #216]	; (800fafc <Send+0x1b4>)
 800fa22:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800fa26:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800fa28:	4b34      	ldr	r3, [pc, #208]	; (800fafc <Send+0x1b4>)
 800fa2a:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800fa2e:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fa30:	4b31      	ldr	r3, [pc, #196]	; (800faf8 <Send+0x1b0>)
 800fa32:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fa36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fa3a:	4b2f      	ldr	r3, [pc, #188]	; (800faf8 <Send+0x1b0>)
 800fa3c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fa40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fa44:	4b2c      	ldr	r3, [pc, #176]	; (800faf8 <Send+0x1b0>)
 800fa46:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fa4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800fa4e:	4b2a      	ldr	r3, [pc, #168]	; (800faf8 <Send+0x1b0>)
 800fa50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fa58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa5c:	f107 0014 	add.w	r0, r7, #20
 800fa60:	4a27      	ldr	r2, [pc, #156]	; (800fb00 <Send+0x1b8>)
 800fa62:	4928      	ldr	r1, [pc, #160]	; (800fb04 <Send+0x1bc>)
 800fa64:	f002 fc1a 	bl	801229c <LoRaMacAdrCalcNext>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa70:	f362 1386 	bfi	r3, r2, #6, #1
 800fa74:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fa78:	7afa      	ldrb	r2, [r7, #11]
 800fa7a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800fa7e:	893b      	ldrh	r3, [r7, #8]
 800fa80:	9300      	str	r3, [sp, #0]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	68f8      	ldr	r0, [r7, #12]
 800fa86:	f000 fc2d 	bl	80102e4 <PrepareFrame>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fa90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d003      	beq.n	800faa0 <Send+0x158>
 800fa98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa9c:	2b0a      	cmp	r3, #10
 800fa9e:	d107      	bne.n	800fab0 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800faa0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800faa4:	4618      	mov	r0, r3
 800faa6:	f000 f96d 	bl	800fd84 <ScheduleTx>
 800faaa:	4603      	mov	r3, r0
 800faac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d00a      	beq.n	800face <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fab8:	4a0f      	ldr	r2, [pc, #60]	; (800faf8 <Send+0x1b0>)
 800faba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fabe:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fac2:	4a0d      	ldr	r2, [pc, #52]	; (800faf8 <Send+0x1b0>)
 800fac4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fac8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800facc:	e00d      	b.n	800faea <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800face:	4b0a      	ldr	r3, [pc, #40]	; (800faf8 <Send+0x1b0>)
 800fad0:	2200      	movs	r2, #0
 800fad2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad8:	4a07      	ldr	r2, [pc, #28]	; (800faf8 <Send+0x1b0>)
 800fada:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fadc:	f002 fe70 	bl	80127c0 <LoRaMacCommandsRemoveNoneStickyCmds>
 800fae0:	4603      	mov	r3, r0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d001      	beq.n	800faea <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fae6:	2313      	movs	r3, #19
 800fae8:	e001      	b.n	800faee <Send+0x1a6>
        }
    }
    return status;
 800faea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3730      	adds	r7, #48	; 0x30
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	20000b50 	.word	0x20000b50
 800fafc:	20000644 	.word	0x20000644
 800fb00:	20000b88 	.word	0x20000b88
 800fb04:	20000b89 	.word	0x20000b89

0800fb08 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	4603      	mov	r3, r0
 800fb10:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fb12:	2300      	movs	r3, #0
 800fb14:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fb16:	2300      	movs	r3, #0
 800fb18:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fb1e:	79fb      	ldrb	r3, [r7, #7]
 800fb20:	2bff      	cmp	r3, #255	; 0xff
 800fb22:	d129      	bne.n	800fb78 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fb24:	2000      	movs	r0, #0
 800fb26:	f7ff f957 	bl	800edd8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fb2a:	4b1a      	ldr	r3, [pc, #104]	; (800fb94 <SendReJoinReq+0x8c>)
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fb32:	4b18      	ldr	r3, [pc, #96]	; (800fb94 <SendReJoinReq+0x8c>)
 800fb34:	4a18      	ldr	r2, [pc, #96]	; (800fb98 <SendReJoinReq+0x90>)
 800fb36:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fb3a:	4b16      	ldr	r3, [pc, #88]	; (800fb94 <SendReJoinReq+0x8c>)
 800fb3c:	22ff      	movs	r2, #255	; 0xff
 800fb3e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fb42:	7b3b      	ldrb	r3, [r7, #12]
 800fb44:	f36f 1347 	bfc	r3, #5, #3
 800fb48:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fb4a:	7b3a      	ldrb	r2, [r7, #12]
 800fb4c:	4b11      	ldr	r3, [pc, #68]	; (800fb94 <SendReJoinReq+0x8c>)
 800fb4e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fb52:	f7fc fb59 	bl	800c208 <SecureElementGetJoinEui>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2208      	movs	r2, #8
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	480f      	ldr	r0, [pc, #60]	; (800fb9c <SendReJoinReq+0x94>)
 800fb5e:	f006 fe76 	bl	801684e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800fb62:	f7fc fb2f 	bl	800c1c4 <SecureElementGetDevEui>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2208      	movs	r2, #8
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	480c      	ldr	r0, [pc, #48]	; (800fba0 <SendReJoinReq+0x98>)
 800fb6e:	f006 fe6e 	bl	801684e <memcpy1>

            allowDelayedTx = false;
 800fb72:	2300      	movs	r3, #0
 800fb74:	73fb      	strb	r3, [r7, #15]

            break;
 800fb76:	e002      	b.n	800fb7e <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fb78:	2302      	movs	r3, #2
 800fb7a:	73bb      	strb	r3, [r7, #14]
            break;
 800fb7c:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fb7e:	7bfb      	ldrb	r3, [r7, #15]
 800fb80:	4618      	mov	r0, r3
 800fb82:	f000 f8ff 	bl	800fd84 <ScheduleTx>
 800fb86:	4603      	mov	r3, r0
 800fb88:	73bb      	strb	r3, [r7, #14]
    return status;
 800fb8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3710      	adds	r7, #16
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	20000644 	.word	0x20000644
 800fb98:	20000646 	.word	0x20000646
 800fb9c:	20000752 	.word	0x20000752
 800fba0:	2000075a 	.word	0x2000075a

0800fba4 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fba8:	f002 fbe7 	bl	801237a <LoRaMacClassBIsBeaconExpected>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fbb2:	230e      	movs	r3, #14
 800fbb4:	e013      	b.n	800fbde <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fbb6:	4b0b      	ldr	r3, [pc, #44]	; (800fbe4 <CheckForClassBCollision+0x40>)
 800fbb8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	d10d      	bne.n	800fbdc <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fbc0:	f002 fbe2 	bl	8012388 <LoRaMacClassBIsPingExpected>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d001      	beq.n	800fbce <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fbca:	230f      	movs	r3, #15
 800fbcc:	e007      	b.n	800fbde <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fbce:	f002 fbe2 	bl	8012396 <LoRaMacClassBIsMulticastExpected>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d001      	beq.n	800fbdc <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fbd8:	230f      	movs	r3, #15
 800fbda:	e000      	b.n	800fbde <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	20000b50 	.word	0x20000b50

0800fbe8 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fbe8:	b590      	push	{r4, r7, lr}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fbee:	4b2d      	ldr	r3, [pc, #180]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fbf0:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fbf4:	4b2b      	ldr	r3, [pc, #172]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fbf6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fbfa:	4b2a      	ldr	r3, [pc, #168]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fbfc:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800fc00:	4b28      	ldr	r3, [pc, #160]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc02:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800fc06:	4b27      	ldr	r3, [pc, #156]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc08:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fc0c:	b25b      	sxtb	r3, r3
 800fc0e:	f004 fc72 	bl	80144f6 <RegionApplyDrOffset>
 800fc12:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc14:	b259      	sxtb	r1, r3
 800fc16:	4b23      	ldr	r3, [pc, #140]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc18:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc1c:	4b21      	ldr	r3, [pc, #132]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc20:	4821      	ldr	r0, [pc, #132]	; (800fca8 <ComputeRxWindowParameters+0xc0>)
 800fc22:	9000      	str	r0, [sp, #0]
 800fc24:	4620      	mov	r0, r4
 800fc26:	f004 fb76 	bl	8014316 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc2a:	4b1e      	ldr	r3, [pc, #120]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc2c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800fc30:	4b1c      	ldr	r3, [pc, #112]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc32:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc36:	b259      	sxtb	r1, r3
 800fc38:	4b1a      	ldr	r3, [pc, #104]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc3a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc3e:	4b19      	ldr	r3, [pc, #100]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc42:	4c1a      	ldr	r4, [pc, #104]	; (800fcac <ComputeRxWindowParameters+0xc4>)
 800fc44:	9400      	str	r4, [sp, #0]
 800fc46:	f004 fb66 	bl	8014316 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fc4a:	4b16      	ldr	r3, [pc, #88]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc4e:	4a18      	ldr	r2, [pc, #96]	; (800fcb0 <ComputeRxWindowParameters+0xc8>)
 800fc50:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fc54:	4413      	add	r3, r2
 800fc56:	4a16      	ldr	r2, [pc, #88]	; (800fcb0 <ComputeRxWindowParameters+0xc8>)
 800fc58:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fc5c:	4b11      	ldr	r3, [pc, #68]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc60:	4a13      	ldr	r2, [pc, #76]	; (800fcb0 <ComputeRxWindowParameters+0xc8>)
 800fc62:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fc66:	4413      	add	r3, r2
 800fc68:	4a11      	ldr	r2, [pc, #68]	; (800fcb0 <ComputeRxWindowParameters+0xc8>)
 800fc6a:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fc6e:	4b0d      	ldr	r3, [pc, #52]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc70:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d111      	bne.n	800fc9c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fc78:	4b0a      	ldr	r3, [pc, #40]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc7c:	4a0c      	ldr	r2, [pc, #48]	; (800fcb0 <ComputeRxWindowParameters+0xc8>)
 800fc7e:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fc82:	4413      	add	r3, r2
 800fc84:	4a0a      	ldr	r2, [pc, #40]	; (800fcb0 <ComputeRxWindowParameters+0xc8>)
 800fc86:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fc8a:	4b06      	ldr	r3, [pc, #24]	; (800fca4 <ComputeRxWindowParameters+0xbc>)
 800fc8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc8e:	4a08      	ldr	r2, [pc, #32]	; (800fcb0 <ComputeRxWindowParameters+0xc8>)
 800fc90:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fc94:	4413      	add	r3, r2
 800fc96:	4a06      	ldr	r2, [pc, #24]	; (800fcb0 <ComputeRxWindowParameters+0xc8>)
 800fc98:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800fc9c:	bf00      	nop
 800fc9e:	3704      	adds	r7, #4
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd90      	pop	{r4, r7, pc}
 800fca4:	20000b50 	.word	0x20000b50
 800fca8:	200009fc 	.word	0x200009fc
 800fcac:	20000a10 	.word	0x20000a10
 800fcb0:	20000644 	.word	0x20000644

0800fcb4 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fcbe:	4b13      	ldr	r3, [pc, #76]	; (800fd0c <VerifyTxFrame+0x58>)
 800fcc0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d01b      	beq.n	800fd00 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fcc8:	1d3b      	adds	r3, r7, #4
 800fcca:	4618      	mov	r0, r3
 800fccc:	f002 fdbe 	bl	801284c <LoRaMacCommandsGetSizeSerializedCmds>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d001      	beq.n	800fcda <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fcd6:	2313      	movs	r3, #19
 800fcd8:	e013      	b.n	800fd02 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800fcda:	4b0d      	ldr	r3, [pc, #52]	; (800fd10 <VerifyTxFrame+0x5c>)
 800fcdc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fce0:	4a0a      	ldr	r2, [pc, #40]	; (800fd0c <VerifyTxFrame+0x58>)
 800fce2:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800fce6:	687a      	ldr	r2, [r7, #4]
 800fce8:	b2d2      	uxtb	r2, r2
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7ff f96c 	bl	800efc8 <ValidatePayloadLength>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	f083 0301 	eor.w	r3, r3, #1
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d001      	beq.n	800fd00 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fcfc:	2308      	movs	r3, #8
 800fcfe:	e000      	b.n	800fd02 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fd00:	2300      	movs	r3, #0
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	20000b50 	.word	0x20000b50
 800fd10:	20000644 	.word	0x20000644

0800fd14 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fd1a:	4b18      	ldr	r3, [pc, #96]	; (800fd7c <SerializeTxFrame+0x68>)
 800fd1c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d002      	beq.n	800fd2a <SerializeTxFrame+0x16>
 800fd24:	2b04      	cmp	r3, #4
 800fd26:	d011      	beq.n	800fd4c <SerializeTxFrame+0x38>
 800fd28:	e021      	b.n	800fd6e <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fd2a:	4815      	ldr	r0, [pc, #84]	; (800fd80 <SerializeTxFrame+0x6c>)
 800fd2c:	f004 f8f3 	bl	8013f16 <LoRaMacSerializerJoinRequest>
 800fd30:	4603      	mov	r3, r0
 800fd32:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fd34:	79fb      	ldrb	r3, [r7, #7]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d001      	beq.n	800fd3e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd3a:	2311      	movs	r3, #17
 800fd3c:	e01a      	b.n	800fd74 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fd3e:	4b0f      	ldr	r3, [pc, #60]	; (800fd7c <SerializeTxFrame+0x68>)
 800fd40:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd44:	b29a      	uxth	r2, r3
 800fd46:	4b0d      	ldr	r3, [pc, #52]	; (800fd7c <SerializeTxFrame+0x68>)
 800fd48:	801a      	strh	r2, [r3, #0]
            break;
 800fd4a:	e012      	b.n	800fd72 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fd4c:	480c      	ldr	r0, [pc, #48]	; (800fd80 <SerializeTxFrame+0x6c>)
 800fd4e:	f004 f964 	bl	801401a <LoRaMacSerializerData>
 800fd52:	4603      	mov	r3, r0
 800fd54:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fd56:	79fb      	ldrb	r3, [r7, #7]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d001      	beq.n	800fd60 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd5c:	2311      	movs	r3, #17
 800fd5e:	e009      	b.n	800fd74 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fd60:	4b06      	ldr	r3, [pc, #24]	; (800fd7c <SerializeTxFrame+0x68>)
 800fd62:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	4b04      	ldr	r3, [pc, #16]	; (800fd7c <SerializeTxFrame+0x68>)
 800fd6a:	801a      	strh	r2, [r3, #0]
            break;
 800fd6c:	e001      	b.n	800fd72 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fd6e:	2303      	movs	r3, #3
 800fd70:	e000      	b.n	800fd74 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fd72:	2300      	movs	r3, #0
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3708      	adds	r7, #8
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	20000644 	.word	0x20000644
 800fd80:	2000074c 	.word	0x2000074c

0800fd84 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b090      	sub	sp, #64	; 0x40
 800fd88:	af02      	add	r7, sp, #8
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fd8e:	2303      	movs	r3, #3
 800fd90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fd94:	f7ff ff06 	bl	800fba4 <CheckForClassBCollision>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fd9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d002      	beq.n	800fdac <ScheduleTx+0x28>
    {
        return status;
 800fda6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdaa:	e08f      	b.n	800fecc <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800fdac:	f000 f8fa 	bl	800ffa4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fdb0:	f7ff ffb0 	bl	800fd14 <SerializeTxFrame>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fdba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d002      	beq.n	800fdc8 <ScheduleTx+0x44>
    {
        return status;
 800fdc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdc6:	e081      	b.n	800fecc <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fdc8:	4b42      	ldr	r3, [pc, #264]	; (800fed4 <ScheduleTx+0x150>)
 800fdca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdcc:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fdce:	4b41      	ldr	r3, [pc, #260]	; (800fed4 <ScheduleTx+0x150>)
 800fdd0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fdd4:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fdd6:	4b3f      	ldr	r3, [pc, #252]	; (800fed4 <ScheduleTx+0x150>)
 800fdd8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800fddc:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fdde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fde2:	4618      	mov	r0, r3
 800fde4:	f00a f94a 	bl	801a07c <SysTimeGetMcuTime>
 800fde8:	4638      	mov	r0, r7
 800fdea:	4b3a      	ldr	r3, [pc, #232]	; (800fed4 <ScheduleTx+0x150>)
 800fdec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800fdf0:	9200      	str	r2, [sp, #0]
 800fdf2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800fdf6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fdfa:	ca06      	ldmia	r2, {r1, r2}
 800fdfc:	f00a f89f 	bl	8019f3e <SysTimeSub>
 800fe00:	f107 0320 	add.w	r3, r7, #32
 800fe04:	463a      	mov	r2, r7
 800fe06:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe0a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fe0e:	4b31      	ldr	r3, [pc, #196]	; (800fed4 <ScheduleTx+0x150>)
 800fe10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe12:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fe14:	2300      	movs	r3, #0
 800fe16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fe1e:	4b2e      	ldr	r3, [pc, #184]	; (800fed8 <ScheduleTx+0x154>)
 800fe20:	881b      	ldrh	r3, [r3, #0]
 800fe22:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fe24:	4b2b      	ldr	r3, [pc, #172]	; (800fed4 <ScheduleTx+0x150>)
 800fe26:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d104      	bne.n	800fe38 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fe2e:	2301      	movs	r3, #1
 800fe30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fe34:	2300      	movs	r3, #0
 800fe36:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fe38:	4b26      	ldr	r3, [pc, #152]	; (800fed4 <ScheduleTx+0x150>)
 800fe3a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fe3e:	f107 0114 	add.w	r1, r7, #20
 800fe42:	4b26      	ldr	r3, [pc, #152]	; (800fedc <ScheduleTx+0x158>)
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	4b26      	ldr	r3, [pc, #152]	; (800fee0 <ScheduleTx+0x15c>)
 800fe48:	4a26      	ldr	r2, [pc, #152]	; (800fee4 <ScheduleTx+0x160>)
 800fe4a:	f004 fb2a 	bl	80144a2 <RegionNextChannel>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fe54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d022      	beq.n	800fea2 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fe5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe60:	2b0b      	cmp	r3, #11
 800fe62:	d11b      	bne.n	800fe9c <ScheduleTx+0x118>
 800fe64:	7bfb      	ldrb	r3, [r7, #15]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d018      	beq.n	800fe9c <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800fe6a:	4b1b      	ldr	r3, [pc, #108]	; (800fed8 <ScheduleTx+0x154>)
 800fe6c:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d011      	beq.n	800fe98 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fe74:	4b18      	ldr	r3, [pc, #96]	; (800fed8 <ScheduleTx+0x154>)
 800fe76:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fe7a:	f043 0320 	orr.w	r3, r3, #32
 800fe7e:	4a16      	ldr	r2, [pc, #88]	; (800fed8 <ScheduleTx+0x154>)
 800fe80:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fe84:	4b14      	ldr	r3, [pc, #80]	; (800fed8 <ScheduleTx+0x154>)
 800fe86:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	4816      	ldr	r0, [pc, #88]	; (800fee8 <ScheduleTx+0x164>)
 800fe8e:	f00a fe99 	bl	801abc4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fe92:	4815      	ldr	r0, [pc, #84]	; (800fee8 <ScheduleTx+0x164>)
 800fe94:	f00a fdb8 	bl	801aa08 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	e017      	b.n	800fecc <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fe9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fea0:	e014      	b.n	800fecc <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fea2:	f7ff fea1 	bl	800fbe8 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fea6:	f7ff ff05 	bl	800fcb4 <VerifyTxFrame>
 800feaa:	4603      	mov	r3, r0
 800feac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800feb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d002      	beq.n	800febe <ScheduleTx+0x13a>
    {
        return status;
 800feb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800febc:	e006      	b.n	800fecc <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800febe:	4b06      	ldr	r3, [pc, #24]	; (800fed8 <ScheduleTx+0x154>)
 800fec0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800fec4:	4618      	mov	r0, r3
 800fec6:	f000 fb29 	bl	801051c <SendFrameOnChannel>
 800feca:	4603      	mov	r3, r0
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3738      	adds	r7, #56	; 0x38
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	20000b50 	.word	0x20000b50
 800fed8:	20000644 	.word	0x20000644
 800fedc:	20000b80 	.word	0x20000b80
 800fee0:	20000acc 	.word	0x20000acc
 800fee4:	20000a59 	.word	0x20000a59
 800fee8:	200009ac 	.word	0x200009ac

0800feec <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	4603      	mov	r3, r0
 800fef4:	460a      	mov	r2, r1
 800fef6:	71fb      	strb	r3, [r7, #7]
 800fef8:	4613      	mov	r3, r2
 800fefa:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fefc:	2313      	movs	r3, #19
 800fefe:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800ff00:	2300      	movs	r3, #0
 800ff02:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800ff04:	4b25      	ldr	r3, [pc, #148]	; (800ff9c <SecureFrame+0xb0>)
 800ff06:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d002      	beq.n	800ff14 <SecureFrame+0x28>
 800ff0e:	2b04      	cmp	r3, #4
 800ff10:	d011      	beq.n	800ff36 <SecureFrame+0x4a>
 800ff12:	e03b      	b.n	800ff8c <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ff14:	4822      	ldr	r0, [pc, #136]	; (800ffa0 <SecureFrame+0xb4>)
 800ff16:	f003 fbc7 	bl	80136a8 <LoRaMacCryptoPrepareJoinRequest>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ff1e:	7bfb      	ldrb	r3, [r7, #15]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d001      	beq.n	800ff28 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff24:	2311      	movs	r3, #17
 800ff26:	e034      	b.n	800ff92 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ff28:	4b1c      	ldr	r3, [pc, #112]	; (800ff9c <SecureFrame+0xb0>)
 800ff2a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ff2e:	b29a      	uxth	r2, r3
 800ff30:	4b1a      	ldr	r3, [pc, #104]	; (800ff9c <SecureFrame+0xb0>)
 800ff32:	801a      	strh	r2, [r3, #0]
            break;
 800ff34:	e02c      	b.n	800ff90 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ff36:	f107 0308 	add.w	r3, r7, #8
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f003 face 	bl	80134dc <LoRaMacCryptoGetFCntUp>
 800ff40:	4603      	mov	r3, r0
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d001      	beq.n	800ff4a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ff46:	2312      	movs	r3, #18
 800ff48:	e023      	b.n	800ff92 <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800ff4a:	4b14      	ldr	r3, [pc, #80]	; (800ff9c <SecureFrame+0xb0>)
 800ff4c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d104      	bne.n	800ff5e <SecureFrame+0x72>
 800ff54:	4b11      	ldr	r3, [pc, #68]	; (800ff9c <SecureFrame+0xb0>)
 800ff56:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d902      	bls.n	800ff64 <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	3b01      	subs	r3, #1
 800ff62:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ff64:	68b8      	ldr	r0, [r7, #8]
 800ff66:	79ba      	ldrb	r2, [r7, #6]
 800ff68:	79f9      	ldrb	r1, [r7, #7]
 800ff6a:	4b0d      	ldr	r3, [pc, #52]	; (800ffa0 <SecureFrame+0xb4>)
 800ff6c:	f003 fcb4 	bl	80138d8 <LoRaMacCryptoSecureMessage>
 800ff70:	4603      	mov	r3, r0
 800ff72:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ff74:	7bfb      	ldrb	r3, [r7, #15]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d001      	beq.n	800ff7e <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff7a:	2311      	movs	r3, #17
 800ff7c:	e009      	b.n	800ff92 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ff7e:	4b07      	ldr	r3, [pc, #28]	; (800ff9c <SecureFrame+0xb0>)
 800ff80:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	4b05      	ldr	r3, [pc, #20]	; (800ff9c <SecureFrame+0xb0>)
 800ff88:	801a      	strh	r2, [r3, #0]
            break;
 800ff8a:	e001      	b.n	800ff90 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ff8c:	2303      	movs	r3, #3
 800ff8e:	e000      	b.n	800ff92 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800ff90:	2300      	movs	r3, #0
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3710      	adds	r7, #16
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	20000644 	.word	0x20000644
 800ffa0:	2000074c 	.word	0x2000074c

0800ffa4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800ffa8:	4b09      	ldr	r3, [pc, #36]	; (800ffd0 <CalculateBackOff+0x2c>)
 800ffaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d10a      	bne.n	800ffc6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800ffb0:	4b07      	ldr	r3, [pc, #28]	; (800ffd0 <CalculateBackOff+0x2c>)
 800ffb2:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	4a06      	ldr	r2, [pc, #24]	; (800ffd4 <CalculateBackOff+0x30>)
 800ffba:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800ffbe:	fb02 f303 	mul.w	r3, r2, r3
 800ffc2:	4a03      	ldr	r2, [pc, #12]	; (800ffd0 <CalculateBackOff+0x2c>)
 800ffc4:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800ffc6:	bf00      	nop
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bc80      	pop	{r7}
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop
 800ffd0:	20000b50 	.word	0x20000b50
 800ffd4:	20000644 	.word	0x20000644

0800ffd8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	4603      	mov	r3, r0
 800ffe0:	7139      	strb	r1, [r7, #4]
 800ffe2:	71fb      	strb	r3, [r7, #7]
 800ffe4:	4613      	mov	r3, r2
 800ffe6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800ffe8:	79fb      	ldrb	r3, [r7, #7]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d002      	beq.n	800fff4 <RemoveMacCommands+0x1c>
 800ffee:	79fb      	ldrb	r3, [r7, #7]
 800fff0:	2b01      	cmp	r3, #1
 800fff2:	d10d      	bne.n	8010010 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800fff4:	79bb      	ldrb	r3, [r7, #6]
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d108      	bne.n	801000c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800fffa:	793b      	ldrb	r3, [r7, #4]
 800fffc:	f003 0320 	and.w	r3, r3, #32
 8010000:	b2db      	uxtb	r3, r3
 8010002:	2b00      	cmp	r3, #0
 8010004:	d004      	beq.n	8010010 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010006:	f002 fbff 	bl	8012808 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801000a:	e001      	b.n	8010010 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 801000c:	f002 fbfc 	bl	8012808 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010010:	bf00      	nop
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8010018:	b5b0      	push	{r4, r5, r7, lr}
 801001a:	b08e      	sub	sp, #56	; 0x38
 801001c:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801001e:	4b68      	ldr	r3, [pc, #416]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010020:	2200      	movs	r2, #0
 8010022:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010026:	4b66      	ldr	r3, [pc, #408]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010028:	2200      	movs	r2, #0
 801002a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 801002c:	4b65      	ldr	r3, [pc, #404]	; (80101c4 <ResetMacParameters+0x1ac>)
 801002e:	2200      	movs	r2, #0
 8010030:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8010034:	4b63      	ldr	r3, [pc, #396]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010036:	2201      	movs	r2, #1
 8010038:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 801003c:	4b61      	ldr	r3, [pc, #388]	; (80101c4 <ResetMacParameters+0x1ac>)
 801003e:	2201      	movs	r2, #1
 8010040:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8010044:	4b5f      	ldr	r3, [pc, #380]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010046:	2200      	movs	r2, #0
 8010048:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 801004c:	4b5c      	ldr	r3, [pc, #368]	; (80101c0 <ResetMacParameters+0x1a8>)
 801004e:	2200      	movs	r2, #0
 8010050:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010054:	4b5a      	ldr	r3, [pc, #360]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010056:	2201      	movs	r2, #1
 8010058:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801005c:	4b58      	ldr	r3, [pc, #352]	; (80101c0 <ResetMacParameters+0x1a8>)
 801005e:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8010062:	4b57      	ldr	r3, [pc, #348]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010068:	4b55      	ldr	r3, [pc, #340]	; (80101c0 <ResetMacParameters+0x1a8>)
 801006a:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 801006e:	4b54      	ldr	r3, [pc, #336]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010074:	4b52      	ldr	r3, [pc, #328]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010076:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 801007a:	4b51      	ldr	r3, [pc, #324]	; (80101c0 <ResetMacParameters+0x1a8>)
 801007c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010080:	4b4f      	ldr	r3, [pc, #316]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010082:	4a4f      	ldr	r2, [pc, #316]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010084:	3364      	adds	r3, #100	; 0x64
 8010086:	32a8      	adds	r2, #168	; 0xa8
 8010088:	e892 0003 	ldmia.w	r2, {r0, r1}
 801008c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010090:	4b4b      	ldr	r3, [pc, #300]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010092:	4a4b      	ldr	r2, [pc, #300]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010094:	336c      	adds	r3, #108	; 0x6c
 8010096:	32b0      	adds	r2, #176	; 0xb0
 8010098:	e892 0003 	ldmia.w	r2, {r0, r1}
 801009c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80100a0:	4b47      	ldr	r3, [pc, #284]	; (80101c0 <ResetMacParameters+0x1a8>)
 80100a2:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 80100a6:	4b46      	ldr	r3, [pc, #280]	; (80101c0 <ResetMacParameters+0x1a8>)
 80100a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80100ac:	4b44      	ldr	r3, [pc, #272]	; (80101c0 <ResetMacParameters+0x1a8>)
 80100ae:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 80100b2:	4b43      	ldr	r3, [pc, #268]	; (80101c0 <ResetMacParameters+0x1a8>)
 80100b4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80100b8:	4b41      	ldr	r3, [pc, #260]	; (80101c0 <ResetMacParameters+0x1a8>)
 80100ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80100be:	4a40      	ldr	r2, [pc, #256]	; (80101c0 <ResetMacParameters+0x1a8>)
 80100c0:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80100c2:	4b3f      	ldr	r3, [pc, #252]	; (80101c0 <ResetMacParameters+0x1a8>)
 80100c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80100c8:	4a3d      	ldr	r2, [pc, #244]	; (80101c0 <ResetMacParameters+0x1a8>)
 80100ca:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 80100cc:	4b3d      	ldr	r3, [pc, #244]	; (80101c4 <ResetMacParameters+0x1ac>)
 80100ce:	2200      	movs	r2, #0
 80100d0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 80100d4:	4b3a      	ldr	r3, [pc, #232]	; (80101c0 <ResetMacParameters+0x1a8>)
 80100d6:	2200      	movs	r2, #0
 80100d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80100dc:	2301      	movs	r3, #1
 80100de:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80100e0:	4b39      	ldr	r3, [pc, #228]	; (80101c8 <ResetMacParameters+0x1b0>)
 80100e2:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80100e4:	4b39      	ldr	r3, [pc, #228]	; (80101cc <ResetMacParameters+0x1b4>)
 80100e6:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80100e8:	4b35      	ldr	r3, [pc, #212]	; (80101c0 <ResetMacParameters+0x1a8>)
 80100ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100ee:	1d3a      	adds	r2, r7, #4
 80100f0:	4611      	mov	r1, r2
 80100f2:	4618      	mov	r0, r3
 80100f4:	f004 f8c1 	bl	801427a <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80100f8:	4b32      	ldr	r3, [pc, #200]	; (80101c4 <ResetMacParameters+0x1ac>)
 80100fa:	2200      	movs	r2, #0
 80100fc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010100:	4b30      	ldr	r3, [pc, #192]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010102:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010106:	4b2f      	ldr	r3, [pc, #188]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010108:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801010c:	4b2c      	ldr	r3, [pc, #176]	; (80101c0 <ResetMacParameters+0x1a8>)
 801010e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010110:	4a2c      	ldr	r2, [pc, #176]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010112:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010116:	4b2a      	ldr	r3, [pc, #168]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010118:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801011c:	4b29      	ldr	r3, [pc, #164]	; (80101c4 <ResetMacParameters+0x1ac>)
 801011e:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010122:	4b27      	ldr	r3, [pc, #156]	; (80101c0 <ResetMacParameters+0x1a8>)
 8010124:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010128:	4b26      	ldr	r3, [pc, #152]	; (80101c4 <ResetMacParameters+0x1ac>)
 801012a:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801012e:	4b25      	ldr	r3, [pc, #148]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010130:	2200      	movs	r2, #0
 8010132:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010136:	4b23      	ldr	r3, [pc, #140]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010138:	2201      	movs	r2, #1
 801013a:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801013e:	4a21      	ldr	r2, [pc, #132]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010140:	4b20      	ldr	r3, [pc, #128]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010142:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8010146:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801014a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801014c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801014e:	682b      	ldr	r3, [r5, #0]
 8010150:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010152:	4b1c      	ldr	r3, [pc, #112]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010154:	2201      	movs	r2, #1
 8010156:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801015a:	4b1a      	ldr	r3, [pc, #104]	; (80101c4 <ResetMacParameters+0x1ac>)
 801015c:	2202      	movs	r2, #2
 801015e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010162:	2300      	movs	r3, #0
 8010164:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8010166:	2300      	movs	r3, #0
 8010168:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 801016a:	4b16      	ldr	r3, [pc, #88]	; (80101c4 <ResetMacParameters+0x1ac>)
 801016c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010170:	2b00      	cmp	r3, #0
 8010172:	d009      	beq.n	8010188 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010174:	4b13      	ldr	r3, [pc, #76]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010176:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 801017e:	4b11      	ldr	r3, [pc, #68]	; (80101c4 <ResetMacParameters+0x1ac>)
 8010180:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010184:	691b      	ldr	r3, [r3, #16]
 8010186:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010188:	4b11      	ldr	r3, [pc, #68]	; (80101d0 <ResetMacParameters+0x1b8>)
 801018a:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801018c:	4b11      	ldr	r3, [pc, #68]	; (80101d4 <ResetMacParameters+0x1bc>)
 801018e:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010190:	4b11      	ldr	r3, [pc, #68]	; (80101d8 <ResetMacParameters+0x1c0>)
 8010192:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010194:	4b11      	ldr	r3, [pc, #68]	; (80101dc <ResetMacParameters+0x1c4>)
 8010196:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010198:	4b11      	ldr	r3, [pc, #68]	; (80101e0 <ResetMacParameters+0x1c8>)
 801019a:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 801019c:	4b11      	ldr	r3, [pc, #68]	; (80101e4 <ResetMacParameters+0x1cc>)
 801019e:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80101a0:	4b11      	ldr	r3, [pc, #68]	; (80101e8 <ResetMacParameters+0x1d0>)
 80101a2:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80101a4:	4b11      	ldr	r3, [pc, #68]	; (80101ec <ResetMacParameters+0x1d4>)
 80101a6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80101a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80101ac:	f107 0310 	add.w	r3, r7, #16
 80101b0:	4a0f      	ldr	r2, [pc, #60]	; (80101f0 <ResetMacParameters+0x1d8>)
 80101b2:	4618      	mov	r0, r3
 80101b4:	f002 f88a 	bl	80122cc <LoRaMacClassBInit>
}
 80101b8:	bf00      	nop
 80101ba:	3738      	adds	r7, #56	; 0x38
 80101bc:	46bd      	mov	sp, r7
 80101be:	bdb0      	pop	{r4, r5, r7, pc}
 80101c0:	20000b50 	.word	0x20000b50
 80101c4:	20000644 	.word	0x20000644
 80101c8:	20000d30 	.word	0x20000d30
 80101cc:	20000dc4 	.word	0x20000dc4
 80101d0:	20000aa4 	.word	0x20000aa4
 80101d4:	20000a60 	.word	0x20000a60
 80101d8:	20000a90 	.word	0x20000a90
 80101dc:	20000ac9 	.word	0x20000ac9
 80101e0:	20000c24 	.word	0x20000c24
 80101e4:	20000b90 	.word	0x20000b90
 80101e8:	20000b94 	.word	0x20000b94
 80101ec:	20000c28 	.word	0x20000c28
 80101f0:	20001260 	.word	0x20001260

080101f4 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f00a fc70 	bl	801aae4 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010204:	4b11      	ldr	r3, [pc, #68]	; (801024c <RxWindowSetup+0x58>)
 8010206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010208:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801020a:	4b11      	ldr	r3, [pc, #68]	; (8010250 <RxWindowSetup+0x5c>)
 801020c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010210:	4a10      	ldr	r2, [pc, #64]	; (8010254 <RxWindowSetup+0x60>)
 8010212:	6839      	ldr	r1, [r7, #0]
 8010214:	4618      	mov	r0, r3
 8010216:	f004 f898 	bl	801434a <RegionRxConfig>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d010      	beq.n	8010242 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010220:	4b0d      	ldr	r3, [pc, #52]	; (8010258 <RxWindowSetup+0x64>)
 8010222:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8010226:	4b0c      	ldr	r3, [pc, #48]	; (8010258 <RxWindowSetup+0x64>)
 8010228:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 801022c:	4b07      	ldr	r3, [pc, #28]	; (801024c <RxWindowSetup+0x58>)
 801022e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010230:	4a07      	ldr	r2, [pc, #28]	; (8010250 <RxWindowSetup+0x5c>)
 8010232:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010234:	4610      	mov	r0, r2
 8010236:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	7cda      	ldrb	r2, [r3, #19]
 801023c:	4b06      	ldr	r3, [pc, #24]	; (8010258 <RxWindowSetup+0x64>)
 801023e:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8010242:	bf00      	nop
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	0801c3ac 	.word	0x0801c3ac
 8010250:	20000b50 	.word	0x20000b50
 8010254:	20000a64 	.word	0x20000a64
 8010258:	20000644 	.word	0x20000644

0801025c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 801025c:	b590      	push	{r4, r7, lr}
 801025e:	b083      	sub	sp, #12
 8010260:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010262:	4b1b      	ldr	r3, [pc, #108]	; (80102d0 <OpenContinuousRxCWindow+0x74>)
 8010264:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010268:	4b19      	ldr	r3, [pc, #100]	; (80102d0 <OpenContinuousRxCWindow+0x74>)
 801026a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801026e:	b259      	sxtb	r1, r3
 8010270:	4b17      	ldr	r3, [pc, #92]	; (80102d0 <OpenContinuousRxCWindow+0x74>)
 8010272:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010276:	4b16      	ldr	r3, [pc, #88]	; (80102d0 <OpenContinuousRxCWindow+0x74>)
 8010278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801027a:	4c16      	ldr	r4, [pc, #88]	; (80102d4 <OpenContinuousRxCWindow+0x78>)
 801027c:	9400      	str	r4, [sp, #0]
 801027e:	f004 f84a 	bl	8014316 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010282:	4b15      	ldr	r3, [pc, #84]	; (80102d8 <OpenContinuousRxCWindow+0x7c>)
 8010284:	2202      	movs	r2, #2
 8010286:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801028a:	4b13      	ldr	r3, [pc, #76]	; (80102d8 <OpenContinuousRxCWindow+0x7c>)
 801028c:	2201      	movs	r2, #1
 801028e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010292:	4b0f      	ldr	r3, [pc, #60]	; (80102d0 <OpenContinuousRxCWindow+0x74>)
 8010294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010298:	4a10      	ldr	r2, [pc, #64]	; (80102dc <OpenContinuousRxCWindow+0x80>)
 801029a:	490e      	ldr	r1, [pc, #56]	; (80102d4 <OpenContinuousRxCWindow+0x78>)
 801029c:	4618      	mov	r0, r3
 801029e:	f004 f854 	bl	801434a <RegionRxConfig>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d00f      	beq.n	80102c8 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80102a8:	4b0b      	ldr	r3, [pc, #44]	; (80102d8 <OpenContinuousRxCWindow+0x7c>)
 80102aa:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 80102ae:	4b0a      	ldr	r3, [pc, #40]	; (80102d8 <OpenContinuousRxCWindow+0x7c>)
 80102b0:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 80102b4:	4b0a      	ldr	r3, [pc, #40]	; (80102e0 <OpenContinuousRxCWindow+0x84>)
 80102b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102b8:	2000      	movs	r0, #0
 80102ba:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80102bc:	4b06      	ldr	r3, [pc, #24]	; (80102d8 <OpenContinuousRxCWindow+0x7c>)
 80102be:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80102c2:	4b05      	ldr	r3, [pc, #20]	; (80102d8 <OpenContinuousRxCWindow+0x7c>)
 80102c4:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 80102c8:	bf00      	nop
 80102ca:	3704      	adds	r7, #4
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd90      	pop	{r4, r7, pc}
 80102d0:	20000b50 	.word	0x20000b50
 80102d4:	20000a24 	.word	0x20000a24
 80102d8:	20000644 	.word	0x20000644
 80102dc:	20000a64 	.word	0x20000a64
 80102e0:	0801c3ac 	.word	0x0801c3ac

080102e4 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b088      	sub	sp, #32
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	60f8      	str	r0, [r7, #12]
 80102ec:	60b9      	str	r1, [r7, #8]
 80102ee:	603b      	str	r3, [r7, #0]
 80102f0:	4613      	mov	r3, r2
 80102f2:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80102f4:	4b82      	ldr	r3, [pc, #520]	; (8010500 <PrepareFrame+0x21c>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80102fa:	4b81      	ldr	r3, [pc, #516]	; (8010500 <PrepareFrame+0x21c>)
 80102fc:	2200      	movs	r2, #0
 80102fe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8010302:	2300      	movs	r3, #0
 8010304:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010306:	2300      	movs	r3, #0
 8010308:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801030a:	2300      	movs	r3, #0
 801030c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d101      	bne.n	8010318 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010314:	2300      	movs	r3, #0
 8010316:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010318:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801031a:	461a      	mov	r2, r3
 801031c:	6839      	ldr	r1, [r7, #0]
 801031e:	4879      	ldr	r0, [pc, #484]	; (8010504 <PrepareFrame+0x220>)
 8010320:	f006 fa95 	bl	801684e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010324:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010326:	b2da      	uxtb	r2, r3
 8010328:	4b75      	ldr	r3, [pc, #468]	; (8010500 <PrepareFrame+0x21c>)
 801032a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	781a      	ldrb	r2, [r3, #0]
 8010332:	4b73      	ldr	r3, [pc, #460]	; (8010500 <PrepareFrame+0x21c>)
 8010334:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	781b      	ldrb	r3, [r3, #0]
 801033a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801033e:	b2db      	uxtb	r3, r3
 8010340:	2b07      	cmp	r3, #7
 8010342:	f000 80b9 	beq.w	80104b8 <PrepareFrame+0x1d4>
 8010346:	2b07      	cmp	r3, #7
 8010348:	f300 80d0 	bgt.w	80104ec <PrepareFrame+0x208>
 801034c:	2b02      	cmp	r3, #2
 801034e:	d006      	beq.n	801035e <PrepareFrame+0x7a>
 8010350:	2b04      	cmp	r3, #4
 8010352:	f040 80cb 	bne.w	80104ec <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010356:	4b6a      	ldr	r3, [pc, #424]	; (8010500 <PrepareFrame+0x21c>)
 8010358:	2201      	movs	r2, #1
 801035a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801035e:	4b68      	ldr	r3, [pc, #416]	; (8010500 <PrepareFrame+0x21c>)
 8010360:	2204      	movs	r2, #4
 8010362:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010366:	4b66      	ldr	r3, [pc, #408]	; (8010500 <PrepareFrame+0x21c>)
 8010368:	4a67      	ldr	r2, [pc, #412]	; (8010508 <PrepareFrame+0x224>)
 801036a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801036e:	4b64      	ldr	r3, [pc, #400]	; (8010500 <PrepareFrame+0x21c>)
 8010370:	22ff      	movs	r2, #255	; 0xff
 8010372:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	781a      	ldrb	r2, [r3, #0]
 801037a:	4b61      	ldr	r3, [pc, #388]	; (8010500 <PrepareFrame+0x21c>)
 801037c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010380:	4a5f      	ldr	r2, [pc, #380]	; (8010500 <PrepareFrame+0x21c>)
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010388:	4b60      	ldr	r3, [pc, #384]	; (801050c <PrepareFrame+0x228>)
 801038a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801038e:	4a5c      	ldr	r2, [pc, #368]	; (8010500 <PrepareFrame+0x21c>)
 8010390:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	781a      	ldrb	r2, [r3, #0]
 8010398:	4b59      	ldr	r3, [pc, #356]	; (8010500 <PrepareFrame+0x21c>)
 801039a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801039e:	4b58      	ldr	r3, [pc, #352]	; (8010500 <PrepareFrame+0x21c>)
 80103a0:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80103a4:	4b56      	ldr	r3, [pc, #344]	; (8010500 <PrepareFrame+0x21c>)
 80103a6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80103aa:	4b55      	ldr	r3, [pc, #340]	; (8010500 <PrepareFrame+0x21c>)
 80103ac:	4a55      	ldr	r2, [pc, #340]	; (8010504 <PrepareFrame+0x220>)
 80103ae:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80103b2:	f107 0318 	add.w	r3, r7, #24
 80103b6:	4618      	mov	r0, r3
 80103b8:	f003 f890 	bl	80134dc <LoRaMacCryptoGetFCntUp>
 80103bc:	4603      	mov	r3, r0
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d001      	beq.n	80103c6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80103c2:	2312      	movs	r3, #18
 80103c4:	e098      	b.n	80104f8 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80103c6:	69bb      	ldr	r3, [r7, #24]
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	4b4d      	ldr	r3, [pc, #308]	; (8010500 <PrepareFrame+0x21c>)
 80103cc:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80103d0:	4b4b      	ldr	r3, [pc, #300]	; (8010500 <PrepareFrame+0x21c>)
 80103d2:	2200      	movs	r2, #0
 80103d4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80103d8:	4b49      	ldr	r3, [pc, #292]	; (8010500 <PrepareFrame+0x21c>)
 80103da:	2200      	movs	r2, #0
 80103dc:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	4a47      	ldr	r2, [pc, #284]	; (8010500 <PrepareFrame+0x21c>)
 80103e4:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80103e8:	f107 0314 	add.w	r3, r7, #20
 80103ec:	4618      	mov	r0, r3
 80103ee:	f002 fa2d 	bl	801284c <LoRaMacCommandsGetSizeSerializedCmds>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d001      	beq.n	80103fc <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80103f8:	2313      	movs	r3, #19
 80103fa:	e07d      	b.n	80104f8 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d076      	beq.n	80104f0 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010402:	4b42      	ldr	r3, [pc, #264]	; (801050c <PrepareFrame+0x228>)
 8010404:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010408:	4618      	mov	r0, r3
 801040a:	f7fe fdb5 	bl	800ef78 <GetMaxAppPayloadWithoutFOptsLength>
 801040e:	4603      	mov	r3, r0
 8010410:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010412:	4b3b      	ldr	r3, [pc, #236]	; (8010500 <PrepareFrame+0x21c>)
 8010414:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010418:	2b00      	cmp	r3, #0
 801041a:	d01d      	beq.n	8010458 <PrepareFrame+0x174>
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	2b0f      	cmp	r3, #15
 8010420:	d81a      	bhi.n	8010458 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010422:	f107 0314 	add.w	r3, r7, #20
 8010426:	4a3a      	ldr	r2, [pc, #232]	; (8010510 <PrepareFrame+0x22c>)
 8010428:	4619      	mov	r1, r3
 801042a:	200f      	movs	r0, #15
 801042c:	f002 fa24 	bl	8012878 <LoRaMacCommandsSerializeCmds>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010436:	2313      	movs	r3, #19
 8010438:	e05e      	b.n	80104f8 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	f003 030f 	and.w	r3, r3, #15
 8010440:	b2d9      	uxtb	r1, r3
 8010442:	68ba      	ldr	r2, [r7, #8]
 8010444:	7813      	ldrb	r3, [r2, #0]
 8010446:	f361 0303 	bfi	r3, r1, #0, #4
 801044a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	781a      	ldrb	r2, [r3, #0]
 8010450:	4b2b      	ldr	r3, [pc, #172]	; (8010500 <PrepareFrame+0x21c>)
 8010452:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010456:	e04b      	b.n	80104f0 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010458:	4b29      	ldr	r3, [pc, #164]	; (8010500 <PrepareFrame+0x21c>)
 801045a:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801045e:	2b00      	cmp	r3, #0
 8010460:	d010      	beq.n	8010484 <PrepareFrame+0x1a0>
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	2b0f      	cmp	r3, #15
 8010466:	d90d      	bls.n	8010484 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010468:	7ffb      	ldrb	r3, [r7, #31]
 801046a:	f107 0114 	add.w	r1, r7, #20
 801046e:	4a29      	ldr	r2, [pc, #164]	; (8010514 <PrepareFrame+0x230>)
 8010470:	4618      	mov	r0, r3
 8010472:	f002 fa01 	bl	8012878 <LoRaMacCommandsSerializeCmds>
 8010476:	4603      	mov	r3, r0
 8010478:	2b00      	cmp	r3, #0
 801047a:	d001      	beq.n	8010480 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801047c:	2313      	movs	r3, #19
 801047e:	e03b      	b.n	80104f8 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010480:	230a      	movs	r3, #10
 8010482:	e039      	b.n	80104f8 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010484:	7ffb      	ldrb	r3, [r7, #31]
 8010486:	f107 0114 	add.w	r1, r7, #20
 801048a:	4a22      	ldr	r2, [pc, #136]	; (8010514 <PrepareFrame+0x230>)
 801048c:	4618      	mov	r0, r3
 801048e:	f002 f9f3 	bl	8012878 <LoRaMacCommandsSerializeCmds>
 8010492:	4603      	mov	r3, r0
 8010494:	2b00      	cmp	r3, #0
 8010496:	d001      	beq.n	801049c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010498:	2313      	movs	r3, #19
 801049a:	e02d      	b.n	80104f8 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801049c:	4b18      	ldr	r3, [pc, #96]	; (8010500 <PrepareFrame+0x21c>)
 801049e:	2200      	movs	r2, #0
 80104a0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80104a4:	4b16      	ldr	r3, [pc, #88]	; (8010500 <PrepareFrame+0x21c>)
 80104a6:	4a1b      	ldr	r2, [pc, #108]	; (8010514 <PrepareFrame+0x230>)
 80104a8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	b2da      	uxtb	r2, r3
 80104b0:	4b13      	ldr	r3, [pc, #76]	; (8010500 <PrepareFrame+0x21c>)
 80104b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80104b6:	e01b      	b.n	80104f0 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d01a      	beq.n	80104f4 <PrepareFrame+0x210>
 80104be:	4b10      	ldr	r3, [pc, #64]	; (8010500 <PrepareFrame+0x21c>)
 80104c0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d015      	beq.n	80104f4 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80104c8:	4813      	ldr	r0, [pc, #76]	; (8010518 <PrepareFrame+0x234>)
 80104ca:	4b0d      	ldr	r3, [pc, #52]	; (8010500 <PrepareFrame+0x21c>)
 80104cc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	461a      	mov	r2, r3
 80104d4:	6839      	ldr	r1, [r7, #0]
 80104d6:	f006 f9ba 	bl	801684e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80104da:	4b09      	ldr	r3, [pc, #36]	; (8010500 <PrepareFrame+0x21c>)
 80104dc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104e0:	b29b      	uxth	r3, r3
 80104e2:	3301      	adds	r3, #1
 80104e4:	b29a      	uxth	r2, r3
 80104e6:	4b06      	ldr	r3, [pc, #24]	; (8010500 <PrepareFrame+0x21c>)
 80104e8:	801a      	strh	r2, [r3, #0]
            }
            break;
 80104ea:	e003      	b.n	80104f4 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80104ec:	2302      	movs	r3, #2
 80104ee:	e003      	b.n	80104f8 <PrepareFrame+0x214>
            break;
 80104f0:	bf00      	nop
 80104f2:	e000      	b.n	80104f6 <PrepareFrame+0x212>
            break;
 80104f4:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80104f6:	2300      	movs	r3, #0
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3720      	adds	r7, #32
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	20000644 	.word	0x20000644
 8010504:	2000077c 	.word	0x2000077c
 8010508:	20000646 	.word	0x20000646
 801050c:	20000b50 	.word	0x20000b50
 8010510:	2000075c 	.word	0x2000075c
 8010514:	20000ad0 	.word	0x20000ad0
 8010518:	20000647 	.word	0x20000647

0801051c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b08a      	sub	sp, #40	; 0x28
 8010520:	af00      	add	r7, sp, #0
 8010522:	4603      	mov	r3, r0
 8010524:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010526:	2303      	movs	r3, #3
 8010528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 801052c:	2300      	movs	r3, #0
 801052e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010530:	79fb      	ldrb	r3, [r7, #7]
 8010532:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010534:	4b47      	ldr	r3, [pc, #284]	; (8010654 <SendFrameOnChannel+0x138>)
 8010536:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801053a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801053c:	4b45      	ldr	r3, [pc, #276]	; (8010654 <SendFrameOnChannel+0x138>)
 801053e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010542:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010544:	4b43      	ldr	r3, [pc, #268]	; (8010654 <SendFrameOnChannel+0x138>)
 8010546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010548:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801054a:	4b42      	ldr	r3, [pc, #264]	; (8010654 <SendFrameOnChannel+0x138>)
 801054c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801054e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010550:	4b41      	ldr	r3, [pc, #260]	; (8010658 <SendFrameOnChannel+0x13c>)
 8010552:	881b      	ldrh	r3, [r3, #0]
 8010554:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010556:	4b3f      	ldr	r3, [pc, #252]	; (8010654 <SendFrameOnChannel+0x138>)
 8010558:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801055c:	f107 020f 	add.w	r2, r7, #15
 8010560:	f107 0110 	add.w	r1, r7, #16
 8010564:	4b3d      	ldr	r3, [pc, #244]	; (801065c <SendFrameOnChannel+0x140>)
 8010566:	f003 ff05 	bl	8014374 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801056a:	4b3b      	ldr	r3, [pc, #236]	; (8010658 <SendFrameOnChannel+0x13c>)
 801056c:	2201      	movs	r2, #1
 801056e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010572:	4b38      	ldr	r3, [pc, #224]	; (8010654 <SendFrameOnChannel+0x138>)
 8010574:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010578:	b2da      	uxtb	r2, r3
 801057a:	4b37      	ldr	r3, [pc, #220]	; (8010658 <SendFrameOnChannel+0x13c>)
 801057c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8010580:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010584:	4b34      	ldr	r3, [pc, #208]	; (8010658 <SendFrameOnChannel+0x13c>)
 8010586:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 801058a:	79fb      	ldrb	r3, [r7, #7]
 801058c:	4a32      	ldr	r2, [pc, #200]	; (8010658 <SendFrameOnChannel+0x13c>)
 801058e:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010592:	4b31      	ldr	r3, [pc, #196]	; (8010658 <SendFrameOnChannel+0x13c>)
 8010594:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010598:	4a2f      	ldr	r2, [pc, #188]	; (8010658 <SendFrameOnChannel+0x13c>)
 801059a:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801059e:	4b2e      	ldr	r3, [pc, #184]	; (8010658 <SendFrameOnChannel+0x13c>)
 80105a0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105a4:	4a2c      	ldr	r2, [pc, #176]	; (8010658 <SendFrameOnChannel+0x13c>)
 80105a6:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80105aa:	f001 fefb 	bl	80123a4 <LoRaMacClassBIsBeaconModeActive>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d00b      	beq.n	80105cc <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80105b4:	4b28      	ldr	r3, [pc, #160]	; (8010658 <SendFrameOnChannel+0x13c>)
 80105b6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105ba:	4618      	mov	r0, r3
 80105bc:	f001 ff5d 	bl	801247a <LoRaMacClassBIsUplinkCollision>
 80105c0:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80105c2:	6a3b      	ldr	r3, [r7, #32]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d001      	beq.n	80105cc <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80105c8:	2310      	movs	r3, #16
 80105ca:	e03e      	b.n	801064a <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80105cc:	4b21      	ldr	r3, [pc, #132]	; (8010654 <SendFrameOnChannel+0x138>)
 80105ce:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d101      	bne.n	80105da <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80105d6:	f001 ff5a 	bl	801248e <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80105da:	f001 fef4 	bl	80123c6 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80105de:	4b1d      	ldr	r3, [pc, #116]	; (8010654 <SendFrameOnChannel+0x138>)
 80105e0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	4a1c      	ldr	r2, [pc, #112]	; (8010658 <SendFrameOnChannel+0x13c>)
 80105e8:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80105ec:	4611      	mov	r1, r2
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7ff fc7c 	bl	800feec <SecureFrame>
 80105f4:	4603      	mov	r3, r0
 80105f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80105fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d002      	beq.n	8010608 <SendFrameOnChannel+0xec>
    {
        return status;
 8010602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010606:	e020      	b.n	801064a <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010608:	4b13      	ldr	r3, [pc, #76]	; (8010658 <SendFrameOnChannel+0x13c>)
 801060a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801060e:	f043 0302 	orr.w	r3, r3, #2
 8010612:	4a11      	ldr	r2, [pc, #68]	; (8010658 <SendFrameOnChannel+0x13c>)
 8010614:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010618:	4b0f      	ldr	r3, [pc, #60]	; (8010658 <SendFrameOnChannel+0x13c>)
 801061a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801061e:	f083 0301 	eor.w	r3, r3, #1
 8010622:	b2db      	uxtb	r3, r3
 8010624:	2b00      	cmp	r3, #0
 8010626:	d007      	beq.n	8010638 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8010628:	4b0b      	ldr	r3, [pc, #44]	; (8010658 <SendFrameOnChannel+0x13c>)
 801062a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801062e:	3301      	adds	r3, #1
 8010630:	b2da      	uxtb	r2, r3
 8010632:	4b09      	ldr	r3, [pc, #36]	; (8010658 <SendFrameOnChannel+0x13c>)
 8010634:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010638:	4b09      	ldr	r3, [pc, #36]	; (8010660 <SendFrameOnChannel+0x144>)
 801063a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801063c:	4a06      	ldr	r2, [pc, #24]	; (8010658 <SendFrameOnChannel+0x13c>)
 801063e:	8812      	ldrh	r2, [r2, #0]
 8010640:	b2d2      	uxtb	r2, r2
 8010642:	4611      	mov	r1, r2
 8010644:	4807      	ldr	r0, [pc, #28]	; (8010664 <SendFrameOnChannel+0x148>)
 8010646:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010648:	2300      	movs	r3, #0
}
 801064a:	4618      	mov	r0, r3
 801064c:	3728      	adds	r7, #40	; 0x28
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}
 8010652:	bf00      	nop
 8010654:	20000b50 	.word	0x20000b50
 8010658:	20000644 	.word	0x20000644
 801065c:	20000a5c 	.word	0x20000a5c
 8010660:	0801c3ac 	.word	0x0801c3ac
 8010664:	20000646 	.word	0x20000646

08010668 <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b086      	sub	sp, #24
 801066c:	af00      	add	r7, sp, #0
 801066e:	4603      	mov	r3, r0
 8010670:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8010672:	4b15      	ldr	r3, [pc, #84]	; (80106c8 <SetTxContinuousWave+0x60>)
 8010674:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010678:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801067a:	4b14      	ldr	r3, [pc, #80]	; (80106cc <SetTxContinuousWave+0x64>)
 801067c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010680:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010682:	4b12      	ldr	r3, [pc, #72]	; (80106cc <SetTxContinuousWave+0x64>)
 8010684:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010688:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801068a:	4b10      	ldr	r3, [pc, #64]	; (80106cc <SetTxContinuousWave+0x64>)
 801068c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801068e:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010690:	4b0e      	ldr	r3, [pc, #56]	; (80106cc <SetTxContinuousWave+0x64>)
 8010692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010694:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8010696:	88fb      	ldrh	r3, [r7, #6]
 8010698:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 801069a:	4b0c      	ldr	r3, [pc, #48]	; (80106cc <SetTxContinuousWave+0x64>)
 801069c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106a0:	f107 0208 	add.w	r2, r7, #8
 80106a4:	4611      	mov	r1, r2
 80106a6:	4618      	mov	r0, r3
 80106a8:	f003 ff13 	bl	80144d2 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80106ac:	4b06      	ldr	r3, [pc, #24]	; (80106c8 <SetTxContinuousWave+0x60>)
 80106ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106b2:	f043 0302 	orr.w	r3, r3, #2
 80106b6:	4a04      	ldr	r2, [pc, #16]	; (80106c8 <SetTxContinuousWave+0x60>)
 80106b8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80106bc:	2300      	movs	r3, #0
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3718      	adds	r7, #24
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	20000644 	.word	0x20000644
 80106cc:	20000b50 	.word	0x20000b50

080106d0 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	4603      	mov	r3, r0
 80106d8:	6039      	str	r1, [r7, #0]
 80106da:	80fb      	strh	r3, [r7, #6]
 80106dc:	4613      	mov	r3, r2
 80106de:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80106e0:	4b09      	ldr	r3, [pc, #36]	; (8010708 <SetTxContinuousWave1+0x38>)
 80106e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106e4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80106e8:	88fa      	ldrh	r2, [r7, #6]
 80106ea:	6838      	ldr	r0, [r7, #0]
 80106ec:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80106ee:	4b07      	ldr	r3, [pc, #28]	; (801070c <SetTxContinuousWave1+0x3c>)
 80106f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106f4:	f043 0302 	orr.w	r3, r3, #2
 80106f8:	4a04      	ldr	r2, [pc, #16]	; (801070c <SetTxContinuousWave1+0x3c>)
 80106fa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	3708      	adds	r7, #8
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	0801c3ac 	.word	0x0801c3ac
 801070c:	20000644 	.word	0x20000644

08010710 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8010716:	2300      	movs	r3, #0
 8010718:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801071a:	4b3e      	ldr	r3, [pc, #248]	; (8010814 <RestoreNvmData+0x104>)
 801071c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010720:	2b01      	cmp	r3, #1
 8010722:	d001      	beq.n	8010728 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010724:	2301      	movs	r3, #1
 8010726:	e071      	b.n	801080c <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010728:	2124      	movs	r1, #36	; 0x24
 801072a:	483b      	ldr	r0, [pc, #236]	; (8010818 <RestoreNvmData+0x108>)
 801072c:	f006 f8e4 	bl	80168f8 <Crc32>
 8010730:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8010732:	4b39      	ldr	r3, [pc, #228]	; (8010818 <RestoreNvmData+0x108>)
 8010734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	429a      	cmp	r2, r3
 801073a:	d001      	beq.n	8010740 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801073c:	2317      	movs	r3, #23
 801073e:	e065      	b.n	801080c <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8010740:	2114      	movs	r1, #20
 8010742:	4836      	ldr	r0, [pc, #216]	; (801081c <RestoreNvmData+0x10c>)
 8010744:	f006 f8d8 	bl	80168f8 <Crc32>
 8010748:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 801074a:	4b33      	ldr	r3, [pc, #204]	; (8010818 <RestoreNvmData+0x108>)
 801074c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801074e:	687a      	ldr	r2, [r7, #4]
 8010750:	429a      	cmp	r2, r3
 8010752:	d001      	beq.n	8010758 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010754:	2317      	movs	r3, #23
 8010756:	e059      	b.n	801080c <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8010758:	21dc      	movs	r1, #220	; 0xdc
 801075a:	4831      	ldr	r0, [pc, #196]	; (8010820 <RestoreNvmData+0x110>)
 801075c:	f006 f8cc 	bl	80168f8 <Crc32>
 8010760:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8010762:	4b2d      	ldr	r3, [pc, #180]	; (8010818 <RestoreNvmData+0x108>)
 8010764:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	429a      	cmp	r2, r3
 801076c:	d001      	beq.n	8010772 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801076e:	2317      	movs	r3, #23
 8010770:	e04c      	b.n	801080c <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8010772:	21bc      	movs	r1, #188	; 0xbc
 8010774:	482b      	ldr	r0, [pc, #172]	; (8010824 <RestoreNvmData+0x114>)
 8010776:	f006 f8bf 	bl	80168f8 <Crc32>
 801077a:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 801077c:	4b26      	ldr	r3, [pc, #152]	; (8010818 <RestoreNvmData+0x108>)
 801077e:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	429a      	cmp	r2, r3
 8010786:	d001      	beq.n	801078c <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010788:	2317      	movs	r3, #23
 801078a:	e03f      	b.n	801080c <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 801078c:	2190      	movs	r1, #144	; 0x90
 801078e:	4826      	ldr	r0, [pc, #152]	; (8010828 <RestoreNvmData+0x118>)
 8010790:	f006 f8b2 	bl	80168f8 <Crc32>
 8010794:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8010796:	4b20      	ldr	r3, [pc, #128]	; (8010818 <RestoreNvmData+0x108>)
 8010798:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d001      	beq.n	80107a6 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80107a2:	2317      	movs	r3, #23
 80107a4:	e032      	b.n	801080c <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80107a6:	2114      	movs	r1, #20
 80107a8:	4820      	ldr	r0, [pc, #128]	; (801082c <RestoreNvmData+0x11c>)
 80107aa:	f006 f8a5 	bl	80168f8 <Crc32>
 80107ae:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80107b0:	4b19      	ldr	r3, [pc, #100]	; (8010818 <RestoreNvmData+0x108>)
 80107b2:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d001      	beq.n	80107c0 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80107bc:	2317      	movs	r3, #23
 80107be:	e025      	b.n	801080c <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80107c0:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80107c4:	4914      	ldr	r1, [pc, #80]	; (8010818 <RestoreNvmData+0x108>)
 80107c6:	481a      	ldr	r0, [pc, #104]	; (8010830 <RestoreNvmData+0x120>)
 80107c8:	f006 f841 	bl	801684e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80107cc:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80107d0:	2100      	movs	r1, #0
 80107d2:	4811      	ldr	r0, [pc, #68]	; (8010818 <RestoreNvmData+0x108>)
 80107d4:	f006 f876 	bl	80168c4 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80107d8:	4b0e      	ldr	r3, [pc, #56]	; (8010814 <RestoreNvmData+0x104>)
 80107da:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80107de:	4b0d      	ldr	r3, [pc, #52]	; (8010814 <RestoreNvmData+0x104>)
 80107e0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80107e4:	4b12      	ldr	r3, [pc, #72]	; (8010830 <RestoreNvmData+0x120>)
 80107e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e8:	4a0a      	ldr	r2, [pc, #40]	; (8010814 <RestoreNvmData+0x104>)
 80107ea:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80107ee:	4b10      	ldr	r3, [pc, #64]	; (8010830 <RestoreNvmData+0x120>)
 80107f0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80107f4:	4b07      	ldr	r3, [pc, #28]	; (8010814 <RestoreNvmData+0x104>)
 80107f6:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80107fa:	4b06      	ldr	r3, [pc, #24]	; (8010814 <RestoreNvmData+0x104>)
 80107fc:	2201      	movs	r2, #1
 80107fe:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010802:	4b04      	ldr	r3, [pc, #16]	; (8010814 <RestoreNvmData+0x104>)
 8010804:	2202      	movs	r2, #2
 8010806:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 801080a:	2300      	movs	r3, #0
}
 801080c:	4618      	mov	r0, r3
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}
 8010814:	20000644 	.word	0x20000644
 8010818:	20001278 	.word	0x20001278
 801081c:	200012a0 	.word	0x200012a0
 8010820:	200012b8 	.word	0x200012b8
 8010824:	20001398 	.word	0x20001398
 8010828:	20001458 	.word	0x20001458
 801082c:	20001988 	.word	0x20001988
 8010830:	20000b50 	.word	0x20000b50

08010834 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d002      	beq.n	801084a <DetermineFrameType+0x16>
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d101      	bne.n	801084e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801084a:	2303      	movs	r3, #3
 801084c:	e03b      	b.n	80108c6 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	7b1b      	ldrb	r3, [r3, #12]
 8010852:	f003 030f 	and.w	r3, r3, #15
 8010856:	b2db      	uxtb	r3, r3
 8010858:	2b00      	cmp	r3, #0
 801085a:	d008      	beq.n	801086e <DetermineFrameType+0x3a>
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d003      	beq.n	801086e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	2200      	movs	r2, #0
 801086a:	701a      	strb	r2, [r3, #0]
 801086c:	e02a      	b.n	80108c4 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010874:	2b00      	cmp	r3, #0
 8010876:	d103      	bne.n	8010880 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	2201      	movs	r2, #1
 801087c:	701a      	strb	r2, [r3, #0]
 801087e:	e021      	b.n	80108c4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	7b1b      	ldrb	r3, [r3, #12]
 8010884:	f003 030f 	and.w	r3, r3, #15
 8010888:	b2db      	uxtb	r3, r3
 801088a:	2b00      	cmp	r3, #0
 801088c:	d108      	bne.n	80108a0 <DetermineFrameType+0x6c>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d103      	bne.n	80108a0 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	2202      	movs	r2, #2
 801089c:	701a      	strb	r2, [r3, #0]
 801089e:	e011      	b.n	80108c4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	7b1b      	ldrb	r3, [r3, #12]
 80108a4:	f003 030f 	and.w	r3, r3, #15
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d108      	bne.n	80108c0 <DetermineFrameType+0x8c>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d003      	beq.n	80108c0 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	2203      	movs	r2, #3
 80108bc:	701a      	strb	r2, [r3, #0]
 80108be:	e001      	b.n	80108c4 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80108c0:	2318      	movs	r3, #24
 80108c2:	e000      	b.n	80108c6 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80108c4:	2300      	movs	r3, #0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	370c      	adds	r7, #12
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bc80      	pop	{r7}
 80108ce:	4770      	bx	lr

080108d0 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 80108d0:	b480      	push	{r7}
 80108d2:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80108d4:	4b12      	ldr	r3, [pc, #72]	; (8010920 <CheckRetransUnconfirmedUplink+0x50>)
 80108d6:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80108da:	4b12      	ldr	r3, [pc, #72]	; (8010924 <CheckRetransUnconfirmedUplink+0x54>)
 80108dc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d301      	bcc.n	80108e8 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 80108e4:	2301      	movs	r3, #1
 80108e6:	e016      	b.n	8010916 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80108e8:	4b0d      	ldr	r3, [pc, #52]	; (8010920 <CheckRetransUnconfirmedUplink+0x50>)
 80108ea:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80108ee:	f003 0302 	and.w	r3, r3, #2
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00d      	beq.n	8010914 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80108f8:	4b0a      	ldr	r3, [pc, #40]	; (8010924 <CheckRetransUnconfirmedUplink+0x54>)
 80108fa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d101      	bne.n	8010906 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8010902:	2301      	movs	r3, #1
 8010904:	e007      	b.n	8010916 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010906:	4b06      	ldr	r3, [pc, #24]	; (8010920 <CheckRetransUnconfirmedUplink+0x50>)
 8010908:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801090c:	2b00      	cmp	r3, #0
 801090e:	d101      	bne.n	8010914 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8010910:	2301      	movs	r3, #1
 8010912:	e000      	b.n	8010916 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8010914:	2300      	movs	r3, #0
}
 8010916:	4618      	mov	r0, r3
 8010918:	46bd      	mov	sp, r7
 801091a:	bc80      	pop	{r7}
 801091c:	4770      	bx	lr
 801091e:	bf00      	nop
 8010920:	20000644 	.word	0x20000644
 8010924:	20000b50 	.word	0x20000b50

08010928 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010928:	b480      	push	{r7}
 801092a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 801092c:	4b0e      	ldr	r3, [pc, #56]	; (8010968 <CheckRetransConfirmedUplink+0x40>)
 801092e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8010932:	4b0d      	ldr	r3, [pc, #52]	; (8010968 <CheckRetransConfirmedUplink+0x40>)
 8010934:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010938:	429a      	cmp	r2, r3
 801093a:	d301      	bcc.n	8010940 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 801093c:	2301      	movs	r3, #1
 801093e:	e00f      	b.n	8010960 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010940:	4b09      	ldr	r3, [pc, #36]	; (8010968 <CheckRetransConfirmedUplink+0x40>)
 8010942:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010946:	f003 0302 	and.w	r3, r3, #2
 801094a:	b2db      	uxtb	r3, r3
 801094c:	2b00      	cmp	r3, #0
 801094e:	d006      	beq.n	801095e <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010950:	4b05      	ldr	r3, [pc, #20]	; (8010968 <CheckRetransConfirmedUplink+0x40>)
 8010952:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010956:	2b00      	cmp	r3, #0
 8010958:	d001      	beq.n	801095e <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 801095a:	2301      	movs	r3, #1
 801095c:	e000      	b.n	8010960 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 801095e:	2300      	movs	r3, #0
}
 8010960:	4618      	mov	r0, r3
 8010962:	46bd      	mov	sp, r7
 8010964:	bc80      	pop	{r7}
 8010966:	4770      	bx	lr
 8010968:	20000644 	.word	0x20000644

0801096c <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 801096c:	b480      	push	{r7}
 801096e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010970:	4b1a      	ldr	r3, [pc, #104]	; (80109dc <StopRetransmission+0x70>)
 8010972:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010976:	f003 0302 	and.w	r3, r3, #2
 801097a:	b2db      	uxtb	r3, r3
 801097c:	2b00      	cmp	r3, #0
 801097e:	d009      	beq.n	8010994 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010980:	4b16      	ldr	r3, [pc, #88]	; (80109dc <StopRetransmission+0x70>)
 8010982:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00e      	beq.n	80109a8 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801098a:	4b14      	ldr	r3, [pc, #80]	; (80109dc <StopRetransmission+0x70>)
 801098c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010990:	2b01      	cmp	r3, #1
 8010992:	d009      	beq.n	80109a8 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010994:	4b12      	ldr	r3, [pc, #72]	; (80109e0 <StopRetransmission+0x74>)
 8010996:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801099a:	2b00      	cmp	r3, #0
 801099c:	d004      	beq.n	80109a8 <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 801099e:	4b10      	ldr	r3, [pc, #64]	; (80109e0 <StopRetransmission+0x74>)
 80109a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109a2:	3301      	adds	r3, #1
 80109a4:	4a0e      	ldr	r2, [pc, #56]	; (80109e0 <StopRetransmission+0x74>)
 80109a6:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80109a8:	4b0c      	ldr	r3, [pc, #48]	; (80109dc <StopRetransmission+0x70>)
 80109aa:	2200      	movs	r2, #0
 80109ac:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 80109b0:	4b0a      	ldr	r3, [pc, #40]	; (80109dc <StopRetransmission+0x70>)
 80109b2:	2200      	movs	r2, #0
 80109b4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 80109b8:	4b08      	ldr	r3, [pc, #32]	; (80109dc <StopRetransmission+0x70>)
 80109ba:	2200      	movs	r2, #0
 80109bc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80109c0:	4b06      	ldr	r3, [pc, #24]	; (80109dc <StopRetransmission+0x70>)
 80109c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80109c6:	f023 0302 	bic.w	r3, r3, #2
 80109ca:	4a04      	ldr	r2, [pc, #16]	; (80109dc <StopRetransmission+0x70>)
 80109cc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80109d0:	2301      	movs	r3, #1
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bc80      	pop	{r7}
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	20000644 	.word	0x20000644
 80109e0:	20000b50 	.word	0x20000b50

080109e4 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	4603      	mov	r3, r0
 80109ec:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80109ee:	4b0b      	ldr	r3, [pc, #44]	; (8010a1c <CallNvmDataChangeCallback+0x38>)
 80109f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d00c      	beq.n	8010a12 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80109f8:	4b08      	ldr	r3, [pc, #32]	; (8010a1c <CallNvmDataChangeCallback+0x38>)
 80109fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80109fe:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d006      	beq.n	8010a12 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010a04:	4b05      	ldr	r3, [pc, #20]	; (8010a1c <CallNvmDataChangeCallback+0x38>)
 8010a06:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	88fa      	ldrh	r2, [r7, #6]
 8010a0e:	4610      	mov	r0, r2
 8010a10:	4798      	blx	r3
    }
}
 8010a12:	bf00      	nop
 8010a14:	3708      	adds	r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	20000644 	.word	0x20000644

08010a20 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010a26:	4b1b      	ldr	r3, [pc, #108]	; (8010a94 <AckTimeoutRetriesProcess+0x74>)
 8010a28:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010a2c:	4b19      	ldr	r3, [pc, #100]	; (8010a94 <AckTimeoutRetriesProcess+0x74>)
 8010a2e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d229      	bcs.n	8010a8a <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010a36:	4b17      	ldr	r3, [pc, #92]	; (8010a94 <AckTimeoutRetriesProcess+0x74>)
 8010a38:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	b2da      	uxtb	r2, r3
 8010a40:	4b14      	ldr	r3, [pc, #80]	; (8010a94 <AckTimeoutRetriesProcess+0x74>)
 8010a42:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010a46:	4b13      	ldr	r3, [pc, #76]	; (8010a94 <AckTimeoutRetriesProcess+0x74>)
 8010a48:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010a4c:	f003 0301 	and.w	r3, r3, #1
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d019      	beq.n	8010a8a <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010a56:	2322      	movs	r3, #34	; 0x22
 8010a58:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010a5a:	4b0f      	ldr	r3, [pc, #60]	; (8010a98 <AckTimeoutRetriesProcess+0x78>)
 8010a5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010a60:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010a62:	4b0d      	ldr	r3, [pc, #52]	; (8010a98 <AckTimeoutRetriesProcess+0x78>)
 8010a64:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010a68:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a6a:	4b0b      	ldr	r3, [pc, #44]	; (8010a98 <AckTimeoutRetriesProcess+0x78>)
 8010a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a70:	f107 0208 	add.w	r2, r7, #8
 8010a74:	4611      	mov	r1, r2
 8010a76:	4618      	mov	r0, r3
 8010a78:	f003 fbd6 	bl	8014228 <RegionGetPhyParam>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	b25a      	sxtb	r2, r3
 8010a84:	4b04      	ldr	r3, [pc, #16]	; (8010a98 <AckTimeoutRetriesProcess+0x78>)
 8010a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8010a8a:	bf00      	nop
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop
 8010a94:	20000644 	.word	0x20000644
 8010a98:	20000b50 	.word	0x20000b50

08010a9c <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8010aa2:	4b14      	ldr	r3, [pc, #80]	; (8010af4 <AckTimeoutRetriesFinalize+0x58>)
 8010aa4:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010aa8:	f083 0301 	eor.w	r3, r3, #1
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d015      	beq.n	8010ade <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010ab2:	2302      	movs	r3, #2
 8010ab4:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010ab6:	4b10      	ldr	r3, [pc, #64]	; (8010af8 <AckTimeoutRetriesFinalize+0x5c>)
 8010ab8:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8010aba:	4b10      	ldr	r3, [pc, #64]	; (8010afc <AckTimeoutRetriesFinalize+0x60>)
 8010abc:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010abe:	4b10      	ldr	r3, [pc, #64]	; (8010b00 <AckTimeoutRetriesFinalize+0x64>)
 8010ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ac4:	1d3a      	adds	r2, r7, #4
 8010ac6:	4611      	mov	r1, r2
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f003 fbd6 	bl	801427a <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8010ace:	4b09      	ldr	r3, [pc, #36]	; (8010af4 <AckTimeoutRetriesFinalize+0x58>)
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8010ad6:	4b07      	ldr	r3, [pc, #28]	; (8010af4 <AckTimeoutRetriesFinalize+0x58>)
 8010ad8:	2200      	movs	r2, #0
 8010ada:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010ade:	4b05      	ldr	r3, [pc, #20]	; (8010af4 <AckTimeoutRetriesFinalize+0x58>)
 8010ae0:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010ae4:	4b03      	ldr	r3, [pc, #12]	; (8010af4 <AckTimeoutRetriesFinalize+0x58>)
 8010ae6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8010aea:	bf00      	nop
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	20000644 	.word	0x20000644
 8010af8:	20000d30 	.word	0x20000d30
 8010afc:	20000dc4 	.word	0x20000dc4
 8010b00:	20000b50 	.word	0x20000b50

08010b04 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010b04:	b480      	push	{r7}
 8010b06:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010b08:	4b0b      	ldr	r3, [pc, #44]	; (8010b38 <IsRequestPending+0x34>)
 8010b0a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010b0e:	f003 0304 	and.w	r3, r3, #4
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d107      	bne.n	8010b28 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010b18:	4b07      	ldr	r3, [pc, #28]	; (8010b38 <IsRequestPending+0x34>)
 8010b1a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010b1e:	f003 0301 	and.w	r3, r3, #1
 8010b22:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d001      	beq.n	8010b2c <IsRequestPending+0x28>
    {
        return 1;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	e000      	b.n	8010b2e <IsRequestPending+0x2a>
    }
    return 0;
 8010b2c:	2300      	movs	r3, #0
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bc80      	pop	{r7}
 8010b34:	4770      	bx	lr
 8010b36:	bf00      	nop
 8010b38:	20000644 	.word	0x20000644

08010b3c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010b3c:	b590      	push	{r4, r7, lr}
 8010b3e:	b08f      	sub	sp, #60	; 0x3c
 8010b40:	af02      	add	r7, sp, #8
 8010b42:	6178      	str	r0, [r7, #20]
 8010b44:	6139      	str	r1, [r7, #16]
 8010b46:	4613      	mov	r3, r2
 8010b48:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d002      	beq.n	8010b56 <LoRaMacInitialization+0x1a>
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d101      	bne.n	8010b5a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010b56:	2303      	movs	r3, #3
 8010b58:	e275      	b.n	8011046 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d00b      	beq.n	8010b7a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d007      	beq.n	8010b7a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d003      	beq.n	8010b7a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d101      	bne.n	8010b7e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010b7a:	2303      	movs	r3, #3
 8010b7c:	e263      	b.n	8011046 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010b7e:	7bfb      	ldrb	r3, [r7, #15]
 8010b80:	4618      	mov	r0, r3
 8010b82:	f003 fb41 	bl	8014208 <RegionIsActive>
 8010b86:	4603      	mov	r3, r0
 8010b88:	f083 0301 	eor.w	r3, r3, #1
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d001      	beq.n	8010b96 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010b92:	2309      	movs	r3, #9
 8010b94:	e257      	b.n	8011046 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010b96:	6978      	ldr	r0, [r7, #20]
 8010b98:	f001 ffb8 	bl	8012b0c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010b9c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	48c7      	ldr	r0, [pc, #796]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010ba4:	f005 fe8e 	bl	80168c4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010ba8:	f240 520c 	movw	r2, #1292	; 0x50c
 8010bac:	2100      	movs	r1, #0
 8010bae:	48c5      	ldr	r0, [pc, #788]	; (8010ec4 <LoRaMacInitialization+0x388>)
 8010bb0:	f005 fe88 	bl	80168c4 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010bb4:	4bc3      	ldr	r3, [pc, #780]	; (8010ec4 <LoRaMacInitialization+0x388>)
 8010bb6:	2201      	movs	r2, #1
 8010bb8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8010bbc:	4bc1      	ldr	r3, [pc, #772]	; (8010ec4 <LoRaMacInitialization+0x388>)
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010bc4:	4abe      	ldr	r2, [pc, #760]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010bc6:	7bfb      	ldrb	r3, [r7, #15]
 8010bc8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010bcc:	4bbc      	ldr	r3, [pc, #752]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010bce:	2200      	movs	r2, #0
 8010bd0:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010bd4:	4bba      	ldr	r3, [pc, #744]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010bdc:	4bb8      	ldr	r3, [pc, #736]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010bde:	4aba      	ldr	r2, [pc, #744]	; (8010ec8 <LoRaMacInitialization+0x38c>)
 8010be0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010be4:	230f      	movs	r3, #15
 8010be6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bea:	4bb5      	ldr	r3, [pc, #724]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bf0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010bf4:	4611      	mov	r1, r2
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f003 fb16 	bl	8014228 <RegionGetPhyParam>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	bf14      	ite	ne
 8010c06:	2301      	movne	r3, #1
 8010c08:	2300      	moveq	r3, #0
 8010c0a:	b2da      	uxtb	r2, r3
 8010c0c:	4bac      	ldr	r3, [pc, #688]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010c0e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010c12:	230a      	movs	r3, #10
 8010c14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c18:	4ba9      	ldr	r3, [pc, #676]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c22:	4611      	mov	r1, r2
 8010c24:	4618      	mov	r0, r3
 8010c26:	f003 faff 	bl	8014228 <RegionGetPhyParam>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c30:	b25a      	sxtb	r2, r3
 8010c32:	4ba3      	ldr	r3, [pc, #652]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010c34:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010c38:	2306      	movs	r3, #6
 8010c3a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c3e:	4ba0      	ldr	r3, [pc, #640]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c44:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c48:	4611      	mov	r1, r2
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f003 faec 	bl	8014228 <RegionGetPhyParam>
 8010c50:	4603      	mov	r3, r0
 8010c52:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c56:	b25a      	sxtb	r2, r3
 8010c58:	4b99      	ldr	r3, [pc, #612]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010c5a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010c5e:	2310      	movs	r3, #16
 8010c60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c64:	4b96      	ldr	r3, [pc, #600]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c6e:	4611      	mov	r1, r2
 8010c70:	4618      	mov	r0, r3
 8010c72:	f003 fad9 	bl	8014228 <RegionGetPhyParam>
 8010c76:	4603      	mov	r3, r0
 8010c78:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7c:	4a90      	ldr	r2, [pc, #576]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010c82:	2311      	movs	r3, #17
 8010c84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c88:	4b8d      	ldr	r3, [pc, #564]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c92:	4611      	mov	r1, r2
 8010c94:	4618      	mov	r0, r3
 8010c96:	f003 fac7 	bl	8014228 <RegionGetPhyParam>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca0:	4a87      	ldr	r2, [pc, #540]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010ca6:	2312      	movs	r3, #18
 8010ca8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cac:	4b84      	ldr	r3, [pc, #528]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cb6:	4611      	mov	r1, r2
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f003 fab5 	bl	8014228 <RegionGetPhyParam>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc4:	4a7e      	ldr	r2, [pc, #504]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010cc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010cca:	2313      	movs	r3, #19
 8010ccc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cd0:	4b7b      	ldr	r3, [pc, #492]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cda:	4611      	mov	r1, r2
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f003 faa3 	bl	8014228 <RegionGetPhyParam>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce8:	4a75      	ldr	r2, [pc, #468]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010cea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010cee:	2314      	movs	r3, #20
 8010cf0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cf4:	4b72      	ldr	r3, [pc, #456]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cfe:	4611      	mov	r1, r2
 8010d00:	4618      	mov	r0, r3
 8010d02:	f003 fa91 	bl	8014228 <RegionGetPhyParam>
 8010d06:	4603      	mov	r3, r0
 8010d08:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0c:	4a6c      	ldr	r2, [pc, #432]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010d0e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010d12:	2317      	movs	r3, #23
 8010d14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d18:	4b69      	ldr	r3, [pc, #420]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d22:	4611      	mov	r1, r2
 8010d24:	4618      	mov	r0, r3
 8010d26:	f003 fa7f 	bl	8014228 <RegionGetPhyParam>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d30:	b2da      	uxtb	r2, r3
 8010d32:	4b63      	ldr	r3, [pc, #396]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010d34:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010d38:	2318      	movs	r3, #24
 8010d3a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d3e:	4b60      	ldr	r3, [pc, #384]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d44:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d48:	4611      	mov	r1, r2
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f003 fa6c 	bl	8014228 <RegionGetPhyParam>
 8010d50:	4603      	mov	r3, r0
 8010d52:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d56:	4a5a      	ldr	r2, [pc, #360]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010d58:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5e:	4a58      	ldr	r2, [pc, #352]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010d60:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010d64:	2319      	movs	r3, #25
 8010d66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d6a:	4b55      	ldr	r3, [pc, #340]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d70:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d74:	4611      	mov	r1, r2
 8010d76:	4618      	mov	r0, r3
 8010d78:	f003 fa56 	bl	8014228 <RegionGetPhyParam>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d82:	b2da      	uxtb	r2, r3
 8010d84:	4b4e      	ldr	r3, [pc, #312]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010d86:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	b2da      	uxtb	r2, r3
 8010d8e:	4b4c      	ldr	r3, [pc, #304]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010d90:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010d94:	231e      	movs	r3, #30
 8010d96:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d9a:	4b49      	ldr	r3, [pc, #292]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010da0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010da4:	4611      	mov	r1, r2
 8010da6:	4618      	mov	r0, r3
 8010da8:	f003 fa3e 	bl	8014228 <RegionGetPhyParam>
 8010dac:	4603      	mov	r3, r0
 8010dae:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db2:	b2da      	uxtb	r2, r3
 8010db4:	4b42      	ldr	r3, [pc, #264]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010db6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010dba:	231f      	movs	r3, #31
 8010dbc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dc0:	4b3f      	ldr	r3, [pc, #252]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010dca:	4611      	mov	r1, r2
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f003 fa2b 	bl	8014228 <RegionGetPhyParam>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd8:	b2da      	uxtb	r2, r3
 8010dda:	4b39      	ldr	r3, [pc, #228]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010ddc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010de0:	2320      	movs	r3, #32
 8010de2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010de6:	4b36      	ldr	r3, [pc, #216]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010df0:	4611      	mov	r1, r2
 8010df2:	4618      	mov	r0, r3
 8010df4:	f003 fa18 	bl	8014228 <RegionGetPhyParam>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfe:	4a30      	ldr	r2, [pc, #192]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e00:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010e04:	2321      	movs	r3, #33	; 0x21
 8010e06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e0a:	4b2d      	ldr	r3, [pc, #180]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e14:	4611      	mov	r1, r2
 8010e16:	4618      	mov	r0, r3
 8010e18:	f003 fa06 	bl	8014228 <RegionGetPhyParam>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e22:	4a27      	ldr	r2, [pc, #156]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e24:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010e28:	230b      	movs	r3, #11
 8010e2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e2e:	4b24      	ldr	r3, [pc, #144]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e38:	4611      	mov	r1, r2
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f003 f9f4 	bl	8014228 <RegionGetPhyParam>
 8010e40:	4603      	mov	r3, r0
 8010e42:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	4b1e      	ldr	r3, [pc, #120]	; (8010ec4 <LoRaMacInitialization+0x388>)
 8010e4a:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010e4e:	230c      	movs	r3, #12
 8010e50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e54:	4b1a      	ldr	r3, [pc, #104]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e5e:	4611      	mov	r1, r2
 8010e60:	4618      	mov	r0, r3
 8010e62:	f003 f9e1 	bl	8014228 <RegionGetPhyParam>
 8010e66:	4603      	mov	r3, r0
 8010e68:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6c:	b29a      	uxth	r2, r3
 8010e6e:	4b15      	ldr	r3, [pc, #84]	; (8010ec4 <LoRaMacInitialization+0x388>)
 8010e70:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010e74:	4b12      	ldr	r3, [pc, #72]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e76:	2201      	movs	r2, #1
 8010e78:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010e7c:	4b10      	ldr	r3, [pc, #64]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e7e:	220a      	movs	r2, #10
 8010e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010e84:	4b0e      	ldr	r3, [pc, #56]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e86:	2206      	movs	r2, #6
 8010e88:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010e8c:	4b0c      	ldr	r3, [pc, #48]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e92:	4a0b      	ldr	r2, [pc, #44]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e94:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010e96:	4b0a      	ldr	r3, [pc, #40]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e98:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010e9c:	4b08      	ldr	r3, [pc, #32]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010e9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010ea2:	4b07      	ldr	r3, [pc, #28]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ea8:	4a05      	ldr	r2, [pc, #20]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010eac:	4b04      	ldr	r3, [pc, #16]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010eb2:	4a03      	ldr	r2, [pc, #12]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010eb4:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010eb6:	4b02      	ldr	r3, [pc, #8]	; (8010ec0 <LoRaMacInitialization+0x384>)
 8010eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010ebc:	e006      	b.n	8010ecc <LoRaMacInitialization+0x390>
 8010ebe:	bf00      	nop
 8010ec0:	20000b50 	.word	0x20000b50
 8010ec4:	20000644 	.word	0x20000644
 8010ec8:	01000300 	.word	0x01000300
 8010ecc:	4a60      	ldr	r2, [pc, #384]	; (8011050 <LoRaMacInitialization+0x514>)
 8010ece:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010ed0:	4b5f      	ldr	r3, [pc, #380]	; (8011050 <LoRaMacInitialization+0x514>)
 8010ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010ed6:	4a5e      	ldr	r2, [pc, #376]	; (8011050 <LoRaMacInitialization+0x514>)
 8010ed8:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010eda:	4b5d      	ldr	r3, [pc, #372]	; (8011050 <LoRaMacInitialization+0x514>)
 8010edc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010ee0:	4a5b      	ldr	r2, [pc, #364]	; (8011050 <LoRaMacInitialization+0x514>)
 8010ee2:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010ee4:	4b5a      	ldr	r3, [pc, #360]	; (8011050 <LoRaMacInitialization+0x514>)
 8010ee6:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8010eea:	4b59      	ldr	r3, [pc, #356]	; (8011050 <LoRaMacInitialization+0x514>)
 8010eec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010ef6:	4b57      	ldr	r3, [pc, #348]	; (8011054 <LoRaMacInitialization+0x518>)
 8010ef8:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010efa:	4b57      	ldr	r3, [pc, #348]	; (8011058 <LoRaMacInitialization+0x51c>)
 8010efc:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010efe:	4b54      	ldr	r3, [pc, #336]	; (8011050 <LoRaMacInitialization+0x514>)
 8010f00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f04:	f107 0218 	add.w	r2, r7, #24
 8010f08:	4611      	mov	r1, r2
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f003 f9b5 	bl	801427a <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8010f10:	4a52      	ldr	r2, [pc, #328]	; (801105c <LoRaMacInitialization+0x520>)
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010f18:	f7ff f87e 	bl	8010018 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010f1c:	4b4c      	ldr	r3, [pc, #304]	; (8011050 <LoRaMacInitialization+0x514>)
 8010f1e:	2201      	movs	r2, #1
 8010f20:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8010f24:	4a4d      	ldr	r2, [pc, #308]	; (801105c <LoRaMacInitialization+0x520>)
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010f2c:	4b4b      	ldr	r3, [pc, #300]	; (801105c <LoRaMacInitialization+0x520>)
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8010f34:	4b49      	ldr	r3, [pc, #292]	; (801105c <LoRaMacInitialization+0x520>)
 8010f36:	2201      	movs	r2, #1
 8010f38:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010f3c:	4b44      	ldr	r3, [pc, #272]	; (8011050 <LoRaMacInitialization+0x514>)
 8010f3e:	2200      	movs	r2, #0
 8010f40:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010f42:	4b43      	ldr	r3, [pc, #268]	; (8011050 <LoRaMacInitialization+0x514>)
 8010f44:	2200      	movs	r2, #0
 8010f46:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010f48:	2300      	movs	r3, #0
 8010f4a:	9300      	str	r3, [sp, #0]
 8010f4c:	4b44      	ldr	r3, [pc, #272]	; (8011060 <LoRaMacInitialization+0x524>)
 8010f4e:	2200      	movs	r2, #0
 8010f50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f54:	4843      	ldr	r0, [pc, #268]	; (8011064 <LoRaMacInitialization+0x528>)
 8010f56:	f009 fd21 	bl	801a99c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	9300      	str	r3, [sp, #0]
 8010f5e:	4b42      	ldr	r3, [pc, #264]	; (8011068 <LoRaMacInitialization+0x52c>)
 8010f60:	2200      	movs	r2, #0
 8010f62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f66:	4841      	ldr	r0, [pc, #260]	; (801106c <LoRaMacInitialization+0x530>)
 8010f68:	f009 fd18 	bl	801a99c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	4b3f      	ldr	r3, [pc, #252]	; (8011070 <LoRaMacInitialization+0x534>)
 8010f72:	2200      	movs	r2, #0
 8010f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f78:	483e      	ldr	r0, [pc, #248]	; (8011074 <LoRaMacInitialization+0x538>)
 8010f7a:	f009 fd0f 	bl	801a99c <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010f7e:	2300      	movs	r3, #0
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	4b3d      	ldr	r3, [pc, #244]	; (8011078 <LoRaMacInitialization+0x53c>)
 8010f84:	2200      	movs	r2, #0
 8010f86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f8a:	483c      	ldr	r0, [pc, #240]	; (801107c <LoRaMacInitialization+0x540>)
 8010f8c:	f009 fd06 	bl	801a99c <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010f90:	4c2f      	ldr	r4, [pc, #188]	; (8011050 <LoRaMacInitialization+0x514>)
 8010f92:	463b      	mov	r3, r7
 8010f94:	4618      	mov	r0, r3
 8010f96:	f009 f871 	bl	801a07c <SysTimeGetMcuTime>
 8010f9a:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8010f9e:	463a      	mov	r2, r7
 8010fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fa4:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010fa8:	4b2c      	ldr	r3, [pc, #176]	; (801105c <LoRaMacInitialization+0x520>)
 8010faa:	4a35      	ldr	r2, [pc, #212]	; (8011080 <LoRaMacInitialization+0x544>)
 8010fac:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010fb0:	4b2a      	ldr	r3, [pc, #168]	; (801105c <LoRaMacInitialization+0x520>)
 8010fb2:	4a34      	ldr	r2, [pc, #208]	; (8011084 <LoRaMacInitialization+0x548>)
 8010fb4:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010fb8:	4b28      	ldr	r3, [pc, #160]	; (801105c <LoRaMacInitialization+0x520>)
 8010fba:	4a33      	ldr	r2, [pc, #204]	; (8011088 <LoRaMacInitialization+0x54c>)
 8010fbc:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010fc0:	4b26      	ldr	r3, [pc, #152]	; (801105c <LoRaMacInitialization+0x520>)
 8010fc2:	4a32      	ldr	r2, [pc, #200]	; (801108c <LoRaMacInitialization+0x550>)
 8010fc4:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010fc8:	4b24      	ldr	r3, [pc, #144]	; (801105c <LoRaMacInitialization+0x520>)
 8010fca:	4a31      	ldr	r2, [pc, #196]	; (8011090 <LoRaMacInitialization+0x554>)
 8010fcc:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010fd0:	4b30      	ldr	r3, [pc, #192]	; (8011094 <LoRaMacInitialization+0x558>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	4830      	ldr	r0, [pc, #192]	; (8011098 <LoRaMacInitialization+0x55c>)
 8010fd6:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	689b      	ldr	r3, [r3, #8]
 8010fdc:	4619      	mov	r1, r3
 8010fde:	482f      	ldr	r0, [pc, #188]	; (801109c <LoRaMacInitialization+0x560>)
 8010fe0:	f7fa fe04 	bl	800bbec <SecureElementInit>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d001      	beq.n	8010fee <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010fea:	2311      	movs	r3, #17
 8010fec:	e02b      	b.n	8011046 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010fee:	4818      	ldr	r0, [pc, #96]	; (8011050 <LoRaMacInitialization+0x514>)
 8010ff0:	f002 fa38 	bl	8013464 <LoRaMacCryptoInit>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d001      	beq.n	8010ffe <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010ffa:	2311      	movs	r3, #17
 8010ffc:	e023      	b.n	8011046 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010ffe:	f001 fb57 	bl	80126b0 <LoRaMacCommandsInit>
 8011002:	4603      	mov	r3, r0
 8011004:	2b00      	cmp	r3, #0
 8011006:	d001      	beq.n	801100c <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011008:	2313      	movs	r3, #19
 801100a:	e01c      	b.n	8011046 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801100c:	4824      	ldr	r0, [pc, #144]	; (80110a0 <LoRaMacInitialization+0x564>)
 801100e:	f002 faf3 	bl	80135f8 <LoRaMacCryptoSetMulticastReference>
 8011012:	4603      	mov	r3, r0
 8011014:	2b00      	cmp	r3, #0
 8011016:	d001      	beq.n	801101c <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011018:	2311      	movs	r3, #17
 801101a:	e014      	b.n	8011046 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801101c:	4b1d      	ldr	r3, [pc, #116]	; (8011094 <LoRaMacInitialization+0x558>)
 801101e:	695b      	ldr	r3, [r3, #20]
 8011020:	4798      	blx	r3
 8011022:	4603      	mov	r3, r0
 8011024:	4618      	mov	r0, r3
 8011026:	f005 fbed 	bl	8016804 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801102a:	4b1a      	ldr	r3, [pc, #104]	; (8011094 <LoRaMacInitialization+0x558>)
 801102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801102e:	4a08      	ldr	r2, [pc, #32]	; (8011050 <LoRaMacInitialization+0x514>)
 8011030:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8011034:	4610      	mov	r0, r2
 8011036:	4798      	blx	r3
    Radio.Sleep( );
 8011038:	4b16      	ldr	r3, [pc, #88]	; (8011094 <LoRaMacInitialization+0x558>)
 801103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801103c:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801103e:	2001      	movs	r0, #1
 8011040:	f7fd faf2 	bl	800e628 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011044:	2300      	movs	r3, #0
}
 8011046:	4618      	mov	r0, r3
 8011048:	3734      	adds	r7, #52	; 0x34
 801104a:	46bd      	mov	sp, r7
 801104c:	bd90      	pop	{r4, r7, pc}
 801104e:	bf00      	nop
 8011050:	20000b50 	.word	0x20000b50
 8011054:	20000d30 	.word	0x20000d30
 8011058:	20000dc4 	.word	0x20000dc4
 801105c:	20000644 	.word	0x20000644
 8011060:	0800eb95 	.word	0x0800eb95
 8011064:	200009ac 	.word	0x200009ac
 8011068:	0800ec09 	.word	0x0800ec09
 801106c:	200009c4 	.word	0x200009c4
 8011070:	0800ec75 	.word	0x0800ec75
 8011074:	200009dc 	.word	0x200009dc
 8011078:	0800ece9 	.word	0x0800ece9
 801107c:	20000a3c 	.word	0x20000a3c
 8011080:	0800d7a5 	.word	0x0800d7a5
 8011084:	0800d81d 	.word	0x0800d81d
 8011088:	0800d8f5 	.word	0x0800d8f5
 801108c:	0800d8a9 	.word	0x0800d8a9
 8011090:	0800d931 	.word	0x0800d931
 8011094:	0801c3ac 	.word	0x0801c3ac
 8011098:	20000990 	.word	0x20000990
 801109c:	20000c70 	.word	0x20000c70
 80110a0:	20000c28 	.word	0x20000c28

080110a4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80110a4:	b480      	push	{r7}
 80110a6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80110a8:	4b04      	ldr	r3, [pc, #16]	; (80110bc <LoRaMacStart+0x18>)
 80110aa:	2200      	movs	r2, #0
 80110ac:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 80110b0:	2300      	movs	r3, #0
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bc80      	pop	{r7}
 80110b8:	4770      	bx	lr
 80110ba:	bf00      	nop
 80110bc:	20000644 	.word	0x20000644

080110c0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80110c4:	f7fd fa9a 	bl	800e5fc <LoRaMacIsBusy>
 80110c8:	4603      	mov	r3, r0
 80110ca:	f083 0301 	eor.w	r3, r3, #1
 80110ce:	b2db      	uxtb	r3, r3
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d005      	beq.n	80110e0 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 80110d4:	4b07      	ldr	r3, [pc, #28]	; (80110f4 <LoRaMacStop+0x34>)
 80110d6:	2201      	movs	r2, #1
 80110d8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 80110dc:	2300      	movs	r3, #0
 80110de:	e007      	b.n	80110f0 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80110e0:	4b04      	ldr	r3, [pc, #16]	; (80110f4 <LoRaMacStop+0x34>)
 80110e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d101      	bne.n	80110ee <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 80110ea:	2300      	movs	r3, #0
 80110ec:	e000      	b.n	80110f0 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80110ee:	2301      	movs	r3, #1
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	20000644 	.word	0x20000644

080110f8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80110fc:	4812      	ldr	r0, [pc, #72]	; (8011148 <LoRaMacHalt+0x50>)
 80110fe:	f009 fcf1 	bl	801aae4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8011102:	4812      	ldr	r0, [pc, #72]	; (801114c <LoRaMacHalt+0x54>)
 8011104:	f009 fcee 	bl	801aae4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011108:	4811      	ldr	r0, [pc, #68]	; (8011150 <LoRaMacHalt+0x58>)
 801110a:	f009 fceb 	bl	801aae4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 801110e:	4811      	ldr	r0, [pc, #68]	; (8011154 <LoRaMacHalt+0x5c>)
 8011110:	f009 fce8 	bl	801aae4 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011114:	f001 f957 	bl	80123c6 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011118:	4b0f      	ldr	r3, [pc, #60]	; (8011158 <LoRaMacHalt+0x60>)
 801111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801111c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801111e:	4b0f      	ldr	r3, [pc, #60]	; (801115c <LoRaMacHalt+0x64>)
 8011120:	2200      	movs	r2, #0
 8011122:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8011126:	480e      	ldr	r0, [pc, #56]	; (8011160 <LoRaMacHalt+0x68>)
 8011128:	f7fd fc2e 	bl	800e988 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 801112c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8011130:	490b      	ldr	r1, [pc, #44]	; (8011160 <LoRaMacHalt+0x68>)
 8011132:	480c      	ldr	r0, [pc, #48]	; (8011164 <LoRaMacHalt+0x6c>)
 8011134:	f005 fb8b 	bl	801684e <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8011138:	4b08      	ldr	r3, [pc, #32]	; (801115c <LoRaMacHalt+0x64>)
 801113a:	2201      	movs	r2, #1
 801113c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011140:	2300      	movs	r3, #0
}
 8011142:	4618      	mov	r0, r3
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	200009ac 	.word	0x200009ac
 801114c:	200009c4 	.word	0x200009c4
 8011150:	200009dc 	.word	0x200009dc
 8011154:	20000a3c 	.word	0x20000a3c
 8011158:	0801c3ac 	.word	0x0801c3ac
 801115c:	20000644 	.word	0x20000644
 8011160:	20000b50 	.word	0x20000b50
 8011164:	20001278 	.word	0x20001278

08011168 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b08a      	sub	sp, #40	; 0x28
 801116c:	af00      	add	r7, sp, #0
 801116e:	4603      	mov	r3, r0
 8011170:	6039      	str	r1, [r7, #0]
 8011172:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011174:	4b3e      	ldr	r3, [pc, #248]	; (8011270 <LoRaMacQueryTxPossible+0x108>)
 8011176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011178:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801117a:	4b3d      	ldr	r3, [pc, #244]	; (8011270 <LoRaMacQueryTxPossible+0x108>)
 801117c:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8011180:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011182:	4b3b      	ldr	r3, [pc, #236]	; (8011270 <LoRaMacQueryTxPossible+0x108>)
 8011184:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8011188:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801118a:	2300      	movs	r3, #0
 801118c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d101      	bne.n	8011198 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011194:	2303      	movs	r3, #3
 8011196:	e066      	b.n	8011266 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8011198:	4b35      	ldr	r3, [pc, #212]	; (8011270 <LoRaMacQueryTxPossible+0x108>)
 801119a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801119e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80111a0:	2300      	movs	r3, #0
 80111a2:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80111a4:	4b32      	ldr	r3, [pc, #200]	; (8011270 <LoRaMacQueryTxPossible+0x108>)
 80111a6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80111aa:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80111ac:	4b30      	ldr	r3, [pc, #192]	; (8011270 <LoRaMacQueryTxPossible+0x108>)
 80111ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111b0:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80111b2:	4b30      	ldr	r3, [pc, #192]	; (8011274 <LoRaMacQueryTxPossible+0x10c>)
 80111b4:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 80111b8:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80111ba:	4b2e      	ldr	r3, [pc, #184]	; (8011274 <LoRaMacQueryTxPossible+0x10c>)
 80111bc:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80111c0:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80111c2:	4b2b      	ldr	r3, [pc, #172]	; (8011270 <LoRaMacQueryTxPossible+0x108>)
 80111c4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80111c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80111cc:	4b28      	ldr	r3, [pc, #160]	; (8011270 <LoRaMacQueryTxPossible+0x108>)
 80111ce:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80111d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80111d6:	4b26      	ldr	r3, [pc, #152]	; (8011270 <LoRaMacQueryTxPossible+0x108>)
 80111d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80111dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80111e0:	4b23      	ldr	r3, [pc, #140]	; (8011270 <LoRaMacQueryTxPossible+0x108>)
 80111e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80111ea:	f107 0310 	add.w	r3, r7, #16
 80111ee:	f107 020e 	add.w	r2, r7, #14
 80111f2:	f107 010f 	add.w	r1, r7, #15
 80111f6:	f107 0014 	add.w	r0, r7, #20
 80111fa:	f001 f84f 	bl	801229c <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80111fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011202:	4618      	mov	r0, r3
 8011204:	f7fd feb8 	bl	800ef78 <GetMaxAppPayloadWithoutFOptsLength>
 8011208:	4603      	mov	r3, r0
 801120a:	461a      	mov	r2, r3
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011210:	f107 0308 	add.w	r3, r7, #8
 8011214:	4618      	mov	r0, r3
 8011216:	f001 fb19 	bl	801284c <LoRaMacCommandsGetSizeSerializedCmds>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	d001      	beq.n	8011224 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011220:	2313      	movs	r3, #19
 8011222:	e020      	b.n	8011266 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	2b0f      	cmp	r3, #15
 8011228:	d819      	bhi.n	801125e <LoRaMacQueryTxPossible+0xf6>
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	785b      	ldrb	r3, [r3, #1]
 801122e:	461a      	mov	r2, r3
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	429a      	cmp	r2, r3
 8011234:	d313      	bcc.n	801125e <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	785a      	ldrb	r2, [r3, #1]
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	b2db      	uxtb	r3, r3
 801123e:	1ad3      	subs	r3, r2, r3
 8011240:	b2da      	uxtb	r2, r3
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	785b      	ldrb	r3, [r3, #1]
 801124a:	4619      	mov	r1, r3
 801124c:	79fa      	ldrb	r2, [r7, #7]
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	4413      	add	r3, r2
 8011252:	4299      	cmp	r1, r3
 8011254:	d301      	bcc.n	801125a <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8011256:	2300      	movs	r3, #0
 8011258:	e005      	b.n	8011266 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801125a:	2308      	movs	r3, #8
 801125c:	e003      	b.n	8011266 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	2200      	movs	r2, #0
 8011262:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011264:	2308      	movs	r3, #8
    }
}
 8011266:	4618      	mov	r0, r3
 8011268:	3728      	adds	r7, #40	; 0x28
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	20000b50 	.word	0x20000b50
 8011274:	20000644 	.word	0x20000644

08011278 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011278:	b590      	push	{r4, r7, lr}
 801127a:	b087      	sub	sp, #28
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011280:	2300      	movs	r3, #0
 8011282:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d101      	bne.n	801128e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801128a:	2303      	movs	r3, #3
 801128c:	e171      	b.n	8011572 <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	781b      	ldrb	r3, [r3, #0]
 8011292:	2b37      	cmp	r3, #55	; 0x37
 8011294:	f200 8166 	bhi.w	8011564 <LoRaMacMibGetRequestConfirm+0x2ec>
 8011298:	a201      	add	r2, pc, #4	; (adr r2, 80112a0 <LoRaMacMibGetRequestConfirm+0x28>)
 801129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801129e:	bf00      	nop
 80112a0:	08011381 	.word	0x08011381
 80112a4:	0801138d 	.word	0x0801138d
 80112a8:	08011399 	.word	0x08011399
 80112ac:	080113a5 	.word	0x080113a5
 80112b0:	080113b1 	.word	0x080113b1
 80112b4:	080113bd 	.word	0x080113bd
 80112b8:	080113c9 	.word	0x080113c9
 80112bc:	08011565 	.word	0x08011565
 80112c0:	08011565 	.word	0x08011565
 80112c4:	08011565 	.word	0x08011565
 80112c8:	08011565 	.word	0x08011565
 80112cc:	08011565 	.word	0x08011565
 80112d0:	08011565 	.word	0x08011565
 80112d4:	08011565 	.word	0x08011565
 80112d8:	08011565 	.word	0x08011565
 80112dc:	080113d5 	.word	0x080113d5
 80112e0:	080113e1 	.word	0x080113e1
 80112e4:	080113ed 	.word	0x080113ed
 80112e8:	0801140f 	.word	0x0801140f
 80112ec:	08011421 	.word	0x08011421
 80112f0:	08011433 	.word	0x08011433
 80112f4:	08011445 	.word	0x08011445
 80112f8:	08011479 	.word	0x08011479
 80112fc:	08011457 	.word	0x08011457
 8011300:	0801149b 	.word	0x0801149b
 8011304:	080114a7 	.word	0x080114a7
 8011308:	080114b1 	.word	0x080114b1
 801130c:	080114bb 	.word	0x080114bb
 8011310:	080114c5 	.word	0x080114c5
 8011314:	080114cf 	.word	0x080114cf
 8011318:	080114d9 	.word	0x080114d9
 801131c:	080114e5 	.word	0x080114e5
 8011320:	080114fd 	.word	0x080114fd
 8011324:	080114f1 	.word	0x080114f1
 8011328:	08011509 	.word	0x08011509
 801132c:	08011513 	.word	0x08011513
 8011330:	0801151f 	.word	0x0801151f
 8011334:	08011539 	.word	0x08011539
 8011338:	08011529 	.word	0x08011529
 801133c:	08011531 	.word	0x08011531
 8011340:	08011565 	.word	0x08011565
 8011344:	08011545 	.word	0x08011545
 8011348:	08011565 	.word	0x08011565
 801134c:	08011565 	.word	0x08011565
 8011350:	08011565 	.word	0x08011565
 8011354:	08011565 	.word	0x08011565
 8011358:	08011565 	.word	0x08011565
 801135c:	08011565 	.word	0x08011565
 8011360:	08011565 	.word	0x08011565
 8011364:	08011565 	.word	0x08011565
 8011368:	08011565 	.word	0x08011565
 801136c:	08011565 	.word	0x08011565
 8011370:	08011565 	.word	0x08011565
 8011374:	08011565 	.word	0x08011565
 8011378:	08011565 	.word	0x08011565
 801137c:	08011559 	.word	0x08011559
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011380:	4b7e      	ldr	r3, [pc, #504]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 8011382:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	711a      	strb	r2, [r3, #4]
            break;
 801138a:	e0f1      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801138c:	4b7b      	ldr	r3, [pc, #492]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 801138e:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	711a      	strb	r2, [r3, #4]
            break;
 8011396:	e0eb      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011398:	f7fa ff14 	bl	800c1c4 <SecureElementGetDevEui>
 801139c:	4602      	mov	r2, r0
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	605a      	str	r2, [r3, #4]
            break;
 80113a2:	e0e5      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80113a4:	f7fa ff30 	bl	800c208 <SecureElementGetJoinEui>
 80113a8:	4602      	mov	r2, r0
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	605a      	str	r2, [r3, #4]
            break;
 80113ae:	e0df      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80113b0:	4b72      	ldr	r3, [pc, #456]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80113b2:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	711a      	strb	r2, [r3, #4]
            break;
 80113ba:	e0d9      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80113bc:	4b6f      	ldr	r3, [pc, #444]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80113be:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	605a      	str	r2, [r3, #4]
            break;
 80113c6:	e0d3      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80113c8:	4b6c      	ldr	r3, [pc, #432]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80113ca:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	605a      	str	r2, [r3, #4]
            break;
 80113d2:	e0cd      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80113d4:	4b69      	ldr	r3, [pc, #420]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80113d6:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	711a      	strb	r2, [r3, #4]
            break;
 80113de:	e0c7      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80113e0:	4b66      	ldr	r3, [pc, #408]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80113e2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	711a      	strb	r2, [r3, #4]
            break;
 80113ea:	e0c1      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80113ec:	231d      	movs	r3, #29
 80113ee:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113f0:	4b62      	ldr	r3, [pc, #392]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80113f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113f6:	f107 0210 	add.w	r2, r7, #16
 80113fa:	4611      	mov	r1, r2
 80113fc:	4618      	mov	r0, r3
 80113fe:	f002 ff13 	bl	8014228 <RegionGetPhyParam>
 8011402:	4603      	mov	r3, r0
 8011404:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011406:	68fa      	ldr	r2, [r7, #12]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	605a      	str	r2, [r3, #4]
            break;
 801140c:	e0b0      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	4a5a      	ldr	r2, [pc, #360]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 8011412:	3304      	adds	r3, #4
 8011414:	3264      	adds	r2, #100	; 0x64
 8011416:	e892 0003 	ldmia.w	r2, {r0, r1}
 801141a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801141e:	e0a7      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	4a56      	ldr	r2, [pc, #344]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 8011424:	3304      	adds	r3, #4
 8011426:	32a8      	adds	r2, #168	; 0xa8
 8011428:	e892 0003 	ldmia.w	r2, {r0, r1}
 801142c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011430:	e09e      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	4a51      	ldr	r2, [pc, #324]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 8011436:	3304      	adds	r3, #4
 8011438:	326c      	adds	r2, #108	; 0x6c
 801143a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801143e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011442:	e095      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	4a4d      	ldr	r2, [pc, #308]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 8011448:	3304      	adds	r3, #4
 801144a:	32b0      	adds	r2, #176	; 0xb0
 801144c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011450:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011454:	e08c      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011456:	231b      	movs	r3, #27
 8011458:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801145a:	4b48      	ldr	r3, [pc, #288]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 801145c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011460:	f107 0210 	add.w	r2, r7, #16
 8011464:	4611      	mov	r1, r2
 8011466:	4618      	mov	r0, r3
 8011468:	f002 fede 	bl	8014228 <RegionGetPhyParam>
 801146c:	4603      	mov	r3, r0
 801146e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011470:	68fa      	ldr	r2, [r7, #12]
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	605a      	str	r2, [r3, #4]
            break;
 8011476:	e07b      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011478:	231a      	movs	r3, #26
 801147a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801147c:	4b3f      	ldr	r3, [pc, #252]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 801147e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011482:	f107 0210 	add.w	r2, r7, #16
 8011486:	4611      	mov	r1, r2
 8011488:	4618      	mov	r0, r3
 801148a:	f002 fecd 	bl	8014228 <RegionGetPhyParam>
 801148e:	4603      	mov	r3, r0
 8011490:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011492:	68fa      	ldr	r2, [r7, #12]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	605a      	str	r2, [r3, #4]
            break;
 8011498:	e06a      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801149a:	4b38      	ldr	r3, [pc, #224]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 801149c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	711a      	strb	r2, [r3, #4]
            break;
 80114a4:	e064      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80114a6:	4b35      	ldr	r3, [pc, #212]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80114a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	605a      	str	r2, [r3, #4]
            break;
 80114ae:	e05f      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80114b0:	4b32      	ldr	r3, [pc, #200]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80114b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	605a      	str	r2, [r3, #4]
            break;
 80114b8:	e05a      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80114ba:	4b30      	ldr	r3, [pc, #192]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80114bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	605a      	str	r2, [r3, #4]
            break;
 80114c2:	e055      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80114c4:	4b2d      	ldr	r3, [pc, #180]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80114c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	605a      	str	r2, [r3, #4]
            break;
 80114cc:	e050      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80114ce:	4b2b      	ldr	r3, [pc, #172]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80114d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	605a      	str	r2, [r3, #4]
            break;
 80114d6:	e04b      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80114d8:	4b28      	ldr	r3, [pc, #160]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80114da:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	711a      	strb	r2, [r3, #4]
            break;
 80114e2:	e045      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80114e4:	4b25      	ldr	r3, [pc, #148]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80114e6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	711a      	strb	r2, [r3, #4]
            break;
 80114ee:	e03f      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80114f0:	4b22      	ldr	r3, [pc, #136]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80114f2:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	711a      	strb	r2, [r3, #4]
            break;
 80114fa:	e039      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80114fc:	4b1f      	ldr	r3, [pc, #124]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 80114fe:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	711a      	strb	r2, [r3, #4]
            break;
 8011506:	e033      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011508:	4b1c      	ldr	r3, [pc, #112]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 801150a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	605a      	str	r2, [r3, #4]
            break;
 8011510:	e02e      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011512:	4b1a      	ldr	r3, [pc, #104]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 8011514:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	711a      	strb	r2, [r3, #4]
            break;
 801151c:	e028      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801151e:	4b17      	ldr	r3, [pc, #92]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 8011520:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	605a      	str	r2, [r3, #4]
            break;
 8011526:	e023      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	4a14      	ldr	r2, [pc, #80]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 801152c:	605a      	str	r2, [r3, #4]
            break;
 801152e:	e01f      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	4a13      	ldr	r2, [pc, #76]	; (8011580 <LoRaMacMibGetRequestConfirm+0x308>)
 8011534:	605a      	str	r2, [r3, #4]
            break;
 8011536:	e01b      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011538:	4b10      	ldr	r3, [pc, #64]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 801153a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	605a      	str	r2, [r3, #4]
            break;
 8011542:	e015      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	4a0d      	ldr	r2, [pc, #52]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 8011548:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 801154c:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801154e:	687c      	ldr	r4, [r7, #4]
 8011550:	f002 fff2 	bl	8014538 <RegionGetVersion>
 8011554:	60a0      	str	r0, [r4, #8]
            break;
 8011556:	e00b      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011558:	4b08      	ldr	r3, [pc, #32]	; (801157c <LoRaMacMibGetRequestConfirm+0x304>)
 801155a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	605a      	str	r2, [r3, #4]
            break;
 8011562:	e005      	b.n	8011570 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f000 ff45 	bl	80123f4 <LoRaMacClassBMibGetRequestConfirm>
 801156a:	4603      	mov	r3, r0
 801156c:	75fb      	strb	r3, [r7, #23]
            break;
 801156e:	bf00      	nop
        }
    }
    return status;
 8011570:	7dfb      	ldrb	r3, [r7, #23]
}
 8011572:	4618      	mov	r0, r3
 8011574:	371c      	adds	r7, #28
 8011576:	46bd      	mov	sp, r7
 8011578:	bd90      	pop	{r4, r7, pc}
 801157a:	bf00      	nop
 801157c:	20000b50 	.word	0x20000b50
 8011580:	20001278 	.word	0x20001278

08011584 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b086      	sub	sp, #24
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801158c:	2300      	movs	r3, #0
 801158e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d101      	bne.n	801159a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011596:	2303      	movs	r3, #3
 8011598:	e348      	b.n	8011c2c <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801159a:	4bb7      	ldr	r3, [pc, #732]	; (8011878 <LoRaMacMibSetRequestConfirm+0x2f4>)
 801159c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80115a0:	f003 0302 	and.w	r3, r3, #2
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d001      	beq.n	80115ac <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80115a8:	2301      	movs	r3, #1
 80115aa:	e33f      	b.n	8011c2c <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	781b      	ldrb	r3, [r3, #0]
 80115b0:	2b37      	cmp	r3, #55	; 0x37
 80115b2:	f200 8319 	bhi.w	8011be8 <LoRaMacMibSetRequestConfirm+0x664>
 80115b6:	a201      	add	r2, pc, #4	; (adr r2, 80115bc <LoRaMacMibSetRequestConfirm+0x38>)
 80115b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115bc:	0801169d 	.word	0x0801169d
 80115c0:	080116ad 	.word	0x080116ad
 80115c4:	080116c7 	.word	0x080116c7
 80115c8:	080116df 	.word	0x080116df
 80115cc:	080116f7 	.word	0x080116f7
 80115d0:	08011703 	.word	0x08011703
 80115d4:	0801170f 	.word	0x0801170f
 80115d8:	0801171b 	.word	0x0801171b
 80115dc:	08011741 	.word	0x08011741
 80115e0:	08011767 	.word	0x08011767
 80115e4:	0801178d 	.word	0x0801178d
 80115e8:	080117b3 	.word	0x080117b3
 80115ec:	080117d9 	.word	0x080117d9
 80115f0:	080117ff 	.word	0x080117ff
 80115f4:	08011825 	.word	0x08011825
 80115f8:	0801184b 	.word	0x0801184b
 80115fc:	0801186b 	.word	0x0801186b
 8011600:	08011be9 	.word	0x08011be9
 8011604:	08011885 	.word	0x08011885
 8011608:	080118f5 	.word	0x080118f5
 801160c:	08011935 	.word	0x08011935
 8011610:	08011997 	.word	0x08011997
 8011614:	08011a07 	.word	0x08011a07
 8011618:	080119d7 	.word	0x080119d7
 801161c:	08011a37 	.word	0x08011a37
 8011620:	08011a59 	.word	0x08011a59
 8011624:	08011a63 	.word	0x08011a63
 8011628:	08011a6d 	.word	0x08011a6d
 801162c:	08011a77 	.word	0x08011a77
 8011630:	08011a81 	.word	0x08011a81
 8011634:	08011a8b 	.word	0x08011a8b
 8011638:	08011abd 	.word	0x08011abd
 801163c:	08011b29 	.word	0x08011b29
 8011640:	08011af7 	.word	0x08011af7
 8011644:	08011b65 	.word	0x08011b65
 8011648:	08011b7b 	.word	0x08011b7b
 801164c:	08011b93 	.word	0x08011b93
 8011650:	08011b9d 	.word	0x08011b9d
 8011654:	08011ba9 	.word	0x08011ba9
 8011658:	08011be9 	.word	0x08011be9
 801165c:	08011bb3 	.word	0x08011bb3
 8011660:	08011be9 	.word	0x08011be9
 8011664:	08011be9 	.word	0x08011be9
 8011668:	08011be9 	.word	0x08011be9
 801166c:	08011be9 	.word	0x08011be9
 8011670:	08011be9 	.word	0x08011be9
 8011674:	08011be9 	.word	0x08011be9
 8011678:	08011be9 	.word	0x08011be9
 801167c:	08011be9 	.word	0x08011be9
 8011680:	08011be9 	.word	0x08011be9
 8011684:	08011be9 	.word	0x08011be9
 8011688:	08011be9 	.word	0x08011be9
 801168c:	08011be9 	.word	0x08011be9
 8011690:	08011be9 	.word	0x08011be9
 8011694:	08011be9 	.word	0x08011be9
 8011698:	08011bdd 	.word	0x08011bdd
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	791b      	ldrb	r3, [r3, #4]
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fd fb99 	bl	800edd8 <SwitchClass>
 80116a6:	4603      	mov	r3, r0
 80116a8:	75fb      	strb	r3, [r7, #23]
            break;
 80116aa:	e2be      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	791b      	ldrb	r3, [r3, #4]
 80116b0:	2b02      	cmp	r3, #2
 80116b2:	d005      	beq.n	80116c0 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	791a      	ldrb	r2, [r3, #4]
 80116b8:	4b70      	ldr	r3, [pc, #448]	; (801187c <LoRaMacMibSetRequestConfirm+0x2f8>)
 80116ba:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80116be:	e2b4      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116c0:	2303      	movs	r3, #3
 80116c2:	75fb      	strb	r3, [r7, #23]
            break;
 80116c4:	e2b1      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	685b      	ldr	r3, [r3, #4]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7fa fd62 	bl	800c194 <SecureElementSetDevEui>
 80116d0:	4603      	mov	r3, r0
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	f000 828e 	beq.w	8011bf4 <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116d8:	2303      	movs	r3, #3
 80116da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116dc:	e28a      	b.n	8011bf4 <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7fa fd78 	bl	800c1d8 <SecureElementSetJoinEui>
 80116e8:	4603      	mov	r3, r0
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f000 8284 	beq.w	8011bf8 <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116f0:	2303      	movs	r3, #3
 80116f2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116f4:	e280      	b.n	8011bf8 <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	791a      	ldrb	r2, [r3, #4]
 80116fa:	4b60      	ldr	r3, [pc, #384]	; (801187c <LoRaMacMibSetRequestConfirm+0x2f8>)
 80116fc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8011700:	e293      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	4a5d      	ldr	r2, [pc, #372]	; (801187c <LoRaMacMibSetRequestConfirm+0x2f8>)
 8011708:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 801170c:	e28d      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	4a5a      	ldr	r2, [pc, #360]	; (801187c <LoRaMacMibSetRequestConfirm+0x2f8>)
 8011714:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8011718:	e287      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d00b      	beq.n	801173a <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	4619      	mov	r1, r3
 8011728:	2000      	movs	r0, #0
 801172a:	f001 ff8d 	bl	8013648 <LoRaMacCryptoSetKey>
 801172e:	4603      	mov	r3, r0
 8011730:	2b00      	cmp	r3, #0
 8011732:	f000 8263 	beq.w	8011bfc <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011736:	2311      	movs	r3, #17
 8011738:	e278      	b.n	8011c2c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801173a:	2303      	movs	r3, #3
 801173c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801173e:	e25d      	b.n	8011bfc <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d00b      	beq.n	8011760 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	4619      	mov	r1, r3
 801174e:	2001      	movs	r0, #1
 8011750:	f001 ff7a 	bl	8013648 <LoRaMacCryptoSetKey>
 8011754:	4603      	mov	r3, r0
 8011756:	2b00      	cmp	r3, #0
 8011758:	f000 8252 	beq.w	8011c00 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801175c:	2311      	movs	r3, #17
 801175e:	e265      	b.n	8011c2c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011760:	2303      	movs	r3, #3
 8011762:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011764:	e24c      	b.n	8011c00 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d00b      	beq.n	8011786 <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	4619      	mov	r1, r3
 8011774:	2002      	movs	r0, #2
 8011776:	f001 ff67 	bl	8013648 <LoRaMacCryptoSetKey>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	f000 8241 	beq.w	8011c04 <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011782:	2311      	movs	r3, #17
 8011784:	e252      	b.n	8011c2c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011786:	2303      	movs	r3, #3
 8011788:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801178a:	e23b      	b.n	8011c04 <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d00b      	beq.n	80117ac <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	4619      	mov	r1, r3
 801179a:	2003      	movs	r0, #3
 801179c:	f001 ff54 	bl	8013648 <LoRaMacCryptoSetKey>
 80117a0:	4603      	mov	r3, r0
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	f000 8230 	beq.w	8011c08 <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80117a8:	2311      	movs	r3, #17
 80117aa:	e23f      	b.n	8011c2c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117ac:	2303      	movs	r3, #3
 80117ae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80117b0:	e22a      	b.n	8011c08 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00b      	beq.n	80117d2 <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	4619      	mov	r1, r3
 80117c0:	207f      	movs	r0, #127	; 0x7f
 80117c2:	f001 ff41 	bl	8013648 <LoRaMacCryptoSetKey>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f000 821f 	beq.w	8011c0c <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80117ce:	2311      	movs	r3, #17
 80117d0:	e22c      	b.n	8011c2c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117d2:	2303      	movs	r3, #3
 80117d4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80117d6:	e219      	b.n	8011c0c <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d00b      	beq.n	80117f8 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	4619      	mov	r1, r3
 80117e6:	2080      	movs	r0, #128	; 0x80
 80117e8:	f001 ff2e 	bl	8013648 <LoRaMacCryptoSetKey>
 80117ec:	4603      	mov	r3, r0
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	f000 820e 	beq.w	8011c10 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80117f4:	2311      	movs	r3, #17
 80117f6:	e219      	b.n	8011c2c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117f8:	2303      	movs	r3, #3
 80117fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80117fc:	e208      	b.n	8011c10 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d00b      	beq.n	801181e <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	4619      	mov	r1, r3
 801180c:	2081      	movs	r0, #129	; 0x81
 801180e:	f001 ff1b 	bl	8013648 <LoRaMacCryptoSetKey>
 8011812:	4603      	mov	r3, r0
 8011814:	2b00      	cmp	r3, #0
 8011816:	f000 81fd 	beq.w	8011c14 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801181a:	2311      	movs	r3, #17
 801181c:	e206      	b.n	8011c2c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801181e:	2303      	movs	r3, #3
 8011820:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011822:	e1f7      	b.n	8011c14 <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d00b      	beq.n	8011844 <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	4619      	mov	r1, r3
 8011832:	2082      	movs	r0, #130	; 0x82
 8011834:	f001 ff08 	bl	8013648 <LoRaMacCryptoSetKey>
 8011838:	4603      	mov	r3, r0
 801183a:	2b00      	cmp	r3, #0
 801183c:	f000 81ec 	beq.w	8011c18 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011840:	2311      	movs	r3, #17
 8011842:	e1f3      	b.n	8011c2c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011844:	2303      	movs	r3, #3
 8011846:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011848:	e1e6      	b.n	8011c18 <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	791a      	ldrb	r2, [r3, #4]
 801184e:	4b0b      	ldr	r3, [pc, #44]	; (801187c <LoRaMacMibSetRequestConfirm+0x2f8>)
 8011850:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011854:	4b0a      	ldr	r3, [pc, #40]	; (8011880 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8011856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011858:	4a08      	ldr	r2, [pc, #32]	; (801187c <LoRaMacMibSetRequestConfirm+0x2f8>)
 801185a:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 801185e:	4610      	mov	r0, r2
 8011860:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8011862:	4b07      	ldr	r3, [pc, #28]	; (8011880 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8011864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011866:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8011868:	e1df      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	791a      	ldrb	r2, [r3, #4]
 801186e:	4b03      	ldr	r3, [pc, #12]	; (801187c <LoRaMacMibSetRequestConfirm+0x2f8>)
 8011870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8011874:	e1d9      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
 8011876:	bf00      	nop
 8011878:	20000644 	.word	0x20000644
 801187c:	20000b50 	.word	0x20000b50
 8011880:	0801c3ac 	.word	0x0801c3ac
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	7a1b      	ldrb	r3, [r3, #8]
 8011888:	b25b      	sxtb	r3, r3
 801188a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801188c:	4bb3      	ldr	r3, [pc, #716]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 801188e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011892:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8011894:	4bb1      	ldr	r3, [pc, #708]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801189a:	f107 0108 	add.w	r1, r7, #8
 801189e:	2207      	movs	r2, #7
 80118a0:	4618      	mov	r0, r3
 80118a2:	f002 fcfc 	bl	801429e <RegionVerify>
 80118a6:	4603      	mov	r3, r0
 80118a8:	f083 0301 	eor.w	r3, r3, #1
 80118ac:	b2db      	uxtb	r3, r3
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d002      	beq.n	80118b8 <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118b2:	2303      	movs	r3, #3
 80118b4:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80118b6:	e1b8      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80118be:	4ba7      	ldr	r3, [pc, #668]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 80118c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80118c4:	f107 0108 	add.w	r1, r7, #8
 80118c8:	2200      	movs	r2, #0
 80118ca:	4618      	mov	r0, r3
 80118cc:	f002 fce7 	bl	801429e <RegionVerify>
 80118d0:	4603      	mov	r3, r0
 80118d2:	f083 0301 	eor.w	r3, r3, #1
 80118d6:	b2db      	uxtb	r3, r3
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d002      	beq.n	80118e2 <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118dc:	2303      	movs	r3, #3
 80118de:	75fb      	strb	r3, [r7, #23]
            break;
 80118e0:	e1a3      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80118e2:	4b9e      	ldr	r3, [pc, #632]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 80118e4:	687a      	ldr	r2, [r7, #4]
 80118e6:	3364      	adds	r3, #100	; 0x64
 80118e8:	3204      	adds	r2, #4
 80118ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118ee:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80118f2:	e19a      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	7a1b      	ldrb	r3, [r3, #8]
 80118f8:	b25b      	sxtb	r3, r3
 80118fa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80118fc:	4b97      	ldr	r3, [pc, #604]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 80118fe:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011902:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011904:	4b95      	ldr	r3, [pc, #596]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801190a:	f107 0108 	add.w	r1, r7, #8
 801190e:	2207      	movs	r2, #7
 8011910:	4618      	mov	r0, r3
 8011912:	f002 fcc4 	bl	801429e <RegionVerify>
 8011916:	4603      	mov	r3, r0
 8011918:	2b00      	cmp	r3, #0
 801191a:	d008      	beq.n	801192e <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801191c:	4b8f      	ldr	r3, [pc, #572]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	33a8      	adds	r3, #168	; 0xa8
 8011922:	3204      	adds	r2, #4
 8011924:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011928:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801192c:	e17d      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801192e:	2303      	movs	r3, #3
 8011930:	75fb      	strb	r3, [r7, #23]
            break;
 8011932:	e17a      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	7a1b      	ldrb	r3, [r3, #8]
 8011938:	b25b      	sxtb	r3, r3
 801193a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801193c:	4b87      	ldr	r3, [pc, #540]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 801193e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011942:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011944:	4b85      	ldr	r3, [pc, #532]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801194a:	f107 0108 	add.w	r1, r7, #8
 801194e:	2207      	movs	r2, #7
 8011950:	4618      	mov	r0, r3
 8011952:	f002 fca4 	bl	801429e <RegionVerify>
 8011956:	4603      	mov	r3, r0
 8011958:	2b00      	cmp	r3, #0
 801195a:	d019      	beq.n	8011990 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801195c:	4b7f      	ldr	r3, [pc, #508]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 801195e:	687a      	ldr	r2, [r7, #4]
 8011960:	336c      	adds	r3, #108	; 0x6c
 8011962:	3204      	adds	r2, #4
 8011964:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011968:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801196c:	4b7b      	ldr	r3, [pc, #492]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 801196e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011972:	2b02      	cmp	r3, #2
 8011974:	f040 8152 	bne.w	8011c1c <LoRaMacMibSetRequestConfirm+0x698>
 8011978:	4b78      	ldr	r3, [pc, #480]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 801197a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801197e:	2b00      	cmp	r3, #0
 8011980:	f000 814c 	beq.w	8011c1c <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011984:	4b76      	ldr	r3, [pc, #472]	; (8011b60 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011988:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801198a:	f7fe fc67 	bl	801025c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801198e:	e145      	b.n	8011c1c <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011990:	2303      	movs	r3, #3
 8011992:	75fb      	strb	r3, [r7, #23]
            break;
 8011994:	e142      	b.n	8011c1c <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	7a1b      	ldrb	r3, [r3, #8]
 801199a:	b25b      	sxtb	r3, r3
 801199c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801199e:	4b6f      	ldr	r3, [pc, #444]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 80119a0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80119a4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80119a6:	4b6d      	ldr	r3, [pc, #436]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 80119a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119ac:	f107 0108 	add.w	r1, r7, #8
 80119b0:	2207      	movs	r2, #7
 80119b2:	4618      	mov	r0, r3
 80119b4:	f002 fc73 	bl	801429e <RegionVerify>
 80119b8:	4603      	mov	r3, r0
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d008      	beq.n	80119d0 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80119be:	4b67      	ldr	r3, [pc, #412]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 80119c0:	687a      	ldr	r2, [r7, #4]
 80119c2:	33b0      	adds	r3, #176	; 0xb0
 80119c4:	3204      	adds	r2, #4
 80119c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119ca:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80119ce:	e12c      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119d0:	2303      	movs	r3, #3
 80119d2:	75fb      	strb	r3, [r7, #23]
            break;
 80119d4:	e129      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80119dc:	2301      	movs	r3, #1
 80119de:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80119e0:	4b5e      	ldr	r3, [pc, #376]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 80119e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119e6:	f107 020c 	add.w	r2, r7, #12
 80119ea:	4611      	mov	r1, r2
 80119ec:	4618      	mov	r0, r3
 80119ee:	f002 fc7f 	bl	80142f0 <RegionChanMaskSet>
 80119f2:	4603      	mov	r3, r0
 80119f4:	f083 0301 	eor.w	r3, r3, #1
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	f000 8110 	beq.w	8011c20 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a00:	2303      	movs	r3, #3
 8011a02:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a04:	e10c      	b.n	8011c20 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011a10:	4b52      	ldr	r3, [pc, #328]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a16:	f107 020c 	add.w	r2, r7, #12
 8011a1a:	4611      	mov	r1, r2
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f002 fc67 	bl	80142f0 <RegionChanMaskSet>
 8011a22:	4603      	mov	r3, r0
 8011a24:	f083 0301 	eor.w	r3, r3, #1
 8011a28:	b2db      	uxtb	r3, r3
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	f000 80fa 	beq.w	8011c24 <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a30:	2303      	movs	r3, #3
 8011a32:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a34:	e0f6      	b.n	8011c24 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	791b      	ldrb	r3, [r3, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d009      	beq.n	8011a52 <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011a42:	2b0f      	cmp	r3, #15
 8011a44:	d805      	bhi.n	8011a52 <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	791a      	ldrb	r2, [r3, #4]
 8011a4a:	4b44      	ldr	r3, [pc, #272]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011a4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a50:	e0eb      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a52:	2303      	movs	r3, #3
 8011a54:	75fb      	strb	r3, [r7, #23]
            break;
 8011a56:	e0e8      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	4a3f      	ldr	r2, [pc, #252]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8011a60:	e0e3      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	685b      	ldr	r3, [r3, #4]
 8011a66:	4a3d      	ldr	r2, [pc, #244]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011a68:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8011a6a:	e0de      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	4a3a      	ldr	r2, [pc, #232]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011a72:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8011a74:	e0d9      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	4a38      	ldr	r2, [pc, #224]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011a7c:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8011a7e:	e0d4      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	4a35      	ldr	r2, [pc, #212]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011a86:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8011a88:	e0cf      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a90:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011a92:	4b32      	ldr	r3, [pc, #200]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a98:	f107 0108 	add.w	r1, r7, #8
 8011a9c:	2206      	movs	r2, #6
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f002 fbfd 	bl	801429e <RegionVerify>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d005      	beq.n	8011ab6 <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011aaa:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011aae:	4b2b      	ldr	r3, [pc, #172]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011ab0:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011ab4:	e0b9      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ab6:	2303      	movs	r3, #3
 8011ab8:	75fb      	strb	r3, [r7, #23]
            break;
 8011aba:	e0b6      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011ac2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011ac4:	4b25      	ldr	r3, [pc, #148]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011ac6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011aca:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011acc:	4b23      	ldr	r3, [pc, #140]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ad2:	f107 0108 	add.w	r1, r7, #8
 8011ad6:	2205      	movs	r2, #5
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f002 fbe0 	bl	801429e <RegionVerify>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d005      	beq.n	8011af0 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011ae4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011ae8:	4b1c      	ldr	r3, [pc, #112]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011aee:	e09c      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011af0:	2303      	movs	r3, #3
 8011af2:	75fb      	strb	r3, [r7, #23]
            break;
 8011af4:	e099      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011afc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011afe:	4b17      	ldr	r3, [pc, #92]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011b00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b04:	f107 0108 	add.w	r1, r7, #8
 8011b08:	220a      	movs	r2, #10
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f002 fbc7 	bl	801429e <RegionVerify>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d005      	beq.n	8011b22 <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011b16:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011b1a:	4b10      	ldr	r3, [pc, #64]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011b1c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b20:	e083      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b22:	2303      	movs	r3, #3
 8011b24:	75fb      	strb	r3, [r7, #23]
            break;
 8011b26:	e080      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011b2e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011b30:	4b0a      	ldr	r3, [pc, #40]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b36:	f107 0108 	add.w	r1, r7, #8
 8011b3a:	2209      	movs	r2, #9
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f002 fbae 	bl	801429e <RegionVerify>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d005      	beq.n	8011b54 <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011b48:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011b4c:	4b03      	ldr	r3, [pc, #12]	; (8011b5c <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b52:	e06a      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b54:	2303      	movs	r3, #3
 8011b56:	75fb      	strb	r3, [r7, #23]
            break;
 8011b58:	e067      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
 8011b5a:	bf00      	nop
 8011b5c:	20000b50 	.word	0x20000b50
 8011b60:	0801c3ac 	.word	0x0801c3ac
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	4a32      	ldr	r2, [pc, #200]	; (8011c34 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011b6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8011b6e:	4b31      	ldr	r3, [pc, #196]	; (8011c34 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b74:	4a2f      	ldr	r2, [pc, #188]	; (8011c34 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011b76:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011b78:	e057      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	791a      	ldrb	r2, [r3, #4]
 8011b7e:	4b2d      	ldr	r3, [pc, #180]	; (8011c34 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011b80:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8011b84:	4b2b      	ldr	r3, [pc, #172]	; (8011c34 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011b86:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011b8a:	4b2a      	ldr	r3, [pc, #168]	; (8011c34 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011b8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8011b90:	e04b      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	4a27      	ldr	r2, [pc, #156]	; (8011c34 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011b98:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8011b9a:	e046      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	4a24      	ldr	r2, [pc, #144]	; (8011c34 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011ba2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8011ba6:	e040      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011ba8:	f7fe fdb2 	bl	8010710 <RestoreNvmData>
 8011bac:	4603      	mov	r3, r0
 8011bae:	75fb      	strb	r3, [r7, #23]
            break;
 8011bb0:	e03b      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	799b      	ldrb	r3, [r3, #6]
 8011bb6:	2b01      	cmp	r3, #1
 8011bb8:	d80d      	bhi.n	8011bd6 <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011bba:	4a1e      	ldr	r2, [pc, #120]	; (8011c34 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6858      	ldr	r0, [r3, #4]
 8011bc8:	f001 fc78 	bl	80134bc <LoRaMacCryptoSetLrWanVersion>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d02a      	beq.n	8011c28 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011bd2:	2311      	movs	r3, #17
 8011bd4:	e02a      	b.n	8011c2c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011bd6:	2303      	movs	r3, #3
 8011bd8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011bda:	e025      	b.n	8011c28 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	4a14      	ldr	r2, [pc, #80]	; (8011c34 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011be2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8011be6:	e020      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f000 fc0d 	bl	8012408 <LoRaMacMibClassBSetRequestConfirm>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	75fb      	strb	r3, [r7, #23]
            break;
 8011bf2:	e01a      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011bf4:	bf00      	nop
 8011bf6:	e018      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011bf8:	bf00      	nop
 8011bfa:	e016      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011bfc:	bf00      	nop
 8011bfe:	e014      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011c00:	bf00      	nop
 8011c02:	e012      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011c04:	bf00      	nop
 8011c06:	e010      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011c08:	bf00      	nop
 8011c0a:	e00e      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011c0c:	bf00      	nop
 8011c0e:	e00c      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011c10:	bf00      	nop
 8011c12:	e00a      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011c14:	bf00      	nop
 8011c16:	e008      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011c18:	bf00      	nop
 8011c1a:	e006      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011c1c:	bf00      	nop
 8011c1e:	e004      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011c20:	bf00      	nop
 8011c22:	e002      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011c24:	bf00      	nop
 8011c26:	e000      	b.n	8011c2a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011c28:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8011c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3718      	adds	r7, #24
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	20000b50 	.word	0x20000b50

08011c38 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b086      	sub	sp, #24
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011c40:	2302      	movs	r3, #2
 8011c42:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011c44:	2300      	movs	r3, #0
 8011c46:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d101      	bne.n	8011c52 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c4e:	2303      	movs	r3, #3
 8011c50:	e127      	b.n	8011ea2 <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8011c52:	f7fc fcd3 	bl	800e5fc <LoRaMacIsBusy>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d001      	beq.n	8011c60 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	e120      	b.n	8011ea2 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011c60:	f001 f8d0 	bl	8012e04 <LoRaMacConfirmQueueIsFull>
 8011c64:	4603      	mov	r3, r0
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d001      	beq.n	8011c6e <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	e119      	b.n	8011ea2 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011c6e:	f001 f8bd 	bl	8012dec <LoRaMacConfirmQueueGetCnt>
 8011c72:	4603      	mov	r3, r0
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d104      	bne.n	8011c82 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011c78:	2214      	movs	r2, #20
 8011c7a:	2100      	movs	r1, #0
 8011c7c:	488b      	ldr	r0, [pc, #556]	; (8011eac <LoRaMacMlmeRequest+0x274>)
 8011c7e:	f004 fe21 	bl	80168c4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c82:	4b8b      	ldr	r3, [pc, #556]	; (8011eb0 <LoRaMacMlmeRequest+0x278>)
 8011c84:	2201      	movs	r2, #1
 8011c86:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011c8a:	4a89      	ldr	r2, [pc, #548]	; (8011eb0 <LoRaMacMlmeRequest+0x278>)
 8011c8c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011c90:	f043 0304 	orr.w	r3, r3, #4
 8011c94:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	3b01      	subs	r3, #1
 8011cac:	2b0d      	cmp	r3, #13
 8011cae:	f200 80ce 	bhi.w	8011e4e <LoRaMacMlmeRequest+0x216>
 8011cb2:	a201      	add	r2, pc, #4	; (adr r2, 8011cb8 <LoRaMacMlmeRequest+0x80>)
 8011cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cb8:	08011cf1 	.word	0x08011cf1
 8011cbc:	08011e4f 	.word	0x08011e4f
 8011cc0:	08011e4f 	.word	0x08011e4f
 8011cc4:	08011d5b 	.word	0x08011d5b
 8011cc8:	08011d79 	.word	0x08011d79
 8011ccc:	08011d89 	.word	0x08011d89
 8011cd0:	08011e4f 	.word	0x08011e4f
 8011cd4:	08011e4f 	.word	0x08011e4f
 8011cd8:	08011e4f 	.word	0x08011e4f
 8011cdc:	08011da5 	.word	0x08011da5
 8011ce0:	08011e4f 	.word	0x08011e4f
 8011ce4:	08011e23 	.word	0x08011e23
 8011ce8:	08011dc3 	.word	0x08011dc3
 8011cec:	08011e05 	.word	0x08011e05
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011cf0:	4b6f      	ldr	r3, [pc, #444]	; (8011eb0 <LoRaMacMlmeRequest+0x278>)
 8011cf2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011cf6:	f003 0320 	and.w	r3, r3, #32
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d001      	beq.n	8011d02 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011cfe:	2301      	movs	r3, #1
 8011d00:	e0cf      	b.n	8011ea2 <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8011d02:	f7fe f989 	bl	8010018 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011d06:	4b6b      	ldr	r3, [pc, #428]	; (8011eb4 <LoRaMacMlmeRequest+0x27c>)
 8011d08:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	795b      	ldrb	r3, [r3, #5]
 8011d10:	b25b      	sxtb	r3, r3
 8011d12:	2200      	movs	r2, #0
 8011d14:	4619      	mov	r1, r3
 8011d16:	f002 fbaa 	bl	801446e <RegionAlternateDr>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	4b65      	ldr	r3, [pc, #404]	; (8011eb4 <LoRaMacMlmeRequest+0x27c>)
 8011d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011d24:	2307      	movs	r3, #7
 8011d26:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011d28:	20ff      	movs	r0, #255	; 0xff
 8011d2a:	f7fd feed 	bl	800fb08 <SendReJoinReq>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011d32:	7dfb      	ldrb	r3, [r7, #23]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	f000 808c 	beq.w	8011e52 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011d3a:	4b5e      	ldr	r3, [pc, #376]	; (8011eb4 <LoRaMacMlmeRequest+0x27c>)
 8011d3c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	795b      	ldrb	r3, [r3, #5]
 8011d44:	b25b      	sxtb	r3, r3
 8011d46:	2201      	movs	r2, #1
 8011d48:	4619      	mov	r1, r3
 8011d4a:	f002 fb90 	bl	801446e <RegionAlternateDr>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	461a      	mov	r2, r3
 8011d52:	4b58      	ldr	r3, [pc, #352]	; (8011eb4 <LoRaMacMlmeRequest+0x27c>)
 8011d54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8011d58:	e07b      	b.n	8011e52 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d5e:	f107 030c 	add.w	r3, r7, #12
 8011d62:	2200      	movs	r2, #0
 8011d64:	4619      	mov	r1, r3
 8011d66:	2002      	movs	r0, #2
 8011d68:	f000 fcb2 	bl	80126d0 <LoRaMacCommandsAddCmd>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d071      	beq.n	8011e56 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d72:	2313      	movs	r3, #19
 8011d74:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d76:	e06e      	b.n	8011e56 <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	889b      	ldrh	r3, [r3, #4]
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7fe fc73 	bl	8010668 <SetTxContinuousWave>
 8011d82:	4603      	mov	r3, r0
 8011d84:	75fb      	strb	r3, [r7, #23]
            break;
 8011d86:	e06d      	b.n	8011e64 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	8898      	ldrh	r0, [r3, #4]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6899      	ldr	r1, [r3, #8]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	461a      	mov	r2, r3
 8011d9a:	f7fe fc99 	bl	80106d0 <SetTxContinuousWave1>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	75fb      	strb	r3, [r7, #23]
            break;
 8011da2:	e05f      	b.n	8011e64 <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011da4:	2300      	movs	r3, #0
 8011da6:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011da8:	f107 030c 	add.w	r3, r7, #12
 8011dac:	2200      	movs	r2, #0
 8011dae:	4619      	mov	r1, r3
 8011db0:	200d      	movs	r0, #13
 8011db2:	f000 fc8d 	bl	80126d0 <LoRaMacCommandsAddCmd>
 8011db6:	4603      	mov	r3, r0
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d04e      	beq.n	8011e5a <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011dbc:	2313      	movs	r3, #19
 8011dbe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011dc0:	e04b      	b.n	8011e5a <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011dc2:	4b3c      	ldr	r3, [pc, #240]	; (8011eb4 <LoRaMacMlmeRequest+0x27c>)
 8011dc4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d148      	bne.n	8011e5e <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	791b      	ldrb	r3, [r3, #4]
 8011dd0:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	791b      	ldrb	r3, [r3, #4]
 8011dd6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f000 fae8 	bl	80123b2 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011de2:	7dbb      	ldrb	r3, [r7, #22]
 8011de4:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011de6:	2300      	movs	r3, #0
 8011de8:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011dea:	f107 030c 	add.w	r3, r7, #12
 8011dee:	2201      	movs	r2, #1
 8011df0:	4619      	mov	r1, r3
 8011df2:	2010      	movs	r0, #16
 8011df4:	f000 fc6c 	bl	80126d0 <LoRaMacCommandsAddCmd>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d02f      	beq.n	8011e5e <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011dfe:	2313      	movs	r3, #19
 8011e00:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011e02:	e02c      	b.n	8011e5e <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011e04:	2300      	movs	r3, #0
 8011e06:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011e08:	f107 030c 	add.w	r3, r7, #12
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	4619      	mov	r1, r3
 8011e10:	2012      	movs	r0, #18
 8011e12:	f000 fc5d 	bl	80126d0 <LoRaMacCommandsAddCmd>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d022      	beq.n	8011e62 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011e1c:	2313      	movs	r3, #19
 8011e1e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e20:	e01f      	b.n	8011e62 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011e22:	2301      	movs	r3, #1
 8011e24:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011e26:	f000 fa7a 	bl	801231e <LoRaMacClassBIsAcquisitionInProgress>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	f083 0301 	eor.w	r3, r3, #1
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d008      	beq.n	8011e48 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011e36:	2000      	movs	r0, #0
 8011e38:	f000 fa53 	bl	80122e2 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011e3c:	2000      	movs	r0, #0
 8011e3e:	f000 fa75 	bl	801232c <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011e42:	2300      	movs	r3, #0
 8011e44:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011e46:	e00d      	b.n	8011e64 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	75fb      	strb	r3, [r7, #23]
            break;
 8011e4c:	e00a      	b.n	8011e64 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011e4e:	bf00      	nop
 8011e50:	e008      	b.n	8011e64 <LoRaMacMlmeRequest+0x22c>
            break;
 8011e52:	bf00      	nop
 8011e54:	e006      	b.n	8011e64 <LoRaMacMlmeRequest+0x22c>
            break;
 8011e56:	bf00      	nop
 8011e58:	e004      	b.n	8011e64 <LoRaMacMlmeRequest+0x22c>
            break;
 8011e5a:	bf00      	nop
 8011e5c:	e002      	b.n	8011e64 <LoRaMacMlmeRequest+0x22c>
            break;
 8011e5e:	bf00      	nop
 8011e60:	e000      	b.n	8011e64 <LoRaMacMlmeRequest+0x22c>
            break;
 8011e62:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011e64:	4b12      	ldr	r3, [pc, #72]	; (8011eb0 <LoRaMacMlmeRequest+0x278>)
 8011e66:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011e6e:	7dfb      	ldrb	r3, [r7, #23]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d010      	beq.n	8011e96 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011e74:	f000 ffba 	bl	8012dec <LoRaMacConfirmQueueGetCnt>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d110      	bne.n	8011ea0 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011e7e:	4b0c      	ldr	r3, [pc, #48]	; (8011eb0 <LoRaMacMlmeRequest+0x278>)
 8011e80:	2200      	movs	r2, #0
 8011e82:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011e86:	4a0a      	ldr	r2, [pc, #40]	; (8011eb0 <LoRaMacMlmeRequest+0x278>)
 8011e88:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011e8c:	f36f 0382 	bfc	r3, #2, #1
 8011e90:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8011e94:	e004      	b.n	8011ea0 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011e96:	f107 0310 	add.w	r3, r7, #16
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f000 fe58 	bl	8012b50 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3718      	adds	r7, #24
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	20000a90 	.word	0x20000a90
 8011eb0:	20000644 	.word	0x20000644
 8011eb4:	20000b50 	.word	0x20000b50

08011eb8 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b08c      	sub	sp, #48	; 0x30
 8011ebc:	af02      	add	r7, sp, #8
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	460b      	mov	r3, r1
 8011ec2:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011ec4:	2302      	movs	r3, #2
 8011ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d101      	bne.n	8011ee6 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ee2:	2303      	movs	r3, #3
 8011ee4:	e0d4      	b.n	8012090 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8011ee6:	f7fc fb89 	bl	800e5fc <LoRaMacIsBusy>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d001      	beq.n	8011ef4 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	e0cd      	b.n	8012090 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011ef8:	2214      	movs	r2, #20
 8011efa:	2100      	movs	r1, #0
 8011efc:	4866      	ldr	r0, [pc, #408]	; (8012098 <LoRaMacMcpsRequest+0x1e0>)
 8011efe:	f004 fce1 	bl	80168c4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011f02:	4b66      	ldr	r3, [pc, #408]	; (801209c <LoRaMacMcpsRequest+0x1e4>)
 8011f04:	2201      	movs	r2, #1
 8011f06:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011f0a:	4b64      	ldr	r3, [pc, #400]	; (801209c <LoRaMacMcpsRequest+0x1e4>)
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	2b03      	cmp	r3, #3
 8011f18:	d03d      	beq.n	8011f96 <LoRaMacMcpsRequest+0xde>
 8011f1a:	2b03      	cmp	r3, #3
 8011f1c:	dc4f      	bgt.n	8011fbe <LoRaMacMcpsRequest+0x106>
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d002      	beq.n	8011f28 <LoRaMacMcpsRequest+0x70>
 8011f22:	2b01      	cmp	r3, #1
 8011f24:	d019      	beq.n	8011f5a <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011f26:	e04a      	b.n	8011fbe <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011f28:	2301      	movs	r3, #1
 8011f2a:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011f2c:	4b5b      	ldr	r3, [pc, #364]	; (801209c <LoRaMacMcpsRequest+0x1e4>)
 8011f2e:	2201      	movs	r2, #1
 8011f30:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011f34:	7b3b      	ldrb	r3, [r7, #12]
 8011f36:	2202      	movs	r2, #2
 8011f38:	f362 1347 	bfi	r3, r2, #5, #3
 8011f3c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	791b      	ldrb	r3, [r3, #4]
 8011f42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	689b      	ldr	r3, [r3, #8]
 8011f4a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	899b      	ldrh	r3, [r3, #12]
 8011f50:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	7b9b      	ldrb	r3, [r3, #14]
 8011f56:	777b      	strb	r3, [r7, #29]
            break;
 8011f58:	e032      	b.n	8011fc0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	7bdb      	ldrb	r3, [r3, #15]
 8011f62:	2b08      	cmp	r3, #8
 8011f64:	bf28      	it	cs
 8011f66:	2308      	movcs	r3, #8
 8011f68:	b2da      	uxtb	r2, r3
 8011f6a:	4b4c      	ldr	r3, [pc, #304]	; (801209c <LoRaMacMcpsRequest+0x1e4>)
 8011f6c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011f70:	7b3b      	ldrb	r3, [r7, #12]
 8011f72:	2204      	movs	r2, #4
 8011f74:	f362 1347 	bfi	r3, r2, #5, #3
 8011f78:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	791b      	ldrb	r3, [r3, #4]
 8011f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	689b      	ldr	r3, [r3, #8]
 8011f86:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	899b      	ldrh	r3, [r3, #12]
 8011f8c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	7b9b      	ldrb	r3, [r3, #14]
 8011f92:	777b      	strb	r3, [r7, #29]
            break;
 8011f94:	e014      	b.n	8011fc0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011f96:	2301      	movs	r3, #1
 8011f98:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011f9a:	4b40      	ldr	r3, [pc, #256]	; (801209c <LoRaMacMcpsRequest+0x1e4>)
 8011f9c:	2201      	movs	r2, #1
 8011f9e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011fa2:	7b3b      	ldrb	r3, [r7, #12]
 8011fa4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011fa8:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	891b      	ldrh	r3, [r3, #8]
 8011fb4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	7a9b      	ldrb	r3, [r3, #10]
 8011fba:	777b      	strb	r3, [r7, #29]
            break;
 8011fbc:	e000      	b.n	8011fc0 <LoRaMacMcpsRequest+0x108>
            break;
 8011fbe:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011fc0:	2302      	movs	r3, #2
 8011fc2:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011fc4:	4b36      	ldr	r3, [pc, #216]	; (80120a0 <LoRaMacMcpsRequest+0x1e8>)
 8011fc6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011fca:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011fcc:	4b34      	ldr	r3, [pc, #208]	; (80120a0 <LoRaMacMcpsRequest+0x1e8>)
 8011fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fd2:	f107 0214 	add.w	r2, r7, #20
 8011fd6:	4611      	mov	r1, r2
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f002 f925 	bl	8014228 <RegionGetPhyParam>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	b25b      	sxtb	r3, r3
 8011fe6:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011fea:	4293      	cmp	r3, r2
 8011fec:	bfb8      	it	lt
 8011fee:	4613      	movlt	r3, r2
 8011ff0:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011ff2:	7f3b      	ldrb	r3, [r7, #28]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d044      	beq.n	8012082 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011ff8:	4b29      	ldr	r3, [pc, #164]	; (80120a0 <LoRaMacMcpsRequest+0x1e8>)
 8011ffa:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8011ffe:	f083 0301 	eor.w	r3, r3, #1
 8012002:	b2db      	uxtb	r3, r3
 8012004:	2b00      	cmp	r3, #0
 8012006:	d019      	beq.n	801203c <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8012008:	7f7b      	ldrb	r3, [r7, #29]
 801200a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801200c:	4b24      	ldr	r3, [pc, #144]	; (80120a0 <LoRaMacMcpsRequest+0x1e8>)
 801200e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012012:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012014:	4b22      	ldr	r3, [pc, #136]	; (80120a0 <LoRaMacMcpsRequest+0x1e8>)
 8012016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801201a:	f107 0108 	add.w	r1, r7, #8
 801201e:	2205      	movs	r2, #5
 8012020:	4618      	mov	r0, r3
 8012022:	f002 f93c 	bl	801429e <RegionVerify>
 8012026:	4603      	mov	r3, r0
 8012028:	2b00      	cmp	r3, #0
 801202a:	d005      	beq.n	8012038 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801202c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012030:	4b1b      	ldr	r3, [pc, #108]	; (80120a0 <LoRaMacMcpsRequest+0x1e8>)
 8012032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8012036:	e001      	b.n	801203c <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012038:	2303      	movs	r3, #3
 801203a:	e029      	b.n	8012090 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 801203c:	8bfa      	ldrh	r2, [r7, #30]
 801203e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8012042:	f107 000c 	add.w	r0, r7, #12
 8012046:	78fb      	ldrb	r3, [r7, #3]
 8012048:	9300      	str	r3, [sp, #0]
 801204a:	4613      	mov	r3, r2
 801204c:	6a3a      	ldr	r2, [r7, #32]
 801204e:	f7fd fc7b 	bl	800f948 <Send>
 8012052:	4603      	mov	r3, r0
 8012054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8012058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801205c:	2b00      	cmp	r3, #0
 801205e:	d10c      	bne.n	801207a <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	781a      	ldrb	r2, [r3, #0]
 8012064:	4b0d      	ldr	r3, [pc, #52]	; (801209c <LoRaMacMcpsRequest+0x1e4>)
 8012066:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801206a:	4a0c      	ldr	r2, [pc, #48]	; (801209c <LoRaMacMcpsRequest+0x1e4>)
 801206c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012070:	f043 0301 	orr.w	r3, r3, #1
 8012074:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8012078:	e003      	b.n	8012082 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801207a:	4b08      	ldr	r3, [pc, #32]	; (801209c <LoRaMacMcpsRequest+0x1e4>)
 801207c:	2200      	movs	r2, #0
 801207e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012082:	4b06      	ldr	r3, [pc, #24]	; (801209c <LoRaMacMcpsRequest+0x1e4>)
 8012084:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	611a      	str	r2, [r3, #16]

    return status;
 801208c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012090:	4618      	mov	r0, r3
 8012092:	3728      	adds	r7, #40	; 0x28
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	20000a7c 	.word	0x20000a7c
 801209c:	20000644 	.word	0x20000644
 80120a0:	20000b50 	.word	0x20000b50

080120a4 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b084      	sub	sp, #16
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	4603      	mov	r3, r0
 80120ac:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80120ae:	79fb      	ldrb	r3, [r7, #7]
 80120b0:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80120b2:	4b0a      	ldr	r3, [pc, #40]	; (80120dc <LoRaMacTestSetDutyCycleOn+0x38>)
 80120b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80120b8:	f107 010c 	add.w	r1, r7, #12
 80120bc:	220f      	movs	r2, #15
 80120be:	4618      	mov	r0, r3
 80120c0:	f002 f8ed 	bl	801429e <RegionVerify>
 80120c4:	4603      	mov	r3, r0
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d003      	beq.n	80120d2 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80120ca:	4a04      	ldr	r2, [pc, #16]	; (80120dc <LoRaMacTestSetDutyCycleOn+0x38>)
 80120cc:	79fb      	ldrb	r3, [r7, #7]
 80120ce:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 80120d2:	bf00      	nop
 80120d4:	3710      	adds	r7, #16
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop
 80120dc:	20000b50 	.word	0x20000b50

080120e0 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80120e4:	f7fe ffec 	bl	80110c0 <LoRaMacStop>
 80120e8:	4603      	mov	r3, r0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d114      	bne.n	8012118 <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80120ee:	480c      	ldr	r0, [pc, #48]	; (8012120 <LoRaMacDeInitialization+0x40>)
 80120f0:	f008 fcf8 	bl	801aae4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80120f4:	480b      	ldr	r0, [pc, #44]	; (8012124 <LoRaMacDeInitialization+0x44>)
 80120f6:	f008 fcf5 	bl	801aae4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80120fa:	480b      	ldr	r0, [pc, #44]	; (8012128 <LoRaMacDeInitialization+0x48>)
 80120fc:	f008 fcf2 	bl	801aae4 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8012100:	480a      	ldr	r0, [pc, #40]	; (801212c <LoRaMacDeInitialization+0x4c>)
 8012102:	f008 fcef 	bl	801aae4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012106:	f000 f95e 	bl	80123c6 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 801210a:	f7fd ff85 	bl	8010018 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801210e:	4b08      	ldr	r3, [pc, #32]	; (8012130 <LoRaMacDeInitialization+0x50>)
 8012110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012112:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8012114:	2300      	movs	r3, #0
 8012116:	e000      	b.n	801211a <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8012118:	2301      	movs	r3, #1
    }
}
 801211a:	4618      	mov	r0, r3
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	200009ac 	.word	0x200009ac
 8012124:	200009c4 	.word	0x200009c4
 8012128:	200009dc 	.word	0x200009dc
 801212c:	20000a3c 	.word	0x20000a3c
 8012130:	0801c3ac 	.word	0x0801c3ac

08012134 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b08c      	sub	sp, #48	; 0x30
 8012138:	af00      	add	r7, sp, #0
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	60b9      	str	r1, [r7, #8]
 801213e:	607a      	str	r2, [r7, #4]
 8012140:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012142:	2300      	movs	r3, #0
 8012144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	7c1b      	ldrb	r3, [r3, #16]
 801214c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	7c5b      	ldrb	r3, [r3, #17]
 8012154:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	689a      	ldr	r2, [r3, #8]
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	795b      	ldrb	r3, [r3, #5]
 8012164:	2b00      	cmp	r3, #0
 8012166:	f000 808b 	beq.w	8012280 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801216a:	2302      	movs	r3, #2
 801216c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	7c9b      	ldrb	r3, [r3, #18]
 8012174:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	7cdb      	ldrb	r3, [r3, #19]
 801217c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012180:	4611      	mov	r1, r2
 8012182:	4618      	mov	r0, r3
 8012184:	f002 f850 	bl	8014228 <RegionGetPhyParam>
 8012188:	4603      	mov	r3, r0
 801218a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 801218c:	6a3b      	ldr	r3, [r7, #32]
 801218e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8012192:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8012196:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801219a:	4293      	cmp	r3, r2
 801219c:	bfb8      	it	lt
 801219e:	4613      	movlt	r3, r2
 80121a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80121a4:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80121a8:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d106      	bne.n	80121be <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	2200      	movs	r2, #0
 80121b4:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80121b6:	2300      	movs	r3, #0
 80121b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80121bc:	e060      	b.n	8012280 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	689b      	ldr	r3, [r3, #8]
 80121c2:	68fa      	ldr	r2, [r7, #12]
 80121c4:	8992      	ldrh	r2, [r2, #12]
 80121c6:	4293      	cmp	r3, r2
 80121c8:	d303      	bcc.n	80121d2 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80121ca:	2301      	movs	r3, #1
 80121cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80121d0:	e002      	b.n	80121d8 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80121d2:	2300      	movs	r3, #0
 80121d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	689b      	ldr	r3, [r3, #8]
 80121dc:	68fa      	ldr	r2, [r7, #12]
 80121de:	8992      	ldrh	r2, [r2, #12]
 80121e0:	4611      	mov	r1, r2
 80121e2:	68fa      	ldr	r2, [r7, #12]
 80121e4:	89d2      	ldrh	r2, [r2, #14]
 80121e6:	440a      	add	r2, r1
 80121e8:	4293      	cmp	r3, r2
 80121ea:	d349      	bcc.n	8012280 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80121ec:	2308      	movs	r3, #8
 80121ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	7cdb      	ldrb	r3, [r3, #19]
 80121f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80121fa:	4611      	mov	r1, r2
 80121fc:	4618      	mov	r0, r3
 80121fe:	f002 f813 	bl	8014228 <RegionGetPhyParam>
 8012202:	4603      	mov	r3, r0
 8012204:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8012206:	6a3b      	ldr	r3, [r7, #32]
 8012208:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	689b      	ldr	r3, [r3, #8]
 8012210:	68fa      	ldr	r2, [r7, #12]
 8012212:	89d2      	ldrh	r2, [r2, #14]
 8012214:	fbb3 f1f2 	udiv	r1, r3, r2
 8012218:	fb01 f202 	mul.w	r2, r1, r2
 801221c:	1a9b      	subs	r3, r3, r2
 801221e:	2b01      	cmp	r3, #1
 8012220:	d12e      	bne.n	8012280 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012222:	2322      	movs	r3, #34	; 0x22
 8012224:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8012228:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801222c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	7c9b      	ldrb	r3, [r3, #18]
 8012234:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	7cdb      	ldrb	r3, [r3, #19]
 801223c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012240:	4611      	mov	r1, r2
 8012242:	4618      	mov	r0, r3
 8012244:	f001 fff0 	bl	8014228 <RegionGetPhyParam>
 8012248:	4603      	mov	r3, r0
 801224a:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 801224c:	6a3b      	ldr	r3, [r7, #32]
 801224e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8012252:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8012256:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801225a:	429a      	cmp	r2, r3
 801225c:	d110      	bne.n	8012280 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801225e:	2300      	movs	r3, #0
 8012260:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	791b      	ldrb	r3, [r3, #4]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d009      	beq.n	8012280 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801226c:	2302      	movs	r3, #2
 801226e:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	7cdb      	ldrb	r3, [r3, #19]
 8012274:	f107 0214 	add.w	r2, r7, #20
 8012278:	4611      	mov	r1, r2
 801227a:	4618      	mov	r0, r3
 801227c:	f001 fffd 	bl	801427a <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8012286:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801228e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012294:	4618      	mov	r0, r3
 8012296:	3730      	adds	r7, #48	; 0x30
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b084      	sub	sp, #16
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	607a      	str	r2, [r7, #4]
 80122a8:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	789b      	ldrb	r3, [r3, #2]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d107      	bne.n	80122c2 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	68b9      	ldr	r1, [r7, #8]
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	f7ff ff3b 	bl	8012134 <CalcNextV10X>
 80122be:	4603      	mov	r3, r0
 80122c0:	e000      	b.n	80122c4 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80122c2:	2300      	movs	r3, #0
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	3710      	adds	r7, #16
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}

080122cc <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80122cc:	b480      	push	{r7}
 80122ce:	b085      	sub	sp, #20
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	60f8      	str	r0, [r7, #12]
 80122d4:	60b9      	str	r1, [r7, #8]
 80122d6:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122d8:	bf00      	nop
 80122da:	3714      	adds	r7, #20
 80122dc:	46bd      	mov	sp, r7
 80122de:	bc80      	pop	{r7}
 80122e0:	4770      	bx	lr

080122e2 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80122e2:	b480      	push	{r7}
 80122e4:	b083      	sub	sp, #12
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	4603      	mov	r3, r0
 80122ea:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122ec:	bf00      	nop
 80122ee:	370c      	adds	r7, #12
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bc80      	pop	{r7}
 80122f4:	4770      	bx	lr

080122f6 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80122f6:	b480      	push	{r7}
 80122f8:	b083      	sub	sp, #12
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	4603      	mov	r3, r0
 80122fe:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012300:	bf00      	nop
 8012302:	370c      	adds	r7, #12
 8012304:	46bd      	mov	sp, r7
 8012306:	bc80      	pop	{r7}
 8012308:	4770      	bx	lr

0801230a <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801230a:	b480      	push	{r7}
 801230c:	b083      	sub	sp, #12
 801230e:	af00      	add	r7, sp, #0
 8012310:	4603      	mov	r3, r0
 8012312:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012314:	bf00      	nop
 8012316:	370c      	adds	r7, #12
 8012318:	46bd      	mov	sp, r7
 801231a:	bc80      	pop	{r7}
 801231c:	4770      	bx	lr

0801231e <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801231e:	b480      	push	{r7}
 8012320:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012322:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012324:	4618      	mov	r0, r3
 8012326:	46bd      	mov	sp, r7
 8012328:	bc80      	pop	{r7}
 801232a:	4770      	bx	lr

0801232c <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801232c:	b480      	push	{r7}
 801232e:	b083      	sub	sp, #12
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012334:	bf00      	nop
 8012336:	370c      	adds	r7, #12
 8012338:	46bd      	mov	sp, r7
 801233a:	bc80      	pop	{r7}
 801233c:	4770      	bx	lr

0801233e <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801233e:	b480      	push	{r7}
 8012340:	b083      	sub	sp, #12
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012346:	bf00      	nop
 8012348:	370c      	adds	r7, #12
 801234a:	46bd      	mov	sp, r7
 801234c:	bc80      	pop	{r7}
 801234e:	4770      	bx	lr

08012350 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012350:	b480      	push	{r7}
 8012352:	b083      	sub	sp, #12
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012358:	bf00      	nop
 801235a:	370c      	adds	r7, #12
 801235c:	46bd      	mov	sp, r7
 801235e:	bc80      	pop	{r7}
 8012360:	4770      	bx	lr

08012362 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012362:	b480      	push	{r7}
 8012364:	b083      	sub	sp, #12
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
 801236a:	460b      	mov	r3, r1
 801236c:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801236e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012370:	4618      	mov	r0, r3
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	bc80      	pop	{r7}
 8012378:	4770      	bx	lr

0801237a <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801237a:	b480      	push	{r7}
 801237c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801237e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012380:	4618      	mov	r0, r3
 8012382:	46bd      	mov	sp, r7
 8012384:	bc80      	pop	{r7}
 8012386:	4770      	bx	lr

08012388 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012388:	b480      	push	{r7}
 801238a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801238c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801238e:	4618      	mov	r0, r3
 8012390:	46bd      	mov	sp, r7
 8012392:	bc80      	pop	{r7}
 8012394:	4770      	bx	lr

08012396 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012396:	b480      	push	{r7}
 8012398:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801239a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801239c:	4618      	mov	r0, r3
 801239e:	46bd      	mov	sp, r7
 80123a0:	bc80      	pop	{r7}
 80123a2:	4770      	bx	lr

080123a4 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80123a4:	b480      	push	{r7}
 80123a6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80123a8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bc80      	pop	{r7}
 80123b0:	4770      	bx	lr

080123b2 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80123b2:	b480      	push	{r7}
 80123b4:	b083      	sub	sp, #12
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	4603      	mov	r3, r0
 80123ba:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123bc:	bf00      	nop
 80123be:	370c      	adds	r7, #12
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bc80      	pop	{r7}
 80123c4:	4770      	bx	lr

080123c6 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80123c6:	b480      	push	{r7}
 80123c8:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123ca:	bf00      	nop
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bc80      	pop	{r7}
 80123d0:	4770      	bx	lr

080123d2 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80123d2:	b480      	push	{r7}
 80123d4:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123d6:	bf00      	nop
 80123d8:	46bd      	mov	sp, r7
 80123da:	bc80      	pop	{r7}
 80123dc:	4770      	bx	lr

080123de <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80123de:	b480      	push	{r7}
 80123e0:	b083      	sub	sp, #12
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	4603      	mov	r3, r0
 80123e6:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80123e8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	370c      	adds	r7, #12
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bc80      	pop	{r7}
 80123f2:	4770      	bx	lr

080123f4 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80123f4:	b480      	push	{r7}
 80123f6:	b083      	sub	sp, #12
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80123fc:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123fe:	4618      	mov	r0, r3
 8012400:	370c      	adds	r7, #12
 8012402:	46bd      	mov	sp, r7
 8012404:	bc80      	pop	{r7}
 8012406:	4770      	bx	lr

08012408 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012408:	b480      	push	{r7}
 801240a:	b083      	sub	sp, #12
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012410:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012412:	4618      	mov	r0, r3
 8012414:	370c      	adds	r7, #12
 8012416:	46bd      	mov	sp, r7
 8012418:	bc80      	pop	{r7}
 801241a:	4770      	bx	lr

0801241c <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801241c:	b480      	push	{r7}
 801241e:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012420:	bf00      	nop
 8012422:	46bd      	mov	sp, r7
 8012424:	bc80      	pop	{r7}
 8012426:	4770      	bx	lr

08012428 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012428:	b480      	push	{r7}
 801242a:	b083      	sub	sp, #12
 801242c:	af00      	add	r7, sp, #0
 801242e:	4603      	mov	r3, r0
 8012430:	6039      	str	r1, [r7, #0]
 8012432:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012434:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012436:	4618      	mov	r0, r3
 8012438:	370c      	adds	r7, #12
 801243a:	46bd      	mov	sp, r7
 801243c:	bc80      	pop	{r7}
 801243e:	4770      	bx	lr

08012440 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
 8012446:	4603      	mov	r3, r0
 8012448:	603a      	str	r2, [r7, #0]
 801244a:	80fb      	strh	r3, [r7, #6]
 801244c:	460b      	mov	r3, r1
 801244e:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012450:	bf00      	nop
 8012452:	370c      	adds	r7, #12
 8012454:	46bd      	mov	sp, r7
 8012456:	bc80      	pop	{r7}
 8012458:	4770      	bx	lr

0801245a <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801245a:	b480      	push	{r7}
 801245c:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801245e:	bf00      	nop
 8012460:	46bd      	mov	sp, r7
 8012462:	bc80      	pop	{r7}
 8012464:	4770      	bx	lr

08012466 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012466:	b480      	push	{r7}
 8012468:	b083      	sub	sp, #12
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801246e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012470:	4618      	mov	r0, r3
 8012472:	370c      	adds	r7, #12
 8012474:	46bd      	mov	sp, r7
 8012476:	bc80      	pop	{r7}
 8012478:	4770      	bx	lr

0801247a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801247a:	b480      	push	{r7}
 801247c:	b083      	sub	sp, #12
 801247e:	af00      	add	r7, sp, #0
 8012480:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012482:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012484:	4618      	mov	r0, r3
 8012486:	370c      	adds	r7, #12
 8012488:	46bd      	mov	sp, r7
 801248a:	bc80      	pop	{r7}
 801248c:	4770      	bx	lr

0801248e <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801248e:	b480      	push	{r7}
 8012490:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012492:	bf00      	nop
 8012494:	46bd      	mov	sp, r7
 8012496:	bc80      	pop	{r7}
 8012498:	4770      	bx	lr

0801249a <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801249a:	b480      	push	{r7}
 801249c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801249e:	bf00      	nop
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bc80      	pop	{r7}
 80124a4:	4770      	bx	lr

080124a6 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80124a6:	b480      	push	{r7}
 80124a8:	b085      	sub	sp, #20
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80124b2:	2300      	movs	r3, #0
 80124b4:	81fb      	strh	r3, [r7, #14]
 80124b6:	e00a      	b.n	80124ce <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80124b8:	89fb      	ldrh	r3, [r7, #14]
 80124ba:	68ba      	ldr	r2, [r7, #8]
 80124bc:	4413      	add	r3, r2
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d001      	beq.n	80124c8 <IsSlotFree+0x22>
        {
            return false;
 80124c4:	2300      	movs	r3, #0
 80124c6:	e006      	b.n	80124d6 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80124c8:	89fb      	ldrh	r3, [r7, #14]
 80124ca:	3301      	adds	r3, #1
 80124cc:	81fb      	strh	r3, [r7, #14]
 80124ce:	89fb      	ldrh	r3, [r7, #14]
 80124d0:	2b0f      	cmp	r3, #15
 80124d2:	d9f1      	bls.n	80124b8 <IsSlotFree+0x12>
        }
    }
    return true;
 80124d4:	2301      	movs	r3, #1
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3714      	adds	r7, #20
 80124da:	46bd      	mov	sp, r7
 80124dc:	bc80      	pop	{r7}
 80124de:	4770      	bx	lr

080124e0 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80124e6:	2300      	movs	r3, #0
 80124e8:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80124ea:	e007      	b.n	80124fc <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80124ec:	79fb      	ldrb	r3, [r7, #7]
 80124ee:	3301      	adds	r3, #1
 80124f0:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80124f2:	79fb      	ldrb	r3, [r7, #7]
 80124f4:	2b0f      	cmp	r3, #15
 80124f6:	d101      	bne.n	80124fc <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80124f8:	2300      	movs	r3, #0
 80124fa:	e012      	b.n	8012522 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80124fc:	79fb      	ldrb	r3, [r7, #7]
 80124fe:	011b      	lsls	r3, r3, #4
 8012500:	3308      	adds	r3, #8
 8012502:	4a0a      	ldr	r2, [pc, #40]	; (801252c <MallocNewMacCommandSlot+0x4c>)
 8012504:	4413      	add	r3, r2
 8012506:	4618      	mov	r0, r3
 8012508:	f7ff ffcd 	bl	80124a6 <IsSlotFree>
 801250c:	4603      	mov	r3, r0
 801250e:	f083 0301 	eor.w	r3, r3, #1
 8012512:	b2db      	uxtb	r3, r3
 8012514:	2b00      	cmp	r3, #0
 8012516:	d1e9      	bne.n	80124ec <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012518:	79fb      	ldrb	r3, [r7, #7]
 801251a:	011b      	lsls	r3, r3, #4
 801251c:	3308      	adds	r3, #8
 801251e:	4a03      	ldr	r2, [pc, #12]	; (801252c <MallocNewMacCommandSlot+0x4c>)
 8012520:	4413      	add	r3, r2
}
 8012522:	4618      	mov	r0, r3
 8012524:	3708      	adds	r7, #8
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}
 801252a:	bf00      	nop
 801252c:	200019b8 	.word	0x200019b8

08012530 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d101      	bne.n	8012542 <FreeMacCommandSlot+0x12>
    {
        return false;
 801253e:	2300      	movs	r3, #0
 8012540:	e005      	b.n	801254e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012542:	2210      	movs	r2, #16
 8012544:	2100      	movs	r1, #0
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f004 f9bc 	bl	80168c4 <memset1>

    return true;
 801254c:	2301      	movs	r3, #1
}
 801254e:	4618      	mov	r0, r3
 8012550:	3708      	adds	r7, #8
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012556:	b480      	push	{r7}
 8012558:	b083      	sub	sp, #12
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d101      	bne.n	8012568 <LinkedListInit+0x12>
    {
        return false;
 8012564:	2300      	movs	r3, #0
 8012566:	e006      	b.n	8012576 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2200      	movs	r2, #0
 801256c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2200      	movs	r2, #0
 8012572:	605a      	str	r2, [r3, #4]

    return true;
 8012574:	2301      	movs	r3, #1
}
 8012576:	4618      	mov	r0, r3
 8012578:	370c      	adds	r7, #12
 801257a:	46bd      	mov	sp, r7
 801257c:	bc80      	pop	{r7}
 801257e:	4770      	bx	lr

08012580 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d002      	beq.n	8012596 <LinkedListAdd+0x16>
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d101      	bne.n	801259a <LinkedListAdd+0x1a>
    {
        return false;
 8012596:	2300      	movs	r3, #0
 8012598:	e015      	b.n	80125c6 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d102      	bne.n	80125a8 <LinkedListAdd+0x28>
    {
        list->First = element;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	683a      	ldr	r2, [r7, #0]
 80125a6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d003      	beq.n	80125b8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	683a      	ldr	r2, [r7, #0]
 80125b6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	2200      	movs	r2, #0
 80125bc:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	683a      	ldr	r2, [r7, #0]
 80125c2:	605a      	str	r2, [r3, #4]

    return true;
 80125c4:	2301      	movs	r3, #1
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	370c      	adds	r7, #12
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bc80      	pop	{r7}
 80125ce:	4770      	bx	lr

080125d0 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80125d0:	b480      	push	{r7}
 80125d2:	b085      	sub	sp, #20
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d002      	beq.n	80125e6 <LinkedListGetPrevious+0x16>
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d101      	bne.n	80125ea <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80125e6:	2300      	movs	r3, #0
 80125e8:	e016      	b.n	8012618 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80125f0:	683a      	ldr	r2, [r7, #0]
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d00c      	beq.n	8012612 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80125f8:	e002      	b.n	8012600 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d007      	beq.n	8012616 <LinkedListGetPrevious+0x46>
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	683a      	ldr	r2, [r7, #0]
 801260c:	429a      	cmp	r2, r3
 801260e:	d1f4      	bne.n	80125fa <LinkedListGetPrevious+0x2a>
 8012610:	e001      	b.n	8012616 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012612:	2300      	movs	r3, #0
 8012614:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012616:	68fb      	ldr	r3, [r7, #12]
}
 8012618:	4618      	mov	r0, r3
 801261a:	3714      	adds	r7, #20
 801261c:	46bd      	mov	sp, r7
 801261e:	bc80      	pop	{r7}
 8012620:	4770      	bx	lr

08012622 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012622:	b580      	push	{r7, lr}
 8012624:	b084      	sub	sp, #16
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
 801262a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d002      	beq.n	8012638 <LinkedListRemove+0x16>
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d101      	bne.n	801263c <LinkedListRemove+0x1a>
    {
        return false;
 8012638:	2300      	movs	r3, #0
 801263a:	e020      	b.n	801267e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801263c:	6839      	ldr	r1, [r7, #0]
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f7ff ffc6 	bl	80125d0 <LinkedListGetPrevious>
 8012644:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	683a      	ldr	r2, [r7, #0]
 801264c:	429a      	cmp	r2, r3
 801264e:	d103      	bne.n	8012658 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	681a      	ldr	r2, [r3, #0]
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	683a      	ldr	r2, [r7, #0]
 801265e:	429a      	cmp	r2, r3
 8012660:	d102      	bne.n	8012668 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	68fa      	ldr	r2, [r7, #12]
 8012666:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d003      	beq.n	8012676 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	2200      	movs	r2, #0
 801267a:	601a      	str	r2, [r3, #0]

    return true;
 801267c:	2301      	movs	r3, #1
}
 801267e:	4618      	mov	r0, r3
 8012680:	3710      	adds	r7, #16
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}

08012686 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012686:	b480      	push	{r7}
 8012688:	b083      	sub	sp, #12
 801268a:	af00      	add	r7, sp, #0
 801268c:	4603      	mov	r3, r0
 801268e:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012690:	79fb      	ldrb	r3, [r7, #7]
 8012692:	2b05      	cmp	r3, #5
 8012694:	d004      	beq.n	80126a0 <IsSticky+0x1a>
 8012696:	2b05      	cmp	r3, #5
 8012698:	db04      	blt.n	80126a4 <IsSticky+0x1e>
 801269a:	3b08      	subs	r3, #8
 801269c:	2b02      	cmp	r3, #2
 801269e:	d801      	bhi.n	80126a4 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80126a0:	2301      	movs	r3, #1
 80126a2:	e000      	b.n	80126a6 <IsSticky+0x20>
        default:
            return false;
 80126a4:	2300      	movs	r3, #0
    }
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	370c      	adds	r7, #12
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bc80      	pop	{r7}
 80126ae:	4770      	bx	lr

080126b0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80126b4:	22fc      	movs	r2, #252	; 0xfc
 80126b6:	2100      	movs	r1, #0
 80126b8:	4804      	ldr	r0, [pc, #16]	; (80126cc <LoRaMacCommandsInit+0x1c>)
 80126ba:	f004 f903 	bl	80168c4 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80126be:	4803      	ldr	r0, [pc, #12]	; (80126cc <LoRaMacCommandsInit+0x1c>)
 80126c0:	f7ff ff49 	bl	8012556 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80126c4:	2300      	movs	r3, #0
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	bd80      	pop	{r7, pc}
 80126ca:	bf00      	nop
 80126cc:	200019b8 	.word	0x200019b8

080126d0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b086      	sub	sp, #24
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	4603      	mov	r3, r0
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	607a      	str	r2, [r7, #4]
 80126dc:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d101      	bne.n	80126e8 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80126e4:	2301      	movs	r3, #1
 80126e6:	e033      	b.n	8012750 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80126e8:	f7ff fefa 	bl	80124e0 <MallocNewMacCommandSlot>
 80126ec:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d101      	bne.n	80126f8 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80126f4:	2302      	movs	r3, #2
 80126f6:	e02b      	b.n	8012750 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80126f8:	6979      	ldr	r1, [r7, #20]
 80126fa:	4817      	ldr	r0, [pc, #92]	; (8012758 <LoRaMacCommandsAddCmd+0x88>)
 80126fc:	f7ff ff40 	bl	8012580 <LinkedListAdd>
 8012700:	4603      	mov	r3, r0
 8012702:	f083 0301 	eor.w	r3, r3, #1
 8012706:	b2db      	uxtb	r3, r3
 8012708:	2b00      	cmp	r3, #0
 801270a:	d001      	beq.n	8012710 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 801270c:	2305      	movs	r3, #5
 801270e:	e01f      	b.n	8012750 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	7bfa      	ldrb	r2, [r7, #15]
 8012714:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	687a      	ldr	r2, [r7, #4]
 801271a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	3305      	adds	r3, #5
 8012720:	687a      	ldr	r2, [r7, #4]
 8012722:	b292      	uxth	r2, r2
 8012724:	68b9      	ldr	r1, [r7, #8]
 8012726:	4618      	mov	r0, r3
 8012728:	f004 f891 	bl	801684e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801272c:	7bfb      	ldrb	r3, [r7, #15]
 801272e:	4618      	mov	r0, r3
 8012730:	f7ff ffa9 	bl	8012686 <IsSticky>
 8012734:	4603      	mov	r3, r0
 8012736:	461a      	mov	r2, r3
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801273c:	4b06      	ldr	r3, [pc, #24]	; (8012758 <LoRaMacCommandsAddCmd+0x88>)
 801273e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	4413      	add	r3, r2
 8012746:	3301      	adds	r3, #1
 8012748:	4a03      	ldr	r2, [pc, #12]	; (8012758 <LoRaMacCommandsAddCmd+0x88>)
 801274a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 801274e:	2300      	movs	r3, #0
}
 8012750:	4618      	mov	r0, r3
 8012752:	3718      	adds	r7, #24
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	200019b8 	.word	0x200019b8

0801275c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d101      	bne.n	801276e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801276a:	2301      	movs	r3, #1
 801276c:	e021      	b.n	80127b2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801276e:	6879      	ldr	r1, [r7, #4]
 8012770:	4812      	ldr	r0, [pc, #72]	; (80127bc <LoRaMacCommandsRemoveCmd+0x60>)
 8012772:	f7ff ff56 	bl	8012622 <LinkedListRemove>
 8012776:	4603      	mov	r3, r0
 8012778:	f083 0301 	eor.w	r3, r3, #1
 801277c:	b2db      	uxtb	r3, r3
 801277e:	2b00      	cmp	r3, #0
 8012780:	d001      	beq.n	8012786 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012782:	2303      	movs	r3, #3
 8012784:	e015      	b.n	80127b2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012786:	4b0d      	ldr	r3, [pc, #52]	; (80127bc <LoRaMacCommandsRemoveCmd+0x60>)
 8012788:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	689b      	ldr	r3, [r3, #8]
 8012790:	1ad3      	subs	r3, r2, r3
 8012792:	3b01      	subs	r3, #1
 8012794:	4a09      	ldr	r2, [pc, #36]	; (80127bc <LoRaMacCommandsRemoveCmd+0x60>)
 8012796:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f7ff fec8 	bl	8012530 <FreeMacCommandSlot>
 80127a0:	4603      	mov	r3, r0
 80127a2:	f083 0301 	eor.w	r3, r3, #1
 80127a6:	b2db      	uxtb	r3, r3
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d001      	beq.n	80127b0 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80127ac:	2305      	movs	r3, #5
 80127ae:	e000      	b.n	80127b2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80127b0:	2300      	movs	r3, #0
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3708      	adds	r7, #8
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}
 80127ba:	bf00      	nop
 80127bc:	200019b8 	.word	0x200019b8

080127c0 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80127c6:	4b0f      	ldr	r3, [pc, #60]	; (8012804 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80127cc:	e012      	b.n	80127f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	7b1b      	ldrb	r3, [r3, #12]
 80127d2:	f083 0301 	eor.w	r3, r3, #1
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d008      	beq.n	80127ee <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f7ff ffba 	bl	801275c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	607b      	str	r3, [r7, #4]
 80127ec:	e002      	b.n	80127f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d1e9      	bne.n	80127ce <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80127fa:	2300      	movs	r3, #0
}
 80127fc:	4618      	mov	r0, r3
 80127fe:	3708      	adds	r7, #8
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	200019b8 	.word	0x200019b8

08012808 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801280e:	4b0e      	ldr	r3, [pc, #56]	; (8012848 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012814:	e00f      	b.n	8012836 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	791b      	ldrb	r3, [r3, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	f7ff ff30 	bl	8012686 <IsSticky>
 8012826:	4603      	mov	r3, r0
 8012828:	2b00      	cmp	r3, #0
 801282a:	d002      	beq.n	8012832 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f7ff ff95 	bl	801275c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d1ec      	bne.n	8012816 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801283c:	2300      	movs	r3, #0
}
 801283e:	4618      	mov	r0, r3
 8012840:	3708      	adds	r7, #8
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	200019b8 	.word	0x200019b8

0801284c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d101      	bne.n	801285e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801285a:	2301      	movs	r3, #1
 801285c:	e005      	b.n	801286a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801285e:	4b05      	ldr	r3, [pc, #20]	; (8012874 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012860:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012868:	2300      	movs	r3, #0
}
 801286a:	4618      	mov	r0, r3
 801286c:	370c      	adds	r7, #12
 801286e:	46bd      	mov	sp, r7
 8012870:	bc80      	pop	{r7}
 8012872:	4770      	bx	lr
 8012874:	200019b8 	.word	0x200019b8

08012878 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b088      	sub	sp, #32
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012884:	4b25      	ldr	r3, [pc, #148]	; (801291c <LoRaMacCommandsSerializeCmds+0xa4>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801288a:	2300      	movs	r3, #0
 801288c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d002      	beq.n	801289a <LoRaMacCommandsSerializeCmds+0x22>
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d126      	bne.n	80128e8 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801289a:	2301      	movs	r3, #1
 801289c:	e039      	b.n	8012912 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801289e:	7efb      	ldrb	r3, [r7, #27]
 80128a0:	68fa      	ldr	r2, [r7, #12]
 80128a2:	1ad2      	subs	r2, r2, r3
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	689b      	ldr	r3, [r3, #8]
 80128a8:	3301      	adds	r3, #1
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d320      	bcc.n	80128f0 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80128ae:	7efb      	ldrb	r3, [r7, #27]
 80128b0:	1c5a      	adds	r2, r3, #1
 80128b2:	76fa      	strb	r2, [r7, #27]
 80128b4:	461a      	mov	r2, r3
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4413      	add	r3, r2
 80128ba:	69fa      	ldr	r2, [r7, #28]
 80128bc:	7912      	ldrb	r2, [r2, #4]
 80128be:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80128c0:	7efb      	ldrb	r3, [r7, #27]
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	18d0      	adds	r0, r2, r3
 80128c6:	69fb      	ldr	r3, [r7, #28]
 80128c8:	1d59      	adds	r1, r3, #5
 80128ca:	69fb      	ldr	r3, [r7, #28]
 80128cc:	689b      	ldr	r3, [r3, #8]
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	461a      	mov	r2, r3
 80128d2:	f003 ffbc 	bl	801684e <memcpy1>
            itr += curElement->PayloadSize;
 80128d6:	69fb      	ldr	r3, [r7, #28]
 80128d8:	689b      	ldr	r3, [r3, #8]
 80128da:	b2da      	uxtb	r2, r3
 80128dc:	7efb      	ldrb	r3, [r7, #27]
 80128de:	4413      	add	r3, r2
 80128e0:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80128e2:	69fb      	ldr	r3, [r7, #28]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d1d7      	bne.n	801289e <LoRaMacCommandsSerializeCmds+0x26>
 80128ee:	e009      	b.n	8012904 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80128f0:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80128f2:	e007      	b.n	8012904 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80128fa:	69f8      	ldr	r0, [r7, #28]
 80128fc:	f7ff ff2e 	bl	801275c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012900:	697b      	ldr	r3, [r7, #20]
 8012902:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d1f4      	bne.n	80128f4 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801290a:	68b8      	ldr	r0, [r7, #8]
 801290c:	f7ff ff9e 	bl	801284c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012910:	2300      	movs	r3, #0
}
 8012912:	4618      	mov	r0, r3
 8012914:	3720      	adds	r7, #32
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	200019b8 	.word	0x200019b8

08012920 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012920:	b480      	push	{r7}
 8012922:	b085      	sub	sp, #20
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d101      	bne.n	8012932 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801292e:	2301      	movs	r3, #1
 8012930:	e016      	b.n	8012960 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8012932:	4b0e      	ldr	r3, [pc, #56]	; (801296c <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2200      	movs	r2, #0
 801293c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801293e:	e00b      	b.n	8012958 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	7b1b      	ldrb	r3, [r3, #12]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d004      	beq.n	8012952 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2201      	movs	r2, #1
 801294c:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801294e:	2300      	movs	r3, #0
 8012950:	e006      	b.n	8012960 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d1f0      	bne.n	8012940 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801295e:	2300      	movs	r3, #0
}
 8012960:	4618      	mov	r0, r3
 8012962:	3714      	adds	r7, #20
 8012964:	46bd      	mov	sp, r7
 8012966:	bc80      	pop	{r7}
 8012968:	4770      	bx	lr
 801296a:	bf00      	nop
 801296c:	200019b8 	.word	0x200019b8

08012970 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012970:	b480      	push	{r7}
 8012972:	b085      	sub	sp, #20
 8012974:	af00      	add	r7, sp, #0
 8012976:	4603      	mov	r3, r0
 8012978:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801297a:	2300      	movs	r3, #0
 801297c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801297e:	79fb      	ldrb	r3, [r7, #7]
 8012980:	3b02      	subs	r3, #2
 8012982:	2b11      	cmp	r3, #17
 8012984:	d850      	bhi.n	8012a28 <LoRaMacCommandsGetCmdSize+0xb8>
 8012986:	a201      	add	r2, pc, #4	; (adr r2, 801298c <LoRaMacCommandsGetCmdSize+0x1c>)
 8012988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801298c:	080129d5 	.word	0x080129d5
 8012990:	080129db 	.word	0x080129db
 8012994:	080129e1 	.word	0x080129e1
 8012998:	080129e7 	.word	0x080129e7
 801299c:	080129ed 	.word	0x080129ed
 80129a0:	080129f3 	.word	0x080129f3
 80129a4:	080129f9 	.word	0x080129f9
 80129a8:	080129ff 	.word	0x080129ff
 80129ac:	08012a05 	.word	0x08012a05
 80129b0:	08012a29 	.word	0x08012a29
 80129b4:	08012a29 	.word	0x08012a29
 80129b8:	08012a0b 	.word	0x08012a0b
 80129bc:	08012a29 	.word	0x08012a29
 80129c0:	08012a29 	.word	0x08012a29
 80129c4:	08012a11 	.word	0x08012a11
 80129c8:	08012a17 	.word	0x08012a17
 80129cc:	08012a1d 	.word	0x08012a1d
 80129d0:	08012a23 	.word	0x08012a23
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80129d4:	2303      	movs	r3, #3
 80129d6:	73fb      	strb	r3, [r7, #15]
            break;
 80129d8:	e027      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80129da:	2305      	movs	r3, #5
 80129dc:	73fb      	strb	r3, [r7, #15]
            break;
 80129de:	e024      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80129e0:	2302      	movs	r3, #2
 80129e2:	73fb      	strb	r3, [r7, #15]
            break;
 80129e4:	e021      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80129e6:	2305      	movs	r3, #5
 80129e8:	73fb      	strb	r3, [r7, #15]
            break;
 80129ea:	e01e      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80129ec:	2301      	movs	r3, #1
 80129ee:	73fb      	strb	r3, [r7, #15]
            break;
 80129f0:	e01b      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80129f2:	2306      	movs	r3, #6
 80129f4:	73fb      	strb	r3, [r7, #15]
            break;
 80129f6:	e018      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80129f8:	2302      	movs	r3, #2
 80129fa:	73fb      	strb	r3, [r7, #15]
            break;
 80129fc:	e015      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80129fe:	2302      	movs	r3, #2
 8012a00:	73fb      	strb	r3, [r7, #15]
            break;
 8012a02:	e012      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012a04:	2305      	movs	r3, #5
 8012a06:	73fb      	strb	r3, [r7, #15]
            break;
 8012a08:	e00f      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012a0a:	2306      	movs	r3, #6
 8012a0c:	73fb      	strb	r3, [r7, #15]
            break;
 8012a0e:	e00c      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012a10:	2301      	movs	r3, #1
 8012a12:	73fb      	strb	r3, [r7, #15]
            break;
 8012a14:	e009      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012a16:	2305      	movs	r3, #5
 8012a18:	73fb      	strb	r3, [r7, #15]
            break;
 8012a1a:	e006      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012a1c:	2304      	movs	r3, #4
 8012a1e:	73fb      	strb	r3, [r7, #15]
            break;
 8012a20:	e003      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012a22:	2304      	movs	r3, #4
 8012a24:	73fb      	strb	r3, [r7, #15]
            break;
 8012a26:	e000      	b.n	8012a2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012a28:	bf00      	nop
        }
    }
    return cidSize;
 8012a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3714      	adds	r7, #20
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bc80      	pop	{r7}
 8012a34:	4770      	bx	lr
 8012a36:	bf00      	nop

08012a38 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	4a07      	ldr	r2, [pc, #28]	; (8012a60 <IncreaseBufferPointer+0x28>)
 8012a44:	4293      	cmp	r3, r2
 8012a46:	d102      	bne.n	8012a4e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012a48:	4b06      	ldr	r3, [pc, #24]	; (8012a64 <IncreaseBufferPointer+0x2c>)
 8012a4a:	607b      	str	r3, [r7, #4]
 8012a4c:	e002      	b.n	8012a54 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	3304      	adds	r3, #4
 8012a52:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012a54:	687b      	ldr	r3, [r7, #4]
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	370c      	adds	r7, #12
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bc80      	pop	{r7}
 8012a5e:	4770      	bx	lr
 8012a60:	20001ad0 	.word	0x20001ad0
 8012a64:	20001ac0 	.word	0x20001ac0

08012a68 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b083      	sub	sp, #12
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	4603      	mov	r3, r0
 8012a70:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012a72:	79fb      	ldrb	r3, [r7, #7]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d101      	bne.n	8012a7c <IsListEmpty+0x14>
    {
        return true;
 8012a78:	2301      	movs	r3, #1
 8012a7a:	e000      	b.n	8012a7e <IsListEmpty+0x16>
    }
    return false;
 8012a7c:	2300      	movs	r3, #0
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	370c      	adds	r7, #12
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bc80      	pop	{r7}
 8012a86:	4770      	bx	lr

08012a88 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b083      	sub	sp, #12
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	4603      	mov	r3, r0
 8012a90:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012a92:	79fb      	ldrb	r3, [r7, #7]
 8012a94:	2b04      	cmp	r3, #4
 8012a96:	d901      	bls.n	8012a9c <IsListFull+0x14>
    {
        return true;
 8012a98:	2301      	movs	r3, #1
 8012a9a:	e000      	b.n	8012a9e <IsListFull+0x16>
    }
    return false;
 8012a9c:	2300      	movs	r3, #0
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	370c      	adds	r7, #12
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bc80      	pop	{r7}
 8012aa6:	4770      	bx	lr

08012aa8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b086      	sub	sp, #24
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	4603      	mov	r3, r0
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	607a      	str	r2, [r7, #4]
 8012ab4:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012aba:	4b13      	ldr	r3, [pc, #76]	; (8012b08 <GetElement+0x60>)
 8012abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7ff ffd1 	bl	8012a68 <IsListEmpty>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d001      	beq.n	8012ad0 <GetElement+0x28>
    {
        return NULL;
 8012acc:	2300      	movs	r3, #0
 8012ace:	e017      	b.n	8012b00 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	74fb      	strb	r3, [r7, #19]
 8012ad4:	e00d      	b.n	8012af2 <GetElement+0x4a>
    {
        if( element->Request == request )
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	7bfa      	ldrb	r2, [r7, #15]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d101      	bne.n	8012ae4 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	e00d      	b.n	8012b00 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012ae4:	6978      	ldr	r0, [r7, #20]
 8012ae6:	f7ff ffa7 	bl	8012a38 <IncreaseBufferPointer>
 8012aea:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012aec:	7cfb      	ldrb	r3, [r7, #19]
 8012aee:	3301      	adds	r3, #1
 8012af0:	74fb      	strb	r3, [r7, #19]
 8012af2:	4b05      	ldr	r3, [pc, #20]	; (8012b08 <GetElement+0x60>)
 8012af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012af8:	7cfa      	ldrb	r2, [r7, #19]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d3eb      	bcc.n	8012ad6 <GetElement+0x2e>
    }

    return NULL;
 8012afe:	2300      	movs	r3, #0
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3718      	adds	r7, #24
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	20001ab4 	.word	0x20001ab4

08012b0c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012b14:	4a0c      	ldr	r2, [pc, #48]	; (8012b48 <LoRaMacConfirmQueueInit+0x3c>)
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012b1a:	4b0b      	ldr	r3, [pc, #44]	; (8012b48 <LoRaMacConfirmQueueInit+0x3c>)
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012b22:	4b09      	ldr	r3, [pc, #36]	; (8012b48 <LoRaMacConfirmQueueInit+0x3c>)
 8012b24:	4a09      	ldr	r2, [pc, #36]	; (8012b4c <LoRaMacConfirmQueueInit+0x40>)
 8012b26:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012b28:	4b07      	ldr	r3, [pc, #28]	; (8012b48 <LoRaMacConfirmQueueInit+0x3c>)
 8012b2a:	4a08      	ldr	r2, [pc, #32]	; (8012b4c <LoRaMacConfirmQueueInit+0x40>)
 8012b2c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012b2e:	2214      	movs	r2, #20
 8012b30:	21ff      	movs	r1, #255	; 0xff
 8012b32:	4806      	ldr	r0, [pc, #24]	; (8012b4c <LoRaMacConfirmQueueInit+0x40>)
 8012b34:	f003 fec6 	bl	80168c4 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b38:	4b03      	ldr	r3, [pc, #12]	; (8012b48 <LoRaMacConfirmQueueInit+0x3c>)
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8012b40:	bf00      	nop
 8012b42:	3708      	adds	r7, #8
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	20001ab4 	.word	0x20001ab4
 8012b4c:	20001ac0 	.word	0x20001ac0

08012b50 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012b58:	4b19      	ldr	r3, [pc, #100]	; (8012bc0 <LoRaMacConfirmQueueAdd+0x70>)
 8012b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7ff ff92 	bl	8012a88 <IsListFull>
 8012b64:	4603      	mov	r3, r0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d001      	beq.n	8012b6e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	e023      	b.n	8012bb6 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012b6e:	4b14      	ldr	r3, [pc, #80]	; (8012bc0 <LoRaMacConfirmQueueAdd+0x70>)
 8012b70:	689b      	ldr	r3, [r3, #8]
 8012b72:	687a      	ldr	r2, [r7, #4]
 8012b74:	7812      	ldrb	r2, [r2, #0]
 8012b76:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012b78:	4b11      	ldr	r3, [pc, #68]	; (8012bc0 <LoRaMacConfirmQueueAdd+0x70>)
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	7852      	ldrb	r2, [r2, #1]
 8012b80:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012b82:	4b0f      	ldr	r3, [pc, #60]	; (8012bc0 <LoRaMacConfirmQueueAdd+0x70>)
 8012b84:	689b      	ldr	r3, [r3, #8]
 8012b86:	687a      	ldr	r2, [r7, #4]
 8012b88:	78d2      	ldrb	r2, [r2, #3]
 8012b8a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012b8c:	4b0c      	ldr	r3, [pc, #48]	; (8012bc0 <LoRaMacConfirmQueueAdd+0x70>)
 8012b8e:	689b      	ldr	r3, [r3, #8]
 8012b90:	2200      	movs	r2, #0
 8012b92:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012b94:	4b0a      	ldr	r3, [pc, #40]	; (8012bc0 <LoRaMacConfirmQueueAdd+0x70>)
 8012b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	b2da      	uxtb	r2, r3
 8012b9e:	4b08      	ldr	r3, [pc, #32]	; (8012bc0 <LoRaMacConfirmQueueAdd+0x70>)
 8012ba0:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012ba4:	4b06      	ldr	r3, [pc, #24]	; (8012bc0 <LoRaMacConfirmQueueAdd+0x70>)
 8012ba6:	689b      	ldr	r3, [r3, #8]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7ff ff45 	bl	8012a38 <IncreaseBufferPointer>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	4a03      	ldr	r2, [pc, #12]	; (8012bc0 <LoRaMacConfirmQueueAdd+0x70>)
 8012bb2:	6093      	str	r3, [r2, #8]

    return true;
 8012bb4:	2301      	movs	r3, #1
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3708      	adds	r7, #8
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20001ab4 	.word	0x20001ab4

08012bc4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012bc8:	4b0e      	ldr	r3, [pc, #56]	; (8012c04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7ff ff4a 	bl	8012a68 <IsListEmpty>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d001      	beq.n	8012bde <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	e010      	b.n	8012c00 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012bde:	4b09      	ldr	r3, [pc, #36]	; (8012c04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012be4:	3b01      	subs	r3, #1
 8012be6:	b2da      	uxtb	r2, r3
 8012be8:	4b06      	ldr	r3, [pc, #24]	; (8012c04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012bea:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012bee:	4b05      	ldr	r3, [pc, #20]	; (8012c04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7ff ff20 	bl	8012a38 <IncreaseBufferPointer>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	4a02      	ldr	r2, [pc, #8]	; (8012c04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012bfc:	6053      	str	r3, [r2, #4]

    return true;
 8012bfe:	2301      	movs	r3, #1
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	bd80      	pop	{r7, pc}
 8012c04:	20001ab4 	.word	0x20001ab4

08012c08 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b084      	sub	sp, #16
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	4603      	mov	r3, r0
 8012c10:	460a      	mov	r2, r1
 8012c12:	71fb      	strb	r3, [r7, #7]
 8012c14:	4613      	mov	r3, r2
 8012c16:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012c1c:	4b10      	ldr	r3, [pc, #64]	; (8012c60 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7ff ff20 	bl	8012a68 <IsListEmpty>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	f083 0301 	eor.w	r3, r3, #1
 8012c2e:	b2db      	uxtb	r3, r3
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d011      	beq.n	8012c58 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012c34:	4b0a      	ldr	r3, [pc, #40]	; (8012c60 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012c36:	6859      	ldr	r1, [r3, #4]
 8012c38:	4b09      	ldr	r3, [pc, #36]	; (8012c60 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012c3a:	689a      	ldr	r2, [r3, #8]
 8012c3c:	79bb      	ldrb	r3, [r7, #6]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7ff ff32 	bl	8012aa8 <GetElement>
 8012c44:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d005      	beq.n	8012c58 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	79fa      	ldrb	r2, [r7, #7]
 8012c50:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	2201      	movs	r2, #1
 8012c56:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012c58:	bf00      	nop
 8012c5a:	3710      	adds	r7, #16
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	20001ab4 	.word	0x20001ab4

08012c64 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012c72:	4b10      	ldr	r3, [pc, #64]	; (8012cb4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7ff fef5 	bl	8012a68 <IsListEmpty>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	f083 0301 	eor.w	r3, r3, #1
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d00e      	beq.n	8012ca8 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012c8a:	4b0a      	ldr	r3, [pc, #40]	; (8012cb4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012c8c:	6859      	ldr	r1, [r3, #4]
 8012c8e:	4b09      	ldr	r3, [pc, #36]	; (8012cb4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012c90:	689a      	ldr	r2, [r3, #8]
 8012c92:	79fb      	ldrb	r3, [r7, #7]
 8012c94:	4618      	mov	r0, r3
 8012c96:	f7ff ff07 	bl	8012aa8 <GetElement>
 8012c9a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d002      	beq.n	8012ca8 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	785b      	ldrb	r3, [r3, #1]
 8012ca6:	e000      	b.n	8012caa <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012ca8:	2301      	movs	r3, #1
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3710      	adds	r7, #16
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	20001ab4 	.word	0x20001ab4

08012cb8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b084      	sub	sp, #16
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012cc2:	4b16      	ldr	r3, [pc, #88]	; (8012d1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012cc4:	685b      	ldr	r3, [r3, #4]
 8012cc6:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012cc8:	4a14      	ldr	r2, [pc, #80]	; (8012d1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012cca:	79fb      	ldrb	r3, [r7, #7]
 8012ccc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012cd0:	4b12      	ldr	r3, [pc, #72]	; (8012d1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7ff fec6 	bl	8012a68 <IsListEmpty>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	f083 0301 	eor.w	r3, r3, #1
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d015      	beq.n	8012d14 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	79fa      	ldrb	r2, [r7, #7]
 8012cec:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	78db      	ldrb	r3, [r3, #3]
 8012cf2:	f083 0301 	eor.w	r3, r3, #1
 8012cf6:	b2db      	uxtb	r3, r3
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d002      	beq.n	8012d02 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012d02:	68f8      	ldr	r0, [r7, #12]
 8012d04:	f7ff fe98 	bl	8012a38 <IncreaseBufferPointer>
 8012d08:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012d0a:	4b04      	ldr	r3, [pc, #16]	; (8012d1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012d0c:	689b      	ldr	r3, [r3, #8]
 8012d0e:	68fa      	ldr	r2, [r7, #12]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d1e9      	bne.n	8012ce8 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012d14:	bf00      	nop
 8012d16:	3710      	adds	r7, #16
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	20001ab4 	.word	0x20001ab4

08012d20 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	4603      	mov	r3, r0
 8012d28:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012d2a:	4b09      	ldr	r3, [pc, #36]	; (8012d50 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012d2c:	6859      	ldr	r1, [r3, #4]
 8012d2e:	4b08      	ldr	r3, [pc, #32]	; (8012d50 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012d30:	689a      	ldr	r2, [r3, #8]
 8012d32:	79fb      	ldrb	r3, [r7, #7]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7ff feb7 	bl	8012aa8 <GetElement>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d001      	beq.n	8012d44 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012d40:	2301      	movs	r3, #1
 8012d42:	e000      	b.n	8012d46 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012d44:	2300      	movs	r3, #0
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3708      	adds	r7, #8
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	bf00      	nop
 8012d50:	20001ab4 	.word	0x20001ab4

08012d54 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012d5c:	4b22      	ldr	r3, [pc, #136]	; (8012de8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d62:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012d64:	2300      	movs	r3, #0
 8012d66:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012d68:	2300      	movs	r3, #0
 8012d6a:	73fb      	strb	r3, [r7, #15]
 8012d6c:	e032      	b.n	8012dd4 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012d6e:	4b1e      	ldr	r3, [pc, #120]	; (8012de8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	781a      	ldrb	r2, [r3, #0]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012d78:	4b1b      	ldr	r3, [pc, #108]	; (8012de8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	785a      	ldrb	r2, [r3, #1]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012d82:	4b19      	ldr	r3, [pc, #100]	; (8012de8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012d84:	685b      	ldr	r3, [r3, #4]
 8012d86:	789b      	ldrb	r3, [r3, #2]
 8012d88:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012d8a:	7b7b      	ldrb	r3, [r7, #13]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d005      	beq.n	8012d9c <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012d90:	4b15      	ldr	r3, [pc, #84]	; (8012de8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	689b      	ldr	r3, [r3, #8]
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	4798      	blx	r3
 8012d9a:	e00b      	b.n	8012db4 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012d9c:	4b12      	ldr	r3, [pc, #72]	; (8012de8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012da4:	4b10      	ldr	r3, [pc, #64]	; (8012de8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012da6:	685b      	ldr	r3, [r3, #4]
 8012da8:	785b      	ldrb	r3, [r3, #1]
 8012daa:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012dac:	4b0e      	ldr	r3, [pc, #56]	; (8012de8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012dae:	685b      	ldr	r3, [r3, #4]
 8012db0:	78db      	ldrb	r3, [r3, #3]
 8012db2:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012db4:	f7ff ff06 	bl	8012bc4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012db8:	7b7b      	ldrb	r3, [r7, #13]
 8012dba:	f083 0301 	eor.w	r3, r3, #1
 8012dbe:	b2db      	uxtb	r3, r3
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d004      	beq.n	8012dce <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012dc4:	f107 0308 	add.w	r3, r7, #8
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7ff fec1 	bl	8012b50 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012dce:	7bfb      	ldrb	r3, [r7, #15]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	73fb      	strb	r3, [r7, #15]
 8012dd4:	7bfa      	ldrb	r2, [r7, #15]
 8012dd6:	7bbb      	ldrb	r3, [r7, #14]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d3c8      	bcc.n	8012d6e <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8012ddc:	bf00      	nop
 8012dde:	bf00      	nop
 8012de0:	3710      	adds	r7, #16
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}
 8012de6:	bf00      	nop
 8012de8:	20001ab4 	.word	0x20001ab4

08012dec <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012dec:	b480      	push	{r7}
 8012dee:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012df0:	4b03      	ldr	r3, [pc, #12]	; (8012e00 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012df2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bc80      	pop	{r7}
 8012dfc:	4770      	bx	lr
 8012dfe:	bf00      	nop
 8012e00:	20001ab4 	.word	0x20001ab4

08012e04 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012e08:	4b06      	ldr	r3, [pc, #24]	; (8012e24 <LoRaMacConfirmQueueIsFull+0x20>)
 8012e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7ff fe3a 	bl	8012a88 <IsListFull>
 8012e14:	4603      	mov	r3, r0
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d001      	beq.n	8012e1e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	e000      	b.n	8012e20 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012e1e:	2300      	movs	r3, #0
    }
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	bd80      	pop	{r7, pc}
 8012e24:	20001ab4 	.word	0x20001ab4

08012e28 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b08e      	sub	sp, #56	; 0x38
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	60f8      	str	r0, [r7, #12]
 8012e30:	607b      	str	r3, [r7, #4]
 8012e32:	460b      	mov	r3, r1
 8012e34:	817b      	strh	r3, [r7, #10]
 8012e36:	4613      	mov	r3, r2
 8012e38:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d101      	bne.n	8012e44 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e40:	230a      	movs	r3, #10
 8012e42:	e086      	b.n	8012f52 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8012e44:	2300      	movs	r3, #0
 8012e46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8012e4e:	2300      	movs	r3, #0
 8012e50:	623b      	str	r3, [r7, #32]
 8012e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e56:	2200      	movs	r2, #0
 8012e58:	601a      	str	r2, [r3, #0]
 8012e5a:	605a      	str	r2, [r3, #4]
 8012e5c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012e5e:	2300      	movs	r3, #0
 8012e60:	613b      	str	r3, [r7, #16]
 8012e62:	f107 0314 	add.w	r3, r7, #20
 8012e66:	2200      	movs	r2, #0
 8012e68:	601a      	str	r2, [r3, #0]
 8012e6a:	605a      	str	r2, [r3, #4]
 8012e6c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012e6e:	2301      	movs	r3, #1
 8012e70:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012e72:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012e76:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	b2db      	uxtb	r3, r3
 8012e7c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	0a1b      	lsrs	r3, r3, #8
 8012e82:	b2db      	uxtb	r3, r3
 8012e84:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	0c1b      	lsrs	r3, r3, #16
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	0e1b      	lsrs	r3, r3, #24
 8012e92:	b2db      	uxtb	r3, r3
 8012e94:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e9e:	0a1b      	lsrs	r3, r3, #8
 8012ea0:	b2db      	uxtb	r3, r3
 8012ea2:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ea6:	0c1b      	lsrs	r3, r3, #16
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eae:	0e1b      	lsrs	r3, r3, #24
 8012eb0:	b2db      	uxtb	r3, r3
 8012eb2:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012eb4:	e048      	b.n	8012f48 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8012eb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012ebc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012ec2:	f107 0320 	add.w	r3, r7, #32
 8012ec6:	7a7a      	ldrb	r2, [r7, #9]
 8012ec8:	f107 0010 	add.w	r0, r7, #16
 8012ecc:	2110      	movs	r1, #16
 8012ece:	f7f9 f826 	bl	800bf1e <SecureElementAesEncrypt>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d001      	beq.n	8012edc <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012ed8:	230f      	movs	r3, #15
 8012eda:	e03a      	b.n	8012f52 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012edc:	2300      	movs	r3, #0
 8012ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012ee2:	e01e      	b.n	8012f22 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012ee4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012eec:	4413      	add	r3, r2
 8012eee:	461a      	mov	r2, r3
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	7819      	ldrb	r1, [r3, #0]
 8012ef6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012efa:	3338      	adds	r3, #56	; 0x38
 8012efc:	443b      	add	r3, r7
 8012efe:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012f02:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012f06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012f0a:	4403      	add	r3, r0
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	4403      	add	r3, r0
 8012f12:	404a      	eors	r2, r1
 8012f14:	b2d2      	uxtb	r2, r2
 8012f16:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012f18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012f1c:	3301      	adds	r3, #1
 8012f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012f22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012f26:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012f2a:	2a10      	cmp	r2, #16
 8012f2c:	bfa8      	it	ge
 8012f2e:	2210      	movge	r2, #16
 8012f30:	b212      	sxth	r2, r2
 8012f32:	4293      	cmp	r3, r2
 8012f34:	dbd6      	blt.n	8012ee4 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012f36:	897b      	ldrh	r3, [r7, #10]
 8012f38:	3b10      	subs	r3, #16
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012f3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f42:	3310      	adds	r3, #16
 8012f44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012f48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	dcb2      	bgt.n	8012eb6 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012f50:	2300      	movs	r3, #0
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3738      	adds	r7, #56	; 0x38
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}

08012f5a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012f5a:	b490      	push	{r4, r7}
 8012f5c:	b082      	sub	sp, #8
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	4604      	mov	r4, r0
 8012f62:	4608      	mov	r0, r1
 8012f64:	4611      	mov	r1, r2
 8012f66:	461a      	mov	r2, r3
 8012f68:	4623      	mov	r3, r4
 8012f6a:	80fb      	strh	r3, [r7, #6]
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	717b      	strb	r3, [r7, #5]
 8012f70:	460b      	mov	r3, r1
 8012f72:	713b      	strb	r3, [r7, #4]
 8012f74:	4613      	mov	r3, r2
 8012f76:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012f78:	69bb      	ldr	r3, [r7, #24]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d101      	bne.n	8012f82 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012f7e:	230a      	movs	r3, #10
 8012f80:	e04e      	b.n	8013020 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012f82:	69bb      	ldr	r3, [r7, #24]
 8012f84:	2249      	movs	r2, #73	; 0x49
 8012f86:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012f88:	69bb      	ldr	r3, [r7, #24]
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012f90:	69bb      	ldr	r3, [r7, #24]
 8012f92:	3302      	adds	r3, #2
 8012f94:	2200      	movs	r2, #0
 8012f96:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012f98:	69bb      	ldr	r3, [r7, #24]
 8012f9a:	3303      	adds	r3, #3
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012fa0:	69bb      	ldr	r3, [r7, #24]
 8012fa2:	3304      	adds	r3, #4
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012fa8:	69bb      	ldr	r3, [r7, #24]
 8012faa:	3305      	adds	r3, #5
 8012fac:	78fa      	ldrb	r2, [r7, #3]
 8012fae:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012fb0:	69bb      	ldr	r3, [r7, #24]
 8012fb2:	3306      	adds	r3, #6
 8012fb4:	693a      	ldr	r2, [r7, #16]
 8012fb6:	b2d2      	uxtb	r2, r2
 8012fb8:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	0a1a      	lsrs	r2, r3, #8
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	3307      	adds	r3, #7
 8012fc2:	b2d2      	uxtb	r2, r2
 8012fc4:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	0c1a      	lsrs	r2, r3, #16
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	3308      	adds	r3, #8
 8012fce:	b2d2      	uxtb	r2, r2
 8012fd0:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012fd2:	693b      	ldr	r3, [r7, #16]
 8012fd4:	0e1a      	lsrs	r2, r3, #24
 8012fd6:	69bb      	ldr	r3, [r7, #24]
 8012fd8:	3309      	adds	r3, #9
 8012fda:	b2d2      	uxtb	r2, r2
 8012fdc:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012fde:	69bb      	ldr	r3, [r7, #24]
 8012fe0:	330a      	adds	r3, #10
 8012fe2:	697a      	ldr	r2, [r7, #20]
 8012fe4:	b2d2      	uxtb	r2, r2
 8012fe6:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012fe8:	697b      	ldr	r3, [r7, #20]
 8012fea:	0a1a      	lsrs	r2, r3, #8
 8012fec:	69bb      	ldr	r3, [r7, #24]
 8012fee:	330b      	adds	r3, #11
 8012ff0:	b2d2      	uxtb	r2, r2
 8012ff2:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	0c1a      	lsrs	r2, r3, #16
 8012ff8:	69bb      	ldr	r3, [r7, #24]
 8012ffa:	330c      	adds	r3, #12
 8012ffc:	b2d2      	uxtb	r2, r2
 8012ffe:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	0e1a      	lsrs	r2, r3, #24
 8013004:	69bb      	ldr	r3, [r7, #24]
 8013006:	330d      	adds	r3, #13
 8013008:	b2d2      	uxtb	r2, r2
 801300a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801300c:	69bb      	ldr	r3, [r7, #24]
 801300e:	330e      	adds	r3, #14
 8013010:	2200      	movs	r2, #0
 8013012:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013014:	69bb      	ldr	r3, [r7, #24]
 8013016:	330f      	adds	r3, #15
 8013018:	88fa      	ldrh	r2, [r7, #6]
 801301a:	b2d2      	uxtb	r2, r2
 801301c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801301e:	2300      	movs	r3, #0
}
 8013020:	4618      	mov	r0, r3
 8013022:	3708      	adds	r7, #8
 8013024:	46bd      	mov	sp, r7
 8013026:	bc90      	pop	{r4, r7}
 8013028:	4770      	bx	lr

0801302a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801302a:	b590      	push	{r4, r7, lr}
 801302c:	b08b      	sub	sp, #44	; 0x2c
 801302e:	af04      	add	r7, sp, #16
 8013030:	6078      	str	r0, [r7, #4]
 8013032:	4608      	mov	r0, r1
 8013034:	4611      	mov	r1, r2
 8013036:	461a      	mov	r2, r3
 8013038:	4603      	mov	r3, r0
 801303a:	807b      	strh	r3, [r7, #2]
 801303c:	460b      	mov	r3, r1
 801303e:	707b      	strb	r3, [r7, #1]
 8013040:	4613      	mov	r3, r2
 8013042:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d002      	beq.n	8013050 <ComputeCmacB0+0x26>
 801304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801304c:	2b00      	cmp	r3, #0
 801304e:	d101      	bne.n	8013054 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013050:	230a      	movs	r3, #10
 8013052:	e024      	b.n	801309e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013054:	887b      	ldrh	r3, [r7, #2]
 8013056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801305a:	d901      	bls.n	8013060 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801305c:	230e      	movs	r3, #14
 801305e:	e01e      	b.n	801309e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013060:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8013064:	783a      	ldrb	r2, [r7, #0]
 8013066:	7879      	ldrb	r1, [r7, #1]
 8013068:	8878      	ldrh	r0, [r7, #2]
 801306a:	f107 0308 	add.w	r3, r7, #8
 801306e:	9302      	str	r3, [sp, #8]
 8013070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013072:	9301      	str	r3, [sp, #4]
 8013074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013076:	9300      	str	r3, [sp, #0]
 8013078:	4623      	mov	r3, r4
 801307a:	f7ff ff6e 	bl	8012f5a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801307e:	7879      	ldrb	r1, [r7, #1]
 8013080:	887a      	ldrh	r2, [r7, #2]
 8013082:	f107 0008 	add.w	r0, r7, #8
 8013086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013088:	9300      	str	r3, [sp, #0]
 801308a:	460b      	mov	r3, r1
 801308c:	6879      	ldr	r1, [r7, #4]
 801308e:	f7f8 fef9 	bl	800be84 <SecureElementComputeAesCmac>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d001      	beq.n	801309c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013098:	230f      	movs	r3, #15
 801309a:	e000      	b.n	801309e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801309c:	2300      	movs	r3, #0
}
 801309e:	4618      	mov	r0, r3
 80130a0:	371c      	adds	r7, #28
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd90      	pop	{r4, r7, pc}

080130a6 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80130a6:	b590      	push	{r4, r7, lr}
 80130a8:	b0cd      	sub	sp, #308	; 0x134
 80130aa:	af04      	add	r7, sp, #16
 80130ac:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80130b0:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80130b4:	6020      	str	r0, [r4, #0]
 80130b6:	460c      	mov	r4, r1
 80130b8:	4610      	mov	r0, r2
 80130ba:	4619      	mov	r1, r3
 80130bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130c0:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80130c4:	4622      	mov	r2, r4
 80130c6:	801a      	strh	r2, [r3, #0]
 80130c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130cc:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80130d0:	4602      	mov	r2, r0
 80130d2:	701a      	strb	r2, [r3, #0]
 80130d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80130dc:	460a      	mov	r2, r1
 80130de:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80130e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d101      	bne.n	80130f2 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80130ee:	230a      	movs	r3, #10
 80130f0:	e063      	b.n	80131ba <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80130f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130f6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80130fa:	881b      	ldrh	r3, [r3, #0]
 80130fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013100:	d901      	bls.n	8013106 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013102:	230e      	movs	r3, #14
 8013104:	e059      	b.n	80131ba <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013106:	f107 030c 	add.w	r3, r7, #12
 801310a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801310e:	2100      	movs	r1, #0
 8013110:	4618      	mov	r0, r3
 8013112:	f003 fbd7 	bl	80168c4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013116:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801311a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801311e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013122:	781a      	ldrb	r2, [r3, #0]
 8013124:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013128:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801312c:	7819      	ldrb	r1, [r3, #0]
 801312e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013132:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013136:	8818      	ldrh	r0, [r3, #0]
 8013138:	f107 030c 	add.w	r3, r7, #12
 801313c:	9302      	str	r3, [sp, #8]
 801313e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013142:	9301      	str	r3, [sp, #4]
 8013144:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013148:	9300      	str	r3, [sp, #0]
 801314a:	4623      	mov	r3, r4
 801314c:	f7ff ff05 	bl	8012f5a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013150:	f107 030c 	add.w	r3, r7, #12
 8013154:	3310      	adds	r3, #16
 8013156:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801315a:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 801315e:	8812      	ldrh	r2, [r2, #0]
 8013160:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8013164:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8013168:	6809      	ldr	r1, [r1, #0]
 801316a:	4618      	mov	r0, r3
 801316c:	f003 fb6f 	bl	801684e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013170:	2306      	movs	r3, #6
 8013172:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013176:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801317a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801317e:	881b      	ldrh	r3, [r3, #0]
 8013180:	3310      	adds	r3, #16
 8013182:	b299      	uxth	r1, r3
 8013184:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013188:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	f107 000c 	add.w	r0, r7, #12
 8013192:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8013196:	f7f8 fe93 	bl	800bec0 <SecureElementVerifyAesCmac>
 801319a:	4603      	mov	r3, r0
 801319c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80131a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d101      	bne.n	80131ac <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80131a8:	2300      	movs	r3, #0
 80131aa:	e006      	b.n	80131ba <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80131ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80131b0:	2b01      	cmp	r3, #1
 80131b2:	d101      	bne.n	80131b8 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80131b4:	2301      	movs	r3, #1
 80131b6:	e000      	b.n	80131ba <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80131b8:	230f      	movs	r3, #15
}
 80131ba:	4618      	mov	r0, r3
 80131bc:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd90      	pop	{r4, r7, pc}

080131c4 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80131c4:	b480      	push	{r7}
 80131c6:	b085      	sub	sp, #20
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	4603      	mov	r3, r0
 80131cc:	6039      	str	r1, [r7, #0]
 80131ce:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80131d0:	2300      	movs	r3, #0
 80131d2:	73fb      	strb	r3, [r7, #15]
 80131d4:	e011      	b.n	80131fa <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80131d6:	7bfb      	ldrb	r3, [r7, #15]
 80131d8:	4a0c      	ldr	r2, [pc, #48]	; (801320c <GetKeyAddrItem+0x48>)
 80131da:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80131de:	79fa      	ldrb	r2, [r7, #7]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d107      	bne.n	80131f4 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80131e4:	7bfb      	ldrb	r3, [r7, #15]
 80131e6:	009b      	lsls	r3, r3, #2
 80131e8:	4a08      	ldr	r2, [pc, #32]	; (801320c <GetKeyAddrItem+0x48>)
 80131ea:	441a      	add	r2, r3
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80131f0:	2300      	movs	r3, #0
 80131f2:	e006      	b.n	8013202 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80131f4:	7bfb      	ldrb	r3, [r7, #15]
 80131f6:	3301      	adds	r3, #1
 80131f8:	73fb      	strb	r3, [r7, #15]
 80131fa:	7bfb      	ldrb	r3, [r7, #15]
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	d9ea      	bls.n	80131d6 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013200:	230c      	movs	r3, #12
}
 8013202:	4618      	mov	r0, r3
 8013204:	3714      	adds	r7, #20
 8013206:	46bd      	mov	sp, r7
 8013208:	bc80      	pop	{r7}
 801320a:	4770      	bx	lr
 801320c:	2000012c 	.word	0x2000012c

08013210 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b088      	sub	sp, #32
 8013214:	af00      	add	r7, sp, #0
 8013216:	60b9      	str	r1, [r7, #8]
 8013218:	607a      	str	r2, [r7, #4]
 801321a:	461a      	mov	r2, r3
 801321c:	4603      	mov	r3, r0
 801321e:	73fb      	strb	r3, [r7, #15]
 8013220:	4613      	mov	r3, r2
 8013222:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013224:	2300      	movs	r3, #0
 8013226:	613b      	str	r3, [r7, #16]
 8013228:	f107 0314 	add.w	r3, r7, #20
 801322c:	2200      	movs	r2, #0
 801322e:	601a      	str	r2, [r3, #0]
 8013230:	605a      	str	r2, [r3, #4]
 8013232:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8013234:	7bfb      	ldrb	r3, [r7, #15]
 8013236:	2b02      	cmp	r3, #2
 8013238:	d002      	beq.n	8013240 <DeriveSessionKey10x+0x30>
 801323a:	2b03      	cmp	r3, #3
 801323c:	d003      	beq.n	8013246 <DeriveSessionKey10x+0x36>
 801323e:	e005      	b.n	801324c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8013240:	2301      	movs	r3, #1
 8013242:	743b      	strb	r3, [r7, #16]
            break;
 8013244:	e004      	b.n	8013250 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013246:	2302      	movs	r3, #2
 8013248:	743b      	strb	r3, [r7, #16]
            break;
 801324a:	e001      	b.n	8013250 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801324c:	230b      	movs	r3, #11
 801324e:	e02a      	b.n	80132a6 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	b2db      	uxtb	r3, r3
 8013254:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	0a1b      	lsrs	r3, r3, #8
 801325a:	b2db      	uxtb	r3, r3
 801325c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	0c1b      	lsrs	r3, r3, #16
 8013262:	b2db      	uxtb	r3, r3
 8013264:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	b2db      	uxtb	r3, r3
 801326a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	0a1b      	lsrs	r3, r3, #8
 8013270:	b2db      	uxtb	r3, r3
 8013272:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	0c1b      	lsrs	r3, r3, #16
 8013278:	b2db      	uxtb	r3, r3
 801327a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801327c:	89bb      	ldrh	r3, [r7, #12]
 801327e:	b2db      	uxtb	r3, r3
 8013280:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013282:	89bb      	ldrh	r3, [r7, #12]
 8013284:	0a1b      	lsrs	r3, r3, #8
 8013286:	b29b      	uxth	r3, r3
 8013288:	b2db      	uxtb	r3, r3
 801328a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801328c:	7bfa      	ldrb	r2, [r7, #15]
 801328e:	f107 0310 	add.w	r3, r7, #16
 8013292:	2101      	movs	r1, #1
 8013294:	4618      	mov	r0, r3
 8013296:	f7f8 fea9 	bl	800bfec <SecureElementDeriveAndStoreKey>
 801329a:	4603      	mov	r3, r0
 801329c:	2b00      	cmp	r3, #0
 801329e:	d001      	beq.n	80132a4 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80132a0:	230f      	movs	r3, #15
 80132a2:	e000      	b.n	80132a6 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80132a4:	2300      	movs	r3, #0
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	3720      	adds	r7, #32
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}
	...

080132b0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80132b0:	b480      	push	{r7}
 80132b2:	b083      	sub	sp, #12
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	4603      	mov	r3, r0
 80132b8:	6039      	str	r1, [r7, #0]
 80132ba:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d101      	bne.n	80132c6 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80132c2:	230a      	movs	r3, #10
 80132c4:	e03b      	b.n	801333e <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 80132c6:	79fb      	ldrb	r3, [r7, #7]
 80132c8:	3b01      	subs	r3, #1
 80132ca:	2b03      	cmp	r3, #3
 80132cc:	d834      	bhi.n	8013338 <GetLastFcntDown+0x88>
 80132ce:	a201      	add	r2, pc, #4	; (adr r2, 80132d4 <GetLastFcntDown+0x24>)
 80132d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132d4:	080132e5 	.word	0x080132e5
 80132d8:	080132fd 	.word	0x080132fd
 80132dc:	08013315 	.word	0x08013315
 80132e0:	0801332d 	.word	0x0801332d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80132e4:	4b18      	ldr	r3, [pc, #96]	; (8013348 <GetLastFcntDown+0x98>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	691a      	ldr	r2, [r3, #16]
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 80132ee:	4b16      	ldr	r3, [pc, #88]	; (8013348 <GetLastFcntDown+0x98>)
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	4b15      	ldr	r3, [pc, #84]	; (8013348 <GetLastFcntDown+0x98>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	6912      	ldr	r2, [r2, #16]
 80132f8:	621a      	str	r2, [r3, #32]
            break;
 80132fa:	e01f      	b.n	801333c <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80132fc:	4b12      	ldr	r3, [pc, #72]	; (8013348 <GetLastFcntDown+0x98>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	695a      	ldr	r2, [r3, #20]
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8013306:	4b10      	ldr	r3, [pc, #64]	; (8013348 <GetLastFcntDown+0x98>)
 8013308:	681a      	ldr	r2, [r3, #0]
 801330a:	4b0f      	ldr	r3, [pc, #60]	; (8013348 <GetLastFcntDown+0x98>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	6952      	ldr	r2, [r2, #20]
 8013310:	621a      	str	r2, [r3, #32]
            break;
 8013312:	e013      	b.n	801333c <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013314:	4b0c      	ldr	r3, [pc, #48]	; (8013348 <GetLastFcntDown+0x98>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	699a      	ldr	r2, [r3, #24]
 801331a:	683b      	ldr	r3, [r7, #0]
 801331c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801331e:	4b0a      	ldr	r3, [pc, #40]	; (8013348 <GetLastFcntDown+0x98>)
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	4b09      	ldr	r3, [pc, #36]	; (8013348 <GetLastFcntDown+0x98>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	6992      	ldr	r2, [r2, #24]
 8013328:	621a      	str	r2, [r3, #32]
            break;
 801332a:	e007      	b.n	801333c <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 801332c:	4b06      	ldr	r3, [pc, #24]	; (8013348 <GetLastFcntDown+0x98>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	69da      	ldr	r2, [r3, #28]
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	601a      	str	r2, [r3, #0]
            break;
 8013336:	e001      	b.n	801333c <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013338:	2305      	movs	r3, #5
 801333a:	e000      	b.n	801333e <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801333c:	2300      	movs	r3, #0
}
 801333e:	4618      	mov	r0, r3
 8013340:	370c      	adds	r7, #12
 8013342:	46bd      	mov	sp, r7
 8013344:	bc80      	pop	{r7}
 8013346:	4770      	bx	lr
 8013348:	20001ad8 	.word	0x20001ad8

0801334c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b084      	sub	sp, #16
 8013350:	af00      	add	r7, sp, #0
 8013352:	4603      	mov	r3, r0
 8013354:	6039      	str	r1, [r7, #0]
 8013356:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013358:	2300      	movs	r3, #0
 801335a:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 801335c:	f107 020c 	add.w	r2, r7, #12
 8013360:	79fb      	ldrb	r3, [r7, #7]
 8013362:	4611      	mov	r1, r2
 8013364:	4618      	mov	r0, r3
 8013366:	f7ff ffa3 	bl	80132b0 <GetLastFcntDown>
 801336a:	4603      	mov	r3, r0
 801336c:	2b00      	cmp	r3, #0
 801336e:	d001      	beq.n	8013374 <CheckFCntDown+0x28>
    {
        return false;
 8013370:	2300      	movs	r3, #0
 8013372:	e00a      	b.n	801338a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	683a      	ldr	r2, [r7, #0]
 8013378:	429a      	cmp	r2, r3
 801337a:	d803      	bhi.n	8013384 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 801337c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801337e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013382:	d101      	bne.n	8013388 <CheckFCntDown+0x3c>
    {
        return true;
 8013384:	2301      	movs	r3, #1
 8013386:	e000      	b.n	801338a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013388:	2300      	movs	r3, #0
    }
}
 801338a:	4618      	mov	r0, r3
 801338c:	3710      	adds	r7, #16
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
	...

08013394 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013394:	b480      	push	{r7}
 8013396:	b083      	sub	sp, #12
 8013398:	af00      	add	r7, sp, #0
 801339a:	4603      	mov	r3, r0
 801339c:	6039      	str	r1, [r7, #0]
 801339e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80133a0:	79fb      	ldrb	r3, [r7, #7]
 80133a2:	3b01      	subs	r3, #1
 80133a4:	2b03      	cmp	r3, #3
 80133a6:	d81f      	bhi.n	80133e8 <UpdateFCntDown+0x54>
 80133a8:	a201      	add	r2, pc, #4	; (adr r2, 80133b0 <UpdateFCntDown+0x1c>)
 80133aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ae:	bf00      	nop
 80133b0:	080133c1 	.word	0x080133c1
 80133b4:	080133cb 	.word	0x080133cb
 80133b8:	080133d5 	.word	0x080133d5
 80133bc:	080133df 	.word	0x080133df
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80133c0:	4b0c      	ldr	r3, [pc, #48]	; (80133f4 <UpdateFCntDown+0x60>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	683a      	ldr	r2, [r7, #0]
 80133c6:	611a      	str	r2, [r3, #16]
            break;
 80133c8:	e00f      	b.n	80133ea <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80133ca:	4b0a      	ldr	r3, [pc, #40]	; (80133f4 <UpdateFCntDown+0x60>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	683a      	ldr	r2, [r7, #0]
 80133d0:	615a      	str	r2, [r3, #20]
            break;
 80133d2:	e00a      	b.n	80133ea <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80133d4:	4b07      	ldr	r3, [pc, #28]	; (80133f4 <UpdateFCntDown+0x60>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	683a      	ldr	r2, [r7, #0]
 80133da:	619a      	str	r2, [r3, #24]
            break;
 80133dc:	e005      	b.n	80133ea <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80133de:	4b05      	ldr	r3, [pc, #20]	; (80133f4 <UpdateFCntDown+0x60>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	683a      	ldr	r2, [r7, #0]
 80133e4:	61da      	str	r2, [r3, #28]
            break;
 80133e6:	e000      	b.n	80133ea <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80133e8:	bf00      	nop
    }
}
 80133ea:	bf00      	nop
 80133ec:	370c      	adds	r7, #12
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bc80      	pop	{r7}
 80133f2:	4770      	bx	lr
 80133f4:	20001ad8 	.word	0x20001ad8

080133f8 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80133f8:	b480      	push	{r7}
 80133fa:	b083      	sub	sp, #12
 80133fc:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80133fe:	4b18      	ldr	r3, [pc, #96]	; (8013460 <ResetFCnts+0x68>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	2200      	movs	r2, #0
 8013404:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013406:	4b16      	ldr	r3, [pc, #88]	; (8013460 <ResetFCnts+0x68>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801340e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013410:	4b13      	ldr	r3, [pc, #76]	; (8013460 <ResetFCnts+0x68>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013418:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801341a:	4b11      	ldr	r3, [pc, #68]	; (8013460 <ResetFCnts+0x68>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013422:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013424:	4b0e      	ldr	r3, [pc, #56]	; (8013460 <ResetFCnts+0x68>)
 8013426:	681a      	ldr	r2, [r3, #0]
 8013428:	4b0d      	ldr	r3, [pc, #52]	; (8013460 <ResetFCnts+0x68>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	6992      	ldr	r2, [r2, #24]
 801342e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013430:	2300      	movs	r3, #0
 8013432:	607b      	str	r3, [r7, #4]
 8013434:	e00b      	b.n	801344e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013436:	4b0a      	ldr	r3, [pc, #40]	; (8013460 <ResetFCnts+0x68>)
 8013438:	681a      	ldr	r2, [r3, #0]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	3306      	adds	r3, #6
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	4413      	add	r3, r2
 8013442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013446:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	3301      	adds	r3, #1
 801344c:	607b      	str	r3, [r7, #4]
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	2b00      	cmp	r3, #0
 8013452:	ddf0      	ble.n	8013436 <ResetFCnts+0x3e>
    }
}
 8013454:	bf00      	nop
 8013456:	bf00      	nop
 8013458:	370c      	adds	r7, #12
 801345a:	46bd      	mov	sp, r7
 801345c:	bc80      	pop	{r7}
 801345e:	4770      	bx	lr
 8013460:	20001ad8 	.word	0x20001ad8

08013464 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d101      	bne.n	8013476 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013472:	2309      	movs	r3, #9
 8013474:	e01c      	b.n	80134b0 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013476:	4a10      	ldr	r2, [pc, #64]	; (80134b8 <LoRaMacCryptoInit+0x54>)
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801347c:	4b0e      	ldr	r3, [pc, #56]	; (80134b8 <LoRaMacCryptoInit+0x54>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	2228      	movs	r2, #40	; 0x28
 8013482:	2100      	movs	r1, #0
 8013484:	4618      	mov	r0, r3
 8013486:	f003 fa1d 	bl	80168c4 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801348a:	4b0b      	ldr	r3, [pc, #44]	; (80134b8 <LoRaMacCryptoInit+0x54>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	2201      	movs	r2, #1
 8013490:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013492:	4b09      	ldr	r3, [pc, #36]	; (80134b8 <LoRaMacCryptoInit+0x54>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	2201      	movs	r2, #1
 8013498:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801349a:	4b07      	ldr	r3, [pc, #28]	; (80134b8 <LoRaMacCryptoInit+0x54>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	2201      	movs	r2, #1
 80134a0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80134a2:	4b05      	ldr	r3, [pc, #20]	; (80134b8 <LoRaMacCryptoInit+0x54>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	2200      	movs	r2, #0
 80134a8:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80134aa:	f7ff ffa5 	bl	80133f8 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80134ae:	2300      	movs	r3, #0
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	3708      	adds	r7, #8
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}
 80134b8:	20001ad8 	.word	0x20001ad8

080134bc <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80134bc:	b480      	push	{r7}
 80134be:	b083      	sub	sp, #12
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80134c4:	4b04      	ldr	r3, [pc, #16]	; (80134d8 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	687a      	ldr	r2, [r7, #4]
 80134ca:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80134cc:	2300      	movs	r3, #0
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	370c      	adds	r7, #12
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bc80      	pop	{r7}
 80134d6:	4770      	bx	lr
 80134d8:	20001ad8 	.word	0x20001ad8

080134dc <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80134dc:	b480      	push	{r7}
 80134de:	b083      	sub	sp, #12
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d101      	bne.n	80134ee <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80134ea:	230a      	movs	r3, #10
 80134ec:	e006      	b.n	80134fc <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80134ee:	4b06      	ldr	r3, [pc, #24]	; (8013508 <LoRaMacCryptoGetFCntUp+0x2c>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	68db      	ldr	r3, [r3, #12]
 80134f4:	1c5a      	adds	r2, r3, #1
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80134fa:	2300      	movs	r3, #0
}
 80134fc:	4618      	mov	r0, r3
 80134fe:	370c      	adds	r7, #12
 8013500:	46bd      	mov	sp, r7
 8013502:	bc80      	pop	{r7}
 8013504:	4770      	bx	lr
 8013506:	bf00      	nop
 8013508:	20001ad8 	.word	0x20001ad8

0801350c <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 801350c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013510:	b08a      	sub	sp, #40	; 0x28
 8013512:	af00      	add	r7, sp, #0
 8013514:	613a      	str	r2, [r7, #16]
 8013516:	60fb      	str	r3, [r7, #12]
 8013518:	4603      	mov	r3, r0
 801351a:	75fb      	strb	r3, [r7, #23]
 801351c:	460b      	mov	r3, r1
 801351e:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8013520:	2300      	movs	r3, #0
 8013522:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8013524:	2300      	movs	r3, #0
 8013526:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013528:	2313      	movs	r3, #19
 801352a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d101      	bne.n	8013538 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013534:	230a      	movs	r3, #10
 8013536:	e057      	b.n	80135e8 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013538:	f107 021c 	add.w	r2, r7, #28
 801353c:	7dfb      	ldrb	r3, [r7, #23]
 801353e:	4611      	mov	r1, r2
 8013540:	4618      	mov	r0, r3
 8013542:	f7ff feb5 	bl	80132b0 <GetLastFcntDown>
 8013546:	4603      	mov	r3, r0
 8013548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801354c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013550:	2b00      	cmp	r3, #0
 8013552:	d002      	beq.n	801355a <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8013554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013558:	e046      	b.n	80135e8 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801355a:	69fb      	ldr	r3, [r7, #28]
 801355c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013560:	d103      	bne.n	801356a <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	693a      	ldr	r2, [r7, #16]
 8013566:	601a      	str	r2, [r3, #0]
 8013568:	e01e      	b.n	80135a8 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801356a:	69fb      	ldr	r3, [r7, #28]
 801356c:	b29b      	uxth	r3, r3
 801356e:	693a      	ldr	r2, [r7, #16]
 8013570:	1ad3      	subs	r3, r2, r3
 8013572:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8013574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013576:	2b00      	cmp	r3, #0
 8013578:	dd05      	ble.n	8013586 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801357a:	69fa      	ldr	r2, [r7, #28]
 801357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801357e:	441a      	add	r2, r3
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	601a      	str	r2, [r3, #0]
 8013584:	e010      	b.n	80135a8 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8013586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013588:	2b00      	cmp	r3, #0
 801358a:	d104      	bne.n	8013596 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801358c:	69fa      	ldr	r2, [r7, #28]
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013592:	2307      	movs	r3, #7
 8013594:	e028      	b.n	80135e8 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013596:	69fb      	ldr	r3, [r7, #28]
 8013598:	0c1b      	lsrs	r3, r3, #16
 801359a:	041b      	lsls	r3, r3, #16
 801359c:	693a      	ldr	r2, [r7, #16]
 801359e:	4413      	add	r3, r2
 80135a0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80135a8:	4b12      	ldr	r3, [pc, #72]	; (80135f4 <LoRaMacCryptoGetFCntDown+0xe8>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	789b      	ldrb	r3, [r3, #2]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d119      	bne.n	80135e6 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	2200      	movs	r2, #0
 80135b8:	603b      	str	r3, [r7, #0]
 80135ba:	607a      	str	r2, [r7, #4]
 80135bc:	69fb      	ldr	r3, [r7, #28]
 80135be:	2200      	movs	r2, #0
 80135c0:	469a      	mov	sl, r3
 80135c2:	4693      	mov	fp, r2
 80135c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135c8:	4611      	mov	r1, r2
 80135ca:	ebb1 040a 	subs.w	r4, r1, sl
 80135ce:	eb63 050b 	sbc.w	r5, r3, fp
 80135d2:	8abb      	ldrh	r3, [r7, #20]
 80135d4:	2200      	movs	r2, #0
 80135d6:	4698      	mov	r8, r3
 80135d8:	4691      	mov	r9, r2
 80135da:	4544      	cmp	r4, r8
 80135dc:	eb75 0309 	sbcs.w	r3, r5, r9
 80135e0:	db01      	blt.n	80135e6 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80135e2:	2308      	movs	r3, #8
 80135e4:	e000      	b.n	80135e8 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80135e6:	2300      	movs	r3, #0
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3728      	adds	r7, #40	; 0x28
 80135ec:	46bd      	mov	sp, r7
 80135ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80135f2:	bf00      	nop
 80135f4:	20001ad8 	.word	0x20001ad8

080135f8 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80135f8:	b480      	push	{r7}
 80135fa:	b085      	sub	sp, #20
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d101      	bne.n	801360a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013606:	230a      	movs	r3, #10
 8013608:	e017      	b.n	801363a <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801360a:	2300      	movs	r3, #0
 801360c:	60fb      	str	r3, [r7, #12]
 801360e:	e010      	b.n	8013632 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013610:	4b0c      	ldr	r3, [pc, #48]	; (8013644 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013612:	6819      	ldr	r1, [r3, #0]
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	222c      	movs	r2, #44	; 0x2c
 8013618:	fb02 f303 	mul.w	r3, r2, r3
 801361c:	687a      	ldr	r2, [r7, #4]
 801361e:	4413      	add	r3, r2
 8013620:	68fa      	ldr	r2, [r7, #12]
 8013622:	3206      	adds	r2, #6
 8013624:	0092      	lsls	r2, r2, #2
 8013626:	440a      	add	r2, r1
 8013628:	3204      	adds	r2, #4
 801362a:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	3301      	adds	r3, #1
 8013630:	60fb      	str	r3, [r7, #12]
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	ddeb      	ble.n	8013610 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013638:	2300      	movs	r3, #0
}
 801363a:	4618      	mov	r0, r3
 801363c:	3714      	adds	r7, #20
 801363e:	46bd      	mov	sp, r7
 8013640:	bc80      	pop	{r7}
 8013642:	4770      	bx	lr
 8013644:	20001ad8 	.word	0x20001ad8

08013648 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b082      	sub	sp, #8
 801364c:	af00      	add	r7, sp, #0
 801364e:	4603      	mov	r3, r0
 8013650:	6039      	str	r1, [r7, #0]
 8013652:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013654:	79fb      	ldrb	r3, [r7, #7]
 8013656:	6839      	ldr	r1, [r7, #0]
 8013658:	4618      	mov	r0, r3
 801365a:	f7f8 fbb5 	bl	800bdc8 <SecureElementSetKey>
 801365e:	4603      	mov	r3, r0
 8013660:	2b00      	cmp	r3, #0
 8013662:	d001      	beq.n	8013668 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013664:	230f      	movs	r3, #15
 8013666:	e018      	b.n	801369a <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013668:	79fb      	ldrb	r3, [r7, #7]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d114      	bne.n	8013698 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801366e:	4b0d      	ldr	r3, [pc, #52]	; (80136a4 <LoRaMacCryptoSetKey+0x5c>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	789b      	ldrb	r3, [r3, #2]
 8013674:	79fa      	ldrb	r2, [r7, #7]
 8013676:	4611      	mov	r1, r2
 8013678:	4618      	mov	r0, r3
 801367a:	f000 fa3f 	bl	8013afc <LoRaMacCryptoDeriveMcRootKey>
 801367e:	4603      	mov	r3, r0
 8013680:	2b00      	cmp	r3, #0
 8013682:	d001      	beq.n	8013688 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013684:	230f      	movs	r3, #15
 8013686:	e008      	b.n	801369a <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013688:	2004      	movs	r0, #4
 801368a:	f000 fa62 	bl	8013b52 <LoRaMacCryptoDeriveMcKEKey>
 801368e:	4603      	mov	r3, r0
 8013690:	2b00      	cmp	r3, #0
 8013692:	d001      	beq.n	8013698 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013694:	230f      	movs	r3, #15
 8013696:	e000      	b.n	801369a <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013698:	2300      	movs	r3, #0
}
 801369a:	4618      	mov	r0, r3
 801369c:	3708      	adds	r7, #8
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	20001ad8 	.word	0x20001ad8

080136a8 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b086      	sub	sp, #24
 80136ac:	af02      	add	r7, sp, #8
 80136ae:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d101      	bne.n	80136ba <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80136b6:	230a      	movs	r3, #10
 80136b8:	e033      	b.n	8013722 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80136ba:	2301      	movs	r3, #1
 80136bc:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80136be:	2300      	movs	r3, #0
 80136c0:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80136c2:	f107 0308 	add.w	r3, r7, #8
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7f8 fd4e 	bl	800c168 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80136cc:	68ba      	ldr	r2, [r7, #8]
 80136ce:	4b17      	ldr	r3, [pc, #92]	; (801372c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	b292      	uxth	r2, r2
 80136d4:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80136d6:	4b15      	ldr	r3, [pc, #84]	; (801372c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	889a      	ldrh	r2, [r3, #4]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80136e0:	6878      	ldr	r0, [r7, #4]
 80136e2:	f000 fc18 	bl	8013f16 <LoRaMacSerializerJoinRequest>
 80136e6:	4603      	mov	r3, r0
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d001      	beq.n	80136f0 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80136ec:	2311      	movs	r3, #17
 80136ee:	e018      	b.n	8013722 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6819      	ldr	r1, [r3, #0]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	3318      	adds	r3, #24
 80136f8:	7bfa      	ldrb	r2, [r7, #15]
 80136fa:	9300      	str	r3, [sp, #0]
 80136fc:	4613      	mov	r3, r2
 80136fe:	2213      	movs	r2, #19
 8013700:	2000      	movs	r0, #0
 8013702:	f7f8 fbbf 	bl	800be84 <SecureElementComputeAesCmac>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d001      	beq.n	8013710 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801370c:	230f      	movs	r3, #15
 801370e:	e008      	b.n	8013722 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f000 fc00 	bl	8013f16 <LoRaMacSerializerJoinRequest>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d001      	beq.n	8013720 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801371c:	2311      	movs	r3, #17
 801371e:	e000      	b.n	8013722 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013720:	2300      	movs	r3, #0
}
 8013722:	4618      	mov	r0, r3
 8013724:	3710      	adds	r7, #16
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}
 801372a:	bf00      	nop
 801372c:	20001ad8 	.word	0x20001ad8

08013730 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013730:	b590      	push	{r4, r7, lr}
 8013732:	b097      	sub	sp, #92	; 0x5c
 8013734:	af04      	add	r7, sp, #16
 8013736:	4603      	mov	r3, r0
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	607a      	str	r2, [r7, #4]
 801373c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d002      	beq.n	801374a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d101      	bne.n	801374e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801374a:	230a      	movs	r3, #10
 801374c:	e0bd      	b.n	80138ca <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801374e:	2313      	movs	r3, #19
 8013750:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013754:	2300      	movs	r3, #0
 8013756:	61bb      	str	r3, [r7, #24]
 8013758:	f107 031c 	add.w	r3, r7, #28
 801375c:	221d      	movs	r2, #29
 801375e:	2100      	movs	r1, #0
 8013760:	4618      	mov	r0, r3
 8013762:	f007 fe65 	bl	801b430 <memset>
    uint8_t versionMinor         = 0;
 8013766:	2300      	movs	r3, #0
 8013768:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801376a:	4b5a      	ldr	r3, [pc, #360]	; (80138d4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	889b      	ldrh	r3, [r3, #4]
 8013770:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681c      	ldr	r4, [r3, #0]
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	791b      	ldrb	r3, [r3, #4]
 801377c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013780:	7bf8      	ldrb	r0, [r7, #15]
 8013782:	f107 0217 	add.w	r2, r7, #23
 8013786:	9202      	str	r2, [sp, #8]
 8013788:	f107 0218 	add.w	r2, r7, #24
 801378c:	9201      	str	r2, [sp, #4]
 801378e:	9300      	str	r3, [sp, #0]
 8013790:	4623      	mov	r3, r4
 8013792:	460a      	mov	r2, r1
 8013794:	68b9      	ldr	r1, [r7, #8]
 8013796:	f7f8 fc69 	bl	800c06c <SecureElementProcessJoinAccept>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d001      	beq.n	80137a4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80137a0:	230f      	movs	r3, #15
 80137a2:	e092      	b.n	80138ca <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6818      	ldr	r0, [r3, #0]
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	791b      	ldrb	r3, [r3, #4]
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	f107 0318 	add.w	r3, r7, #24
 80137b2:	4619      	mov	r1, r3
 80137b4:	f003 f84b 	bl	801684e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f000 f9ed 	bl	8013b98 <LoRaMacParserJoinAccept>
 80137be:	4603      	mov	r3, r0
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d001      	beq.n	80137c8 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80137c4:	2310      	movs	r3, #16
 80137c6:	e080      	b.n	80138ca <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	799b      	ldrb	r3, [r3, #6]
 80137cc:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	79db      	ldrb	r3, [r3, #7]
 80137d2:	021b      	lsls	r3, r3, #8
 80137d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80137d6:	4313      	orrs	r3, r2
 80137d8:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	7a1b      	ldrb	r3, [r3, #8]
 80137de:	041b      	lsls	r3, r3, #16
 80137e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80137e2:	4313      	orrs	r3, r2
 80137e4:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80137e6:	4b3b      	ldr	r3, [pc, #236]	; (80138d4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	689b      	ldr	r3, [r3, #8]
 80137ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d010      	beq.n	8013814 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80137f2:	4b38      	ldr	r3, [pc, #224]	; (80138d4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80137f8:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80137fa:	7dfb      	ldrb	r3, [r7, #23]
 80137fc:	2100      	movs	r1, #0
 80137fe:	4618      	mov	r0, r3
 8013800:	f000 f97c 	bl	8013afc <LoRaMacCryptoDeriveMcRootKey>
 8013804:	4603      	mov	r3, r0
 8013806:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801380a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801380e:	2b00      	cmp	r3, #0
 8013810:	d005      	beq.n	801381e <LoRaMacCryptoHandleJoinAccept+0xee>
 8013812:	e001      	b.n	8013818 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013814:	2303      	movs	r3, #3
 8013816:	e058      	b.n	80138ca <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013818:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801381c:	e055      	b.n	80138ca <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801381e:	2004      	movs	r0, #4
 8013820:	f000 f997 	bl	8013b52 <LoRaMacCryptoDeriveMcKEKey>
 8013824:	4603      	mov	r3, r0
 8013826:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801382a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801382e:	2b00      	cmp	r3, #0
 8013830:	d002      	beq.n	8013838 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8013832:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013836:	e048      	b.n	80138ca <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	7a5b      	ldrb	r3, [r3, #9]
 801383c:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	7a9b      	ldrb	r3, [r3, #10]
 8013842:	021b      	lsls	r3, r3, #8
 8013844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013846:	4313      	orrs	r3, r2
 8013848:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	7adb      	ldrb	r3, [r3, #11]
 801384e:	041b      	lsls	r3, r3, #16
 8013850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013852:	4313      	orrs	r3, r2
 8013854:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013856:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801385a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801385c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801385e:	2003      	movs	r0, #3
 8013860:	f7ff fcd6 	bl	8013210 <DeriveSessionKey10x>
 8013864:	4603      	mov	r3, r0
 8013866:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801386a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801386e:	2b00      	cmp	r3, #0
 8013870:	d002      	beq.n	8013878 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013872:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013876:	e028      	b.n	80138ca <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013878:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801387c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801387e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013880:	2002      	movs	r0, #2
 8013882:	f7ff fcc5 	bl	8013210 <DeriveSessionKey10x>
 8013886:	4603      	mov	r3, r0
 8013888:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801388c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013890:	2b00      	cmp	r3, #0
 8013892:	d002      	beq.n	801389a <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013894:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013898:	e017      	b.n	80138ca <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801389a:	4b0e      	ldr	r3, [pc, #56]	; (80138d4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	7dfa      	ldrb	r2, [r7, #23]
 80138a0:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80138a2:	4b0c      	ldr	r3, [pc, #48]	; (80138d4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	2200      	movs	r2, #0
 80138a8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80138aa:	4b0a      	ldr	r3, [pc, #40]	; (80138d4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138b2:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80138b4:	4b07      	ldr	r3, [pc, #28]	; (80138d4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138bc:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80138be:	4b05      	ldr	r3, [pc, #20]	; (80138d4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138c6:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80138c8:	2300      	movs	r3, #0
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	374c      	adds	r7, #76	; 0x4c
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd90      	pop	{r4, r7, pc}
 80138d2:	bf00      	nop
 80138d4:	20001ad8 	.word	0x20001ad8

080138d8 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80138d8:	b590      	push	{r4, r7, lr}
 80138da:	b08b      	sub	sp, #44	; 0x2c
 80138dc:	af04      	add	r7, sp, #16
 80138de:	60f8      	str	r0, [r7, #12]
 80138e0:	607b      	str	r3, [r7, #4]
 80138e2:	460b      	mov	r3, r1
 80138e4:	72fb      	strb	r3, [r7, #11]
 80138e6:	4613      	mov	r3, r2
 80138e8:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80138ea:	2313      	movs	r3, #19
 80138ec:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80138ee:	2303      	movs	r3, #3
 80138f0:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d101      	bne.n	80138fc <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80138f8:	230a      	movs	r3, #10
 80138fa:	e05f      	b.n	80139bc <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80138fc:	4b31      	ldr	r3, [pc, #196]	; (80139c4 <LoRaMacCryptoSecureMessage+0xec>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	68db      	ldr	r3, [r3, #12]
 8013902:	68fa      	ldr	r2, [r7, #12]
 8013904:	429a      	cmp	r2, r3
 8013906:	d201      	bcs.n	801390c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013908:	2306      	movs	r3, #6
 801390a:	e057      	b.n	80139bc <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d101      	bne.n	801391a <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013916:	2302      	movs	r3, #2
 8013918:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801391a:	4b2a      	ldr	r3, [pc, #168]	; (80139c4 <LoRaMacCryptoSecureMessage+0xec>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	68db      	ldr	r3, [r3, #12]
 8013920:	68fa      	ldr	r2, [r7, #12]
 8013922:	429a      	cmp	r2, r3
 8013924:	d916      	bls.n	8013954 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013930:	b219      	sxth	r1, r3
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	689c      	ldr	r4, [r3, #8]
 8013936:	7dfa      	ldrb	r2, [r7, #23]
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	9301      	str	r3, [sp, #4]
 801393c:	2300      	movs	r3, #0
 801393e:	9300      	str	r3, [sp, #0]
 8013940:	4623      	mov	r3, r4
 8013942:	f7ff fa71 	bl	8012e28 <PayloadEncrypt>
 8013946:	4603      	mov	r3, r0
 8013948:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801394a:	7dbb      	ldrb	r3, [r7, #22]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d001      	beq.n	8013954 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013950:	7dbb      	ldrb	r3, [r7, #22]
 8013952:	e033      	b.n	80139bc <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f000 fb60 	bl	801401a <LoRaMacSerializerData>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d001      	beq.n	8013964 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013960:	2311      	movs	r3, #17
 8013962:	e02b      	b.n	80139bc <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013964:	2302      	movs	r3, #2
 8013966:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6818      	ldr	r0, [r3, #0]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	791b      	ldrb	r3, [r3, #4]
 8013970:	b29b      	uxth	r3, r3
 8013972:	3b04      	subs	r3, #4
 8013974:	b299      	uxth	r1, r3
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	689b      	ldr	r3, [r3, #8]
 801397a:	687a      	ldr	r2, [r7, #4]
 801397c:	322c      	adds	r2, #44	; 0x2c
 801397e:	7dfc      	ldrb	r4, [r7, #23]
 8013980:	9203      	str	r2, [sp, #12]
 8013982:	68fa      	ldr	r2, [r7, #12]
 8013984:	9202      	str	r2, [sp, #8]
 8013986:	9301      	str	r3, [sp, #4]
 8013988:	2300      	movs	r3, #0
 801398a:	9300      	str	r3, [sp, #0]
 801398c:	2300      	movs	r3, #0
 801398e:	4622      	mov	r2, r4
 8013990:	f7ff fb4b 	bl	801302a <ComputeCmacB0>
 8013994:	4603      	mov	r3, r0
 8013996:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013998:	7dbb      	ldrb	r3, [r7, #22]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d001      	beq.n	80139a2 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 801399e:	7dbb      	ldrb	r3, [r7, #22]
 80139a0:	e00c      	b.n	80139bc <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f000 fb39 	bl	801401a <LoRaMacSerializerData>
 80139a8:	4603      	mov	r3, r0
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d001      	beq.n	80139b2 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80139ae:	2311      	movs	r3, #17
 80139b0:	e004      	b.n	80139bc <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80139b2:	4b04      	ldr	r3, [pc, #16]	; (80139c4 <LoRaMacCryptoSecureMessage+0xec>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	68fa      	ldr	r2, [r7, #12]
 80139b8:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80139ba:	2300      	movs	r3, #0
}
 80139bc:	4618      	mov	r0, r3
 80139be:	371c      	adds	r7, #28
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd90      	pop	{r4, r7, pc}
 80139c4:	20001ad8 	.word	0x20001ad8

080139c8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80139c8:	b590      	push	{r4, r7, lr}
 80139ca:	b08b      	sub	sp, #44	; 0x2c
 80139cc:	af04      	add	r7, sp, #16
 80139ce:	60b9      	str	r1, [r7, #8]
 80139d0:	607b      	str	r3, [r7, #4]
 80139d2:	4603      	mov	r3, r0
 80139d4:	73fb      	strb	r3, [r7, #15]
 80139d6:	4613      	mov	r3, r2
 80139d8:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80139da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d101      	bne.n	80139e4 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80139e0:	230a      	movs	r3, #10
 80139e2:	e084      	b.n	8013aee <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80139e4:	7bbb      	ldrb	r3, [r7, #14]
 80139e6:	6879      	ldr	r1, [r7, #4]
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7ff fcaf 	bl	801334c <CheckFCntDown>
 80139ee:	4603      	mov	r3, r0
 80139f0:	f083 0301 	eor.w	r3, r3, #1
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d001      	beq.n	80139fe <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80139fa:	2306      	movs	r3, #6
 80139fc:	e077      	b.n	8013aee <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80139fe:	2313      	movs	r3, #19
 8013a00:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013a02:	2303      	movs	r3, #3
 8013a04:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013a06:	2302      	movs	r3, #2
 8013a08:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a0c:	f000 f98f 	bl	8013d2e <LoRaMacParserData>
 8013a10:	4603      	mov	r3, r0
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d001      	beq.n	8013a1a <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013a16:	2310      	movs	r3, #16
 8013a18:	e069      	b.n	8013aee <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013a1a:	f107 0210 	add.w	r2, r7, #16
 8013a1e:	7bfb      	ldrb	r3, [r7, #15]
 8013a20:	4611      	mov	r1, r2
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7ff fbce 	bl	80131c4 <GetKeyAddrItem>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013a2c:	7d7b      	ldrb	r3, [r7, #21]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d001      	beq.n	8013a36 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013a32:	7d7b      	ldrb	r3, [r7, #21]
 8013a34:	e05b      	b.n	8013aee <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	785b      	ldrb	r3, [r3, #1]
 8013a3a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013a3c:	693b      	ldr	r3, [r7, #16]
 8013a3e:	789b      	ldrb	r3, [r3, #2]
 8013a40:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a44:	689b      	ldr	r3, [r3, #8]
 8013a46:	68ba      	ldr	r2, [r7, #8]
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d001      	beq.n	8013a50 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013a4c:	2302      	movs	r3, #2
 8013a4e:	e04e      	b.n	8013aee <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a52:	7b1b      	ldrb	r3, [r3, #12]
 8013a54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013a58:	b2db      	uxtb	r3, r3
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	bf14      	ite	ne
 8013a5e:	2301      	movne	r3, #1
 8013a60:	2300      	moveq	r3, #0
 8013a62:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013a64:	4b24      	ldr	r3, [pc, #144]	; (8013af8 <LoRaMacCryptoUnsecureMessage+0x130>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	789b      	ldrb	r3, [r3, #2]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d101      	bne.n	8013a72 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a74:	6818      	ldr	r0, [r3, #0]
 8013a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a78:	791b      	ldrb	r3, [r3, #4]
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	3b04      	subs	r3, #4
 8013a7e:	b299      	uxth	r1, r3
 8013a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a84:	7dbc      	ldrb	r4, [r7, #22]
 8013a86:	7d3a      	ldrb	r2, [r7, #20]
 8013a88:	9303      	str	r3, [sp, #12]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	9302      	str	r3, [sp, #8]
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	9301      	str	r3, [sp, #4]
 8013a92:	2301      	movs	r3, #1
 8013a94:	9300      	str	r3, [sp, #0]
 8013a96:	4623      	mov	r3, r4
 8013a98:	f7ff fb05 	bl	80130a6 <VerifyCmacB0>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013aa0:	7d7b      	ldrb	r3, [r7, #21]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d001      	beq.n	8013aaa <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8013aa6:	7d7b      	ldrb	r3, [r7, #21]
 8013aa8:	e021      	b.n	8013aee <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d101      	bne.n	8013ab8 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013ab4:	2302      	movs	r3, #2
 8013ab6:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ac2:	b219      	sxth	r1, r3
 8013ac4:	7dfa      	ldrb	r2, [r7, #23]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	9301      	str	r3, [sp, #4]
 8013aca:	2301      	movs	r3, #1
 8013acc:	9300      	str	r3, [sp, #0]
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	f7ff f9aa 	bl	8012e28 <PayloadEncrypt>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013ad8:	7d7b      	ldrb	r3, [r7, #21]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d001      	beq.n	8013ae2 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8013ade:	7d7b      	ldrb	r3, [r7, #21]
 8013ae0:	e005      	b.n	8013aee <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013ae2:	7bbb      	ldrb	r3, [r7, #14]
 8013ae4:	6879      	ldr	r1, [r7, #4]
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7ff fc54 	bl	8013394 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013aec:	2300      	movs	r3, #0
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	371c      	adds	r7, #28
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd90      	pop	{r4, r7, pc}
 8013af6:	bf00      	nop
 8013af8:	20001ad8 	.word	0x20001ad8

08013afc <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b086      	sub	sp, #24
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	4603      	mov	r3, r0
 8013b04:	460a      	mov	r2, r1
 8013b06:	71fb      	strb	r3, [r7, #7]
 8013b08:	4613      	mov	r3, r2
 8013b0a:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013b0c:	79bb      	ldrb	r3, [r7, #6]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d001      	beq.n	8013b16 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013b12:	230b      	movs	r3, #11
 8013b14:	e019      	b.n	8013b4a <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8013b16:	2300      	movs	r3, #0
 8013b18:	60bb      	str	r3, [r7, #8]
 8013b1a:	f107 030c 	add.w	r3, r7, #12
 8013b1e:	2200      	movs	r2, #0
 8013b20:	601a      	str	r2, [r3, #0]
 8013b22:	605a      	str	r2, [r3, #4]
 8013b24:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8013b26:	79fb      	ldrb	r3, [r7, #7]
 8013b28:	2b01      	cmp	r3, #1
 8013b2a:	d101      	bne.n	8013b30 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8013b2c:	2320      	movs	r3, #32
 8013b2e:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013b30:	79b9      	ldrb	r1, [r7, #6]
 8013b32:	f107 0308 	add.w	r3, r7, #8
 8013b36:	2204      	movs	r2, #4
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7f8 fa57 	bl	800bfec <SecureElementDeriveAndStoreKey>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d001      	beq.n	8013b48 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013b44:	230f      	movs	r3, #15
 8013b46:	e000      	b.n	8013b4a <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013b48:	2300      	movs	r3, #0
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3718      	adds	r7, #24
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}

08013b52 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8013b52:	b580      	push	{r7, lr}
 8013b54:	b086      	sub	sp, #24
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	4603      	mov	r3, r0
 8013b5a:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013b5c:	79fb      	ldrb	r3, [r7, #7]
 8013b5e:	2b04      	cmp	r3, #4
 8013b60:	d001      	beq.n	8013b66 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013b62:	230b      	movs	r3, #11
 8013b64:	e014      	b.n	8013b90 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8013b66:	2300      	movs	r3, #0
 8013b68:	60bb      	str	r3, [r7, #8]
 8013b6a:	f107 030c 	add.w	r3, r7, #12
 8013b6e:	2200      	movs	r2, #0
 8013b70:	601a      	str	r2, [r3, #0]
 8013b72:	605a      	str	r2, [r3, #4]
 8013b74:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013b76:	79f9      	ldrb	r1, [r7, #7]
 8013b78:	f107 0308 	add.w	r3, r7, #8
 8013b7c:	227f      	movs	r2, #127	; 0x7f
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7f8 fa34 	bl	800bfec <SecureElementDeriveAndStoreKey>
 8013b84:	4603      	mov	r3, r0
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d001      	beq.n	8013b8e <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013b8a:	230f      	movs	r3, #15
 8013b8c:	e000      	b.n	8013b90 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013b8e:	2300      	movs	r3, #0
}
 8013b90:	4618      	mov	r0, r3
 8013b92:	3718      	adds	r7, #24
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d003      	beq.n	8013bae <LoRaMacParserJoinAccept+0x16>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d101      	bne.n	8013bb2 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013bae:	2302      	movs	r3, #2
 8013bb0:	e0b9      	b.n	8013d26 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681a      	ldr	r2, [r3, #0]
 8013bba:	89fb      	ldrh	r3, [r7, #14]
 8013bbc:	1c59      	adds	r1, r3, #1
 8013bbe:	81f9      	strh	r1, [r7, #14]
 8013bc0:	4413      	add	r3, r2
 8013bc2:	781a      	ldrb	r2, [r3, #0]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	1d98      	adds	r0, r3, #6
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681a      	ldr	r2, [r3, #0]
 8013bd0:	89fb      	ldrh	r3, [r7, #14]
 8013bd2:	4413      	add	r3, r2
 8013bd4:	2203      	movs	r2, #3
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	f002 fe39 	bl	801684e <memcpy1>
    bufItr = bufItr + 3;
 8013bdc:	89fb      	ldrh	r3, [r7, #14]
 8013bde:	3303      	adds	r3, #3
 8013be0:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f103 0009 	add.w	r0, r3, #9
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	89fb      	ldrh	r3, [r7, #14]
 8013bee:	4413      	add	r3, r2
 8013bf0:	2203      	movs	r2, #3
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	f002 fe2b 	bl	801684e <memcpy1>
    bufItr = bufItr + 3;
 8013bf8:	89fb      	ldrh	r3, [r7, #14]
 8013bfa:	3303      	adds	r3, #3
 8013bfc:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	681a      	ldr	r2, [r3, #0]
 8013c02:	89fb      	ldrh	r3, [r7, #14]
 8013c04:	1c59      	adds	r1, r3, #1
 8013c06:	81f9      	strh	r1, [r7, #14]
 8013c08:	4413      	add	r3, r2
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	461a      	mov	r2, r3
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681a      	ldr	r2, [r3, #0]
 8013c16:	89fb      	ldrh	r3, [r7, #14]
 8013c18:	1c59      	adds	r1, r3, #1
 8013c1a:	81f9      	strh	r1, [r7, #14]
 8013c1c:	4413      	add	r3, r2
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	021a      	lsls	r2, r3, #8
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	68db      	ldr	r3, [r3, #12]
 8013c26:	431a      	orrs	r2, r3
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681a      	ldr	r2, [r3, #0]
 8013c30:	89fb      	ldrh	r3, [r7, #14]
 8013c32:	1c59      	adds	r1, r3, #1
 8013c34:	81f9      	strh	r1, [r7, #14]
 8013c36:	4413      	add	r3, r2
 8013c38:	781b      	ldrb	r3, [r3, #0]
 8013c3a:	041a      	lsls	r2, r3, #16
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	68db      	ldr	r3, [r3, #12]
 8013c40:	431a      	orrs	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	89fb      	ldrh	r3, [r7, #14]
 8013c4c:	1c59      	adds	r1, r3, #1
 8013c4e:	81f9      	strh	r1, [r7, #14]
 8013c50:	4413      	add	r3, r2
 8013c52:	781b      	ldrb	r3, [r3, #0]
 8013c54:	061a      	lsls	r2, r3, #24
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	68db      	ldr	r3, [r3, #12]
 8013c5a:	431a      	orrs	r2, r3
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	89fb      	ldrh	r3, [r7, #14]
 8013c66:	1c59      	adds	r1, r3, #1
 8013c68:	81f9      	strh	r1, [r7, #14]
 8013c6a:	4413      	add	r3, r2
 8013c6c:	781a      	ldrb	r2, [r3, #0]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	89fb      	ldrh	r3, [r7, #14]
 8013c78:	1c59      	adds	r1, r3, #1
 8013c7a:	81f9      	strh	r1, [r7, #14]
 8013c7c:	4413      	add	r3, r2
 8013c7e:	781a      	ldrb	r2, [r3, #0]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	791b      	ldrb	r3, [r3, #4]
 8013c88:	1f1a      	subs	r2, r3, #4
 8013c8a:	89fb      	ldrh	r3, [r7, #14]
 8013c8c:	1ad3      	subs	r3, r2, r3
 8013c8e:	2b10      	cmp	r3, #16
 8013c90:	d10e      	bne.n	8013cb0 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f103 0012 	add.w	r0, r3, #18
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	89fb      	ldrh	r3, [r7, #14]
 8013c9e:	4413      	add	r3, r2
 8013ca0:	2210      	movs	r2, #16
 8013ca2:	4619      	mov	r1, r3
 8013ca4:	f002 fdd3 	bl	801684e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013ca8:	89fb      	ldrh	r3, [r7, #14]
 8013caa:	3310      	adds	r3, #16
 8013cac:	81fb      	strh	r3, [r7, #14]
 8013cae:	e008      	b.n	8013cc2 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	791b      	ldrb	r3, [r3, #4]
 8013cb4:	1f1a      	subs	r2, r3, #4
 8013cb6:	89fb      	ldrh	r3, [r7, #14]
 8013cb8:	1ad3      	subs	r3, r2, r3
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	dd01      	ble.n	8013cc2 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	e031      	b.n	8013d26 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	89fb      	ldrh	r3, [r7, #14]
 8013cc8:	1c59      	adds	r1, r3, #1
 8013cca:	81f9      	strh	r1, [r7, #14]
 8013ccc:	4413      	add	r3, r2
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	461a      	mov	r2, r3
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681a      	ldr	r2, [r3, #0]
 8013cda:	89fb      	ldrh	r3, [r7, #14]
 8013cdc:	1c59      	adds	r1, r3, #1
 8013cde:	81f9      	strh	r1, [r7, #14]
 8013ce0:	4413      	add	r3, r2
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	021a      	lsls	r2, r3, #8
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cea:	431a      	orrs	r2, r3
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	681a      	ldr	r2, [r3, #0]
 8013cf4:	89fb      	ldrh	r3, [r7, #14]
 8013cf6:	1c59      	adds	r1, r3, #1
 8013cf8:	81f9      	strh	r1, [r7, #14]
 8013cfa:	4413      	add	r3, r2
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	041a      	lsls	r2, r3, #16
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d04:	431a      	orrs	r2, r3
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681a      	ldr	r2, [r3, #0]
 8013d0e:	89fb      	ldrh	r3, [r7, #14]
 8013d10:	1c59      	adds	r1, r3, #1
 8013d12:	81f9      	strh	r1, [r7, #14]
 8013d14:	4413      	add	r3, r2
 8013d16:	781b      	ldrb	r3, [r3, #0]
 8013d18:	061a      	lsls	r2, r3, #24
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d1e:	431a      	orrs	r2, r3
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013d24:	2300      	movs	r3, #0
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3710      	adds	r7, #16
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}

08013d2e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8013d2e:	b580      	push	{r7, lr}
 8013d30:	b084      	sub	sp, #16
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d003      	beq.n	8013d44 <LoRaMacParserData+0x16>
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d101      	bne.n	8013d48 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013d44:	2302      	movs	r3, #2
 8013d46:	e0e2      	b.n	8013f0e <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681a      	ldr	r2, [r3, #0]
 8013d50:	89fb      	ldrh	r3, [r7, #14]
 8013d52:	1c59      	adds	r1, r3, #1
 8013d54:	81f9      	strh	r1, [r7, #14]
 8013d56:	4413      	add	r3, r2
 8013d58:	781a      	ldrb	r2, [r3, #0]
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681a      	ldr	r2, [r3, #0]
 8013d62:	89fb      	ldrh	r3, [r7, #14]
 8013d64:	1c59      	adds	r1, r3, #1
 8013d66:	81f9      	strh	r1, [r7, #14]
 8013d68:	4413      	add	r3, r2
 8013d6a:	781b      	ldrb	r3, [r3, #0]
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	89fb      	ldrh	r3, [r7, #14]
 8013d78:	1c59      	adds	r1, r3, #1
 8013d7a:	81f9      	strh	r1, [r7, #14]
 8013d7c:	4413      	add	r3, r2
 8013d7e:	781b      	ldrb	r3, [r3, #0]
 8013d80:	021a      	lsls	r2, r3, #8
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	689b      	ldr	r3, [r3, #8]
 8013d86:	431a      	orrs	r2, r3
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681a      	ldr	r2, [r3, #0]
 8013d90:	89fb      	ldrh	r3, [r7, #14]
 8013d92:	1c59      	adds	r1, r3, #1
 8013d94:	81f9      	strh	r1, [r7, #14]
 8013d96:	4413      	add	r3, r2
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	041a      	lsls	r2, r3, #16
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	689b      	ldr	r3, [r3, #8]
 8013da0:	431a      	orrs	r2, r3
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	89fb      	ldrh	r3, [r7, #14]
 8013dac:	1c59      	adds	r1, r3, #1
 8013dae:	81f9      	strh	r1, [r7, #14]
 8013db0:	4413      	add	r3, r2
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	061a      	lsls	r2, r3, #24
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	689b      	ldr	r3, [r3, #8]
 8013dba:	431a      	orrs	r2, r3
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681a      	ldr	r2, [r3, #0]
 8013dc4:	89fb      	ldrh	r3, [r7, #14]
 8013dc6:	1c59      	adds	r1, r3, #1
 8013dc8:	81f9      	strh	r1, [r7, #14]
 8013dca:	4413      	add	r3, r2
 8013dcc:	781a      	ldrb	r2, [r3, #0]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	89fb      	ldrh	r3, [r7, #14]
 8013dd8:	1c59      	adds	r1, r3, #1
 8013dda:	81f9      	strh	r1, [r7, #14]
 8013ddc:	4413      	add	r3, r2
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	b29a      	uxth	r2, r3
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	89fb      	ldrh	r3, [r7, #14]
 8013dec:	1c59      	adds	r1, r3, #1
 8013dee:	81f9      	strh	r1, [r7, #14]
 8013df0:	4413      	add	r3, r2
 8013df2:	781b      	ldrb	r3, [r3, #0]
 8013df4:	0219      	lsls	r1, r3, #8
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	89db      	ldrh	r3, [r3, #14]
 8013dfa:	b21a      	sxth	r2, r3
 8013dfc:	b20b      	sxth	r3, r1
 8013dfe:	4313      	orrs	r3, r2
 8013e00:	b21b      	sxth	r3, r3
 8013e02:	b29a      	uxth	r2, r3
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f103 0010 	add.w	r0, r3, #16
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681a      	ldr	r2, [r3, #0]
 8013e12:	89fb      	ldrh	r3, [r7, #14]
 8013e14:	18d1      	adds	r1, r2, r3
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	7b1b      	ldrb	r3, [r3, #12]
 8013e1a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013e1e:	b2db      	uxtb	r3, r3
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	461a      	mov	r2, r3
 8013e24:	f002 fd13 	bl	801684e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	7b1b      	ldrb	r3, [r3, #12]
 8013e2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013e30:	b2db      	uxtb	r3, r3
 8013e32:	b29a      	uxth	r2, r3
 8013e34:	89fb      	ldrh	r3, [r7, #14]
 8013e36:	4413      	add	r3, r2
 8013e38:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2200      	movs	r2, #0
 8013e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	791b      	ldrb	r3, [r3, #4]
 8013e4e:	461a      	mov	r2, r3
 8013e50:	89fb      	ldrh	r3, [r7, #14]
 8013e52:	1ad3      	subs	r3, r2, r3
 8013e54:	2b04      	cmp	r3, #4
 8013e56:	dd28      	ble.n	8013eaa <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681a      	ldr	r2, [r3, #0]
 8013e5c:	89fb      	ldrh	r3, [r7, #14]
 8013e5e:	1c59      	adds	r1, r3, #1
 8013e60:	81f9      	strh	r1, [r7, #14]
 8013e62:	4413      	add	r3, r2
 8013e64:	781a      	ldrb	r2, [r3, #0]
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	791a      	ldrb	r2, [r3, #4]
 8013e70:	89fb      	ldrh	r3, [r7, #14]
 8013e72:	b2db      	uxtb	r3, r3
 8013e74:	1ad3      	subs	r3, r2, r3
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	3b04      	subs	r3, #4
 8013e7a:	b2da      	uxtb	r2, r3
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	89fb      	ldrh	r3, [r7, #14]
 8013e8c:	18d1      	adds	r1, r2, r3
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	461a      	mov	r2, r3
 8013e98:	f002 fcd9 	bl	801684e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ea2:	b29a      	uxth	r2, r3
 8013ea4:	89fb      	ldrh	r3, [r7, #14]
 8013ea6:	4413      	add	r3, r2
 8013ea8:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681a      	ldr	r2, [r3, #0]
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	791b      	ldrb	r3, [r3, #4]
 8013eb2:	3b04      	subs	r3, #4
 8013eb4:	4413      	add	r3, r2
 8013eb6:	781b      	ldrb	r3, [r3, #0]
 8013eb8:	461a      	mov	r2, r3
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	6819      	ldr	r1, [r3, #0]
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	791b      	ldrb	r3, [r3, #4]
 8013eca:	3b03      	subs	r3, #3
 8013ecc:	440b      	add	r3, r1
 8013ece:	781b      	ldrb	r3, [r3, #0]
 8013ed0:	021b      	lsls	r3, r3, #8
 8013ed2:	431a      	orrs	r2, r3
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6819      	ldr	r1, [r3, #0]
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	791b      	ldrb	r3, [r3, #4]
 8013ee4:	3b02      	subs	r3, #2
 8013ee6:	440b      	add	r3, r1
 8013ee8:	781b      	ldrb	r3, [r3, #0]
 8013eea:	041b      	lsls	r3, r3, #16
 8013eec:	431a      	orrs	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	6819      	ldr	r1, [r3, #0]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	791b      	ldrb	r3, [r3, #4]
 8013efe:	3b01      	subs	r3, #1
 8013f00:	440b      	add	r3, r1
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	061b      	lsls	r3, r3, #24
 8013f06:	431a      	orrs	r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013f0c:	2300      	movs	r3, #0
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3710      	adds	r7, #16
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}

08013f16 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013f16:	b580      	push	{r7, lr}
 8013f18:	b084      	sub	sp, #16
 8013f1a:	af00      	add	r7, sp, #0
 8013f1c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d003      	beq.n	8013f2c <LoRaMacSerializerJoinRequest+0x16>
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d101      	bne.n	8013f30 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	e070      	b.n	8014012 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013f30:	2300      	movs	r3, #0
 8013f32:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	791b      	ldrb	r3, [r3, #4]
 8013f38:	2b16      	cmp	r3, #22
 8013f3a:	d801      	bhi.n	8013f40 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013f3c:	2302      	movs	r3, #2
 8013f3e:	e068      	b.n	8014012 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	89fb      	ldrh	r3, [r7, #14]
 8013f46:	1c59      	adds	r1, r3, #1
 8013f48:	81f9      	strh	r1, [r7, #14]
 8013f4a:	4413      	add	r3, r2
 8013f4c:	687a      	ldr	r2, [r7, #4]
 8013f4e:	7952      	ldrb	r2, [r2, #5]
 8013f50:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681a      	ldr	r2, [r3, #0]
 8013f56:	89fb      	ldrh	r3, [r7, #14]
 8013f58:	18d0      	adds	r0, r2, r3
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	3306      	adds	r3, #6
 8013f5e:	2208      	movs	r2, #8
 8013f60:	4619      	mov	r1, r3
 8013f62:	f002 fc8f 	bl	8016884 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013f66:	89fb      	ldrh	r3, [r7, #14]
 8013f68:	3308      	adds	r3, #8
 8013f6a:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681a      	ldr	r2, [r3, #0]
 8013f70:	89fb      	ldrh	r3, [r7, #14]
 8013f72:	18d0      	adds	r0, r2, r3
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	330e      	adds	r3, #14
 8013f78:	2208      	movs	r2, #8
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	f002 fc82 	bl	8016884 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013f80:	89fb      	ldrh	r3, [r7, #14]
 8013f82:	3308      	adds	r3, #8
 8013f84:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	8ad9      	ldrh	r1, [r3, #22]
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	89fb      	ldrh	r3, [r7, #14]
 8013f90:	1c58      	adds	r0, r3, #1
 8013f92:	81f8      	strh	r0, [r7, #14]
 8013f94:	4413      	add	r3, r2
 8013f96:	b2ca      	uxtb	r2, r1
 8013f98:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	8adb      	ldrh	r3, [r3, #22]
 8013f9e:	0a1b      	lsrs	r3, r3, #8
 8013fa0:	b299      	uxth	r1, r3
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	681a      	ldr	r2, [r3, #0]
 8013fa6:	89fb      	ldrh	r3, [r7, #14]
 8013fa8:	1c58      	adds	r0, r3, #1
 8013faa:	81f8      	strh	r0, [r7, #14]
 8013fac:	4413      	add	r3, r2
 8013fae:	b2ca      	uxtb	r2, r1
 8013fb0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6999      	ldr	r1, [r3, #24]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681a      	ldr	r2, [r3, #0]
 8013fba:	89fb      	ldrh	r3, [r7, #14]
 8013fbc:	1c58      	adds	r0, r3, #1
 8013fbe:	81f8      	strh	r0, [r7, #14]
 8013fc0:	4413      	add	r3, r2
 8013fc2:	b2ca      	uxtb	r2, r1
 8013fc4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	699b      	ldr	r3, [r3, #24]
 8013fca:	0a19      	lsrs	r1, r3, #8
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681a      	ldr	r2, [r3, #0]
 8013fd0:	89fb      	ldrh	r3, [r7, #14]
 8013fd2:	1c58      	adds	r0, r3, #1
 8013fd4:	81f8      	strh	r0, [r7, #14]
 8013fd6:	4413      	add	r3, r2
 8013fd8:	b2ca      	uxtb	r2, r1
 8013fda:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	699b      	ldr	r3, [r3, #24]
 8013fe0:	0c19      	lsrs	r1, r3, #16
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681a      	ldr	r2, [r3, #0]
 8013fe6:	89fb      	ldrh	r3, [r7, #14]
 8013fe8:	1c58      	adds	r0, r3, #1
 8013fea:	81f8      	strh	r0, [r7, #14]
 8013fec:	4413      	add	r3, r2
 8013fee:	b2ca      	uxtb	r2, r1
 8013ff0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	699b      	ldr	r3, [r3, #24]
 8013ff6:	0e19      	lsrs	r1, r3, #24
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681a      	ldr	r2, [r3, #0]
 8013ffc:	89fb      	ldrh	r3, [r7, #14]
 8013ffe:	1c58      	adds	r0, r3, #1
 8014000:	81f8      	strh	r0, [r7, #14]
 8014002:	4413      	add	r3, r2
 8014004:	b2ca      	uxtb	r2, r1
 8014006:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014008:	89fb      	ldrh	r3, [r7, #14]
 801400a:	b2da      	uxtb	r2, r3
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014010:	2300      	movs	r3, #0
}
 8014012:	4618      	mov	r0, r3
 8014014:	3710      	adds	r7, #16
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}

0801401a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801401a:	b580      	push	{r7, lr}
 801401c:	b084      	sub	sp, #16
 801401e:	af00      	add	r7, sp, #0
 8014020:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d003      	beq.n	8014030 <LoRaMacSerializerData+0x16>
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d101      	bne.n	8014034 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014030:	2301      	movs	r3, #1
 8014032:	e0e5      	b.n	8014200 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8014034:	2300      	movs	r3, #0
 8014036:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014038:	2308      	movs	r3, #8
 801403a:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	7b1b      	ldrb	r3, [r3, #12]
 8014040:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014044:	b2db      	uxtb	r3, r3
 8014046:	b29a      	uxth	r2, r3
 8014048:	89bb      	ldrh	r3, [r7, #12]
 801404a:	4413      	add	r3, r2
 801404c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014054:	2b00      	cmp	r3, #0
 8014056:	d002      	beq.n	801405e <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014058:	89bb      	ldrh	r3, [r7, #12]
 801405a:	3301      	adds	r3, #1
 801405c:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014064:	b29a      	uxth	r2, r3
 8014066:	89bb      	ldrh	r3, [r7, #12]
 8014068:	4413      	add	r3, r2
 801406a:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801406c:	89bb      	ldrh	r3, [r7, #12]
 801406e:	3304      	adds	r3, #4
 8014070:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	791b      	ldrb	r3, [r3, #4]
 8014076:	b29b      	uxth	r3, r3
 8014078:	89ba      	ldrh	r2, [r7, #12]
 801407a:	429a      	cmp	r2, r3
 801407c:	d901      	bls.n	8014082 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801407e:	2302      	movs	r3, #2
 8014080:	e0be      	b.n	8014200 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681a      	ldr	r2, [r3, #0]
 8014086:	89fb      	ldrh	r3, [r7, #14]
 8014088:	1c59      	adds	r1, r3, #1
 801408a:	81f9      	strh	r1, [r7, #14]
 801408c:	4413      	add	r3, r2
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	7952      	ldrb	r2, [r2, #5]
 8014092:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6899      	ldr	r1, [r3, #8]
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	681a      	ldr	r2, [r3, #0]
 801409c:	89fb      	ldrh	r3, [r7, #14]
 801409e:	1c58      	adds	r0, r3, #1
 80140a0:	81f8      	strh	r0, [r7, #14]
 80140a2:	4413      	add	r3, r2
 80140a4:	b2ca      	uxtb	r2, r1
 80140a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	689b      	ldr	r3, [r3, #8]
 80140ac:	0a19      	lsrs	r1, r3, #8
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	89fb      	ldrh	r3, [r7, #14]
 80140b4:	1c58      	adds	r0, r3, #1
 80140b6:	81f8      	strh	r0, [r7, #14]
 80140b8:	4413      	add	r3, r2
 80140ba:	b2ca      	uxtb	r2, r1
 80140bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	689b      	ldr	r3, [r3, #8]
 80140c2:	0c19      	lsrs	r1, r3, #16
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681a      	ldr	r2, [r3, #0]
 80140c8:	89fb      	ldrh	r3, [r7, #14]
 80140ca:	1c58      	adds	r0, r3, #1
 80140cc:	81f8      	strh	r0, [r7, #14]
 80140ce:	4413      	add	r3, r2
 80140d0:	b2ca      	uxtb	r2, r1
 80140d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	689b      	ldr	r3, [r3, #8]
 80140d8:	0e19      	lsrs	r1, r3, #24
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	681a      	ldr	r2, [r3, #0]
 80140de:	89fb      	ldrh	r3, [r7, #14]
 80140e0:	1c58      	adds	r0, r3, #1
 80140e2:	81f8      	strh	r0, [r7, #14]
 80140e4:	4413      	add	r3, r2
 80140e6:	b2ca      	uxtb	r2, r1
 80140e8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	89fb      	ldrh	r3, [r7, #14]
 80140f0:	1c59      	adds	r1, r3, #1
 80140f2:	81f9      	strh	r1, [r7, #14]
 80140f4:	4413      	add	r3, r2
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	7b12      	ldrb	r2, [r2, #12]
 80140fa:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	89d9      	ldrh	r1, [r3, #14]
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681a      	ldr	r2, [r3, #0]
 8014104:	89fb      	ldrh	r3, [r7, #14]
 8014106:	1c58      	adds	r0, r3, #1
 8014108:	81f8      	strh	r0, [r7, #14]
 801410a:	4413      	add	r3, r2
 801410c:	b2ca      	uxtb	r2, r1
 801410e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	89db      	ldrh	r3, [r3, #14]
 8014114:	0a1b      	lsrs	r3, r3, #8
 8014116:	b299      	uxth	r1, r3
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681a      	ldr	r2, [r3, #0]
 801411c:	89fb      	ldrh	r3, [r7, #14]
 801411e:	1c58      	adds	r0, r3, #1
 8014120:	81f8      	strh	r0, [r7, #14]
 8014122:	4413      	add	r3, r2
 8014124:	b2ca      	uxtb	r2, r1
 8014126:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681a      	ldr	r2, [r3, #0]
 801412c:	89fb      	ldrh	r3, [r7, #14]
 801412e:	18d0      	adds	r0, r2, r3
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f103 0110 	add.w	r1, r3, #16
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	7b1b      	ldrb	r3, [r3, #12]
 801413a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801413e:	b2db      	uxtb	r3, r3
 8014140:	b29b      	uxth	r3, r3
 8014142:	461a      	mov	r2, r3
 8014144:	f002 fb83 	bl	801684e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	7b1b      	ldrb	r3, [r3, #12]
 801414c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014150:	b2db      	uxtb	r3, r3
 8014152:	b29a      	uxth	r2, r3
 8014154:	89fb      	ldrh	r3, [r7, #14]
 8014156:	4413      	add	r3, r2
 8014158:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014160:	2b00      	cmp	r3, #0
 8014162:	d009      	beq.n	8014178 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	89fb      	ldrh	r3, [r7, #14]
 801416a:	1c59      	adds	r1, r3, #1
 801416c:	81f9      	strh	r1, [r7, #14]
 801416e:	4413      	add	r3, r2
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014176:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681a      	ldr	r2, [r3, #0]
 801417c:	89fb      	ldrh	r3, [r7, #14]
 801417e:	18d0      	adds	r0, r2, r3
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801418a:	b29b      	uxth	r3, r3
 801418c:	461a      	mov	r2, r3
 801418e:	f002 fb5e 	bl	801684e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014198:	b29a      	uxth	r2, r3
 801419a:	89fb      	ldrh	r3, [r7, #14]
 801419c:	4413      	add	r3, r2
 801419e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681a      	ldr	r2, [r3, #0]
 80141a8:	89fb      	ldrh	r3, [r7, #14]
 80141aa:	1c58      	adds	r0, r3, #1
 80141ac:	81f8      	strh	r0, [r7, #14]
 80141ae:	4413      	add	r3, r2
 80141b0:	b2ca      	uxtb	r2, r1
 80141b2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141b8:	0a19      	lsrs	r1, r3, #8
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681a      	ldr	r2, [r3, #0]
 80141be:	89fb      	ldrh	r3, [r7, #14]
 80141c0:	1c58      	adds	r0, r3, #1
 80141c2:	81f8      	strh	r0, [r7, #14]
 80141c4:	4413      	add	r3, r2
 80141c6:	b2ca      	uxtb	r2, r1
 80141c8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ce:	0c19      	lsrs	r1, r3, #16
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681a      	ldr	r2, [r3, #0]
 80141d4:	89fb      	ldrh	r3, [r7, #14]
 80141d6:	1c58      	adds	r0, r3, #1
 80141d8:	81f8      	strh	r0, [r7, #14]
 80141da:	4413      	add	r3, r2
 80141dc:	b2ca      	uxtb	r2, r1
 80141de:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141e4:	0e19      	lsrs	r1, r3, #24
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681a      	ldr	r2, [r3, #0]
 80141ea:	89fb      	ldrh	r3, [r7, #14]
 80141ec:	1c58      	adds	r0, r3, #1
 80141ee:	81f8      	strh	r0, [r7, #14]
 80141f0:	4413      	add	r3, r2
 80141f2:	b2ca      	uxtb	r2, r1
 80141f4:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80141f6:	89fb      	ldrh	r3, [r7, #14]
 80141f8:	b2da      	uxtb	r2, r3
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80141fe:	2300      	movs	r3, #0
}
 8014200:	4618      	mov	r0, r3
 8014202:	3710      	adds	r7, #16
 8014204:	46bd      	mov	sp, r7
 8014206:	bd80      	pop	{r7, pc}

08014208 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014208:	b480      	push	{r7}
 801420a:	b083      	sub	sp, #12
 801420c:	af00      	add	r7, sp, #0
 801420e:	4603      	mov	r3, r0
 8014210:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014212:	79fb      	ldrb	r3, [r7, #7]
 8014214:	2b05      	cmp	r3, #5
 8014216:	d101      	bne.n	801421c <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8014218:	2301      	movs	r3, #1
 801421a:	e000      	b.n	801421e <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801421c:	2300      	movs	r3, #0
        }
    }
}
 801421e:	4618      	mov	r0, r3
 8014220:	370c      	adds	r7, #12
 8014222:	46bd      	mov	sp, r7
 8014224:	bc80      	pop	{r7}
 8014226:	4770      	bx	lr

08014228 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b084      	sub	sp, #16
 801422c:	af00      	add	r7, sp, #0
 801422e:	4603      	mov	r3, r0
 8014230:	6039      	str	r1, [r7, #0]
 8014232:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014234:	2300      	movs	r3, #0
 8014236:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014238:	79fb      	ldrb	r3, [r7, #7]
 801423a:	2b05      	cmp	r3, #5
 801423c:	d105      	bne.n	801424a <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801423e:	6838      	ldr	r0, [r7, #0]
 8014240:	f001 f994 	bl	801556c <RegionEU868GetPhyParam>
 8014244:	4603      	mov	r3, r0
 8014246:	60fb      	str	r3, [r7, #12]
 8014248:	e001      	b.n	801424e <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	4618      	mov	r0, r3
 8014252:	3710      	adds	r7, #16
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	4603      	mov	r3, r0
 8014260:	6039      	str	r1, [r7, #0]
 8014262:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014264:	79fb      	ldrb	r3, [r7, #7]
 8014266:	2b05      	cmp	r3, #5
 8014268:	d103      	bne.n	8014272 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 801426a:	6838      	ldr	r0, [r7, #0]
 801426c:	f001 faca 	bl	8015804 <RegionEU868SetBandTxDone>
 8014270:	e000      	b.n	8014274 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014272:	bf00      	nop
        }
    }
}
 8014274:	3708      	adds	r7, #8
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}

0801427a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801427a:	b580      	push	{r7, lr}
 801427c:	b082      	sub	sp, #8
 801427e:	af00      	add	r7, sp, #0
 8014280:	4603      	mov	r3, r0
 8014282:	6039      	str	r1, [r7, #0]
 8014284:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014286:	79fb      	ldrb	r3, [r7, #7]
 8014288:	2b05      	cmp	r3, #5
 801428a:	d103      	bne.n	8014294 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 801428c:	6838      	ldr	r0, [r7, #0]
 801428e:	f001 fae5 	bl	801585c <RegionEU868InitDefaults>
 8014292:	e000      	b.n	8014296 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014294:	bf00      	nop
        }
    }
}
 8014296:	bf00      	nop
 8014298:	3708      	adds	r7, #8
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}

0801429e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801429e:	b580      	push	{r7, lr}
 80142a0:	b082      	sub	sp, #8
 80142a2:	af00      	add	r7, sp, #0
 80142a4:	4603      	mov	r3, r0
 80142a6:	6039      	str	r1, [r7, #0]
 80142a8:	71fb      	strb	r3, [r7, #7]
 80142aa:	4613      	mov	r3, r2
 80142ac:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80142ae:	79fb      	ldrb	r3, [r7, #7]
 80142b0:	2b05      	cmp	r3, #5
 80142b2:	d106      	bne.n	80142c2 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80142b4:	79bb      	ldrb	r3, [r7, #6]
 80142b6:	4619      	mov	r1, r3
 80142b8:	6838      	ldr	r0, [r7, #0]
 80142ba:	f001 fb6d 	bl	8015998 <RegionEU868Verify>
 80142be:	4603      	mov	r3, r0
 80142c0:	e000      	b.n	80142c4 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80142c2:	2300      	movs	r3, #0
        }
    }
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3708      	adds	r7, #8
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	4603      	mov	r3, r0
 80142d4:	6039      	str	r1, [r7, #0]
 80142d6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142d8:	79fb      	ldrb	r3, [r7, #7]
 80142da:	2b05      	cmp	r3, #5
 80142dc:	d103      	bne.n	80142e6 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80142de:	6838      	ldr	r0, [r7, #0]
 80142e0:	f001 fbd6 	bl	8015a90 <RegionEU868ApplyCFList>
 80142e4:	e000      	b.n	80142e8 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80142e6:	bf00      	nop
        }
    }
}
 80142e8:	bf00      	nop
 80142ea:	3708      	adds	r7, #8
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b082      	sub	sp, #8
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	4603      	mov	r3, r0
 80142f8:	6039      	str	r1, [r7, #0]
 80142fa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142fc:	79fb      	ldrb	r3, [r7, #7]
 80142fe:	2b05      	cmp	r3, #5
 8014300:	d104      	bne.n	801430c <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8014302:	6838      	ldr	r0, [r7, #0]
 8014304:	f001 fc38 	bl	8015b78 <RegionEU868ChanMaskSet>
 8014308:	4603      	mov	r3, r0
 801430a:	e000      	b.n	801430e <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801430c:	2300      	movs	r3, #0
        }
    }
}
 801430e:	4618      	mov	r0, r3
 8014310:	3708      	adds	r7, #8
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}

08014316 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014316:	b580      	push	{r7, lr}
 8014318:	b082      	sub	sp, #8
 801431a:	af00      	add	r7, sp, #0
 801431c:	603b      	str	r3, [r7, #0]
 801431e:	4603      	mov	r3, r0
 8014320:	71fb      	strb	r3, [r7, #7]
 8014322:	460b      	mov	r3, r1
 8014324:	71bb      	strb	r3, [r7, #6]
 8014326:	4613      	mov	r3, r2
 8014328:	717b      	strb	r3, [r7, #5]
    switch( region )
 801432a:	79fb      	ldrb	r3, [r7, #7]
 801432c:	2b05      	cmp	r3, #5
 801432e:	d107      	bne.n	8014340 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014330:	7979      	ldrb	r1, [r7, #5]
 8014332:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	683a      	ldr	r2, [r7, #0]
 801433a:	f001 fc47 	bl	8015bcc <RegionEU868ComputeRxWindowParameters>
 801433e:	e000      	b.n	8014342 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014340:	bf00      	nop
        }
    }
}
 8014342:	bf00      	nop
 8014344:	3708      	adds	r7, #8
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}

0801434a <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801434a:	b580      	push	{r7, lr}
 801434c:	b084      	sub	sp, #16
 801434e:	af00      	add	r7, sp, #0
 8014350:	4603      	mov	r3, r0
 8014352:	60b9      	str	r1, [r7, #8]
 8014354:	607a      	str	r2, [r7, #4]
 8014356:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014358:	7bfb      	ldrb	r3, [r7, #15]
 801435a:	2b05      	cmp	r3, #5
 801435c:	d105      	bne.n	801436a <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801435e:	6879      	ldr	r1, [r7, #4]
 8014360:	68b8      	ldr	r0, [r7, #8]
 8014362:	f001 fc8d 	bl	8015c80 <RegionEU868RxConfig>
 8014366:	4603      	mov	r3, r0
 8014368:	e000      	b.n	801436c <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801436a:	2300      	movs	r3, #0
        }
    }
}
 801436c:	4618      	mov	r0, r3
 801436e:	3710      	adds	r7, #16
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}

08014374 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b084      	sub	sp, #16
 8014378:	af00      	add	r7, sp, #0
 801437a:	60b9      	str	r1, [r7, #8]
 801437c:	607a      	str	r2, [r7, #4]
 801437e:	603b      	str	r3, [r7, #0]
 8014380:	4603      	mov	r3, r0
 8014382:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014384:	7bfb      	ldrb	r3, [r7, #15]
 8014386:	2b05      	cmp	r3, #5
 8014388:	d106      	bne.n	8014398 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801438a:	683a      	ldr	r2, [r7, #0]
 801438c:	6879      	ldr	r1, [r7, #4]
 801438e:	68b8      	ldr	r0, [r7, #8]
 8014390:	f001 fd46 	bl	8015e20 <RegionEU868TxConfig>
 8014394:	4603      	mov	r3, r0
 8014396:	e000      	b.n	801439a <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014398:	2300      	movs	r3, #0
        }
    }
}
 801439a:	4618      	mov	r0, r3
 801439c:	3710      	adds	r7, #16
 801439e:	46bd      	mov	sp, r7
 80143a0:	bd80      	pop	{r7, pc}

080143a2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80143a2:	b580      	push	{r7, lr}
 80143a4:	b086      	sub	sp, #24
 80143a6:	af02      	add	r7, sp, #8
 80143a8:	60b9      	str	r1, [r7, #8]
 80143aa:	607a      	str	r2, [r7, #4]
 80143ac:	603b      	str	r3, [r7, #0]
 80143ae:	4603      	mov	r3, r0
 80143b0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80143b2:	7bfb      	ldrb	r3, [r7, #15]
 80143b4:	2b05      	cmp	r3, #5
 80143b6:	d109      	bne.n	80143cc <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80143b8:	69fb      	ldr	r3, [r7, #28]
 80143ba:	9300      	str	r3, [sp, #0]
 80143bc:	69bb      	ldr	r3, [r7, #24]
 80143be:	683a      	ldr	r2, [r7, #0]
 80143c0:	6879      	ldr	r1, [r7, #4]
 80143c2:	68b8      	ldr	r0, [r7, #8]
 80143c4:	f001 fdfc 	bl	8015fc0 <RegionEU868LinkAdrReq>
 80143c8:	4603      	mov	r3, r0
 80143ca:	e000      	b.n	80143ce <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80143cc:	2300      	movs	r3, #0
        }
    }
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	3710      	adds	r7, #16
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}

080143d6 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80143d6:	b580      	push	{r7, lr}
 80143d8:	b082      	sub	sp, #8
 80143da:	af00      	add	r7, sp, #0
 80143dc:	4603      	mov	r3, r0
 80143de:	6039      	str	r1, [r7, #0]
 80143e0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80143e2:	79fb      	ldrb	r3, [r7, #7]
 80143e4:	2b05      	cmp	r3, #5
 80143e6:	d104      	bne.n	80143f2 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80143e8:	6838      	ldr	r0, [r7, #0]
 80143ea:	f001 ff0b 	bl	8016204 <RegionEU868RxParamSetupReq>
 80143ee:	4603      	mov	r3, r0
 80143f0:	e000      	b.n	80143f4 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80143f2:	2300      	movs	r3, #0
        }
    }
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	3708      	adds	r7, #8
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}

080143fc <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	4603      	mov	r3, r0
 8014404:	6039      	str	r1, [r7, #0]
 8014406:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014408:	79fb      	ldrb	r3, [r7, #7]
 801440a:	2b05      	cmp	r3, #5
 801440c:	d104      	bne.n	8014418 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801440e:	6838      	ldr	r0, [r7, #0]
 8014410:	f001 ff36 	bl	8016280 <RegionEU868NewChannelReq>
 8014414:	4603      	mov	r3, r0
 8014416:	e000      	b.n	801441a <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014418:	2300      	movs	r3, #0
        }
    }
}
 801441a:	4618      	mov	r0, r3
 801441c:	3708      	adds	r7, #8
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}

08014422 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014422:	b580      	push	{r7, lr}
 8014424:	b082      	sub	sp, #8
 8014426:	af00      	add	r7, sp, #0
 8014428:	4603      	mov	r3, r0
 801442a:	6039      	str	r1, [r7, #0]
 801442c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801442e:	79fb      	ldrb	r3, [r7, #7]
 8014430:	2b05      	cmp	r3, #5
 8014432:	d104      	bne.n	801443e <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8014434:	6838      	ldr	r0, [r7, #0]
 8014436:	f001 ff81 	bl	801633c <RegionEU868TxParamSetupReq>
 801443a:	4603      	mov	r3, r0
 801443c:	e000      	b.n	8014440 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801443e:	2300      	movs	r3, #0
        }
    }
}
 8014440:	4618      	mov	r0, r3
 8014442:	3708      	adds	r7, #8
 8014444:	46bd      	mov	sp, r7
 8014446:	bd80      	pop	{r7, pc}

08014448 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b082      	sub	sp, #8
 801444c:	af00      	add	r7, sp, #0
 801444e:	4603      	mov	r3, r0
 8014450:	6039      	str	r1, [r7, #0]
 8014452:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014454:	79fb      	ldrb	r3, [r7, #7]
 8014456:	2b05      	cmp	r3, #5
 8014458:	d104      	bne.n	8014464 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801445a:	6838      	ldr	r0, [r7, #0]
 801445c:	f001 ff7a 	bl	8016354 <RegionEU868DlChannelReq>
 8014460:	4603      	mov	r3, r0
 8014462:	e000      	b.n	8014466 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014464:	2300      	movs	r3, #0
        }
    }
}
 8014466:	4618      	mov	r0, r3
 8014468:	3708      	adds	r7, #8
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}

0801446e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801446e:	b580      	push	{r7, lr}
 8014470:	b082      	sub	sp, #8
 8014472:	af00      	add	r7, sp, #0
 8014474:	4603      	mov	r3, r0
 8014476:	71fb      	strb	r3, [r7, #7]
 8014478:	460b      	mov	r3, r1
 801447a:	71bb      	strb	r3, [r7, #6]
 801447c:	4613      	mov	r3, r2
 801447e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014480:	79fb      	ldrb	r3, [r7, #7]
 8014482:	2b05      	cmp	r3, #5
 8014484:	d108      	bne.n	8014498 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8014486:	797a      	ldrb	r2, [r7, #5]
 8014488:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801448c:	4611      	mov	r1, r2
 801448e:	4618      	mov	r0, r3
 8014490:	f001 ffa4 	bl	80163dc <RegionEU868AlternateDr>
 8014494:	4603      	mov	r3, r0
 8014496:	e000      	b.n	801449a <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014498:	2300      	movs	r3, #0
        }
    }
}
 801449a:	4618      	mov	r0, r3
 801449c:	3708      	adds	r7, #8
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b084      	sub	sp, #16
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	60b9      	str	r1, [r7, #8]
 80144aa:	607a      	str	r2, [r7, #4]
 80144ac:	603b      	str	r3, [r7, #0]
 80144ae:	4603      	mov	r3, r0
 80144b0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80144b2:	7bfb      	ldrb	r3, [r7, #15]
 80144b4:	2b05      	cmp	r3, #5
 80144b6:	d107      	bne.n	80144c8 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80144b8:	69bb      	ldr	r3, [r7, #24]
 80144ba:	683a      	ldr	r2, [r7, #0]
 80144bc:	6879      	ldr	r1, [r7, #4]
 80144be:	68b8      	ldr	r0, [r7, #8]
 80144c0:	f001 ff9c 	bl	80163fc <RegionEU868NextChannel>
 80144c4:	4603      	mov	r3, r0
 80144c6:	e000      	b.n	80144ca <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80144c8:	2309      	movs	r3, #9
        }
    }
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3710      	adds	r7, #16
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}

080144d2 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80144d2:	b580      	push	{r7, lr}
 80144d4:	b082      	sub	sp, #8
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	4603      	mov	r3, r0
 80144da:	6039      	str	r1, [r7, #0]
 80144dc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80144de:	79fb      	ldrb	r3, [r7, #7]
 80144e0:	2b05      	cmp	r3, #5
 80144e2:	d103      	bne.n	80144ec <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80144e4:	6838      	ldr	r0, [r7, #0]
 80144e6:	f002 f903 	bl	80166f0 <RegionEU868SetContinuousWave>
 80144ea:	e000      	b.n	80144ee <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80144ec:	bf00      	nop
        }
    }
}
 80144ee:	bf00      	nop
 80144f0:	3708      	adds	r7, #8
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}

080144f6 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80144f6:	b590      	push	{r4, r7, lr}
 80144f8:	b083      	sub	sp, #12
 80144fa:	af00      	add	r7, sp, #0
 80144fc:	4604      	mov	r4, r0
 80144fe:	4608      	mov	r0, r1
 8014500:	4611      	mov	r1, r2
 8014502:	461a      	mov	r2, r3
 8014504:	4623      	mov	r3, r4
 8014506:	71fb      	strb	r3, [r7, #7]
 8014508:	4603      	mov	r3, r0
 801450a:	71bb      	strb	r3, [r7, #6]
 801450c:	460b      	mov	r3, r1
 801450e:	717b      	strb	r3, [r7, #5]
 8014510:	4613      	mov	r3, r2
 8014512:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014514:	79fb      	ldrb	r3, [r7, #7]
 8014516:	2b05      	cmp	r3, #5
 8014518:	d109      	bne.n	801452e <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801451a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801451e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014522:	79bb      	ldrb	r3, [r7, #6]
 8014524:	4618      	mov	r0, r3
 8014526:	f002 f931 	bl	801678c <RegionEU868ApplyDrOffset>
 801452a:	4603      	mov	r3, r0
 801452c:	e000      	b.n	8014530 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801452e:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014530:	4618      	mov	r0, r3
 8014532:	370c      	adds	r7, #12
 8014534:	46bd      	mov	sp, r7
 8014536:	bd90      	pop	{r4, r7, pc}

08014538 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014538:	b480      	push	{r7}
 801453a:	b083      	sub	sp, #12
 801453c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801453e:	4b04      	ldr	r3, [pc, #16]	; (8014550 <RegionGetVersion+0x18>)
 8014540:	607b      	str	r3, [r7, #4]

    return version;
 8014542:	687b      	ldr	r3, [r7, #4]
}
 8014544:	4618      	mov	r0, r3
 8014546:	370c      	adds	r7, #12
 8014548:	46bd      	mov	sp, r7
 801454a:	bc80      	pop	{r7}
 801454c:	4770      	bx	lr
 801454e:	bf00      	nop
 8014550:	01010003 	.word	0x01010003

08014554 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014554:	b480      	push	{r7}
 8014556:	b087      	sub	sp, #28
 8014558:	af00      	add	r7, sp, #0
 801455a:	60f8      	str	r0, [r7, #12]
 801455c:	4608      	mov	r0, r1
 801455e:	4639      	mov	r1, r7
 8014560:	e881 000c 	stmia.w	r1, {r2, r3}
 8014564:	4603      	mov	r3, r0
 8014566:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	881b      	ldrh	r3, [r3, #0]
 801456c:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801456e:	7afb      	ldrb	r3, [r7, #11]
 8014570:	f083 0301 	eor.w	r3, r3, #1
 8014574:	b2db      	uxtb	r3, r3
 8014576:	2b00      	cmp	r3, #0
 8014578:	d01b      	beq.n	80145b2 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801457a:	f242 7310 	movw	r3, #10000	; 0x2710
 801457e:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8014586:	d202      	bcs.n	801458e <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014588:	2364      	movs	r3, #100	; 0x64
 801458a:	82bb      	strh	r3, [r7, #20]
 801458c:	e00b      	b.n	80145a6 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8014594:	4293      	cmp	r3, r2
 8014596:	d803      	bhi.n	80145a0 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801459c:	82bb      	strh	r3, [r7, #20]
 801459e:	e002      	b.n	80145a6 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80145a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80145a4:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80145a6:	8aba      	ldrh	r2, [r7, #20]
 80145a8:	8afb      	ldrh	r3, [r7, #22]
 80145aa:	4293      	cmp	r3, r2
 80145ac:	bf38      	it	cc
 80145ae:	4613      	movcc	r3, r2
 80145b0:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80145b2:	8afb      	ldrh	r3, [r7, #22]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d101      	bne.n	80145bc <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80145b8:	2301      	movs	r3, #1
 80145ba:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80145bc:	8afb      	ldrh	r3, [r7, #22]
}
 80145be:	4618      	mov	r0, r3
 80145c0:	371c      	adds	r7, #28
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bc80      	pop	{r7}
 80145c6:	4770      	bx	lr

080145c8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b08e      	sub	sp, #56	; 0x38
 80145cc:	af02      	add	r7, sp, #8
 80145ce:	60f8      	str	r0, [r7, #12]
 80145d0:	4608      	mov	r0, r1
 80145d2:	4639      	mov	r1, r7
 80145d4:	e881 000c 	stmia.w	r1, {r2, r3}
 80145d8:	4603      	mov	r3, r0
 80145da:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	881b      	ldrh	r3, [r3, #0]
 80145e0:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80145e2:	4b4b      	ldr	r3, [pc, #300]	; (8014710 <SetMaxTimeCredits+0x148>)
 80145e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80145e6:	463b      	mov	r3, r7
 80145e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80145ec:	f005 fd66 	bl	801a0bc <SysTimeToMs>
 80145f0:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80145f2:	f107 0314 	add.w	r3, r7, #20
 80145f6:	2200      	movs	r2, #0
 80145f8:	601a      	str	r2, [r3, #0]
 80145fa:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80145fc:	7af9      	ldrb	r1, [r7, #11]
 80145fe:	463b      	mov	r3, r7
 8014600:	cb0c      	ldmia	r3, {r2, r3}
 8014602:	68f8      	ldr	r0, [r7, #12]
 8014604:	f7ff ffa6 	bl	8014554 <GetDutyCycle>
 8014608:	4603      	mov	r3, r0
 801460a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 801460c:	7afb      	ldrb	r3, [r7, #11]
 801460e:	f083 0301 	eor.w	r3, r3, #1
 8014612:	b2db      	uxtb	r3, r3
 8014614:	2b00      	cmp	r3, #0
 8014616:	d062      	beq.n	80146de <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014618:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801461a:	2b64      	cmp	r3, #100	; 0x64
 801461c:	d105      	bne.n	801462a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801461e:	4b3c      	ldr	r3, [pc, #240]	; (8014710 <SetMaxTimeCredits+0x148>)
 8014620:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014626:	609a      	str	r2, [r3, #8]
 8014628:	e00b      	b.n	8014642 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801462a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801462c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014630:	d105      	bne.n	801463e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8014632:	4b38      	ldr	r3, [pc, #224]	; (8014714 <SetMaxTimeCredits+0x14c>)
 8014634:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801463a:	609a      	str	r2, [r3, #8]
 801463c:	e001      	b.n	8014642 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801463e:	4b36      	ldr	r3, [pc, #216]	; (8014718 <SetMaxTimeCredits+0x150>)
 8014640:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	689a      	ldr	r2, [r3, #8]
 8014646:	f107 031c 	add.w	r3, r7, #28
 801464a:	4611      	mov	r1, r2
 801464c:	4618      	mov	r0, r3
 801464e:	f005 fd5d 	bl	801a10c <SysTimeFromMs>
 8014652:	f107 0014 	add.w	r0, r7, #20
 8014656:	6a3b      	ldr	r3, [r7, #32]
 8014658:	9300      	str	r3, [sp, #0]
 801465a:	69fb      	ldr	r3, [r7, #28]
 801465c:	463a      	mov	r2, r7
 801465e:	ca06      	ldmia	r2, {r1, r2}
 8014660:	f005 fc6d 	bl	8019f3e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014664:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014668:	f083 0301 	eor.w	r3, r3, #1
 801466c:	b2db      	uxtb	r3, r3
 801466e:	2b00      	cmp	r3, #0
 8014670:	d006      	beq.n	8014680 <SetMaxTimeCredits+0xb8>
 8014672:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014676:	f083 0301 	eor.w	r3, r3, #1
 801467a:	b2db      	uxtb	r3, r3
 801467c:	2b00      	cmp	r3, #0
 801467e:	d108      	bne.n	8014692 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014686:	429a      	cmp	r2, r3
 8014688:	d103      	bne.n	8014692 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801468a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 801468c:	4a23      	ldr	r2, [pc, #140]	; (801471c <SetMaxTimeCredits+0x154>)
 801468e:	4293      	cmp	r3, r2
 8014690:	d92f      	bls.n	80146f2 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014696:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	4a21      	ldr	r2, [pc, #132]	; (8014720 <SetMaxTimeCredits+0x158>)
 801469c:	4293      	cmp	r3, r2
 801469e:	d928      	bls.n	80146f2 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80146a6:	3b30      	subs	r3, #48	; 0x30
 80146a8:	4a1e      	ldr	r2, [pc, #120]	; (8014724 <SetMaxTimeCredits+0x15c>)
 80146aa:	fba2 2303 	umull	r2, r3, r2, r3
 80146ae:	0c1b      	lsrs	r3, r3, #16
 80146b0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	4a1c      	ldr	r2, [pc, #112]	; (8014728 <SetMaxTimeCredits+0x160>)
 80146b6:	fb02 f303 	mul.w	r3, r2, r3
 80146ba:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80146c2:	3330      	adds	r3, #48	; 0x30
 80146c4:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80146c6:	2300      	movs	r3, #0
 80146c8:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80146ca:	f107 0314 	add.w	r3, r7, #20
 80146ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80146d2:	f005 fcf3 	bl	801a0bc <SysTimeToMs>
 80146d6:	4602      	mov	r2, r0
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	609a      	str	r2, [r3, #8]
 80146dc:	e009      	b.n	80146f2 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80146de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80146e2:	f083 0301 	eor.w	r3, r3, #1
 80146e6:	b2db      	uxtb	r3, r3
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d002      	beq.n	80146f2 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146f0:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	685b      	ldr	r3, [r3, #4]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d102      	bne.n	8014700 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146fe:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014704:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8014706:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8014708:	4618      	mov	r0, r3
 801470a:	3730      	adds	r7, #48	; 0x30
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}
 8014710:	001b7740 	.word	0x001b7740
 8014714:	0112a880 	.word	0x0112a880
 8014718:	02932e00 	.word	0x02932e00
 801471c:	0001517f 	.word	0x0001517f
 8014720:	0001ec2f 	.word	0x0001ec2f
 8014724:	c22e4507 	.word	0xc22e4507
 8014728:	00015180 	.word	0x00015180

0801472c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b086      	sub	sp, #24
 8014730:	af02      	add	r7, sp, #8
 8014732:	6078      	str	r0, [r7, #4]
 8014734:	4608      	mov	r0, r1
 8014736:	4611      	mov	r1, r2
 8014738:	461a      	mov	r2, r3
 801473a:	4603      	mov	r3, r0
 801473c:	70fb      	strb	r3, [r7, #3]
 801473e:	460b      	mov	r3, r1
 8014740:	70bb      	strb	r3, [r7, #2]
 8014742:	4613      	mov	r3, r2
 8014744:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8014746:	78f9      	ldrb	r1, [r7, #3]
 8014748:	787b      	ldrb	r3, [r7, #1]
 801474a:	9301      	str	r3, [sp, #4]
 801474c:	78bb      	ldrb	r3, [r7, #2]
 801474e:	9300      	str	r3, [sp, #0]
 8014750:	f107 0318 	add.w	r3, r7, #24
 8014754:	cb0c      	ldmia	r3, {r2, r3}
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f7ff ff36 	bl	80145c8 <SetMaxTimeCredits>
 801475c:	4603      	mov	r3, r0
 801475e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8014760:	78fb      	ldrb	r3, [r7, #3]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d00a      	beq.n	801477c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	4618      	mov	r0, r3
 801476c:	f006 fae6 	bl	801ad3c <UTIL_TIMER_GetElapsedTime>
 8014770:	4602      	mov	r2, r0
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	68db      	ldr	r3, [r3, #12]
 8014776:	441a      	add	r2, r3
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	68da      	ldr	r2, [r3, #12]
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	691b      	ldr	r3, [r3, #16]
 8014784:	429a      	cmp	r2, r3
 8014786:	d903      	bls.n	8014790 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	691a      	ldr	r2, [r3, #16]
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	6a3a      	ldr	r2, [r7, #32]
 8014794:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014796:	89fb      	ldrh	r3, [r7, #14]
}
 8014798:	4618      	mov	r0, r3
 801479a:	3710      	adds	r7, #16
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}

080147a0 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80147a0:	b480      	push	{r7}
 80147a2:	b085      	sub	sp, #20
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	4603      	mov	r3, r0
 80147a8:	460a      	mov	r2, r1
 80147aa:	80fb      	strh	r3, [r7, #6]
 80147ac:	4613      	mov	r3, r2
 80147ae:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80147b0:	2300      	movs	r3, #0
 80147b2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80147b4:	2300      	movs	r3, #0
 80147b6:	73bb      	strb	r3, [r7, #14]
 80147b8:	e011      	b.n	80147de <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80147ba:	88fa      	ldrh	r2, [r7, #6]
 80147bc:	7bbb      	ldrb	r3, [r7, #14]
 80147be:	2101      	movs	r1, #1
 80147c0:	fa01 f303 	lsl.w	r3, r1, r3
 80147c4:	401a      	ands	r2, r3
 80147c6:	7bbb      	ldrb	r3, [r7, #14]
 80147c8:	2101      	movs	r1, #1
 80147ca:	fa01 f303 	lsl.w	r3, r1, r3
 80147ce:	429a      	cmp	r2, r3
 80147d0:	d102      	bne.n	80147d8 <CountChannels+0x38>
        {
            nbActiveBits++;
 80147d2:	7bfb      	ldrb	r3, [r7, #15]
 80147d4:	3301      	adds	r3, #1
 80147d6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80147d8:	7bbb      	ldrb	r3, [r7, #14]
 80147da:	3301      	adds	r3, #1
 80147dc:	73bb      	strb	r3, [r7, #14]
 80147de:	7bba      	ldrb	r2, [r7, #14]
 80147e0:	797b      	ldrb	r3, [r7, #5]
 80147e2:	429a      	cmp	r2, r3
 80147e4:	d3e9      	bcc.n	80147ba <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80147e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80147e8:	4618      	mov	r0, r3
 80147ea:	3714      	adds	r7, #20
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bc80      	pop	{r7}
 80147f0:	4770      	bx	lr

080147f2 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80147f2:	b580      	push	{r7, lr}
 80147f4:	b084      	sub	sp, #16
 80147f6:	af00      	add	r7, sp, #0
 80147f8:	6039      	str	r1, [r7, #0]
 80147fa:	4611      	mov	r1, r2
 80147fc:	461a      	mov	r2, r3
 80147fe:	4603      	mov	r3, r0
 8014800:	71fb      	strb	r3, [r7, #7]
 8014802:	460b      	mov	r3, r1
 8014804:	71bb      	strb	r3, [r7, #6]
 8014806:	4613      	mov	r3, r2
 8014808:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801480a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801480e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014812:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014816:	4618      	mov	r0, r3
 8014818:	f000 f85d 	bl	80148d6 <RegionCommonValueInRange>
 801481c:	4603      	mov	r3, r0
 801481e:	2b00      	cmp	r3, #0
 8014820:	d101      	bne.n	8014826 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8014822:	2300      	movs	r3, #0
 8014824:	e053      	b.n	80148ce <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014826:	2300      	movs	r3, #0
 8014828:	73fb      	strb	r3, [r7, #15]
 801482a:	2300      	movs	r3, #0
 801482c:	73bb      	strb	r3, [r7, #14]
 801482e:	e049      	b.n	80148c4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014830:	2300      	movs	r3, #0
 8014832:	737b      	strb	r3, [r7, #13]
 8014834:	e03d      	b.n	80148b2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8014836:	7bbb      	ldrb	r3, [r7, #14]
 8014838:	005b      	lsls	r3, r3, #1
 801483a:	683a      	ldr	r2, [r7, #0]
 801483c:	4413      	add	r3, r2
 801483e:	881b      	ldrh	r3, [r3, #0]
 8014840:	461a      	mov	r2, r3
 8014842:	7b7b      	ldrb	r3, [r7, #13]
 8014844:	fa42 f303 	asr.w	r3, r2, r3
 8014848:	f003 0301 	and.w	r3, r3, #1
 801484c:	2b00      	cmp	r3, #0
 801484e:	d02d      	beq.n	80148ac <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014850:	7bfa      	ldrb	r2, [r7, #15]
 8014852:	7b7b      	ldrb	r3, [r7, #13]
 8014854:	4413      	add	r3, r2
 8014856:	461a      	mov	r2, r3
 8014858:	4613      	mov	r3, r2
 801485a:	005b      	lsls	r3, r3, #1
 801485c:	4413      	add	r3, r2
 801485e:	009b      	lsls	r3, r3, #2
 8014860:	461a      	mov	r2, r3
 8014862:	69fb      	ldr	r3, [r7, #28]
 8014864:	4413      	add	r3, r2
 8014866:	7a1b      	ldrb	r3, [r3, #8]
 8014868:	f343 0303 	sbfx	r3, r3, #0, #4
 801486c:	b25b      	sxtb	r3, r3
 801486e:	f003 030f 	and.w	r3, r3, #15
 8014872:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014874:	7bfa      	ldrb	r2, [r7, #15]
 8014876:	7b7b      	ldrb	r3, [r7, #13]
 8014878:	4413      	add	r3, r2
 801487a:	461a      	mov	r2, r3
 801487c:	4613      	mov	r3, r2
 801487e:	005b      	lsls	r3, r3, #1
 8014880:	4413      	add	r3, r2
 8014882:	009b      	lsls	r3, r3, #2
 8014884:	461a      	mov	r2, r3
 8014886:	69fb      	ldr	r3, [r7, #28]
 8014888:	4413      	add	r3, r2
 801488a:	7a1b      	ldrb	r3, [r3, #8]
 801488c:	f343 1303 	sbfx	r3, r3, #4, #4
 8014890:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014892:	f003 030f 	and.w	r3, r3, #15
 8014896:	b25a      	sxtb	r2, r3
 8014898:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801489c:	4618      	mov	r0, r3
 801489e:	f000 f81a 	bl	80148d6 <RegionCommonValueInRange>
 80148a2:	4603      	mov	r3, r0
 80148a4:	2b01      	cmp	r3, #1
 80148a6:	d101      	bne.n	80148ac <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80148a8:	2301      	movs	r3, #1
 80148aa:	e010      	b.n	80148ce <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80148ac:	7b7b      	ldrb	r3, [r7, #13]
 80148ae:	3301      	adds	r3, #1
 80148b0:	737b      	strb	r3, [r7, #13]
 80148b2:	7b7b      	ldrb	r3, [r7, #13]
 80148b4:	2b0f      	cmp	r3, #15
 80148b6:	d9be      	bls.n	8014836 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80148b8:	7bfb      	ldrb	r3, [r7, #15]
 80148ba:	3310      	adds	r3, #16
 80148bc:	73fb      	strb	r3, [r7, #15]
 80148be:	7bbb      	ldrb	r3, [r7, #14]
 80148c0:	3301      	adds	r3, #1
 80148c2:	73bb      	strb	r3, [r7, #14]
 80148c4:	7bfa      	ldrb	r2, [r7, #15]
 80148c6:	79fb      	ldrb	r3, [r7, #7]
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d3b1      	bcc.n	8014830 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80148cc:	2300      	movs	r3, #0
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	3710      	adds	r7, #16
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}

080148d6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80148d6:	b480      	push	{r7}
 80148d8:	b083      	sub	sp, #12
 80148da:	af00      	add	r7, sp, #0
 80148dc:	4603      	mov	r3, r0
 80148de:	71fb      	strb	r3, [r7, #7]
 80148e0:	460b      	mov	r3, r1
 80148e2:	71bb      	strb	r3, [r7, #6]
 80148e4:	4613      	mov	r3, r2
 80148e6:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80148e8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80148ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80148f0:	429a      	cmp	r2, r3
 80148f2:	db07      	blt.n	8014904 <RegionCommonValueInRange+0x2e>
 80148f4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80148f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80148fc:	429a      	cmp	r2, r3
 80148fe:	dc01      	bgt.n	8014904 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014900:	2301      	movs	r3, #1
 8014902:	e000      	b.n	8014906 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014904:	2300      	movs	r3, #0
}
 8014906:	4618      	mov	r0, r3
 8014908:	370c      	adds	r7, #12
 801490a:	46bd      	mov	sp, r7
 801490c:	bc80      	pop	{r7}
 801490e:	4770      	bx	lr

08014910 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8014910:	b480      	push	{r7}
 8014912:	b085      	sub	sp, #20
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
 8014918:	460b      	mov	r3, r1
 801491a:	70fb      	strb	r3, [r7, #3]
 801491c:	4613      	mov	r3, r2
 801491e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8014920:	78fb      	ldrb	r3, [r7, #3]
 8014922:	091b      	lsrs	r3, r3, #4
 8014924:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8014926:	78bb      	ldrb	r3, [r7, #2]
 8014928:	091b      	lsrs	r3, r3, #4
 801492a:	b2db      	uxtb	r3, r3
 801492c:	7bfa      	ldrb	r2, [r7, #15]
 801492e:	429a      	cmp	r2, r3
 8014930:	d803      	bhi.n	801493a <RegionCommonChanDisable+0x2a>
 8014932:	78fa      	ldrb	r2, [r7, #3]
 8014934:	78bb      	ldrb	r3, [r7, #2]
 8014936:	429a      	cmp	r2, r3
 8014938:	d301      	bcc.n	801493e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801493a:	2300      	movs	r3, #0
 801493c:	e017      	b.n	801496e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801493e:	7bfb      	ldrb	r3, [r7, #15]
 8014940:	005b      	lsls	r3, r3, #1
 8014942:	687a      	ldr	r2, [r7, #4]
 8014944:	4413      	add	r3, r2
 8014946:	881b      	ldrh	r3, [r3, #0]
 8014948:	b21a      	sxth	r2, r3
 801494a:	78fb      	ldrb	r3, [r7, #3]
 801494c:	f003 030f 	and.w	r3, r3, #15
 8014950:	2101      	movs	r1, #1
 8014952:	fa01 f303 	lsl.w	r3, r1, r3
 8014956:	b21b      	sxth	r3, r3
 8014958:	43db      	mvns	r3, r3
 801495a:	b21b      	sxth	r3, r3
 801495c:	4013      	ands	r3, r2
 801495e:	b219      	sxth	r1, r3
 8014960:	7bfb      	ldrb	r3, [r7, #15]
 8014962:	005b      	lsls	r3, r3, #1
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	4413      	add	r3, r2
 8014968:	b28a      	uxth	r2, r1
 801496a:	801a      	strh	r2, [r3, #0]

    return true;
 801496c:	2301      	movs	r3, #1
}
 801496e:	4618      	mov	r0, r3
 8014970:	3714      	adds	r7, #20
 8014972:	46bd      	mov	sp, r7
 8014974:	bc80      	pop	{r7}
 8014976:	4770      	bx	lr

08014978 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b084      	sub	sp, #16
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
 8014980:	460b      	mov	r3, r1
 8014982:	70fb      	strb	r3, [r7, #3]
 8014984:	4613      	mov	r3, r2
 8014986:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014988:	2300      	movs	r3, #0
 801498a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d101      	bne.n	8014996 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8014992:	2300      	movs	r3, #0
 8014994:	e018      	b.n	80149c8 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014996:	78fb      	ldrb	r3, [r7, #3]
 8014998:	73bb      	strb	r3, [r7, #14]
 801499a:	e010      	b.n	80149be <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801499c:	7bbb      	ldrb	r3, [r7, #14]
 801499e:	005b      	lsls	r3, r3, #1
 80149a0:	687a      	ldr	r2, [r7, #4]
 80149a2:	4413      	add	r3, r2
 80149a4:	881b      	ldrh	r3, [r3, #0]
 80149a6:	2110      	movs	r1, #16
 80149a8:	4618      	mov	r0, r3
 80149aa:	f7ff fef9 	bl	80147a0 <CountChannels>
 80149ae:	4603      	mov	r3, r0
 80149b0:	461a      	mov	r2, r3
 80149b2:	7bfb      	ldrb	r3, [r7, #15]
 80149b4:	4413      	add	r3, r2
 80149b6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80149b8:	7bbb      	ldrb	r3, [r7, #14]
 80149ba:	3301      	adds	r3, #1
 80149bc:	73bb      	strb	r3, [r7, #14]
 80149be:	7bba      	ldrb	r2, [r7, #14]
 80149c0:	78bb      	ldrb	r3, [r7, #2]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d3ea      	bcc.n	801499c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80149c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	3710      	adds	r7, #16
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80149d0:	b480      	push	{r7}
 80149d2:	b087      	sub	sp, #28
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	60f8      	str	r0, [r7, #12]
 80149d8:	60b9      	str	r1, [r7, #8]
 80149da:	4613      	mov	r3, r2
 80149dc:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d016      	beq.n	8014a12 <RegionCommonChanMaskCopy+0x42>
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d013      	beq.n	8014a12 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80149ea:	2300      	movs	r3, #0
 80149ec:	75fb      	strb	r3, [r7, #23]
 80149ee:	e00c      	b.n	8014a0a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80149f0:	7dfb      	ldrb	r3, [r7, #23]
 80149f2:	005b      	lsls	r3, r3, #1
 80149f4:	68ba      	ldr	r2, [r7, #8]
 80149f6:	441a      	add	r2, r3
 80149f8:	7dfb      	ldrb	r3, [r7, #23]
 80149fa:	005b      	lsls	r3, r3, #1
 80149fc:	68f9      	ldr	r1, [r7, #12]
 80149fe:	440b      	add	r3, r1
 8014a00:	8812      	ldrh	r2, [r2, #0]
 8014a02:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014a04:	7dfb      	ldrb	r3, [r7, #23]
 8014a06:	3301      	adds	r3, #1
 8014a08:	75fb      	strb	r3, [r7, #23]
 8014a0a:	7dfa      	ldrb	r2, [r7, #23]
 8014a0c:	79fb      	ldrb	r3, [r7, #7]
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d3ee      	bcc.n	80149f0 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8014a12:	bf00      	nop
 8014a14:	371c      	adds	r7, #28
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bc80      	pop	{r7}
 8014a1a:	4770      	bx	lr

08014a1c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014a1c:	b082      	sub	sp, #8
 8014a1e:	b580      	push	{r7, lr}
 8014a20:	b086      	sub	sp, #24
 8014a22:	af00      	add	r7, sp, #0
 8014a24:	60f8      	str	r0, [r7, #12]
 8014a26:	60b9      	str	r1, [r7, #8]
 8014a28:	627b      	str	r3, [r7, #36]	; 0x24
 8014a2a:	4613      	mov	r3, r2
 8014a2c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014a2e:	79f9      	ldrb	r1, [r7, #7]
 8014a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014a34:	cb0c      	ldmia	r3, {r2, r3}
 8014a36:	68f8      	ldr	r0, [r7, #12]
 8014a38:	f7ff fd8c 	bl	8014554 <GetDutyCycle>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	68da      	ldr	r2, [r3, #12]
 8014a44:	8afb      	ldrh	r3, [r7, #22]
 8014a46:	68b9      	ldr	r1, [r7, #8]
 8014a48:	fb01 f303 	mul.w	r3, r1, r3
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d909      	bls.n	8014a64 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	68da      	ldr	r2, [r3, #12]
 8014a54:	8afb      	ldrh	r3, [r7, #22]
 8014a56:	68b9      	ldr	r1, [r7, #8]
 8014a58:	fb01 f303 	mul.w	r3, r1, r3
 8014a5c:	1ad2      	subs	r2, r2, r3
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8014a62:	e002      	b.n	8014a6a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	2200      	movs	r2, #0
 8014a68:	60da      	str	r2, [r3, #12]
}
 8014a6a:	bf00      	nop
 8014a6c:	3718      	adds	r7, #24
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014a74:	b002      	add	sp, #8
 8014a76:	4770      	bx	lr

08014a78 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a7a:	b08f      	sub	sp, #60	; 0x3c
 8014a7c:	af04      	add	r7, sp, #16
 8014a7e:	6039      	str	r1, [r7, #0]
 8014a80:	4611      	mov	r1, r2
 8014a82:	461a      	mov	r2, r3
 8014a84:	4603      	mov	r3, r0
 8014a86:	71fb      	strb	r3, [r7, #7]
 8014a88:	460b      	mov	r3, r1
 8014a8a:	71bb      	strb	r3, [r7, #6]
 8014a8c:	4613      	mov	r3, r2
 8014a8e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a94:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014a96:	f006 f93f 	bl	801ad18 <UTIL_TIMER_GetCurrentTime>
 8014a9a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8014aaa:	2300      	movs	r3, #0
 8014aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014ab0:	e0ba      	b.n	8014c28 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8014ab2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014ab6:	4613      	mov	r3, r2
 8014ab8:	005b      	lsls	r3, r3, #1
 8014aba:	4413      	add	r3, r2
 8014abc:	00db      	lsls	r3, r3, #3
 8014abe:	461a      	mov	r2, r3
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	189c      	adds	r4, r3, r2
 8014ac4:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8014ac8:	797a      	ldrb	r2, [r7, #5]
 8014aca:	79fd      	ldrb	r5, [r7, #7]
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	9302      	str	r3, [sp, #8]
 8014ad0:	46ec      	mov	ip, sp
 8014ad2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014ad6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014ada:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014ade:	4633      	mov	r3, r6
 8014ae0:	4629      	mov	r1, r5
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	f7ff fe22 	bl	801472c <UpdateTimeCredits>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8014aec:	8afa      	ldrh	r2, [r7, #22]
 8014aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014af0:	fb02 f303 	mul.w	r3, r2, r3
 8014af4:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014af6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014afa:	4613      	mov	r3, r2
 8014afc:	005b      	lsls	r3, r3, #1
 8014afe:	4413      	add	r3, r2
 8014b00:	00db      	lsls	r3, r3, #3
 8014b02:	461a      	mov	r2, r3
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	4413      	add	r3, r2
 8014b08:	68db      	ldr	r3, [r3, #12]
 8014b0a:	69ba      	ldr	r2, [r7, #24]
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	d308      	bcc.n	8014b22 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014b10:	797b      	ldrb	r3, [r7, #5]
 8014b12:	f083 0301 	eor.w	r3, r3, #1
 8014b16:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d013      	beq.n	8014b44 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014b1c:	79fb      	ldrb	r3, [r7, #7]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d010      	beq.n	8014b44 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8014b22:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014b26:	4613      	mov	r3, r2
 8014b28:	005b      	lsls	r3, r3, #1
 8014b2a:	4413      	add	r3, r2
 8014b2c:	00db      	lsls	r3, r3, #3
 8014b2e:	461a      	mov	r2, r3
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	4413      	add	r3, r2
 8014b34:	2201      	movs	r2, #1
 8014b36:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8014b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014b3c:	3301      	adds	r3, #1
 8014b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014b42:	e06c      	b.n	8014c1e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8014b44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014b48:	4613      	mov	r3, r2
 8014b4a:	005b      	lsls	r3, r3, #1
 8014b4c:	4413      	add	r3, r2
 8014b4e:	00db      	lsls	r3, r3, #3
 8014b50:	461a      	mov	r2, r3
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	4413      	add	r3, r2
 8014b56:	2200      	movs	r2, #0
 8014b58:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8014b5a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014b5e:	4613      	mov	r3, r2
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	4413      	add	r3, r2
 8014b64:	00db      	lsls	r3, r3, #3
 8014b66:	461a      	mov	r2, r3
 8014b68:	683b      	ldr	r3, [r7, #0]
 8014b6a:	4413      	add	r3, r2
 8014b6c:	691b      	ldr	r3, [r3, #16]
 8014b6e:	69ba      	ldr	r2, [r7, #24]
 8014b70:	429a      	cmp	r2, r3
 8014b72:	d215      	bcs.n	8014ba0 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014b74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014b78:	4613      	mov	r3, r2
 8014b7a:	005b      	lsls	r3, r3, #1
 8014b7c:	4413      	add	r3, r2
 8014b7e:	00db      	lsls	r3, r3, #3
 8014b80:	461a      	mov	r2, r3
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	4413      	add	r3, r2
 8014b86:	68db      	ldr	r3, [r3, #12]
 8014b88:	69ba      	ldr	r2, [r7, #24]
 8014b8a:	1ad3      	subs	r3, r2, r3
 8014b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b8e:	4293      	cmp	r3, r2
 8014b90:	bf28      	it	cs
 8014b92:	4613      	movcs	r3, r2
 8014b94:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014b96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014b9a:	3301      	adds	r3, #1
 8014b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014ba0:	79fb      	ldrb	r3, [r7, #7]
 8014ba2:	f083 0301 	eor.w	r3, r3, #1
 8014ba6:	b2db      	uxtb	r3, r3
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d038      	beq.n	8014c1e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8014bac:	2300      	movs	r3, #0
 8014bae:	60fb      	str	r3, [r7, #12]
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014bb4:	8afb      	ldrh	r3, [r7, #22]
 8014bb6:	2b64      	cmp	r3, #100	; 0x64
 8014bb8:	d103      	bne.n	8014bc2 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8014bba:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014bbe:	60fb      	str	r3, [r7, #12]
 8014bc0:	e009      	b.n	8014bd6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014bc2:	8afb      	ldrh	r3, [r7, #22]
 8014bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014bc8:	d103      	bne.n	8014bd2 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8014bca:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8014bce:	60fb      	str	r3, [r7, #12]
 8014bd0:	e001      	b.n	8014bd6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014bd2:	4b1e      	ldr	r3, [pc, #120]	; (8014c4c <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014bd4:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bd8:	4a1c      	ldr	r2, [pc, #112]	; (8014c4c <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014bda:	4293      	cmp	r3, r2
 8014bdc:	d90e      	bls.n	8014bfc <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8014bde:	68fa      	ldr	r2, [r7, #12]
 8014be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014be2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014be6:	3b30      	subs	r3, #48	; 0x30
 8014be8:	4919      	ldr	r1, [pc, #100]	; (8014c50 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8014bea:	fba1 1303 	umull	r1, r3, r1, r3
 8014bee:	0c1b      	lsrs	r3, r3, #16
 8014bf0:	3301      	adds	r3, #1
 8014bf2:	4918      	ldr	r1, [pc, #96]	; (8014c54 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014bf4:	fb01 f303 	mul.w	r3, r1, r3
 8014bf8:	4413      	add	r3, r2
 8014bfa:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8014bfc:	f107 000c 	add.w	r0, r7, #12
 8014c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c02:	9300      	str	r3, [sp, #0]
 8014c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c06:	f107 020c 	add.w	r2, r7, #12
 8014c0a:	ca06      	ldmia	r2, {r1, r2}
 8014c0c:	f005 f997 	bl	8019f3e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014c10:	f107 030c 	add.w	r3, r7, #12
 8014c14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014c18:	f005 fa50 	bl	801a0bc <SysTimeToMs>
 8014c1c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8014c1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014c22:	3301      	adds	r3, #1
 8014c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014c28:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014c2c:	79bb      	ldrb	r3, [r7, #6]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	f4ff af3f 	bcc.w	8014ab2 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8014c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d102      	bne.n	8014c42 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c40:	e000      	b.n	8014c44 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8014c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	372c      	adds	r7, #44	; 0x2c
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c4c:	0001ec30 	.word	0x0001ec30
 8014c50:	c22e4507 	.word	0xc22e4507
 8014c54:	00015180 	.word	0x00015180

08014c58 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014c58:	b480      	push	{r7}
 8014c5a:	b085      	sub	sp, #20
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
 8014c60:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014c62:	2300      	movs	r3, #0
 8014c64:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	781b      	ldrb	r3, [r3, #0]
 8014c6a:	2b03      	cmp	r3, #3
 8014c6c:	d13f      	bne.n	8014cee <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	3301      	adds	r3, #1
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	b25a      	sxtb	r2, r3
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014c80:	f003 030f 	and.w	r3, r3, #15
 8014c84:	b25a      	sxtb	r2, r3
 8014c86:	683b      	ldr	r3, [r7, #0]
 8014c88:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014c8a:	683b      	ldr	r3, [r7, #0]
 8014c8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014c90:	b2db      	uxtb	r3, r3
 8014c92:	091b      	lsrs	r3, r3, #4
 8014c94:	b2db      	uxtb	r3, r3
 8014c96:	b25a      	sxtb	r2, r3
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	3302      	adds	r3, #2
 8014ca0:	781b      	ldrb	r3, [r3, #0]
 8014ca2:	b29a      	uxth	r2, r3
 8014ca4:	683b      	ldr	r3, [r7, #0]
 8014ca6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	889b      	ldrh	r3, [r3, #4]
 8014cac:	b21a      	sxth	r2, r3
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	3303      	adds	r3, #3
 8014cb2:	781b      	ldrb	r3, [r3, #0]
 8014cb4:	021b      	lsls	r3, r3, #8
 8014cb6:	b21b      	sxth	r3, r3
 8014cb8:	4313      	orrs	r3, r2
 8014cba:	b21b      	sxth	r3, r3
 8014cbc:	b29a      	uxth	r2, r3
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	791a      	ldrb	r2, [r3, #4]
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	091b      	lsrs	r3, r3, #4
 8014cd0:	b2db      	uxtb	r3, r3
 8014cd2:	f003 0307 	and.w	r3, r3, #7
 8014cd6:	b2da      	uxtb	r2, r3
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	781b      	ldrb	r3, [r3, #0]
 8014ce0:	f003 030f 	and.w	r3, r3, #15
 8014ce4:	b2da      	uxtb	r2, r3
 8014ce6:	683b      	ldr	r3, [r7, #0]
 8014ce8:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8014cea:	2305      	movs	r3, #5
 8014cec:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8014cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3714      	adds	r7, #20
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bc80      	pop	{r7}
 8014cf8:	4770      	bx	lr

08014cfa <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8014cfa:	b5b0      	push	{r4, r5, r7, lr}
 8014cfc:	b088      	sub	sp, #32
 8014cfe:	af02      	add	r7, sp, #8
 8014d00:	60f8      	str	r0, [r7, #12]
 8014d02:	60b9      	str	r1, [r7, #8]
 8014d04:	607a      	str	r2, [r7, #4]
 8014d06:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	791b      	ldrb	r3, [r3, #4]
 8014d0c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	799b      	ldrb	r3, [r3, #6]
 8014d12:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	79db      	ldrb	r3, [r3, #7]
 8014d18:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	7a1b      	ldrb	r3, [r3, #8]
 8014d1e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	795b      	ldrb	r3, [r3, #5]
 8014d24:	f083 0301 	eor.w	r3, r3, #1
 8014d28:	b2db      	uxtb	r3, r3
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d008      	beq.n	8014d40 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	7adb      	ldrb	r3, [r3, #11]
 8014d32:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	7a5b      	ldrb	r3, [r3, #9]
 8014d38:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	7a9b      	ldrb	r3, [r3, #10]
 8014d3e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014d40:	7dfb      	ldrb	r3, [r7, #23]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d04a      	beq.n	8014ddc <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8014d46:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8014d4a:	2b0f      	cmp	r3, #15
 8014d4c:	d103      	bne.n	8014d56 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	7a5b      	ldrb	r3, [r3, #9]
 8014d52:	75bb      	strb	r3, [r7, #22]
 8014d54:	e01d      	b.n	8014d92 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	7b18      	ldrb	r0, [r3, #12]
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	6919      	ldr	r1, [r3, #16]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014d6a:	68fa      	ldr	r2, [r7, #12]
 8014d6c:	6992      	ldr	r2, [r2, #24]
 8014d6e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8014d72:	9201      	str	r2, [sp, #4]
 8014d74:	9300      	str	r3, [sp, #0]
 8014d76:	462b      	mov	r3, r5
 8014d78:	4622      	mov	r2, r4
 8014d7a:	f7ff fd3a 	bl	80147f2 <RegionCommonChanVerifyDr>
 8014d7e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014d80:	f083 0301 	eor.w	r3, r3, #1
 8014d84:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d003      	beq.n	8014d92 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8014d8a:	7dfb      	ldrb	r3, [r7, #23]
 8014d8c:	f023 0302 	bic.w	r3, r3, #2
 8014d90:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8014d92:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014d96:	2b0f      	cmp	r3, #15
 8014d98:	d103      	bne.n	8014da2 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	7a9b      	ldrb	r3, [r3, #10]
 8014d9e:	757b      	strb	r3, [r7, #21]
 8014da0:	e01c      	b.n	8014ddc <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8014dae:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7ff fd8f 	bl	80148d6 <RegionCommonValueInRange>
 8014db8:	4603      	mov	r3, r0
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d10e      	bne.n	8014ddc <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014dc4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	da03      	bge.n	8014dd4 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	7f5b      	ldrb	r3, [r3, #29]
 8014dd0:	757b      	strb	r3, [r7, #21]
 8014dd2:	e003      	b.n	8014ddc <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014dd4:	7dfb      	ldrb	r3, [r7, #23]
 8014dd6:	f023 0304 	bic.w	r3, r3, #4
 8014dda:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8014ddc:	7dfb      	ldrb	r3, [r7, #23]
 8014dde:	2b07      	cmp	r3, #7
 8014de0:	d105      	bne.n	8014dee <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8014de2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d101      	bne.n	8014dee <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8014dea:	2301      	movs	r3, #1
 8014dec:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	7dba      	ldrb	r2, [r7, #22]
 8014df2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	7d7a      	ldrb	r2, [r7, #21]
 8014df8:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8014dfa:	7d3a      	ldrb	r2, [r7, #20]
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	701a      	strb	r2, [r3, #0]

    return status;
 8014e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3718      	adds	r7, #24
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014e0c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8014e0c:	b480      	push	{r7}
 8014e0e:	b083      	sub	sp, #12
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	4603      	mov	r3, r0
 8014e14:	6039      	str	r1, [r7, #0]
 8014e16:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014e18:	79fb      	ldrb	r3, [r7, #7]
 8014e1a:	4a06      	ldr	r2, [pc, #24]	; (8014e34 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8014e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8014e20:	461a      	mov	r2, r3
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	370c      	adds	r7, #12
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bc80      	pop	{r7}
 8014e30:	4770      	bx	lr
 8014e32:	bf00      	nop
 8014e34:	000f4240 	.word	0x000f4240

08014e38 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014e38:	b480      	push	{r7}
 8014e3a:	b083      	sub	sp, #12
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	4603      	mov	r3, r0
 8014e40:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8014e42:	79fb      	ldrb	r3, [r7, #7]
 8014e44:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014e48:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	370c      	adds	r7, #12
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bc80      	pop	{r7}
 8014e54:	4770      	bx	lr
	...

08014e58 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014e58:	b480      	push	{r7}
 8014e5a:	b085      	sub	sp, #20
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	60f8      	str	r0, [r7, #12]
 8014e60:	607a      	str	r2, [r7, #4]
 8014e62:	603b      	str	r3, [r7, #0]
 8014e64:	460b      	mov	r3, r1
 8014e66:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014e68:	7afa      	ldrb	r2, [r7, #11]
 8014e6a:	7afb      	ldrb	r3, [r7, #11]
 8014e6c:	3b04      	subs	r3, #4
 8014e6e:	4619      	mov	r1, r3
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	fb03 f101 	mul.w	r1, r3, r1
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014e7c:	fb00 f303 	mul.w	r3, r0, r3
 8014e80:	440b      	add	r3, r1
 8014e82:	005b      	lsls	r3, r3, #1
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d013      	beq.n	8014eb0 <RegionCommonComputeRxWindowParameters+0x58>
 8014e88:	7afb      	ldrb	r3, [r7, #11]
 8014e8a:	3b04      	subs	r3, #4
 8014e8c:	4619      	mov	r1, r3
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	fb03 f101 	mul.w	r1, r3, r1
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014e9a:	fb00 f303 	mul.w	r3, r0, r3
 8014e9e:	440b      	add	r3, r1
 8014ea0:	0059      	lsls	r1, r3, #1
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	440b      	add	r3, r1
 8014ea6:	1e59      	subs	r1, r3, #1
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8014eae:	e00f      	b.n	8014ed0 <RegionCommonComputeRxWindowParameters+0x78>
 8014eb0:	7afb      	ldrb	r3, [r7, #11]
 8014eb2:	3b04      	subs	r3, #4
 8014eb4:	4619      	mov	r1, r3
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	fb03 f101 	mul.w	r1, r3, r1
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014ec2:	fb00 f303 	mul.w	r3, r0, r3
 8014ec6:	440b      	add	r3, r1
 8014ec8:	0059      	lsls	r1, r3, #1
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	bf38      	it	cc
 8014ed4:	461a      	movcc	r2, r3
 8014ed6:	69bb      	ldr	r3, [r7, #24]
 8014ed8:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	009b      	lsls	r3, r3, #2
 8014ede:	4619      	mov	r1, r3
 8014ee0:	69bb      	ldr	r3, [r7, #24]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	68fa      	ldr	r2, [r7, #12]
 8014ee6:	fb02 f303 	mul.w	r3, r2, r3
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d007      	beq.n	8014efe <RegionCommonComputeRxWindowParameters+0xa6>
 8014eee:	69bb      	ldr	r3, [r7, #24]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	68fa      	ldr	r2, [r7, #12]
 8014ef4:	fb02 f303 	mul.w	r3, r2, r3
 8014ef8:	3301      	adds	r3, #1
 8014efa:	085b      	lsrs	r3, r3, #1
 8014efc:	e005      	b.n	8014f0a <RegionCommonComputeRxWindowParameters+0xb2>
 8014efe:	69bb      	ldr	r3, [r7, #24]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	68fa      	ldr	r2, [r7, #12]
 8014f04:	fb02 f303 	mul.w	r3, r2, r3
 8014f08:	085b      	lsrs	r3, r3, #1
 8014f0a:	1acb      	subs	r3, r1, r3
 8014f0c:	683a      	ldr	r2, [r7, #0]
 8014f0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014f12:	fb01 f202 	mul.w	r2, r1, r2
 8014f16:	1a9b      	subs	r3, r3, r2
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	dd27      	ble.n	8014f6c <RegionCommonComputeRxWindowParameters+0x114>
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	4619      	mov	r1, r3
 8014f22:	69bb      	ldr	r3, [r7, #24]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	68fa      	ldr	r2, [r7, #12]
 8014f28:	fb02 f303 	mul.w	r3, r2, r3
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d007      	beq.n	8014f40 <RegionCommonComputeRxWindowParameters+0xe8>
 8014f30:	69bb      	ldr	r3, [r7, #24]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	68fa      	ldr	r2, [r7, #12]
 8014f36:	fb02 f303 	mul.w	r3, r2, r3
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	085b      	lsrs	r3, r3, #1
 8014f3e:	e005      	b.n	8014f4c <RegionCommonComputeRxWindowParameters+0xf4>
 8014f40:	69bb      	ldr	r3, [r7, #24]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	fb02 f303 	mul.w	r3, r2, r3
 8014f4a:	085b      	lsrs	r3, r3, #1
 8014f4c:	1acb      	subs	r3, r1, r3
 8014f4e:	683a      	ldr	r2, [r7, #0]
 8014f50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014f54:	fb01 f202 	mul.w	r2, r1, r2
 8014f58:	1a9b      	subs	r3, r3, r2
 8014f5a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014f5e:	4a19      	ldr	r2, [pc, #100]	; (8014fc4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014f60:	fb82 1203 	smull	r1, r2, r2, r3
 8014f64:	1192      	asrs	r2, r2, #6
 8014f66:	17db      	asrs	r3, r3, #31
 8014f68:	1ad3      	subs	r3, r2, r3
 8014f6a:	e024      	b.n	8014fb6 <RegionCommonComputeRxWindowParameters+0x15e>
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	009b      	lsls	r3, r3, #2
 8014f70:	4619      	mov	r1, r3
 8014f72:	69bb      	ldr	r3, [r7, #24]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	68fa      	ldr	r2, [r7, #12]
 8014f78:	fb02 f303 	mul.w	r3, r2, r3
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d007      	beq.n	8014f90 <RegionCommonComputeRxWindowParameters+0x138>
 8014f80:	69bb      	ldr	r3, [r7, #24]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	68fa      	ldr	r2, [r7, #12]
 8014f86:	fb02 f303 	mul.w	r3, r2, r3
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	085b      	lsrs	r3, r3, #1
 8014f8e:	e005      	b.n	8014f9c <RegionCommonComputeRxWindowParameters+0x144>
 8014f90:	69bb      	ldr	r3, [r7, #24]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	68fa      	ldr	r2, [r7, #12]
 8014f96:	fb02 f303 	mul.w	r3, r2, r3
 8014f9a:	085b      	lsrs	r3, r3, #1
 8014f9c:	1acb      	subs	r3, r1, r3
 8014f9e:	683a      	ldr	r2, [r7, #0]
 8014fa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014fa4:	fb01 f202 	mul.w	r2, r1, r2
 8014fa8:	1a9b      	subs	r3, r3, r2
 8014faa:	4a06      	ldr	r2, [pc, #24]	; (8014fc4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014fac:	fb82 1203 	smull	r1, r2, r2, r3
 8014fb0:	1192      	asrs	r2, r2, #6
 8014fb2:	17db      	asrs	r3, r3, #31
 8014fb4:	1ad3      	subs	r3, r2, r3
 8014fb6:	69fa      	ldr	r2, [r7, #28]
 8014fb8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014fba:	bf00      	nop
 8014fbc:	3714      	adds	r7, #20
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bc80      	pop	{r7}
 8014fc2:	4770      	bx	lr
 8014fc4:	10624dd3 	.word	0x10624dd3

08014fc8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b086      	sub	sp, #24
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	4603      	mov	r3, r0
 8014fd0:	60b9      	str	r1, [r7, #8]
 8014fd2:	607a      	str	r2, [r7, #4]
 8014fd4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fde:	005b      	lsls	r3, r3, #1
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f7eb fbf3 	bl	80007cc <__aeabi_ui2f>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	4619      	mov	r1, r3
 8014fea:	68b8      	ldr	r0, [r7, #8]
 8014fec:	f7eb fb3c 	bl	8000668 <__aeabi_fsub>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	6879      	ldr	r1, [r7, #4]
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7eb fb37 	bl	8000668 <__aeabi_fsub>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f7eb fa27 	bl	8000450 <__aeabi_f2d>
 8015002:	4602      	mov	r2, r0
 8015004:	460b      	mov	r3, r1
 8015006:	4610      	mov	r0, r2
 8015008:	4619      	mov	r1, r3
 801500a:	f006 fa19 	bl	801b440 <floor>
 801500e:	4602      	mov	r2, r0
 8015010:	460b      	mov	r3, r1
 8015012:	4610      	mov	r0, r2
 8015014:	4619      	mov	r1, r3
 8015016:	f7eb fafb 	bl	8000610 <__aeabi_d2iz>
 801501a:	4603      	mov	r3, r0
 801501c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801501e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015022:	4618      	mov	r0, r3
 8015024:	3718      	adds	r7, #24
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}

0801502a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801502a:	b590      	push	{r4, r7, lr}
 801502c:	b087      	sub	sp, #28
 801502e:	af00      	add	r7, sp, #0
 8015030:	60f8      	str	r0, [r7, #12]
 8015032:	60b9      	str	r1, [r7, #8]
 8015034:	607a      	str	r2, [r7, #4]
 8015036:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8015038:	2300      	movs	r3, #0
 801503a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801503c:	2300      	movs	r3, #0
 801503e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015040:	2300      	movs	r3, #0
 8015042:	757b      	strb	r3, [r7, #21]
 8015044:	2300      	movs	r3, #0
 8015046:	753b      	strb	r3, [r7, #20]
 8015048:	e09c      	b.n	8015184 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801504a:	2300      	movs	r3, #0
 801504c:	74fb      	strb	r3, [r7, #19]
 801504e:	e08f      	b.n	8015170 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	685a      	ldr	r2, [r3, #4]
 8015054:	7d3b      	ldrb	r3, [r7, #20]
 8015056:	005b      	lsls	r3, r3, #1
 8015058:	4413      	add	r3, r2
 801505a:	881b      	ldrh	r3, [r3, #0]
 801505c:	461a      	mov	r2, r3
 801505e:	7cfb      	ldrb	r3, [r7, #19]
 8015060:	fa42 f303 	asr.w	r3, r2, r3
 8015064:	f003 0301 	and.w	r3, r3, #1
 8015068:	2b00      	cmp	r3, #0
 801506a:	d07e      	beq.n	801516a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	689a      	ldr	r2, [r3, #8]
 8015070:	7d79      	ldrb	r1, [r7, #21]
 8015072:	7cfb      	ldrb	r3, [r7, #19]
 8015074:	440b      	add	r3, r1
 8015076:	4619      	mov	r1, r3
 8015078:	460b      	mov	r3, r1
 801507a:	005b      	lsls	r3, r3, #1
 801507c:	440b      	add	r3, r1
 801507e:	009b      	lsls	r3, r3, #2
 8015080:	4413      	add	r3, r2
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d06b      	beq.n	8015160 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	781b      	ldrb	r3, [r3, #0]
 801508c:	f083 0301 	eor.w	r3, r3, #1
 8015090:	b2db      	uxtb	r3, r3
 8015092:	2b00      	cmp	r3, #0
 8015094:	d011      	beq.n	80150ba <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801509a:	2b00      	cmp	r3, #0
 801509c:	d00d      	beq.n	80150ba <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	695a      	ldr	r2, [r3, #20]
 80150a2:	7d3b      	ldrb	r3, [r7, #20]
 80150a4:	005b      	lsls	r3, r3, #1
 80150a6:	4413      	add	r3, r2
 80150a8:	881b      	ldrh	r3, [r3, #0]
 80150aa:	461a      	mov	r2, r3
 80150ac:	7cfb      	ldrb	r3, [r7, #19]
 80150ae:	fa42 f303 	asr.w	r3, r2, r3
 80150b2:	f003 0301 	and.w	r3, r3, #1
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d054      	beq.n	8015164 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	785b      	ldrb	r3, [r3, #1]
 80150be:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	689a      	ldr	r2, [r3, #8]
 80150c4:	7d79      	ldrb	r1, [r7, #21]
 80150c6:	7cfb      	ldrb	r3, [r7, #19]
 80150c8:	440b      	add	r3, r1
 80150ca:	4619      	mov	r1, r3
 80150cc:	460b      	mov	r3, r1
 80150ce:	005b      	lsls	r3, r3, #1
 80150d0:	440b      	add	r3, r1
 80150d2:	009b      	lsls	r3, r3, #2
 80150d4:	4413      	add	r3, r2
 80150d6:	7a1b      	ldrb	r3, [r3, #8]
 80150d8:	f343 0303 	sbfx	r3, r3, #0, #4
 80150dc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80150de:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	689a      	ldr	r2, [r3, #8]
 80150e4:	7d79      	ldrb	r1, [r7, #21]
 80150e6:	7cfb      	ldrb	r3, [r7, #19]
 80150e8:	440b      	add	r3, r1
 80150ea:	4619      	mov	r1, r3
 80150ec:	460b      	mov	r3, r1
 80150ee:	005b      	lsls	r3, r3, #1
 80150f0:	440b      	add	r3, r1
 80150f2:	009b      	lsls	r3, r3, #2
 80150f4:	4413      	add	r3, r2
 80150f6:	7a1b      	ldrb	r3, [r3, #8]
 80150f8:	f343 1303 	sbfx	r3, r3, #4, #4
 80150fc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80150fe:	461a      	mov	r2, r3
 8015100:	4621      	mov	r1, r4
 8015102:	f7ff fbe8 	bl	80148d6 <RegionCommonValueInRange>
 8015106:	4603      	mov	r3, r0
 8015108:	2b00      	cmp	r3, #0
 801510a:	d02d      	beq.n	8015168 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	68da      	ldr	r2, [r3, #12]
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	6899      	ldr	r1, [r3, #8]
 8015114:	7d78      	ldrb	r0, [r7, #21]
 8015116:	7cfb      	ldrb	r3, [r7, #19]
 8015118:	4403      	add	r3, r0
 801511a:	4618      	mov	r0, r3
 801511c:	4603      	mov	r3, r0
 801511e:	005b      	lsls	r3, r3, #1
 8015120:	4403      	add	r3, r0
 8015122:	009b      	lsls	r3, r3, #2
 8015124:	440b      	add	r3, r1
 8015126:	7a5b      	ldrb	r3, [r3, #9]
 8015128:	4619      	mov	r1, r3
 801512a:	460b      	mov	r3, r1
 801512c:	005b      	lsls	r3, r3, #1
 801512e:	440b      	add	r3, r1
 8015130:	00db      	lsls	r3, r3, #3
 8015132:	4413      	add	r3, r2
 8015134:	7d1b      	ldrb	r3, [r3, #20]
 8015136:	f083 0301 	eor.w	r3, r3, #1
 801513a:	b2db      	uxtb	r3, r3
 801513c:	2b00      	cmp	r3, #0
 801513e:	d003      	beq.n	8015148 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8015140:	7dbb      	ldrb	r3, [r7, #22]
 8015142:	3301      	adds	r3, #1
 8015144:	75bb      	strb	r3, [r7, #22]
                    continue;
 8015146:	e010      	b.n	801516a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8015148:	7dfb      	ldrb	r3, [r7, #23]
 801514a:	1c5a      	adds	r2, r3, #1
 801514c:	75fa      	strb	r2, [r7, #23]
 801514e:	461a      	mov	r2, r3
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	4413      	add	r3, r2
 8015154:	7d79      	ldrb	r1, [r7, #21]
 8015156:	7cfa      	ldrb	r2, [r7, #19]
 8015158:	440a      	add	r2, r1
 801515a:	b2d2      	uxtb	r2, r2
 801515c:	701a      	strb	r2, [r3, #0]
 801515e:	e004      	b.n	801516a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015160:	bf00      	nop
 8015162:	e002      	b.n	801516a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8015164:	bf00      	nop
 8015166:	e000      	b.n	801516a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015168:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801516a:	7cfb      	ldrb	r3, [r7, #19]
 801516c:	3301      	adds	r3, #1
 801516e:	74fb      	strb	r3, [r7, #19]
 8015170:	7cfb      	ldrb	r3, [r7, #19]
 8015172:	2b0f      	cmp	r3, #15
 8015174:	f67f af6c 	bls.w	8015050 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015178:	7d7b      	ldrb	r3, [r7, #21]
 801517a:	3310      	adds	r3, #16
 801517c:	757b      	strb	r3, [r7, #21]
 801517e:	7d3b      	ldrb	r3, [r7, #20]
 8015180:	3301      	adds	r3, #1
 8015182:	753b      	strb	r3, [r7, #20]
 8015184:	7d7b      	ldrb	r3, [r7, #21]
 8015186:	b29a      	uxth	r2, r3
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	8a1b      	ldrh	r3, [r3, #16]
 801518c:	429a      	cmp	r2, r3
 801518e:	f4ff af5c 	bcc.w	801504a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	7dfa      	ldrb	r2, [r7, #23]
 8015196:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	7dba      	ldrb	r2, [r7, #22]
 801519c:	701a      	strb	r2, [r3, #0]
}
 801519e:	bf00      	nop
 80151a0:	371c      	adds	r7, #28
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd90      	pop	{r4, r7, pc}

080151a6 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80151a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151a8:	b08b      	sub	sp, #44	; 0x2c
 80151aa:	af04      	add	r7, sp, #16
 80151ac:	60f8      	str	r0, [r7, #12]
 80151ae:	60b9      	str	r1, [r7, #8]
 80151b0:	607a      	str	r2, [r7, #4]
 80151b2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	685b      	ldr	r3, [r3, #4]
 80151b8:	4618      	mov	r0, r3
 80151ba:	f005 fdbf 	bl	801ad3c <UTIL_TIMER_GetElapsedTime>
 80151be:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	681a      	ldr	r2, [r3, #0]
 80151c4:	697b      	ldr	r3, [r7, #20]
 80151c6:	1ad2      	subs	r2, r2, r3
 80151c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151ca:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80151cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ce:	2201      	movs	r2, #1
 80151d0:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	2200      	movs	r2, #0
 80151d6:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d004      	beq.n	80151ea <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80151e4:	697a      	ldr	r2, [r7, #20]
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d32b      	bcc.n	8015242 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	2200      	movs	r2, #0
 80151ee:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	69db      	ldr	r3, [r3, #28]
 80151f4:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80151fa:	68dd      	ldr	r5, [r3, #12]
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	7a5e      	ldrb	r6, [r3, #9]
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	f893 c008 	ldrb.w	ip, [r3, #8]
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	7d1b      	ldrb	r3, [r3, #20]
 801520a:	68fa      	ldr	r2, [r7, #12]
 801520c:	6992      	ldr	r2, [r2, #24]
 801520e:	9203      	str	r2, [sp, #12]
 8015210:	68fa      	ldr	r2, [r7, #12]
 8015212:	f10d 0e04 	add.w	lr, sp, #4
 8015216:	320c      	adds	r2, #12
 8015218:	e892 0003 	ldmia.w	r2, {r0, r1}
 801521c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015220:	9300      	str	r3, [sp, #0]
 8015222:	4663      	mov	r3, ip
 8015224:	4632      	mov	r2, r6
 8015226:	4629      	mov	r1, r5
 8015228:	4620      	mov	r0, r4
 801522a:	f7ff fc25 	bl	8014a78 <RegionCommonUpdateBandTimeOff>
 801522e:	4602      	mov	r2, r0
 8015230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015232:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	69d8      	ldr	r0, [r3, #28]
 8015238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801523a:	683a      	ldr	r2, [r7, #0]
 801523c:	6879      	ldr	r1, [r7, #4]
 801523e:	f7ff fef4 	bl	801502a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	781b      	ldrb	r3, [r3, #0]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d004      	beq.n	8015254 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801524a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801524c:	2200      	movs	r2, #0
 801524e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015250:	2300      	movs	r3, #0
 8015252:	e006      	b.n	8015262 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8015254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d001      	beq.n	8015260 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801525c:	230b      	movs	r3, #11
 801525e:	e000      	b.n	8015262 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015260:	230c      	movs	r3, #12
    }
}
 8015262:	4618      	mov	r0, r3
 8015264:	371c      	adds	r7, #28
 8015266:	46bd      	mov	sp, r7
 8015268:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801526a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801526a:	b5b0      	push	{r4, r5, r7, lr}
 801526c:	b086      	sub	sp, #24
 801526e:	af02      	add	r7, sp, #8
 8015270:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	781b      	ldrb	r3, [r3, #0]
 8015276:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f993 2000 	ldrsb.w	r2, [r3]
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015284:	429a      	cmp	r2, r3
 8015286:	d103      	bne.n	8015290 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801528e:	e026      	b.n	80152de <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015290:	7bfb      	ldrb	r3, [r7, #15]
 8015292:	3b01      	subs	r3, #1
 8015294:	b2db      	uxtb	r3, r3
 8015296:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801529e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d019      	beq.n	80152da <RegionCommonGetNextLowerTxDr+0x70>
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	78d8      	ldrb	r0, [r3, #3]
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	6859      	ldr	r1, [r3, #4]
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80152ba:	687a      	ldr	r2, [r7, #4]
 80152bc:	6892      	ldr	r2, [r2, #8]
 80152be:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80152c2:	9201      	str	r2, [sp, #4]
 80152c4:	9300      	str	r3, [sp, #0]
 80152c6:	462b      	mov	r3, r5
 80152c8:	4622      	mov	r2, r4
 80152ca:	f7ff fa92 	bl	80147f2 <RegionCommonChanVerifyDr>
 80152ce:	4603      	mov	r3, r0
 80152d0:	f083 0301 	eor.w	r3, r3, #1
 80152d4:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d1da      	bne.n	8015290 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80152da:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3710      	adds	r7, #16
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bdb0      	pop	{r4, r5, r7, pc}

080152e6 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80152e6:	b480      	push	{r7}
 80152e8:	b083      	sub	sp, #12
 80152ea:	af00      	add	r7, sp, #0
 80152ec:	4603      	mov	r3, r0
 80152ee:	460a      	mov	r2, r1
 80152f0:	71fb      	strb	r3, [r7, #7]
 80152f2:	4613      	mov	r3, r2
 80152f4:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80152f6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80152fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152fe:	4293      	cmp	r3, r2
 8015300:	bfb8      	it	lt
 8015302:	4613      	movlt	r3, r2
 8015304:	b25b      	sxtb	r3, r3
}
 8015306:	4618      	mov	r0, r3
 8015308:	370c      	adds	r7, #12
 801530a:	46bd      	mov	sp, r7
 801530c:	bc80      	pop	{r7}
 801530e:	4770      	bx	lr

08015310 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8015310:	b480      	push	{r7}
 8015312:	b083      	sub	sp, #12
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
 8015318:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	009b      	lsls	r3, r3, #2
 801531e:	683a      	ldr	r2, [r7, #0]
 8015320:	4413      	add	r3, r2
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	4a07      	ldr	r2, [pc, #28]	; (8015344 <RegionCommonGetBandwidth+0x34>)
 8015326:	4293      	cmp	r3, r2
 8015328:	d004      	beq.n	8015334 <RegionCommonGetBandwidth+0x24>
 801532a:	4a07      	ldr	r2, [pc, #28]	; (8015348 <RegionCommonGetBandwidth+0x38>)
 801532c:	4293      	cmp	r3, r2
 801532e:	d003      	beq.n	8015338 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8015330:	2300      	movs	r3, #0
 8015332:	e002      	b.n	801533a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8015334:	2301      	movs	r3, #1
 8015336:	e000      	b.n	801533a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8015338:	2302      	movs	r3, #2
    }
}
 801533a:	4618      	mov	r0, r3
 801533c:	370c      	adds	r7, #12
 801533e:	46bd      	mov	sp, r7
 8015340:	bc80      	pop	{r7}
 8015342:	4770      	bx	lr
 8015344:	0003d090 	.word	0x0003d090
 8015348:	0007a120 	.word	0x0007a120

0801534c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b086      	sub	sp, #24
 8015350:	af04      	add	r7, sp, #16
 8015352:	4603      	mov	r3, r0
 8015354:	6039      	str	r1, [r7, #0]
 8015356:	71fb      	strb	r3, [r7, #7]
 8015358:	4613      	mov	r3, r2
 801535a:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801535c:	79fb      	ldrb	r3, [r7, #7]
 801535e:	2b05      	cmp	r3, #5
 8015360:	d810      	bhi.n	8015384 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8015362:	79fb      	ldrb	r3, [r7, #7]
 8015364:	4a0f      	ldr	r2, [pc, #60]	; (80153a4 <RegionCommonRxConfigPrint+0x58>)
 8015366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801536a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801536e:	9202      	str	r2, [sp, #8]
 8015370:	683a      	ldr	r2, [r7, #0]
 8015372:	9201      	str	r2, [sp, #4]
 8015374:	9300      	str	r3, [sp, #0]
 8015376:	4b0c      	ldr	r3, [pc, #48]	; (80153a8 <RegionCommonRxConfigPrint+0x5c>)
 8015378:	2201      	movs	r2, #1
 801537a:	2100      	movs	r1, #0
 801537c:	2002      	movs	r0, #2
 801537e:	f005 fdbb 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8015382:	e00a      	b.n	801539a <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015384:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015388:	9301      	str	r3, [sp, #4]
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	9300      	str	r3, [sp, #0]
 801538e:	4b07      	ldr	r3, [pc, #28]	; (80153ac <RegionCommonRxConfigPrint+0x60>)
 8015390:	2201      	movs	r2, #1
 8015392:	2100      	movs	r1, #0
 8015394:	2002      	movs	r0, #2
 8015396:	f005 fdaf 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
}
 801539a:	bf00      	nop
 801539c:	3708      	adds	r7, #8
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}
 80153a2:	bf00      	nop
 80153a4:	20000134 	.word	0x20000134
 80153a8:	0801bdd0 	.word	0x0801bdd0
 80153ac:	0801bdf0 	.word	0x0801bdf0

080153b0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b084      	sub	sp, #16
 80153b4:	af02      	add	r7, sp, #8
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	460b      	mov	r3, r1
 80153ba:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80153bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80153c0:	9301      	str	r3, [sp, #4]
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	9300      	str	r3, [sp, #0]
 80153c6:	4b05      	ldr	r3, [pc, #20]	; (80153dc <RegionCommonTxConfigPrint+0x2c>)
 80153c8:	2201      	movs	r2, #1
 80153ca:	2100      	movs	r1, #0
 80153cc:	2002      	movs	r0, #2
 80153ce:	f005 fd93 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
}
 80153d2:	bf00      	nop
 80153d4:	3708      	adds	r7, #8
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}
 80153da:	bf00      	nop
 80153dc:	0801be0c 	.word	0x0801be0c

080153e0 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b082      	sub	sp, #8
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
 80153e8:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80153ea:	4b2d      	ldr	r3, [pc, #180]	; (80154a0 <VerifyRfFreq+0xc0>)
 80153ec:	6a1b      	ldr	r3, [r3, #32]
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	4798      	blx	r3
 80153f2:	4603      	mov	r3, r0
 80153f4:	f083 0301 	eor.w	r3, r3, #1
 80153f8:	b2db      	uxtb	r3, r3
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d001      	beq.n	8015402 <VerifyRfFreq+0x22>
    {
        return false;
 80153fe:	2300      	movs	r3, #0
 8015400:	e04a      	b.n	8015498 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	4a27      	ldr	r2, [pc, #156]	; (80154a4 <VerifyRfFreq+0xc4>)
 8015406:	4293      	cmp	r3, r2
 8015408:	d307      	bcc.n	801541a <VerifyRfFreq+0x3a>
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	4a26      	ldr	r2, [pc, #152]	; (80154a8 <VerifyRfFreq+0xc8>)
 801540e:	4293      	cmp	r3, r2
 8015410:	d803      	bhi.n	801541a <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	2202      	movs	r2, #2
 8015416:	701a      	strb	r2, [r3, #0]
 8015418:	e03d      	b.n	8015496 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	4a22      	ldr	r2, [pc, #136]	; (80154a8 <VerifyRfFreq+0xc8>)
 801541e:	4293      	cmp	r3, r2
 8015420:	d907      	bls.n	8015432 <VerifyRfFreq+0x52>
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	4a21      	ldr	r2, [pc, #132]	; (80154ac <VerifyRfFreq+0xcc>)
 8015426:	4293      	cmp	r3, r2
 8015428:	d803      	bhi.n	8015432 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	2200      	movs	r2, #0
 801542e:	701a      	strb	r2, [r3, #0]
 8015430:	e031      	b.n	8015496 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	4a1d      	ldr	r2, [pc, #116]	; (80154ac <VerifyRfFreq+0xcc>)
 8015436:	4293      	cmp	r3, r2
 8015438:	d907      	bls.n	801544a <VerifyRfFreq+0x6a>
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	4a1c      	ldr	r2, [pc, #112]	; (80154b0 <VerifyRfFreq+0xd0>)
 801543e:	4293      	cmp	r3, r2
 8015440:	d803      	bhi.n	801544a <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	2201      	movs	r2, #1
 8015446:	701a      	strb	r2, [r3, #0]
 8015448:	e025      	b.n	8015496 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	4a19      	ldr	r2, [pc, #100]	; (80154b4 <VerifyRfFreq+0xd4>)
 801544e:	4293      	cmp	r3, r2
 8015450:	d907      	bls.n	8015462 <VerifyRfFreq+0x82>
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	4a18      	ldr	r2, [pc, #96]	; (80154b8 <VerifyRfFreq+0xd8>)
 8015456:	4293      	cmp	r3, r2
 8015458:	d803      	bhi.n	8015462 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	2205      	movs	r2, #5
 801545e:	701a      	strb	r2, [r3, #0]
 8015460:	e019      	b.n	8015496 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	4a15      	ldr	r2, [pc, #84]	; (80154bc <VerifyRfFreq+0xdc>)
 8015466:	4293      	cmp	r3, r2
 8015468:	d907      	bls.n	801547a <VerifyRfFreq+0x9a>
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	4a14      	ldr	r2, [pc, #80]	; (80154c0 <VerifyRfFreq+0xe0>)
 801546e:	4293      	cmp	r3, r2
 8015470:	d803      	bhi.n	801547a <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8015472:	683b      	ldr	r3, [r7, #0]
 8015474:	2203      	movs	r2, #3
 8015476:	701a      	strb	r2, [r3, #0]
 8015478:	e00d      	b.n	8015496 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	4a11      	ldr	r2, [pc, #68]	; (80154c4 <VerifyRfFreq+0xe4>)
 801547e:	4293      	cmp	r3, r2
 8015480:	d307      	bcc.n	8015492 <VerifyRfFreq+0xb2>
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	4a10      	ldr	r2, [pc, #64]	; (80154c8 <VerifyRfFreq+0xe8>)
 8015486:	4293      	cmp	r3, r2
 8015488:	d803      	bhi.n	8015492 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	2204      	movs	r2, #4
 801548e:	701a      	strb	r2, [r3, #0]
 8015490:	e001      	b.n	8015496 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8015492:	2300      	movs	r3, #0
 8015494:	e000      	b.n	8015498 <VerifyRfFreq+0xb8>
    }
    return true;
 8015496:	2301      	movs	r3, #1
}
 8015498:	4618      	mov	r0, r3
 801549a:	3708      	adds	r7, #8
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	0801c3ac 	.word	0x0801c3ac
 80154a4:	337055c0 	.word	0x337055c0
 80154a8:	338eda3f 	.word	0x338eda3f
 80154ac:	33bca100 	.word	0x33bca100
 80154b0:	33c5c8c0 	.word	0x33c5c8c0
 80154b4:	33c74f5f 	.word	0x33c74f5f
 80154b8:	33cef080 	.word	0x33cef080
 80154bc:	33d1fdbf 	.word	0x33d1fdbf
 80154c0:	33d5ce50 	.word	0x33d5ce50
 80154c4:	33d691a0 	.word	0x33d691a0
 80154c8:	33db2580 	.word	0x33db2580

080154cc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80154cc:	b590      	push	{r4, r7, lr}
 80154ce:	b08b      	sub	sp, #44	; 0x2c
 80154d0:	af04      	add	r7, sp, #16
 80154d2:	4603      	mov	r3, r0
 80154d4:	460a      	mov	r2, r1
 80154d6:	71fb      	strb	r3, [r7, #7]
 80154d8:	4613      	mov	r3, r2
 80154da:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80154dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154e0:	4a1f      	ldr	r2, [pc, #124]	; (8015560 <GetTimeOnAir+0x94>)
 80154e2:	5cd3      	ldrb	r3, [r2, r3]
 80154e4:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80154e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154ea:	491e      	ldr	r1, [pc, #120]	; (8015564 <GetTimeOnAir+0x98>)
 80154ec:	4618      	mov	r0, r3
 80154ee:	f7ff ff0f 	bl	8015310 <RegionCommonGetBandwidth>
 80154f2:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80154f4:	2300      	movs	r3, #0
 80154f6:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80154f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154fc:	2b07      	cmp	r3, #7
 80154fe:	d118      	bne.n	8015532 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015500:	4b19      	ldr	r3, [pc, #100]	; (8015568 <GetTimeOnAir+0x9c>)
 8015502:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015504:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801550c:	fb02 f303 	mul.w	r3, r2, r3
 8015510:	4619      	mov	r1, r3
 8015512:	88bb      	ldrh	r3, [r7, #4]
 8015514:	b2db      	uxtb	r3, r3
 8015516:	2201      	movs	r2, #1
 8015518:	9203      	str	r2, [sp, #12]
 801551a:	9302      	str	r3, [sp, #8]
 801551c:	2300      	movs	r3, #0
 801551e:	9301      	str	r3, [sp, #4]
 8015520:	2305      	movs	r3, #5
 8015522:	9300      	str	r3, [sp, #0]
 8015524:	2300      	movs	r3, #0
 8015526:	460a      	mov	r2, r1
 8015528:	68f9      	ldr	r1, [r7, #12]
 801552a:	2000      	movs	r0, #0
 801552c:	47a0      	blx	r4
 801552e:	6178      	str	r0, [r7, #20]
 8015530:	e011      	b.n	8015556 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015532:	4b0d      	ldr	r3, [pc, #52]	; (8015568 <GetTimeOnAir+0x9c>)
 8015534:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015536:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801553a:	88bb      	ldrh	r3, [r7, #4]
 801553c:	b2db      	uxtb	r3, r3
 801553e:	2101      	movs	r1, #1
 8015540:	9103      	str	r1, [sp, #12]
 8015542:	9302      	str	r3, [sp, #8]
 8015544:	2300      	movs	r3, #0
 8015546:	9301      	str	r3, [sp, #4]
 8015548:	2308      	movs	r3, #8
 801554a:	9300      	str	r3, [sp, #0]
 801554c:	2301      	movs	r3, #1
 801554e:	68f9      	ldr	r1, [r7, #12]
 8015550:	2001      	movs	r0, #1
 8015552:	47a0      	blx	r4
 8015554:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015556:	697b      	ldr	r3, [r7, #20]
}
 8015558:	4618      	mov	r0, r3
 801555a:	371c      	adds	r7, #28
 801555c:	46bd      	mov	sp, r7
 801555e:	bd90      	pop	{r4, r7, pc}
 8015560:	0801c374 	.word	0x0801c374
 8015564:	0801c37c 	.word	0x0801c37c
 8015568:	0801c3ac 	.word	0x0801c3ac

0801556c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b088      	sub	sp, #32
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015574:	2300      	movs	r3, #0
 8015576:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	781b      	ldrb	r3, [r3, #0]
 801557c:	3b01      	subs	r3, #1
 801557e:	2b38      	cmp	r3, #56	; 0x38
 8015580:	f200 8128 	bhi.w	80157d4 <RegionEU868GetPhyParam+0x268>
 8015584:	a201      	add	r2, pc, #4	; (adr r2, 801558c <RegionEU868GetPhyParam+0x20>)
 8015586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801558a:	bf00      	nop
 801558c:	08015671 	.word	0x08015671
 8015590:	08015677 	.word	0x08015677
 8015594:	080157d5 	.word	0x080157d5
 8015598:	080157d5 	.word	0x080157d5
 801559c:	080157d5 	.word	0x080157d5
 80155a0:	0801567d 	.word	0x0801567d
 80155a4:	080157d5 	.word	0x080157d5
 80155a8:	080156b7 	.word	0x080156b7
 80155ac:	080157d5 	.word	0x080157d5
 80155b0:	080156bd 	.word	0x080156bd
 80155b4:	080156c3 	.word	0x080156c3
 80155b8:	080156c9 	.word	0x080156c9
 80155bc:	080156cf 	.word	0x080156cf
 80155c0:	080156df 	.word	0x080156df
 80155c4:	080156ef 	.word	0x080156ef
 80155c8:	080156f5 	.word	0x080156f5
 80155cc:	080156fd 	.word	0x080156fd
 80155d0:	08015705 	.word	0x08015705
 80155d4:	0801570d 	.word	0x0801570d
 80155d8:	08015715 	.word	0x08015715
 80155dc:	0801571d 	.word	0x0801571d
 80155e0:	08015725 	.word	0x08015725
 80155e4:	08015739 	.word	0x08015739
 80155e8:	0801573f 	.word	0x0801573f
 80155ec:	08015745 	.word	0x08015745
 80155f0:	0801574b 	.word	0x0801574b
 80155f4:	08015757 	.word	0x08015757
 80155f8:	08015763 	.word	0x08015763
 80155fc:	08015769 	.word	0x08015769
 8015600:	08015771 	.word	0x08015771
 8015604:	08015777 	.word	0x08015777
 8015608:	0801577d 	.word	0x0801577d
 801560c:	08015785 	.word	0x08015785
 8015610:	08015683 	.word	0x08015683
 8015614:	080157d5 	.word	0x080157d5
 8015618:	080157d5 	.word	0x080157d5
 801561c:	080157d5 	.word	0x080157d5
 8015620:	080157d5 	.word	0x080157d5
 8015624:	080157d5 	.word	0x080157d5
 8015628:	080157d5 	.word	0x080157d5
 801562c:	080157d5 	.word	0x080157d5
 8015630:	080157d5 	.word	0x080157d5
 8015634:	080157d5 	.word	0x080157d5
 8015638:	080157d5 	.word	0x080157d5
 801563c:	080157d5 	.word	0x080157d5
 8015640:	080157d5 	.word	0x080157d5
 8015644:	080157d5 	.word	0x080157d5
 8015648:	0801578b 	.word	0x0801578b
 801564c:	08015791 	.word	0x08015791
 8015650:	0801579f 	.word	0x0801579f
 8015654:	080157d5 	.word	0x080157d5
 8015658:	080157d5 	.word	0x080157d5
 801565c:	080157a5 	.word	0x080157a5
 8015660:	080157ab 	.word	0x080157ab
 8015664:	080157d5 	.word	0x080157d5
 8015668:	080157b1 	.word	0x080157b1
 801566c:	080157c1 	.word	0x080157c1
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015670:	2300      	movs	r3, #0
 8015672:	61bb      	str	r3, [r7, #24]
            break;
 8015674:	e0af      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8015676:	2300      	movs	r3, #0
 8015678:	61bb      	str	r3, [r7, #24]
            break;
 801567a:	e0ac      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801567c:	2300      	movs	r3, #0
 801567e:	61bb      	str	r3, [r7, #24]
            break;
 8015680:	e0a9      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015688:	733b      	strb	r3, [r7, #12]
 801568a:	2307      	movs	r3, #7
 801568c:	737b      	strb	r3, [r7, #13]
 801568e:	2300      	movs	r3, #0
 8015690:	73bb      	strb	r3, [r7, #14]
 8015692:	2310      	movs	r3, #16
 8015694:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015696:	4b53      	ldr	r3, [pc, #332]	; (80157e4 <RegionEU868GetPhyParam+0x278>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801569e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80156a0:	4b50      	ldr	r3, [pc, #320]	; (80157e4 <RegionEU868GetPhyParam+0x278>)
 80156a2:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80156a4:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80156a6:	f107 030c 	add.w	r3, r7, #12
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7ff fddd 	bl	801526a <RegionCommonGetNextLowerTxDr>
 80156b0:	4603      	mov	r3, r0
 80156b2:	61bb      	str	r3, [r7, #24]
            break;
 80156b4:	e08f      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80156b6:	2300      	movs	r3, #0
 80156b8:	61bb      	str	r3, [r7, #24]
            break;
 80156ba:	e08c      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80156bc:	2300      	movs	r3, #0
 80156be:	61bb      	str	r3, [r7, #24]
            break;
 80156c0:	e089      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80156c2:	2340      	movs	r3, #64	; 0x40
 80156c4:	61bb      	str	r3, [r7, #24]
            break;
 80156c6:	e086      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80156c8:	2320      	movs	r3, #32
 80156ca:	61bb      	str	r3, [r7, #24]
            break;
 80156cc:	e083      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156d4:	461a      	mov	r2, r3
 80156d6:	4b44      	ldr	r3, [pc, #272]	; (80157e8 <RegionEU868GetPhyParam+0x27c>)
 80156d8:	5c9b      	ldrb	r3, [r3, r2]
 80156da:	61bb      	str	r3, [r7, #24]
            break;
 80156dc:	e07b      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156e4:	461a      	mov	r2, r3
 80156e6:	4b41      	ldr	r3, [pc, #260]	; (80157ec <RegionEU868GetPhyParam+0x280>)
 80156e8:	5c9b      	ldrb	r3, [r3, r2]
 80156ea:	61bb      	str	r3, [r7, #24]
            break;
 80156ec:	e073      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80156ee:	2301      	movs	r3, #1
 80156f0:	61bb      	str	r3, [r7, #24]
            break;
 80156f2:	e070      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80156f4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80156f8:	61bb      	str	r3, [r7, #24]
            break;
 80156fa:	e06c      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80156fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015700:	61bb      	str	r3, [r7, #24]
            break;
 8015702:	e068      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015704:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8015708:	61bb      	str	r3, [r7, #24]
            break;
 801570a:	e064      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801570c:	f241 3388 	movw	r3, #5000	; 0x1388
 8015710:	61bb      	str	r3, [r7, #24]
            break;
 8015712:	e060      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015714:	f241 7370 	movw	r3, #6000	; 0x1770
 8015718:	61bb      	str	r3, [r7, #24]
            break;
 801571a:	e05c      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801571c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015720:	61bb      	str	r3, [r7, #24]
            break;
 8015722:	e058      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8015724:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015728:	4831      	ldr	r0, [pc, #196]	; (80157f0 <RegionEU868GetPhyParam+0x284>)
 801572a:	f001 f879 	bl	8016820 <randr>
 801572e:	4603      	mov	r3, r0
 8015730:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8015734:	61bb      	str	r3, [r7, #24]
            break;
 8015736:	e04e      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015738:	2300      	movs	r3, #0
 801573a:	61bb      	str	r3, [r7, #24]
            break;
 801573c:	e04b      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801573e:	4b2d      	ldr	r3, [pc, #180]	; (80157f4 <RegionEU868GetPhyParam+0x288>)
 8015740:	61bb      	str	r3, [r7, #24]
            break;
 8015742:	e048      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8015744:	2300      	movs	r3, #0
 8015746:	61bb      	str	r3, [r7, #24]
            break;
 8015748:	e045      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801574a:	4b26      	ldr	r3, [pc, #152]	; (80157e4 <RegionEU868GetPhyParam+0x278>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8015752:	61bb      	str	r3, [r7, #24]
            break;
 8015754:	e03f      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015756:	4b23      	ldr	r3, [pc, #140]	; (80157e4 <RegionEU868GetPhyParam+0x278>)
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801575e:	61bb      	str	r3, [r7, #24]
            break;
 8015760:	e039      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8015762:	2310      	movs	r3, #16
 8015764:	61bb      	str	r3, [r7, #24]
            break;
 8015766:	e036      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015768:	4b1e      	ldr	r3, [pc, #120]	; (80157e4 <RegionEU868GetPhyParam+0x278>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	61bb      	str	r3, [r7, #24]
            break;
 801576e:	e032      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8015770:	2300      	movs	r3, #0
 8015772:	61bb      	str	r3, [r7, #24]
            break;
 8015774:	e02f      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015776:	2300      	movs	r3, #0
 8015778:	61bb      	str	r3, [r7, #24]
            break;
 801577a:	e02c      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801577c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8015780:	61bb      	str	r3, [r7, #24]
            break;
 8015782:	e028      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8015784:	4b1c      	ldr	r3, [pc, #112]	; (80157f8 <RegionEU868GetPhyParam+0x28c>)
 8015786:	61bb      	str	r3, [r7, #24]
            break;
 8015788:	e025      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801578a:	4b1a      	ldr	r3, [pc, #104]	; (80157f4 <RegionEU868GetPhyParam+0x288>)
 801578c:	61bb      	str	r3, [r7, #24]
            break;
 801578e:	e022      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8015790:	2311      	movs	r3, #17
 8015792:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015794:	2302      	movs	r3, #2
 8015796:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015798:	2300      	movs	r3, #0
 801579a:	76bb      	strb	r3, [r7, #26]
            break;
 801579c:	e01b      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801579e:	2303      	movs	r3, #3
 80157a0:	61bb      	str	r3, [r7, #24]
            break;
 80157a2:	e018      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80157a4:	4b13      	ldr	r3, [pc, #76]	; (80157f4 <RegionEU868GetPhyParam+0x288>)
 80157a6:	61bb      	str	r3, [r7, #24]
            break;
 80157a8:	e015      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80157aa:	2303      	movs	r3, #3
 80157ac:	61bb      	str	r3, [r7, #24]
            break;
 80157ae:	e012      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157b6:	461a      	mov	r2, r3
 80157b8:	4b10      	ldr	r3, [pc, #64]	; (80157fc <RegionEU868GetPhyParam+0x290>)
 80157ba:	5c9b      	ldrb	r3, [r3, r2]
 80157bc:	61bb      	str	r3, [r7, #24]
            break;
 80157be:	e00a      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157c6:	490e      	ldr	r1, [pc, #56]	; (8015800 <RegionEU868GetPhyParam+0x294>)
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7ff fda1 	bl	8015310 <RegionCommonGetBandwidth>
 80157ce:	4603      	mov	r3, r0
 80157d0:	61bb      	str	r3, [r7, #24]
            break;
 80157d2:	e000      	b.n	80157d6 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 80157d4:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80157d6:	69bb      	ldr	r3, [r7, #24]
 80157d8:	61fb      	str	r3, [r7, #28]
 80157da:	69fb      	ldr	r3, [r7, #28]
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3720      	adds	r7, #32
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}
 80157e4:	20001ae0 	.word	0x20001ae0
 80157e8:	0801c39c 	.word	0x0801c39c
 80157ec:	0801c3a4 	.word	0x0801c3a4
 80157f0:	fffffc18 	.word	0xfffffc18
 80157f4:	33d3e608 	.word	0x33d3e608
 80157f8:	4009999a 	.word	0x4009999a
 80157fc:	0801c374 	.word	0x0801c374
 8015800:	0801c37c 	.word	0x0801c37c

08015804 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015804:	b590      	push	{r4, r7, lr}
 8015806:	b085      	sub	sp, #20
 8015808:	af02      	add	r7, sp, #8
 801580a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801580c:	4b11      	ldr	r3, [pc, #68]	; (8015854 <RegionEU868SetBandTxDone+0x50>)
 801580e:	681a      	ldr	r2, [r3, #0]
 8015810:	4b11      	ldr	r3, [pc, #68]	; (8015858 <RegionEU868SetBandTxDone+0x54>)
 8015812:	6819      	ldr	r1, [r3, #0]
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	4618      	mov	r0, r3
 801581a:	4603      	mov	r3, r0
 801581c:	005b      	lsls	r3, r3, #1
 801581e:	4403      	add	r3, r0
 8015820:	009b      	lsls	r3, r3, #2
 8015822:	440b      	add	r3, r1
 8015824:	3309      	adds	r3, #9
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	4619      	mov	r1, r3
 801582a:	460b      	mov	r3, r1
 801582c:	005b      	lsls	r3, r3, #1
 801582e:	440b      	add	r3, r1
 8015830:	00db      	lsls	r3, r3, #3
 8015832:	18d0      	adds	r0, r2, r3
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6899      	ldr	r1, [r3, #8]
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	785c      	ldrb	r4, [r3, #1]
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	691a      	ldr	r2, [r3, #16]
 8015840:	9200      	str	r2, [sp, #0]
 8015842:	68db      	ldr	r3, [r3, #12]
 8015844:	4622      	mov	r2, r4
 8015846:	f7ff f8e9 	bl	8014a1c <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 801584a:	bf00      	nop
 801584c:	370c      	adds	r7, #12
 801584e:	46bd      	mov	sp, r7
 8015850:	bd90      	pop	{r4, r7, pc}
 8015852:	bf00      	nop
 8015854:	20001adc 	.word	0x20001adc
 8015858:	20001ae0 	.word	0x20001ae0

0801585c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b0b0      	sub	sp, #192	; 0xc0
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015868:	2290      	movs	r2, #144	; 0x90
 801586a:	2100      	movs	r1, #0
 801586c:	4618      	mov	r0, r3
 801586e:	f005 fddf 	bl	801b430 <memset>
 8015872:	2364      	movs	r3, #100	; 0x64
 8015874:	863b      	strh	r3, [r7, #48]	; 0x30
 8015876:	2364      	movs	r3, #100	; 0x64
 8015878:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801587c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015880:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015884:	230a      	movs	r3, #10
 8015886:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801588a:	2364      	movs	r3, #100	; 0x64
 801588c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8015890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015894:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	7a1b      	ldrb	r3, [r3, #8]
 801589c:	2b02      	cmp	r3, #2
 801589e:	d05e      	beq.n	801595e <RegionEU868InitDefaults+0x102>
 80158a0:	2b02      	cmp	r3, #2
 80158a2:	dc6b      	bgt.n	801597c <RegionEU868InitDefaults+0x120>
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d002      	beq.n	80158ae <RegionEU868InitDefaults+0x52>
 80158a8:	2b01      	cmp	r3, #1
 80158aa:	d03f      	beq.n	801592c <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80158ac:	e066      	b.n	801597c <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d063      	beq.n	801597e <RegionEU868InitDefaults+0x122>
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d05f      	beq.n	801597e <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	4a30      	ldr	r2, [pc, #192]	; (8015984 <RegionEU868InitDefaults+0x128>)
 80158c4:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	685b      	ldr	r3, [r3, #4]
 80158ca:	4a2f      	ldr	r2, [pc, #188]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 80158cc:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80158ce:	4b2d      	ldr	r3, [pc, #180]	; (8015984 <RegionEU868InitDefaults+0x128>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	4618      	mov	r0, r3
 80158d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80158d8:	2290      	movs	r2, #144	; 0x90
 80158da:	4619      	mov	r1, r3
 80158dc:	f000 ffb7 	bl	801684e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80158e0:	4b29      	ldr	r3, [pc, #164]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	4a29      	ldr	r2, [pc, #164]	; (801598c <RegionEU868InitDefaults+0x130>)
 80158e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80158e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80158ec:	4b26      	ldr	r3, [pc, #152]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	4a27      	ldr	r2, [pc, #156]	; (8015990 <RegionEU868InitDefaults+0x134>)
 80158f2:	330c      	adds	r3, #12
 80158f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80158f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80158fa:	4b23      	ldr	r3, [pc, #140]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	4a25      	ldr	r2, [pc, #148]	; (8015994 <RegionEU868InitDefaults+0x138>)
 8015900:	3318      	adds	r3, #24
 8015902:	ca07      	ldmia	r2, {r0, r1, r2}
 8015904:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015908:	4b1f      	ldr	r3, [pc, #124]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	2207      	movs	r2, #7
 801590e:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015912:	4b1d      	ldr	r3, [pc, #116]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801591a:	4b1b      	ldr	r3, [pc, #108]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8015922:	2201      	movs	r2, #1
 8015924:	4619      	mov	r1, r3
 8015926:	f7ff f853 	bl	80149d0 <RegionCommonChanMaskCopy>
 801592a:	e028      	b.n	801597e <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801592c:	4b16      	ldr	r3, [pc, #88]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	2200      	movs	r2, #0
 8015932:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015934:	4b14      	ldr	r3, [pc, #80]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	2200      	movs	r2, #0
 801593a:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801593c:	4b12      	ldr	r3, [pc, #72]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	2200      	movs	r2, #0
 8015942:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015944:	4b10      	ldr	r3, [pc, #64]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801594c:	4b0e      	ldr	r3, [pc, #56]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8015954:	2201      	movs	r2, #1
 8015956:	4619      	mov	r1, r3
 8015958:	f7ff f83a 	bl	80149d0 <RegionCommonChanMaskCopy>
            break;
 801595c:	e00f      	b.n	801597e <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801595e:	4b0a      	ldr	r3, [pc, #40]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8015966:	4b08      	ldr	r3, [pc, #32]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 801596e:	4b06      	ldr	r3, [pc, #24]	; (8015988 <RegionEU868InitDefaults+0x12c>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	430a      	orrs	r2, r1
 8015974:	b292      	uxth	r2, r2
 8015976:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 801597a:	e000      	b.n	801597e <RegionEU868InitDefaults+0x122>
            break;
 801597c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801597e:	37c0      	adds	r7, #192	; 0xc0
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}
 8015984:	20001adc 	.word	0x20001adc
 8015988:	20001ae0 	.word	0x20001ae0
 801598c:	0801be28 	.word	0x0801be28
 8015990:	0801be34 	.word	0x0801be34
 8015994:	0801be40 	.word	0x0801be40

08015998 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b084      	sub	sp, #16
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
 80159a0:	460b      	mov	r3, r1
 80159a2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80159a4:	78fb      	ldrb	r3, [r7, #3]
 80159a6:	2b0f      	cmp	r3, #15
 80159a8:	d86c      	bhi.n	8015a84 <RegionEU868Verify+0xec>
 80159aa:	a201      	add	r2, pc, #4	; (adr r2, 80159b0 <RegionEU868Verify+0x18>)
 80159ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159b0:	080159f1 	.word	0x080159f1
 80159b4:	08015a85 	.word	0x08015a85
 80159b8:	08015a85 	.word	0x08015a85
 80159bc:	08015a85 	.word	0x08015a85
 80159c0:	08015a85 	.word	0x08015a85
 80159c4:	08015a09 	.word	0x08015a09
 80159c8:	08015a27 	.word	0x08015a27
 80159cc:	08015a45 	.word	0x08015a45
 80159d0:	08015a85 	.word	0x08015a85
 80159d4:	08015a63 	.word	0x08015a63
 80159d8:	08015a63 	.word	0x08015a63
 80159dc:	08015a85 	.word	0x08015a85
 80159e0:	08015a85 	.word	0x08015a85
 80159e4:	08015a85 	.word	0x08015a85
 80159e8:	08015a85 	.word	0x08015a85
 80159ec:	08015a81 	.word	0x08015a81
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80159f0:	2300      	movs	r3, #0
 80159f2:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	f107 020f 	add.w	r2, r7, #15
 80159fc:	4611      	mov	r1, r2
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7ff fcee 	bl	80153e0 <VerifyRfFreq>
 8015a04:	4603      	mov	r3, r0
 8015a06:	e03e      	b.n	8015a86 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8015a0e:	2207      	movs	r2, #7
 8015a10:	2100      	movs	r1, #0
 8015a12:	4618      	mov	r0, r3
 8015a14:	f7fe ff5f 	bl	80148d6 <RegionCommonValueInRange>
 8015a18:	4603      	mov	r3, r0
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	bf14      	ite	ne
 8015a1e:	2301      	movne	r3, #1
 8015a20:	2300      	moveq	r3, #0
 8015a22:	b2db      	uxtb	r3, r3
 8015a24:	e02f      	b.n	8015a86 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f993 3000 	ldrsb.w	r3, [r3]
 8015a2c:	2205      	movs	r2, #5
 8015a2e:	2100      	movs	r1, #0
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7fe ff50 	bl	80148d6 <RegionCommonValueInRange>
 8015a36:	4603      	mov	r3, r0
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	bf14      	ite	ne
 8015a3c:	2301      	movne	r3, #1
 8015a3e:	2300      	moveq	r3, #0
 8015a40:	b2db      	uxtb	r3, r3
 8015a42:	e020      	b.n	8015a86 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f993 3000 	ldrsb.w	r3, [r3]
 8015a4a:	2207      	movs	r2, #7
 8015a4c:	2100      	movs	r1, #0
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7fe ff41 	bl	80148d6 <RegionCommonValueInRange>
 8015a54:	4603      	mov	r3, r0
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	bf14      	ite	ne
 8015a5a:	2301      	movne	r3, #1
 8015a5c:	2300      	moveq	r3, #0
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	e011      	b.n	8015a86 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f993 3000 	ldrsb.w	r3, [r3]
 8015a68:	2207      	movs	r2, #7
 8015a6a:	2100      	movs	r1, #0
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7fe ff32 	bl	80148d6 <RegionCommonValueInRange>
 8015a72:	4603      	mov	r3, r0
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	bf14      	ite	ne
 8015a78:	2301      	movne	r3, #1
 8015a7a:	2300      	moveq	r3, #0
 8015a7c:	b2db      	uxtb	r3, r3
 8015a7e:	e002      	b.n	8015a86 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8015a80:	2301      	movs	r3, #1
 8015a82:	e000      	b.n	8015a86 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8015a84:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3710      	adds	r7, #16
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
 8015a8e:	bf00      	nop

08015a90 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b08a      	sub	sp, #40	; 0x28
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015a98:	2350      	movs	r3, #80	; 0x50
 8015a9a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	791b      	ldrb	r3, [r3, #4]
 8015aa2:	2b10      	cmp	r3, #16
 8015aa4:	d162      	bne.n	8015b6c <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	330f      	adds	r3, #15
 8015aac:	781b      	ldrb	r3, [r3, #0]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d15e      	bne.n	8015b70 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ab8:	2303      	movs	r3, #3
 8015aba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015abe:	e050      	b.n	8015b62 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015ac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ac4:	2b07      	cmp	r3, #7
 8015ac6:	d824      	bhi.n	8015b12 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	681a      	ldr	r2, [r3, #0]
 8015acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ad0:	4413      	add	r3, r2
 8015ad2:	781b      	ldrb	r3, [r3, #0]
 8015ad4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015ad6:	69ba      	ldr	r2, [r7, #24]
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6819      	ldr	r1, [r3, #0]
 8015adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ae0:	3301      	adds	r3, #1
 8015ae2:	440b      	add	r3, r1
 8015ae4:	781b      	ldrb	r3, [r3, #0]
 8015ae6:	021b      	lsls	r3, r3, #8
 8015ae8:	4313      	orrs	r3, r2
 8015aea:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015aec:	69ba      	ldr	r2, [r7, #24]
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6819      	ldr	r1, [r3, #0]
 8015af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015af6:	3302      	adds	r3, #2
 8015af8:	440b      	add	r3, r1
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	041b      	lsls	r3, r3, #16
 8015afe:	4313      	orrs	r3, r2
 8015b00:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015b02:	69bb      	ldr	r3, [r7, #24]
 8015b04:	2264      	movs	r2, #100	; 0x64
 8015b06:	fb02 f303 	mul.w	r3, r2, r3
 8015b0a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	61fb      	str	r3, [r7, #28]
 8015b10:	e006      	b.n	8015b20 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015b12:	2300      	movs	r3, #0
 8015b14:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015b16:	2300      	movs	r3, #0
 8015b18:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015b20:	69bb      	ldr	r3, [r7, #24]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d00b      	beq.n	8015b3e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015b26:	f107 0318 	add.w	r3, r7, #24
 8015b2a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015b2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b30:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8015b32:	f107 0310 	add.w	r3, r7, #16
 8015b36:	4618      	mov	r0, r3
 8015b38:	f000 fd0e 	bl	8016558 <RegionEU868ChannelAdd>
 8015b3c:	e007      	b.n	8015b4e <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015b3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b42:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8015b44:	f107 030c 	add.w	r3, r7, #12
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f000 fda7 	bl	801669c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b52:	3303      	adds	r3, #3
 8015b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b5c:	3301      	adds	r3, #1
 8015b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015b62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b66:	2b0f      	cmp	r3, #15
 8015b68:	d9aa      	bls.n	8015ac0 <RegionEU868ApplyCFList+0x30>
 8015b6a:	e002      	b.n	8015b72 <RegionEU868ApplyCFList+0xe2>
        return;
 8015b6c:	bf00      	nop
 8015b6e:	e000      	b.n	8015b72 <RegionEU868ApplyCFList+0xe2>
        return;
 8015b70:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015b72:	3728      	adds	r7, #40	; 0x28
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b082      	sub	sp, #8
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	791b      	ldrb	r3, [r3, #4]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d002      	beq.n	8015b8e <RegionEU868ChanMaskSet+0x16>
 8015b88:	2b01      	cmp	r3, #1
 8015b8a:	d00b      	beq.n	8015ba4 <RegionEU868ChanMaskSet+0x2c>
 8015b8c:	e015      	b.n	8015bba <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015b8e:	4b0e      	ldr	r3, [pc, #56]	; (8015bc8 <RegionEU868ChanMaskSet+0x50>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	2201      	movs	r2, #1
 8015b9c:	4619      	mov	r1, r3
 8015b9e:	f7fe ff17 	bl	80149d0 <RegionCommonChanMaskCopy>
            break;
 8015ba2:	e00c      	b.n	8015bbe <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015ba4:	4b08      	ldr	r3, [pc, #32]	; (8015bc8 <RegionEU868ChanMaskSet+0x50>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	2201      	movs	r2, #1
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	f7fe ff0c 	bl	80149d0 <RegionCommonChanMaskCopy>
            break;
 8015bb8:	e001      	b.n	8015bbe <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	e000      	b.n	8015bc0 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8015bbe:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	3708      	adds	r7, #8
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	bd80      	pop	{r7, pc}
 8015bc8:	20001ae0 	.word	0x20001ae0

08015bcc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b088      	sub	sp, #32
 8015bd0:	af02      	add	r7, sp, #8
 8015bd2:	60ba      	str	r2, [r7, #8]
 8015bd4:	607b      	str	r3, [r7, #4]
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	73fb      	strb	r3, [r7, #15]
 8015bda:	460b      	mov	r3, r1
 8015bdc:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8015bde:	2300      	movs	r3, #0
 8015be0:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015be6:	2b07      	cmp	r3, #7
 8015be8:	bfa8      	it	ge
 8015bea:	2307      	movge	r3, #7
 8015bec:	b25a      	sxtb	r2, r3
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015bf8:	491e      	ldr	r1, [pc, #120]	; (8015c74 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7ff fb88 	bl	8015310 <RegionCommonGetBandwidth>
 8015c00:	4603      	mov	r3, r0
 8015c02:	b2da      	uxtb	r2, r3
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015c0e:	2b07      	cmp	r3, #7
 8015c10:	d10a      	bne.n	8015c28 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015c18:	461a      	mov	r2, r3
 8015c1a:	4b17      	ldr	r3, [pc, #92]	; (8015c78 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015c1c:	5c9b      	ldrb	r3, [r3, r2]
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f7ff f90a 	bl	8014e38 <RegionCommonComputeSymbolTimeFsk>
 8015c24:	6178      	str	r0, [r7, #20]
 8015c26:	e011      	b.n	8015c4c <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015c2e:	461a      	mov	r2, r3
 8015c30:	4b11      	ldr	r3, [pc, #68]	; (8015c78 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015c32:	5c9a      	ldrb	r2, [r3, r2]
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015c3a:	4619      	mov	r1, r3
 8015c3c:	4b0d      	ldr	r3, [pc, #52]	; (8015c74 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015c3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015c42:	4619      	mov	r1, r3
 8015c44:	4610      	mov	r0, r2
 8015c46:	f7ff f8e1 	bl	8014e0c <RegionCommonComputeSymbolTimeLoRa>
 8015c4a:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015c4c:	4b0b      	ldr	r3, [pc, #44]	; (8015c7c <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c50:	4798      	blx	r3
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	3308      	adds	r3, #8
 8015c56:	687a      	ldr	r2, [r7, #4]
 8015c58:	320c      	adds	r2, #12
 8015c5a:	7bb9      	ldrb	r1, [r7, #14]
 8015c5c:	9201      	str	r2, [sp, #4]
 8015c5e:	9300      	str	r3, [sp, #0]
 8015c60:	4603      	mov	r3, r0
 8015c62:	68ba      	ldr	r2, [r7, #8]
 8015c64:	6978      	ldr	r0, [r7, #20]
 8015c66:	f7ff f8f7 	bl	8014e58 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015c6a:	bf00      	nop
 8015c6c:	3718      	adds	r7, #24
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd80      	pop	{r7, pc}
 8015c72:	bf00      	nop
 8015c74:	0801c37c 	.word	0x0801c37c
 8015c78:	0801c374 	.word	0x0801c374
 8015c7c:	0801c3ac 	.word	0x0801c3ac

08015c80 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015c80:	b5b0      	push	{r4, r5, r7, lr}
 8015c82:	b090      	sub	sp, #64	; 0x40
 8015c84:	af0a      	add	r7, sp, #40	; 0x28
 8015c86:	6078      	str	r0, [r7, #4]
 8015c88:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	785b      	ldrb	r3, [r3, #1]
 8015c8e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015c90:	2300      	movs	r3, #0
 8015c92:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015c94:	2300      	movs	r3, #0
 8015c96:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015c9e:	4b5a      	ldr	r3, [pc, #360]	; (8015e08 <RegionEU868RxConfig+0x188>)
 8015ca0:	685b      	ldr	r3, [r3, #4]
 8015ca2:	4798      	blx	r3
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d001      	beq.n	8015cae <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015caa:	2300      	movs	r3, #0
 8015cac:	e0a8      	b.n	8015e00 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	7cdb      	ldrb	r3, [r3, #19]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d126      	bne.n	8015d04 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015cb6:	4b55      	ldr	r3, [pc, #340]	; (8015e0c <RegionEU868RxConfig+0x18c>)
 8015cb8:	681a      	ldr	r2, [r3, #0]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	781b      	ldrb	r3, [r3, #0]
 8015cbe:	4619      	mov	r1, r3
 8015cc0:	460b      	mov	r3, r1
 8015cc2:	005b      	lsls	r3, r3, #1
 8015cc4:	440b      	add	r3, r1
 8015cc6:	009b      	lsls	r3, r3, #2
 8015cc8:	4413      	add	r3, r2
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015cce:	4b4f      	ldr	r3, [pc, #316]	; (8015e0c <RegionEU868RxConfig+0x18c>)
 8015cd0:	681a      	ldr	r2, [r3, #0]
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	781b      	ldrb	r3, [r3, #0]
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	460b      	mov	r3, r1
 8015cda:	005b      	lsls	r3, r3, #1
 8015cdc:	440b      	add	r3, r1
 8015cde:	009b      	lsls	r3, r3, #2
 8015ce0:	4413      	add	r3, r2
 8015ce2:	3304      	adds	r3, #4
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d00c      	beq.n	8015d04 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015cea:	4b48      	ldr	r3, [pc, #288]	; (8015e0c <RegionEU868RxConfig+0x18c>)
 8015cec:	681a      	ldr	r2, [r3, #0]
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	781b      	ldrb	r3, [r3, #0]
 8015cf2:	4619      	mov	r1, r3
 8015cf4:	460b      	mov	r3, r1
 8015cf6:	005b      	lsls	r3, r3, #1
 8015cf8:	440b      	add	r3, r1
 8015cfa:	009b      	lsls	r3, r3, #2
 8015cfc:	4413      	add	r3, r2
 8015cfe:	3304      	adds	r3, #4
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d08:	4a41      	ldr	r2, [pc, #260]	; (8015e10 <RegionEU868RxConfig+0x190>)
 8015d0a:	5cd3      	ldrb	r3, [r2, r3]
 8015d0c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015d0e:	4b3e      	ldr	r3, [pc, #248]	; (8015e08 <RegionEU868RxConfig+0x188>)
 8015d10:	68db      	ldr	r3, [r3, #12]
 8015d12:	6938      	ldr	r0, [r7, #16]
 8015d14:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d1a:	2b07      	cmp	r3, #7
 8015d1c:	d128      	bne.n	8015d70 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015d22:	4b39      	ldr	r3, [pc, #228]	; (8015e08 <RegionEU868RxConfig+0x188>)
 8015d24:	699c      	ldr	r4, [r3, #24]
 8015d26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015d2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015d2e:	fb02 f303 	mul.w	r3, r2, r3
 8015d32:	4619      	mov	r1, r3
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	689b      	ldr	r3, [r3, #8]
 8015d38:	b29b      	uxth	r3, r3
 8015d3a:	687a      	ldr	r2, [r7, #4]
 8015d3c:	7c92      	ldrb	r2, [r2, #18]
 8015d3e:	7df8      	ldrb	r0, [r7, #23]
 8015d40:	9209      	str	r2, [sp, #36]	; 0x24
 8015d42:	2200      	movs	r2, #0
 8015d44:	9208      	str	r2, [sp, #32]
 8015d46:	2200      	movs	r2, #0
 8015d48:	9207      	str	r2, [sp, #28]
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	9206      	str	r2, [sp, #24]
 8015d4e:	2201      	movs	r2, #1
 8015d50:	9205      	str	r2, [sp, #20]
 8015d52:	2200      	movs	r2, #0
 8015d54:	9204      	str	r2, [sp, #16]
 8015d56:	2200      	movs	r2, #0
 8015d58:	9203      	str	r2, [sp, #12]
 8015d5a:	9302      	str	r3, [sp, #8]
 8015d5c:	2305      	movs	r3, #5
 8015d5e:	9301      	str	r3, [sp, #4]
 8015d60:	4b2c      	ldr	r3, [pc, #176]	; (8015e14 <RegionEU868RxConfig+0x194>)
 8015d62:	9300      	str	r3, [sp, #0]
 8015d64:	2300      	movs	r3, #0
 8015d66:	460a      	mov	r2, r1
 8015d68:	f24c 3150 	movw	r1, #50000	; 0xc350
 8015d6c:	47a0      	blx	r4
 8015d6e:	e024      	b.n	8015dba <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015d70:	2301      	movs	r3, #1
 8015d72:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015d74:	4b24      	ldr	r3, [pc, #144]	; (8015e08 <RegionEU868RxConfig+0x188>)
 8015d76:	699c      	ldr	r4, [r3, #24]
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	789b      	ldrb	r3, [r3, #2]
 8015d7c:	461d      	mov	r5, r3
 8015d7e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	689b      	ldr	r3, [r3, #8]
 8015d86:	b29b      	uxth	r3, r3
 8015d88:	687a      	ldr	r2, [r7, #4]
 8015d8a:	7c92      	ldrb	r2, [r2, #18]
 8015d8c:	7df8      	ldrb	r0, [r7, #23]
 8015d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8015d90:	2201      	movs	r2, #1
 8015d92:	9208      	str	r2, [sp, #32]
 8015d94:	2200      	movs	r2, #0
 8015d96:	9207      	str	r2, [sp, #28]
 8015d98:	2200      	movs	r2, #0
 8015d9a:	9206      	str	r2, [sp, #24]
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	9205      	str	r2, [sp, #20]
 8015da0:	2200      	movs	r2, #0
 8015da2:	9204      	str	r2, [sp, #16]
 8015da4:	2200      	movs	r2, #0
 8015da6:	9203      	str	r2, [sp, #12]
 8015da8:	9302      	str	r3, [sp, #8]
 8015daa:	2308      	movs	r3, #8
 8015dac:	9301      	str	r3, [sp, #4]
 8015dae:	2300      	movs	r3, #0
 8015db0:	9300      	str	r3, [sp, #0]
 8015db2:	2301      	movs	r3, #1
 8015db4:	460a      	mov	r2, r1
 8015db6:	4629      	mov	r1, r5
 8015db8:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	7c5b      	ldrb	r3, [r3, #17]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d005      	beq.n	8015dce <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8015dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015dc6:	4a14      	ldr	r2, [pc, #80]	; (8015e18 <RegionEU868RxConfig+0x198>)
 8015dc8:	5cd3      	ldrb	r3, [r2, r3]
 8015dca:	75bb      	strb	r3, [r7, #22]
 8015dcc:	e004      	b.n	8015dd8 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8015dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015dd2:	4a12      	ldr	r2, [pc, #72]	; (8015e1c <RegionEU868RxConfig+0x19c>)
 8015dd4:	5cd3      	ldrb	r3, [r2, r3]
 8015dd6:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015dd8:	4b0b      	ldr	r3, [pc, #44]	; (8015e08 <RegionEU868RxConfig+0x188>)
 8015dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ddc:	7dba      	ldrb	r2, [r7, #22]
 8015dde:	320d      	adds	r2, #13
 8015de0:	b2d1      	uxtb	r1, r2
 8015de2:	7dfa      	ldrb	r2, [r7, #23]
 8015de4:	4610      	mov	r0, r2
 8015de6:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	7cdb      	ldrb	r3, [r3, #19]
 8015dec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015df0:	6939      	ldr	r1, [r7, #16]
 8015df2:	4618      	mov	r0, r3
 8015df4:	f7ff faaa 	bl	801534c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	7bfa      	ldrb	r2, [r7, #15]
 8015dfc:	701a      	strb	r2, [r3, #0]
    return true;
 8015dfe:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015e00:	4618      	mov	r0, r3
 8015e02:	3718      	adds	r7, #24
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bdb0      	pop	{r4, r5, r7, pc}
 8015e08:	0801c3ac 	.word	0x0801c3ac
 8015e0c:	20001ae0 	.word	0x20001ae0
 8015e10:	0801c374 	.word	0x0801c374
 8015e14:	00014585 	.word	0x00014585
 8015e18:	0801c3a4 	.word	0x0801c3a4
 8015e1c:	0801c39c 	.word	0x0801c39c

08015e20 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015e20:	b590      	push	{r4, r7, lr}
 8015e22:	b093      	sub	sp, #76	; 0x4c
 8015e24:	af0a      	add	r7, sp, #40	; 0x28
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	60b9      	str	r1, [r7, #8]
 8015e2a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e32:	461a      	mov	r2, r3
 8015e34:	4b5d      	ldr	r3, [pc, #372]	; (8015fac <RegionEU868TxConfig+0x18c>)
 8015e36:	5c9b      	ldrb	r3, [r3, r2]
 8015e38:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015e40:	4b5b      	ldr	r3, [pc, #364]	; (8015fb0 <RegionEU868TxConfig+0x190>)
 8015e42:	681a      	ldr	r2, [r3, #0]
 8015e44:	4b5b      	ldr	r3, [pc, #364]	; (8015fb4 <RegionEU868TxConfig+0x194>)
 8015e46:	6819      	ldr	r1, [r3, #0]
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	781b      	ldrb	r3, [r3, #0]
 8015e4c:	461c      	mov	r4, r3
 8015e4e:	4623      	mov	r3, r4
 8015e50:	005b      	lsls	r3, r3, #1
 8015e52:	4423      	add	r3, r4
 8015e54:	009b      	lsls	r3, r3, #2
 8015e56:	440b      	add	r3, r1
 8015e58:	3309      	adds	r3, #9
 8015e5a:	781b      	ldrb	r3, [r3, #0]
 8015e5c:	4619      	mov	r1, r3
 8015e5e:	460b      	mov	r3, r1
 8015e60:	005b      	lsls	r3, r3, #1
 8015e62:	440b      	add	r3, r1
 8015e64:	00db      	lsls	r3, r3, #3
 8015e66:	4413      	add	r3, r2
 8015e68:	3302      	adds	r3, #2
 8015e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8015e6e:	4619      	mov	r1, r3
 8015e70:	f7ff fa39 	bl	80152e6 <RegionCommonLimitTxPower>
 8015e74:	4603      	mov	r3, r0
 8015e76:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e7e:	494e      	ldr	r1, [pc, #312]	; (8015fb8 <RegionEU868TxConfig+0x198>)
 8015e80:	4618      	mov	r0, r3
 8015e82:	f7ff fa45 	bl	8015310 <RegionCommonGetBandwidth>
 8015e86:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015e88:	2300      	movs	r3, #0
 8015e8a:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	6859      	ldr	r1, [r3, #4]
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	689a      	ldr	r2, [r3, #8]
 8015e94:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7ff f895 	bl	8014fc8 <RegionCommonComputeTxPower>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015ea2:	4b46      	ldr	r3, [pc, #280]	; (8015fbc <RegionEU868TxConfig+0x19c>)
 8015ea4:	68da      	ldr	r2, [r3, #12]
 8015ea6:	4b43      	ldr	r3, [pc, #268]	; (8015fb4 <RegionEU868TxConfig+0x194>)
 8015ea8:	6819      	ldr	r1, [r3, #0]
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	4618      	mov	r0, r3
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	005b      	lsls	r3, r3, #1
 8015eb4:	4403      	add	r3, r0
 8015eb6:	009b      	lsls	r3, r3, #2
 8015eb8:	440b      	add	r3, r1
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ec6:	2b07      	cmp	r3, #7
 8015ec8:	d124      	bne.n	8015f14 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015ece:	4b3b      	ldr	r3, [pc, #236]	; (8015fbc <RegionEU868TxConfig+0x19c>)
 8015ed0:	69dc      	ldr	r4, [r3, #28]
 8015ed2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015eda:	fb02 f303 	mul.w	r3, r2, r3
 8015ede:	461a      	mov	r2, r3
 8015ee0:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015ee4:	7ff8      	ldrb	r0, [r7, #31]
 8015ee6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015eea:	9308      	str	r3, [sp, #32]
 8015eec:	2300      	movs	r3, #0
 8015eee:	9307      	str	r3, [sp, #28]
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	9306      	str	r3, [sp, #24]
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	9305      	str	r3, [sp, #20]
 8015ef8:	2301      	movs	r3, #1
 8015efa:	9304      	str	r3, [sp, #16]
 8015efc:	2300      	movs	r3, #0
 8015efe:	9303      	str	r3, [sp, #12]
 8015f00:	2305      	movs	r3, #5
 8015f02:	9302      	str	r3, [sp, #8]
 8015f04:	2300      	movs	r3, #0
 8015f06:	9301      	str	r3, [sp, #4]
 8015f08:	9200      	str	r2, [sp, #0]
 8015f0a:	69bb      	ldr	r3, [r7, #24]
 8015f0c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015f10:	47a0      	blx	r4
 8015f12:	e01d      	b.n	8015f50 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015f14:	2301      	movs	r3, #1
 8015f16:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015f18:	4b28      	ldr	r3, [pc, #160]	; (8015fbc <RegionEU868TxConfig+0x19c>)
 8015f1a:	69dc      	ldr	r4, [r3, #28]
 8015f1c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015f20:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015f24:	7ff8      	ldrb	r0, [r7, #31]
 8015f26:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015f2a:	9208      	str	r2, [sp, #32]
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	9207      	str	r2, [sp, #28]
 8015f30:	2200      	movs	r2, #0
 8015f32:	9206      	str	r2, [sp, #24]
 8015f34:	2200      	movs	r2, #0
 8015f36:	9205      	str	r2, [sp, #20]
 8015f38:	2201      	movs	r2, #1
 8015f3a:	9204      	str	r2, [sp, #16]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	9203      	str	r2, [sp, #12]
 8015f40:	2208      	movs	r2, #8
 8015f42:	9202      	str	r2, [sp, #8]
 8015f44:	2201      	movs	r2, #1
 8015f46:	9201      	str	r2, [sp, #4]
 8015f48:	9300      	str	r3, [sp, #0]
 8015f4a:	69bb      	ldr	r3, [r7, #24]
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015f50:	4b18      	ldr	r3, [pc, #96]	; (8015fb4 <RegionEU868TxConfig+0x194>)
 8015f52:	681a      	ldr	r2, [r3, #0]
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	781b      	ldrb	r3, [r3, #0]
 8015f58:	4619      	mov	r1, r3
 8015f5a:	460b      	mov	r3, r1
 8015f5c:	005b      	lsls	r3, r3, #1
 8015f5e:	440b      	add	r3, r1
 8015f60:	009b      	lsls	r3, r3, #2
 8015f62:	4413      	add	r3, r2
 8015f64:	681a      	ldr	r2, [r3, #0]
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015f6c:	4619      	mov	r1, r3
 8015f6e:	4610      	mov	r0, r2
 8015f70:	f7ff fa1e 	bl	80153b0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	899b      	ldrh	r3, [r3, #12]
 8015f7e:	4619      	mov	r1, r3
 8015f80:	4610      	mov	r0, r2
 8015f82:	f7ff faa3 	bl	80154cc <GetTimeOnAir>
 8015f86:	4602      	mov	r2, r0
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015f8c:	4b0b      	ldr	r3, [pc, #44]	; (8015fbc <RegionEU868TxConfig+0x19c>)
 8015f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f90:	68fa      	ldr	r2, [r7, #12]
 8015f92:	8992      	ldrh	r2, [r2, #12]
 8015f94:	b2d1      	uxtb	r1, r2
 8015f96:	7ffa      	ldrb	r2, [r7, #31]
 8015f98:	4610      	mov	r0, r2
 8015f9a:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015f9c:	68bb      	ldr	r3, [r7, #8]
 8015f9e:	7f7a      	ldrb	r2, [r7, #29]
 8015fa0:	701a      	strb	r2, [r3, #0]
    return true;
 8015fa2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	3724      	adds	r7, #36	; 0x24
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bd90      	pop	{r4, r7, pc}
 8015fac:	0801c374 	.word	0x0801c374
 8015fb0:	20001adc 	.word	0x20001adc
 8015fb4:	20001ae0 	.word	0x20001ae0
 8015fb8:	0801c37c 	.word	0x0801c37c
 8015fbc:	0801c3ac 	.word	0x0801c3ac

08015fc0 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015fc0:	b590      	push	{r4, r7, lr}
 8015fc2:	b093      	sub	sp, #76	; 0x4c
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	60f8      	str	r0, [r7, #12]
 8015fc8:	60b9      	str	r1, [r7, #8]
 8015fca:	607a      	str	r2, [r7, #4]
 8015fcc:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015fce:	2307      	movs	r3, #7
 8015fd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015fd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015fd8:	2200      	movs	r2, #0
 8015fda:	601a      	str	r2, [r3, #0]
 8015fdc:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015fea:	2300      	movs	r3, #0
 8015fec:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015fee:	e085      	b.n	80160fc <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	685a      	ldr	r2, [r3, #4]
 8015ff4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015ff8:	4413      	add	r3, r2
 8015ffa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015ffe:	4611      	mov	r1, r2
 8016000:	4618      	mov	r0, r3
 8016002:	f7fe fe29 	bl	8014c58 <RegionCommonParseLinkAdrReq>
 8016006:	4603      	mov	r3, r0
 8016008:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 801600c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016010:	2b00      	cmp	r3, #0
 8016012:	d07b      	beq.n	801610c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016014:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016018:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801601c:	4413      	add	r3, r2
 801601e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016022:	2307      	movs	r3, #7
 8016024:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8016028:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801602c:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801602e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016032:	2b00      	cmp	r3, #0
 8016034:	d109      	bne.n	801604a <RegionEU868LinkAdrReq+0x8a>
 8016036:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016038:	2b00      	cmp	r3, #0
 801603a:	d106      	bne.n	801604a <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801603c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016040:	f023 0301 	bic.w	r3, r3, #1
 8016044:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016048:	e058      	b.n	80160fc <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801604a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801604e:	2b00      	cmp	r3, #0
 8016050:	d003      	beq.n	801605a <RegionEU868LinkAdrReq+0x9a>
 8016052:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016056:	2b05      	cmp	r3, #5
 8016058:	d903      	bls.n	8016062 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801605a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801605e:	2b06      	cmp	r3, #6
 8016060:	d906      	bls.n	8016070 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8016062:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016066:	f023 0301 	bic.w	r3, r3, #1
 801606a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801606e:	e045      	b.n	80160fc <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016070:	2300      	movs	r3, #0
 8016072:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8016076:	e03d      	b.n	80160f4 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8016078:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801607c:	2b06      	cmp	r3, #6
 801607e:	d118      	bne.n	80160b2 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8016080:	4b5f      	ldr	r3, [pc, #380]	; (8016200 <RegionEU868LinkAdrReq+0x240>)
 8016082:	6819      	ldr	r1, [r3, #0]
 8016084:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8016088:	4613      	mov	r3, r2
 801608a:	005b      	lsls	r3, r3, #1
 801608c:	4413      	add	r3, r2
 801608e:	009b      	lsls	r3, r3, #2
 8016090:	440b      	add	r3, r1
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d028      	beq.n	80160ea <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8016098:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801609c:	2201      	movs	r2, #1
 801609e:	fa02 f303 	lsl.w	r3, r2, r3
 80160a2:	b21a      	sxth	r2, r3
 80160a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160a6:	b21b      	sxth	r3, r3
 80160a8:	4313      	orrs	r3, r2
 80160aa:	b21b      	sxth	r3, r3
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	877b      	strh	r3, [r7, #58]	; 0x3a
 80160b0:	e01b      	b.n	80160ea <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80160b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160b4:	461a      	mov	r2, r3
 80160b6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80160ba:	fa42 f303 	asr.w	r3, r2, r3
 80160be:	f003 0301 	and.w	r3, r3, #1
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d011      	beq.n	80160ea <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80160c6:	4b4e      	ldr	r3, [pc, #312]	; (8016200 <RegionEU868LinkAdrReq+0x240>)
 80160c8:	6819      	ldr	r1, [r3, #0]
 80160ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80160ce:	4613      	mov	r3, r2
 80160d0:	005b      	lsls	r3, r3, #1
 80160d2:	4413      	add	r3, r2
 80160d4:	009b      	lsls	r3, r3, #2
 80160d6:	440b      	add	r3, r1
 80160d8:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d105      	bne.n	80160ea <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80160de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80160e2:	f023 0301 	bic.w	r3, r3, #1
 80160e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80160ea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80160ee:	3301      	adds	r3, #1
 80160f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80160f4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80160f8:	2b0f      	cmp	r3, #15
 80160fa:	d9bd      	bls.n	8016078 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	7a1b      	ldrb	r3, [r3, #8]
 8016100:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016104:	429a      	cmp	r2, r3
 8016106:	f4ff af73 	bcc.w	8015ff0 <RegionEU868LinkAdrReq+0x30>
 801610a:	e000      	b.n	801610e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801610c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801610e:	2302      	movs	r3, #2
 8016110:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	7a5b      	ldrb	r3, [r3, #9]
 8016118:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801611c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016120:	4618      	mov	r0, r3
 8016122:	f7ff fa23 	bl	801556c <RegionEU868GetPhyParam>
 8016126:	4603      	mov	r3, r0
 8016128:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 801612a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801612e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	7a9b      	ldrb	r3, [r3, #10]
 8016134:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8016136:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 801613a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801613c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8016140:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8016142:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016146:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801614e:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016156:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	7b5b      	ldrb	r3, [r3, #13]
 801615c:	b25b      	sxtb	r3, r3
 801615e:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8016160:	2310      	movs	r3, #16
 8016162:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016164:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8016168:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801616c:	b25b      	sxtb	r3, r3
 801616e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8016172:	2307      	movs	r3, #7
 8016174:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016178:	4b21      	ldr	r3, [pc, #132]	; (8016200 <RegionEU868LinkAdrReq+0x240>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801617e:	2307      	movs	r3, #7
 8016180:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016184:	2300      	movs	r3, #0
 8016186:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016190:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8016194:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016198:	1c9a      	adds	r2, r3, #2
 801619a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801619e:	1c59      	adds	r1, r3, #1
 80161a0:	f107 0010 	add.w	r0, r7, #16
 80161a4:	4623      	mov	r3, r4
 80161a6:	f7fe fda8 	bl	8014cfa <RegionCommonLinkAdrReqVerifyParams>
 80161aa:	4603      	mov	r3, r0
 80161ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80161b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80161b4:	2b07      	cmp	r3, #7
 80161b6:	d10d      	bne.n	80161d4 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80161b8:	4b11      	ldr	r3, [pc, #68]	; (8016200 <RegionEU868LinkAdrReq+0x240>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80161c0:	220c      	movs	r2, #12
 80161c2:	2100      	movs	r1, #0
 80161c4:	4618      	mov	r0, r3
 80161c6:	f000 fb7d 	bl	80168c4 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80161ca:	4b0d      	ldr	r3, [pc, #52]	; (8016200 <RegionEU868LinkAdrReq+0x240>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161d0:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80161d4:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80161d8:	68bb      	ldr	r3, [r7, #8]
 80161da:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80161dc:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80161e4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80161ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80161ee:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80161f2:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80161f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80161f8:	4618      	mov	r0, r3
 80161fa:	374c      	adds	r7, #76	; 0x4c
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd90      	pop	{r4, r7, pc}
 8016200:	20001ae0 	.word	0x20001ae0

08016204 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b084      	sub	sp, #16
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801620c:	2307      	movs	r3, #7
 801620e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016210:	2300      	movs	r3, #0
 8016212:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	685b      	ldr	r3, [r3, #4]
 8016218:	f107 020e 	add.w	r2, r7, #14
 801621c:	4611      	mov	r1, r2
 801621e:	4618      	mov	r0, r3
 8016220:	f7ff f8de 	bl	80153e0 <VerifyRfFreq>
 8016224:	4603      	mov	r3, r0
 8016226:	f083 0301 	eor.w	r3, r3, #1
 801622a:	b2db      	uxtb	r3, r3
 801622c:	2b00      	cmp	r3, #0
 801622e:	d003      	beq.n	8016238 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8016230:	7bfb      	ldrb	r3, [r7, #15]
 8016232:	f023 0301 	bic.w	r3, r3, #1
 8016236:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f993 3000 	ldrsb.w	r3, [r3]
 801623e:	2207      	movs	r2, #7
 8016240:	2100      	movs	r1, #0
 8016242:	4618      	mov	r0, r3
 8016244:	f7fe fb47 	bl	80148d6 <RegionCommonValueInRange>
 8016248:	4603      	mov	r3, r0
 801624a:	2b00      	cmp	r3, #0
 801624c:	d103      	bne.n	8016256 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801624e:	7bfb      	ldrb	r3, [r7, #15]
 8016250:	f023 0302 	bic.w	r3, r3, #2
 8016254:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801625c:	2205      	movs	r2, #5
 801625e:	2100      	movs	r1, #0
 8016260:	4618      	mov	r0, r3
 8016262:	f7fe fb38 	bl	80148d6 <RegionCommonValueInRange>
 8016266:	4603      	mov	r3, r0
 8016268:	2b00      	cmp	r3, #0
 801626a:	d103      	bne.n	8016274 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801626c:	7bfb      	ldrb	r3, [r7, #15]
 801626e:	f023 0304 	bic.w	r3, r3, #4
 8016272:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8016274:	7bfb      	ldrb	r3, [r7, #15]
}
 8016276:	4618      	mov	r0, r3
 8016278:	3710      	adds	r7, #16
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}
	...

08016280 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b086      	sub	sp, #24
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016288:	2303      	movs	r3, #3
 801628a:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d114      	bne.n	80162c0 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801629c:	b2db      	uxtb	r3, r3
 801629e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80162a0:	f107 0308 	add.w	r3, r7, #8
 80162a4:	4618      	mov	r0, r3
 80162a6:	f000 f9f9 	bl	801669c <RegionEU868ChannelsRemove>
 80162aa:	4603      	mov	r3, r0
 80162ac:	f083 0301 	eor.w	r3, r3, #1
 80162b0:	b2db      	uxtb	r3, r3
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d03b      	beq.n	801632e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80162b6:	7dfb      	ldrb	r3, [r7, #23]
 80162b8:	f023 0303 	bic.w	r3, r3, #3
 80162bc:	75fb      	strb	r3, [r7, #23]
 80162be:	e036      	b.n	801632e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80162cc:	b2db      	uxtb	r3, r3
 80162ce:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80162d0:	f107 030c 	add.w	r3, r7, #12
 80162d4:	4618      	mov	r0, r3
 80162d6:	f000 f93f 	bl	8016558 <RegionEU868ChannelAdd>
 80162da:	4603      	mov	r3, r0
 80162dc:	2b06      	cmp	r3, #6
 80162de:	d820      	bhi.n	8016322 <RegionEU868NewChannelReq+0xa2>
 80162e0:	a201      	add	r2, pc, #4	; (adr r2, 80162e8 <RegionEU868NewChannelReq+0x68>)
 80162e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162e6:	bf00      	nop
 80162e8:	0801632d 	.word	0x0801632d
 80162ec:	08016323 	.word	0x08016323
 80162f0:	08016323 	.word	0x08016323
 80162f4:	08016323 	.word	0x08016323
 80162f8:	08016305 	.word	0x08016305
 80162fc:	0801630f 	.word	0x0801630f
 8016300:	08016319 	.word	0x08016319
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8016304:	7dfb      	ldrb	r3, [r7, #23]
 8016306:	f023 0301 	bic.w	r3, r3, #1
 801630a:	75fb      	strb	r3, [r7, #23]
                break;
 801630c:	e00f      	b.n	801632e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801630e:	7dfb      	ldrb	r3, [r7, #23]
 8016310:	f023 0302 	bic.w	r3, r3, #2
 8016314:	75fb      	strb	r3, [r7, #23]
                break;
 8016316:	e00a      	b.n	801632e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016318:	7dfb      	ldrb	r3, [r7, #23]
 801631a:	f023 0303 	bic.w	r3, r3, #3
 801631e:	75fb      	strb	r3, [r7, #23]
                break;
 8016320:	e005      	b.n	801632e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8016322:	7dfb      	ldrb	r3, [r7, #23]
 8016324:	f023 0303 	bic.w	r3, r3, #3
 8016328:	75fb      	strb	r3, [r7, #23]
                break;
 801632a:	e000      	b.n	801632e <RegionEU868NewChannelReq+0xae>
                break;
 801632c:	bf00      	nop
            }
        }
    }

    return status;
 801632e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016332:	4618      	mov	r0, r3
 8016334:	3718      	adds	r7, #24
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}
 801633a:	bf00      	nop

0801633c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801633c:	b480      	push	{r7}
 801633e:	b083      	sub	sp, #12
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8016344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016348:	4618      	mov	r0, r3
 801634a:	370c      	adds	r7, #12
 801634c:	46bd      	mov	sp, r7
 801634e:	bc80      	pop	{r7}
 8016350:	4770      	bx	lr
	...

08016354 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b084      	sub	sp, #16
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801635c:	2303      	movs	r3, #3
 801635e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016360:	2300      	movs	r3, #0
 8016362:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	685b      	ldr	r3, [r3, #4]
 8016368:	f107 020e 	add.w	r2, r7, #14
 801636c:	4611      	mov	r1, r2
 801636e:	4618      	mov	r0, r3
 8016370:	f7ff f836 	bl	80153e0 <VerifyRfFreq>
 8016374:	4603      	mov	r3, r0
 8016376:	f083 0301 	eor.w	r3, r3, #1
 801637a:	b2db      	uxtb	r3, r3
 801637c:	2b00      	cmp	r3, #0
 801637e:	d003      	beq.n	8016388 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8016380:	7bfb      	ldrb	r3, [r7, #15]
 8016382:	f023 0301 	bic.w	r3, r3, #1
 8016386:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016388:	4b13      	ldr	r3, [pc, #76]	; (80163d8 <RegionEU868DlChannelReq+0x84>)
 801638a:	681a      	ldr	r2, [r3, #0]
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	781b      	ldrb	r3, [r3, #0]
 8016390:	4619      	mov	r1, r3
 8016392:	460b      	mov	r3, r1
 8016394:	005b      	lsls	r3, r3, #1
 8016396:	440b      	add	r3, r1
 8016398:	009b      	lsls	r3, r3, #2
 801639a:	4413      	add	r3, r2
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d103      	bne.n	80163aa <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 80163a2:	7bfb      	ldrb	r3, [r7, #15]
 80163a4:	f023 0302 	bic.w	r3, r3, #2
 80163a8:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80163aa:	7bfb      	ldrb	r3, [r7, #15]
 80163ac:	2b03      	cmp	r3, #3
 80163ae:	d10d      	bne.n	80163cc <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80163b0:	4b09      	ldr	r3, [pc, #36]	; (80163d8 <RegionEU868DlChannelReq+0x84>)
 80163b2:	6819      	ldr	r1, [r3, #0]
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	781b      	ldrb	r3, [r3, #0]
 80163b8:	4618      	mov	r0, r3
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	685a      	ldr	r2, [r3, #4]
 80163be:	4603      	mov	r3, r0
 80163c0:	005b      	lsls	r3, r3, #1
 80163c2:	4403      	add	r3, r0
 80163c4:	009b      	lsls	r3, r3, #2
 80163c6:	440b      	add	r3, r1
 80163c8:	3304      	adds	r3, #4
 80163ca:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80163cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	3710      	adds	r7, #16
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}
 80163d8:	20001ae0 	.word	0x20001ae0

080163dc <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80163dc:	b480      	push	{r7}
 80163de:	b083      	sub	sp, #12
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	4603      	mov	r3, r0
 80163e4:	460a      	mov	r2, r1
 80163e6:	71fb      	strb	r3, [r7, #7]
 80163e8:	4613      	mov	r3, r2
 80163ea:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80163ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80163f0:	4618      	mov	r0, r3
 80163f2:	370c      	adds	r7, #12
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bc80      	pop	{r7}
 80163f8:	4770      	bx	lr
	...

080163fc <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b09a      	sub	sp, #104	; 0x68
 8016400:	af02      	add	r7, sp, #8
 8016402:	60f8      	str	r0, [r7, #12]
 8016404:	60b9      	str	r1, [r7, #8]
 8016406:	607a      	str	r2, [r7, #4]
 8016408:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801640a:	2300      	movs	r3, #0
 801640c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8016410:	2300      	movs	r3, #0
 8016412:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8016416:	2300      	movs	r3, #0
 8016418:	64fb      	str	r3, [r7, #76]	; 0x4c
 801641a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801641e:	2200      	movs	r2, #0
 8016420:	601a      	str	r2, [r3, #0]
 8016422:	605a      	str	r2, [r3, #4]
 8016424:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016426:	230c      	movs	r3, #12
 8016428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801642c:	2307      	movs	r3, #7
 801642e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8016430:	4b47      	ldr	r3, [pc, #284]	; (8016550 <RegionEU868NextChannel+0x154>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8016438:	2201      	movs	r2, #1
 801643a:	2100      	movs	r1, #0
 801643c:	4618      	mov	r0, r3
 801643e:	f7fe fa9b 	bl	8014978 <RegionCommonCountChannels>
 8016442:	4603      	mov	r3, r0
 8016444:	2b00      	cmp	r3, #0
 8016446:	d10a      	bne.n	801645e <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016448:	4b41      	ldr	r3, [pc, #260]	; (8016550 <RegionEU868NextChannel+0x154>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8016450:	4b3f      	ldr	r3, [pc, #252]	; (8016550 <RegionEU868NextChannel+0x154>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	f042 0207 	orr.w	r2, r2, #7
 8016458:	b292      	uxth	r2, r2
 801645a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	7a5b      	ldrb	r3, [r3, #9]
 8016462:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801646a:	b2db      	uxtb	r3, r3
 801646c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801646e:	4b38      	ldr	r3, [pc, #224]	; (8016550 <RegionEU868NextChannel+0x154>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8016476:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016478:	4b35      	ldr	r3, [pc, #212]	; (8016550 <RegionEU868NextChannel+0x154>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801647e:	4b35      	ldr	r3, [pc, #212]	; (8016554 <RegionEU868NextChannel+0x158>)
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8016484:	2310      	movs	r3, #16
 8016486:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016488:	f107 0312 	add.w	r3, r7, #18
 801648c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	7a9b      	ldrb	r3, [r3, #10]
 801649e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80164a2:	2306      	movs	r3, #6
 80164a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80164a8:	68fa      	ldr	r2, [r7, #12]
 80164aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80164ae:	320c      	adds	r2, #12
 80164b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80164b4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	7d1b      	ldrb	r3, [r3, #20]
 80164bc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	8adb      	ldrh	r3, [r3, #22]
 80164ca:	4619      	mov	r1, r3
 80164cc:	4610      	mov	r0, r2
 80164ce:	f7fe fffd 	bl	80154cc <GetTimeOnAir>
 80164d2:	4603      	mov	r3, r0
 80164d4:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80164d6:	f107 0314 	add.w	r3, r7, #20
 80164da:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80164dc:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80164e0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80164e4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	9301      	str	r3, [sp, #4]
 80164ec:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80164f0:	9300      	str	r3, [sp, #0]
 80164f2:	460b      	mov	r3, r1
 80164f4:	6839      	ldr	r1, [r7, #0]
 80164f6:	f7fe fe56 	bl	80151a6 <RegionCommonIdentifyChannels>
 80164fa:	4603      	mov	r3, r0
 80164fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016504:	2b00      	cmp	r3, #0
 8016506:	d10e      	bne.n	8016526 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016508:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801650c:	3b01      	subs	r3, #1
 801650e:	4619      	mov	r1, r3
 8016510:	2000      	movs	r0, #0
 8016512:	f000 f985 	bl	8016820 <randr>
 8016516:	4603      	mov	r3, r0
 8016518:	3360      	adds	r3, #96	; 0x60
 801651a:	443b      	add	r3, r7
 801651c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016520:	68bb      	ldr	r3, [r7, #8]
 8016522:	701a      	strb	r2, [r3, #0]
 8016524:	e00e      	b.n	8016544 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8016526:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801652a:	2b0c      	cmp	r3, #12
 801652c:	d10a      	bne.n	8016544 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801652e:	4b08      	ldr	r3, [pc, #32]	; (8016550 <RegionEU868NextChannel+0x154>)
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8016536:	4b06      	ldr	r3, [pc, #24]	; (8016550 <RegionEU868NextChannel+0x154>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	f042 0207 	orr.w	r2, r2, #7
 801653e:	b292      	uxth	r2, r2
 8016540:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8016544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016548:	4618      	mov	r0, r3
 801654a:	3760      	adds	r7, #96	; 0x60
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}
 8016550:	20001ae0 	.word	0x20001ae0
 8016554:	20001adc 	.word	0x20001adc

08016558 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b084      	sub	sp, #16
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016560:	2300      	movs	r3, #0
 8016562:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8016564:	2300      	movs	r3, #0
 8016566:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016568:	2300      	movs	r3, #0
 801656a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	791b      	ldrb	r3, [r3, #4]
 8016570:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016572:	7b7b      	ldrb	r3, [r7, #13]
 8016574:	2b02      	cmp	r3, #2
 8016576:	d801      	bhi.n	801657c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016578:	2306      	movs	r3, #6
 801657a:	e089      	b.n	8016690 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801657c:	7b7b      	ldrb	r3, [r7, #13]
 801657e:	2b0f      	cmp	r3, #15
 8016580:	d901      	bls.n	8016586 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016582:	2303      	movs	r3, #3
 8016584:	e084      	b.n	8016690 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	7a1b      	ldrb	r3, [r3, #8]
 801658c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016590:	b25b      	sxtb	r3, r3
 8016592:	2207      	movs	r2, #7
 8016594:	2100      	movs	r1, #0
 8016596:	4618      	mov	r0, r3
 8016598:	f7fe f99d 	bl	80148d6 <RegionCommonValueInRange>
 801659c:	4603      	mov	r3, r0
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d101      	bne.n	80165a6 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80165a2:	2301      	movs	r3, #1
 80165a4:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	7a1b      	ldrb	r3, [r3, #8]
 80165ac:	f343 1303 	sbfx	r3, r3, #4, #4
 80165b0:	b25b      	sxtb	r3, r3
 80165b2:	2207      	movs	r2, #7
 80165b4:	2100      	movs	r1, #0
 80165b6:	4618      	mov	r0, r3
 80165b8:	f7fe f98d 	bl	80148d6 <RegionCommonValueInRange>
 80165bc:	4603      	mov	r3, r0
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d101      	bne.n	80165c6 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80165c2:	2301      	movs	r3, #1
 80165c4:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	7a1b      	ldrb	r3, [r3, #8]
 80165cc:	f343 0303 	sbfx	r3, r3, #0, #4
 80165d0:	b25a      	sxtb	r2, r3
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	7a1b      	ldrb	r3, [r3, #8]
 80165d8:	f343 1303 	sbfx	r3, r3, #4, #4
 80165dc:	b25b      	sxtb	r3, r3
 80165de:	429a      	cmp	r2, r3
 80165e0:	dd01      	ble.n	80165e6 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80165e2:	2301      	movs	r3, #1
 80165e4:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80165e6:	7bbb      	ldrb	r3, [r7, #14]
 80165e8:	f083 0301 	eor.w	r3, r3, #1
 80165ec:	b2db      	uxtb	r3, r3
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d010      	beq.n	8016614 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	f107 020c 	add.w	r2, r7, #12
 80165fc:	4611      	mov	r1, r2
 80165fe:	4618      	mov	r0, r3
 8016600:	f7fe feee 	bl	80153e0 <VerifyRfFreq>
 8016604:	4603      	mov	r3, r0
 8016606:	f083 0301 	eor.w	r3, r3, #1
 801660a:	b2db      	uxtb	r3, r3
 801660c:	2b00      	cmp	r3, #0
 801660e:	d001      	beq.n	8016614 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8016610:	2301      	movs	r3, #1
 8016612:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016614:	7bfb      	ldrb	r3, [r7, #15]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d004      	beq.n	8016624 <RegionEU868ChannelAdd+0xcc>
 801661a:	7bbb      	ldrb	r3, [r7, #14]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d001      	beq.n	8016624 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016620:	2306      	movs	r3, #6
 8016622:	e035      	b.n	8016690 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8016624:	7bfb      	ldrb	r3, [r7, #15]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d001      	beq.n	801662e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801662a:	2305      	movs	r3, #5
 801662c:	e030      	b.n	8016690 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801662e:	7bbb      	ldrb	r3, [r7, #14]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d001      	beq.n	8016638 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016634:	2304      	movs	r3, #4
 8016636:	e02b      	b.n	8016690 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016638:	4b17      	ldr	r3, [pc, #92]	; (8016698 <RegionEU868ChannelAdd+0x140>)
 801663a:	6819      	ldr	r1, [r3, #0]
 801663c:	7b7a      	ldrb	r2, [r7, #13]
 801663e:	4613      	mov	r3, r2
 8016640:	005b      	lsls	r3, r3, #1
 8016642:	4413      	add	r3, r2
 8016644:	009b      	lsls	r3, r3, #2
 8016646:	18c8      	adds	r0, r1, r3
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	220c      	movs	r2, #12
 801664e:	4619      	mov	r1, r3
 8016650:	f000 f8fd 	bl	801684e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8016654:	4b10      	ldr	r3, [pc, #64]	; (8016698 <RegionEU868ChannelAdd+0x140>)
 8016656:	6819      	ldr	r1, [r3, #0]
 8016658:	7b7a      	ldrb	r2, [r7, #13]
 801665a:	7b38      	ldrb	r0, [r7, #12]
 801665c:	4613      	mov	r3, r2
 801665e:	005b      	lsls	r3, r3, #1
 8016660:	4413      	add	r3, r2
 8016662:	009b      	lsls	r3, r3, #2
 8016664:	440b      	add	r3, r1
 8016666:	3309      	adds	r3, #9
 8016668:	4602      	mov	r2, r0
 801666a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801666c:	4b0a      	ldr	r3, [pc, #40]	; (8016698 <RegionEU868ChannelAdd+0x140>)
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8016674:	b21a      	sxth	r2, r3
 8016676:	7b7b      	ldrb	r3, [r7, #13]
 8016678:	2101      	movs	r1, #1
 801667a:	fa01 f303 	lsl.w	r3, r1, r3
 801667e:	b21b      	sxth	r3, r3
 8016680:	4313      	orrs	r3, r2
 8016682:	b21a      	sxth	r2, r3
 8016684:	4b04      	ldr	r3, [pc, #16]	; (8016698 <RegionEU868ChannelAdd+0x140>)
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	b292      	uxth	r2, r2
 801668a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 801668e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016690:	4618      	mov	r0, r3
 8016692:	3710      	adds	r7, #16
 8016694:	46bd      	mov	sp, r7
 8016696:	bd80      	pop	{r7, pc}
 8016698:	20001ae0 	.word	0x20001ae0

0801669c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b086      	sub	sp, #24
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	781b      	ldrb	r3, [r3, #0]
 80166a8:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80166aa:	7dfb      	ldrb	r3, [r7, #23]
 80166ac:	2b02      	cmp	r3, #2
 80166ae:	d801      	bhi.n	80166b4 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80166b0:	2300      	movs	r3, #0
 80166b2:	e016      	b.n	80166e2 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80166b4:	4b0d      	ldr	r3, [pc, #52]	; (80166ec <RegionEU868ChannelsRemove+0x50>)
 80166b6:	6819      	ldr	r1, [r3, #0]
 80166b8:	7dfa      	ldrb	r2, [r7, #23]
 80166ba:	4613      	mov	r3, r2
 80166bc:	005b      	lsls	r3, r3, #1
 80166be:	4413      	add	r3, r2
 80166c0:	009b      	lsls	r3, r3, #2
 80166c2:	440b      	add	r3, r1
 80166c4:	461a      	mov	r2, r3
 80166c6:	2300      	movs	r3, #0
 80166c8:	6013      	str	r3, [r2, #0]
 80166ca:	6053      	str	r3, [r2, #4]
 80166cc:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80166ce:	4b07      	ldr	r3, [pc, #28]	; (80166ec <RegionEU868ChannelsRemove+0x50>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80166d6:	7df9      	ldrb	r1, [r7, #23]
 80166d8:	2210      	movs	r2, #16
 80166da:	4618      	mov	r0, r3
 80166dc:	f7fe f918 	bl	8014910 <RegionCommonChanDisable>
 80166e0:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80166e2:	4618      	mov	r0, r3
 80166e4:	3718      	adds	r7, #24
 80166e6:	46bd      	mov	sp, r7
 80166e8:	bd80      	pop	{r7, pc}
 80166ea:	bf00      	nop
 80166ec:	20001ae0 	.word	0x20001ae0

080166f0 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80166f0:	b590      	push	{r4, r7, lr}
 80166f2:	b085      	sub	sp, #20
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80166fe:	4b20      	ldr	r3, [pc, #128]	; (8016780 <RegionEU868SetContinuousWave+0x90>)
 8016700:	681a      	ldr	r2, [r3, #0]
 8016702:	4b20      	ldr	r3, [pc, #128]	; (8016784 <RegionEU868SetContinuousWave+0x94>)
 8016704:	6819      	ldr	r1, [r3, #0]
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	781b      	ldrb	r3, [r3, #0]
 801670a:	461c      	mov	r4, r3
 801670c:	4623      	mov	r3, r4
 801670e:	005b      	lsls	r3, r3, #1
 8016710:	4423      	add	r3, r4
 8016712:	009b      	lsls	r3, r3, #2
 8016714:	440b      	add	r3, r1
 8016716:	3309      	adds	r3, #9
 8016718:	781b      	ldrb	r3, [r3, #0]
 801671a:	4619      	mov	r1, r3
 801671c:	460b      	mov	r3, r1
 801671e:	005b      	lsls	r3, r3, #1
 8016720:	440b      	add	r3, r1
 8016722:	00db      	lsls	r3, r3, #3
 8016724:	4413      	add	r3, r2
 8016726:	3302      	adds	r3, #2
 8016728:	f993 3000 	ldrsb.w	r3, [r3]
 801672c:	4619      	mov	r1, r3
 801672e:	f7fe fdda 	bl	80152e6 <RegionCommonLimitTxPower>
 8016732:	4603      	mov	r3, r0
 8016734:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016736:	2300      	movs	r3, #0
 8016738:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801673a:	4b12      	ldr	r3, [pc, #72]	; (8016784 <RegionEU868SetContinuousWave+0x94>)
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	781b      	ldrb	r3, [r3, #0]
 8016742:	4619      	mov	r1, r3
 8016744:	460b      	mov	r3, r1
 8016746:	005b      	lsls	r3, r3, #1
 8016748:	440b      	add	r3, r1
 801674a:	009b      	lsls	r3, r3, #2
 801674c:	4413      	add	r3, r2
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	6859      	ldr	r1, [r3, #4]
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	689a      	ldr	r2, [r3, #8]
 801675a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801675e:	4618      	mov	r0, r3
 8016760:	f7fe fc32 	bl	8014fc8 <RegionCommonComputeTxPower>
 8016764:	4603      	mov	r3, r0
 8016766:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8016768:	4b07      	ldr	r3, [pc, #28]	; (8016788 <RegionEU868SetContinuousWave+0x98>)
 801676a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801676c:	687a      	ldr	r2, [r7, #4]
 801676e:	8992      	ldrh	r2, [r2, #12]
 8016770:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016774:	68b8      	ldr	r0, [r7, #8]
 8016776:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8016778:	bf00      	nop
 801677a:	3714      	adds	r7, #20
 801677c:	46bd      	mov	sp, r7
 801677e:	bd90      	pop	{r4, r7, pc}
 8016780:	20001adc 	.word	0x20001adc
 8016784:	20001ae0 	.word	0x20001ae0
 8016788:	0801c3ac 	.word	0x0801c3ac

0801678c <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801678c:	b480      	push	{r7}
 801678e:	b085      	sub	sp, #20
 8016790:	af00      	add	r7, sp, #0
 8016792:	4603      	mov	r3, r0
 8016794:	71fb      	strb	r3, [r7, #7]
 8016796:	460b      	mov	r3, r1
 8016798:	71bb      	strb	r3, [r7, #6]
 801679a:	4613      	mov	r3, r2
 801679c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801679e:	79ba      	ldrb	r2, [r7, #6]
 80167a0:	797b      	ldrb	r3, [r7, #5]
 80167a2:	1ad3      	subs	r3, r2, r3
 80167a4:	b2db      	uxtb	r3, r3
 80167a6:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80167a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	da01      	bge.n	80167b4 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80167b0:	2300      	movs	r3, #0
 80167b2:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80167b4:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	3714      	adds	r7, #20
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bc80      	pop	{r7}
 80167be:	4770      	bx	lr

080167c0 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80167c0:	b480      	push	{r7}
 80167c2:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80167c4:	4b0d      	ldr	r3, [pc, #52]	; (80167fc <rand1+0x3c>)
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	4a0d      	ldr	r2, [pc, #52]	; (8016800 <rand1+0x40>)
 80167ca:	fb02 f303 	mul.w	r3, r2, r3
 80167ce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80167d2:	3339      	adds	r3, #57	; 0x39
 80167d4:	4a09      	ldr	r2, [pc, #36]	; (80167fc <rand1+0x3c>)
 80167d6:	6013      	str	r3, [r2, #0]
 80167d8:	4b08      	ldr	r3, [pc, #32]	; (80167fc <rand1+0x3c>)
 80167da:	681a      	ldr	r2, [r3, #0]
 80167dc:	2303      	movs	r3, #3
 80167de:	fba3 1302 	umull	r1, r3, r3, r2
 80167e2:	1ad1      	subs	r1, r2, r3
 80167e4:	0849      	lsrs	r1, r1, #1
 80167e6:	440b      	add	r3, r1
 80167e8:	0f99      	lsrs	r1, r3, #30
 80167ea:	460b      	mov	r3, r1
 80167ec:	07db      	lsls	r3, r3, #31
 80167ee:	1a5b      	subs	r3, r3, r1
 80167f0:	1ad1      	subs	r1, r2, r3
 80167f2:	460b      	mov	r3, r1
}
 80167f4:	4618      	mov	r0, r3
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bc80      	pop	{r7}
 80167fa:	4770      	bx	lr
 80167fc:	2000014c 	.word	0x2000014c
 8016800:	41c64e6d 	.word	0x41c64e6d

08016804 <srand1>:

void srand1( uint32_t seed )
{
 8016804:	b480      	push	{r7}
 8016806:	b083      	sub	sp, #12
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
    next = seed;
 801680c:	4a03      	ldr	r2, [pc, #12]	; (801681c <srand1+0x18>)
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	6013      	str	r3, [r2, #0]
}
 8016812:	bf00      	nop
 8016814:	370c      	adds	r7, #12
 8016816:	46bd      	mov	sp, r7
 8016818:	bc80      	pop	{r7}
 801681a:	4770      	bx	lr
 801681c:	2000014c 	.word	0x2000014c

08016820 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b082      	sub	sp, #8
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801682a:	f7ff ffc9 	bl	80167c0 <rand1>
 801682e:	4602      	mov	r2, r0
 8016830:	6839      	ldr	r1, [r7, #0]
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	1acb      	subs	r3, r1, r3
 8016836:	3301      	adds	r3, #1
 8016838:	fb92 f1f3 	sdiv	r1, r2, r3
 801683c:	fb01 f303 	mul.w	r3, r1, r3
 8016840:	1ad2      	subs	r2, r2, r3
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	4413      	add	r3, r2
}
 8016846:	4618      	mov	r0, r3
 8016848:	3708      	adds	r7, #8
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}

0801684e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801684e:	b480      	push	{r7}
 8016850:	b085      	sub	sp, #20
 8016852:	af00      	add	r7, sp, #0
 8016854:	60f8      	str	r0, [r7, #12]
 8016856:	60b9      	str	r1, [r7, #8]
 8016858:	4613      	mov	r3, r2
 801685a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801685c:	e007      	b.n	801686e <memcpy1+0x20>
    {
        *dst++ = *src++;
 801685e:	68ba      	ldr	r2, [r7, #8]
 8016860:	1c53      	adds	r3, r2, #1
 8016862:	60bb      	str	r3, [r7, #8]
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	1c59      	adds	r1, r3, #1
 8016868:	60f9      	str	r1, [r7, #12]
 801686a:	7812      	ldrb	r2, [r2, #0]
 801686c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801686e:	88fb      	ldrh	r3, [r7, #6]
 8016870:	1e5a      	subs	r2, r3, #1
 8016872:	80fa      	strh	r2, [r7, #6]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d1f2      	bne.n	801685e <memcpy1+0x10>
    }
}
 8016878:	bf00      	nop
 801687a:	bf00      	nop
 801687c:	3714      	adds	r7, #20
 801687e:	46bd      	mov	sp, r7
 8016880:	bc80      	pop	{r7}
 8016882:	4770      	bx	lr

08016884 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016884:	b480      	push	{r7}
 8016886:	b085      	sub	sp, #20
 8016888:	af00      	add	r7, sp, #0
 801688a:	60f8      	str	r0, [r7, #12]
 801688c:	60b9      	str	r1, [r7, #8]
 801688e:	4613      	mov	r3, r2
 8016890:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016892:	88fb      	ldrh	r3, [r7, #6]
 8016894:	3b01      	subs	r3, #1
 8016896:	68fa      	ldr	r2, [r7, #12]
 8016898:	4413      	add	r3, r2
 801689a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801689c:	e007      	b.n	80168ae <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801689e:	68ba      	ldr	r2, [r7, #8]
 80168a0:	1c53      	adds	r3, r2, #1
 80168a2:	60bb      	str	r3, [r7, #8]
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	1e59      	subs	r1, r3, #1
 80168a8:	60f9      	str	r1, [r7, #12]
 80168aa:	7812      	ldrb	r2, [r2, #0]
 80168ac:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80168ae:	88fb      	ldrh	r3, [r7, #6]
 80168b0:	1e5a      	subs	r2, r3, #1
 80168b2:	80fa      	strh	r2, [r7, #6]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d1f2      	bne.n	801689e <memcpyr+0x1a>
    }
}
 80168b8:	bf00      	nop
 80168ba:	bf00      	nop
 80168bc:	3714      	adds	r7, #20
 80168be:	46bd      	mov	sp, r7
 80168c0:	bc80      	pop	{r7}
 80168c2:	4770      	bx	lr

080168c4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80168c4:	b480      	push	{r7}
 80168c6:	b083      	sub	sp, #12
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
 80168cc:	460b      	mov	r3, r1
 80168ce:	70fb      	strb	r3, [r7, #3]
 80168d0:	4613      	mov	r3, r2
 80168d2:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80168d4:	e004      	b.n	80168e0 <memset1+0x1c>
    {
        *dst++ = value;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	1c5a      	adds	r2, r3, #1
 80168da:	607a      	str	r2, [r7, #4]
 80168dc:	78fa      	ldrb	r2, [r7, #3]
 80168de:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80168e0:	883b      	ldrh	r3, [r7, #0]
 80168e2:	1e5a      	subs	r2, r3, #1
 80168e4:	803a      	strh	r2, [r7, #0]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d1f5      	bne.n	80168d6 <memset1+0x12>
    }
}
 80168ea:	bf00      	nop
 80168ec:	bf00      	nop
 80168ee:	370c      	adds	r7, #12
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bc80      	pop	{r7}
 80168f4:	4770      	bx	lr
	...

080168f8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80168f8:	b480      	push	{r7}
 80168fa:	b085      	sub	sp, #20
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
 8016900:	460b      	mov	r3, r1
 8016902:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016908:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d101      	bne.n	8016914 <Crc32+0x1c>
    {
        return 0;
 8016910:	2300      	movs	r3, #0
 8016912:	e026      	b.n	8016962 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016914:	2300      	movs	r3, #0
 8016916:	817b      	strh	r3, [r7, #10]
 8016918:	e01d      	b.n	8016956 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801691a:	897b      	ldrh	r3, [r7, #10]
 801691c:	687a      	ldr	r2, [r7, #4]
 801691e:	4413      	add	r3, r2
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	461a      	mov	r2, r3
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	4053      	eors	r3, r2
 8016928:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801692a:	2300      	movs	r3, #0
 801692c:	813b      	strh	r3, [r7, #8]
 801692e:	e00c      	b.n	801694a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	085a      	lsrs	r2, r3, #1
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	f003 0301 	and.w	r3, r3, #1
 801693a:	425b      	negs	r3, r3
 801693c:	490b      	ldr	r1, [pc, #44]	; (801696c <Crc32+0x74>)
 801693e:	400b      	ands	r3, r1
 8016940:	4053      	eors	r3, r2
 8016942:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016944:	893b      	ldrh	r3, [r7, #8]
 8016946:	3301      	adds	r3, #1
 8016948:	813b      	strh	r3, [r7, #8]
 801694a:	893b      	ldrh	r3, [r7, #8]
 801694c:	2b07      	cmp	r3, #7
 801694e:	d9ef      	bls.n	8016930 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8016950:	897b      	ldrh	r3, [r7, #10]
 8016952:	3301      	adds	r3, #1
 8016954:	817b      	strh	r3, [r7, #10]
 8016956:	897a      	ldrh	r2, [r7, #10]
 8016958:	887b      	ldrh	r3, [r7, #2]
 801695a:	429a      	cmp	r2, r3
 801695c:	d3dd      	bcc.n	801691a <Crc32+0x22>
        }
    }

    return ~crc;
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	43db      	mvns	r3, r3
}
 8016962:	4618      	mov	r0, r3
 8016964:	3714      	adds	r7, #20
 8016966:	46bd      	mov	sp, r7
 8016968:	bc80      	pop	{r7}
 801696a:	4770      	bx	lr
 801696c:	edb88320 	.word	0xedb88320

08016970 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b084      	sub	sp, #16
 8016974:	af02      	add	r7, sp, #8
 8016976:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016978:	4a24      	ldr	r2, [pc, #144]	; (8016a0c <RadioInit+0x9c>)
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801697e:	4b24      	ldr	r3, [pc, #144]	; (8016a10 <RadioInit+0xa0>)
 8016980:	2200      	movs	r2, #0
 8016982:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016984:	4b22      	ldr	r3, [pc, #136]	; (8016a10 <RadioInit+0xa0>)
 8016986:	2200      	movs	r2, #0
 8016988:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801698a:	4b21      	ldr	r3, [pc, #132]	; (8016a10 <RadioInit+0xa0>)
 801698c:	2200      	movs	r2, #0
 801698e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8016990:	4b1f      	ldr	r3, [pc, #124]	; (8016a10 <RadioInit+0xa0>)
 8016992:	2200      	movs	r2, #0
 8016994:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8016996:	481f      	ldr	r0, [pc, #124]	; (8016a14 <RadioInit+0xa4>)
 8016998:	f001 ff88 	bl	80188ac <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801699c:	4b1c      	ldr	r3, [pc, #112]	; (8016a10 <RadioInit+0xa0>)
 801699e:	2200      	movs	r2, #0
 80169a0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80169a2:	4b1b      	ldr	r3, [pc, #108]	; (8016a10 <RadioInit+0xa0>)
 80169a4:	2200      	movs	r2, #0
 80169a6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80169a8:	f002 fa16 	bl	8018dd8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80169ac:	2100      	movs	r1, #0
 80169ae:	2000      	movs	r0, #0
 80169b0:	f002 fdde 	bl	8019570 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80169b4:	2204      	movs	r2, #4
 80169b6:	2100      	movs	r1, #0
 80169b8:	2001      	movs	r0, #1
 80169ba:	f002 fb9b 	bl	80190f4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80169be:	2300      	movs	r3, #0
 80169c0:	2200      	movs	r2, #0
 80169c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80169c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80169ca:	f002 facb 	bl	8018f64 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80169ce:	f000 fe83 	bl	80176d8 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80169d2:	2300      	movs	r3, #0
 80169d4:	9300      	str	r3, [sp, #0]
 80169d6:	4b10      	ldr	r3, [pc, #64]	; (8016a18 <RadioInit+0xa8>)
 80169d8:	2200      	movs	r2, #0
 80169da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80169de:	480f      	ldr	r0, [pc, #60]	; (8016a1c <RadioInit+0xac>)
 80169e0:	f003 ffdc 	bl	801a99c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80169e4:	2300      	movs	r3, #0
 80169e6:	9300      	str	r3, [sp, #0]
 80169e8:	4b0d      	ldr	r3, [pc, #52]	; (8016a20 <RadioInit+0xb0>)
 80169ea:	2200      	movs	r2, #0
 80169ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80169f0:	480c      	ldr	r0, [pc, #48]	; (8016a24 <RadioInit+0xb4>)
 80169f2:	f003 ffd3 	bl	801a99c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80169f6:	4809      	ldr	r0, [pc, #36]	; (8016a1c <RadioInit+0xac>)
 80169f8:	f004 f874 	bl	801aae4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80169fc:	4809      	ldr	r0, [pc, #36]	; (8016a24 <RadioInit+0xb4>)
 80169fe:	f004 f871 	bl	801aae4 <UTIL_TIMER_Stop>
}
 8016a02:	bf00      	nop
 8016a04:	3708      	adds	r7, #8
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}
 8016a0a:	bf00      	nop
 8016a0c:	20001be4 	.word	0x20001be4
 8016a10:	20001be8 	.word	0x20001be8
 8016a14:	08017ac5 	.word	0x08017ac5
 8016a18:	08017a4d 	.word	0x08017a4d
 8016a1c:	20001c44 	.word	0x20001c44
 8016a20:	08017a61 	.word	0x08017a61
 8016a24:	20001c5c 	.word	0x20001c5c

08016a28 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016a2c:	f001 ff80 	bl	8018930 <SUBGRF_GetOperatingMode>
 8016a30:	4603      	mov	r3, r0
 8016a32:	2b07      	cmp	r3, #7
 8016a34:	d00a      	beq.n	8016a4c <RadioGetStatus+0x24>
 8016a36:	2b07      	cmp	r3, #7
 8016a38:	dc0a      	bgt.n	8016a50 <RadioGetStatus+0x28>
 8016a3a:	2b04      	cmp	r3, #4
 8016a3c:	d002      	beq.n	8016a44 <RadioGetStatus+0x1c>
 8016a3e:	2b05      	cmp	r3, #5
 8016a40:	d002      	beq.n	8016a48 <RadioGetStatus+0x20>
 8016a42:	e005      	b.n	8016a50 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016a44:	2302      	movs	r3, #2
 8016a46:	e004      	b.n	8016a52 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016a48:	2301      	movs	r3, #1
 8016a4a:	e002      	b.n	8016a52 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016a4c:	2303      	movs	r3, #3
 8016a4e:	e000      	b.n	8016a52 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016a50:	2300      	movs	r3, #0
    }
}
 8016a52:	4618      	mov	r0, r3
 8016a54:	bd80      	pop	{r7, pc}
	...

08016a58 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b082      	sub	sp, #8
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	4603      	mov	r3, r0
 8016a60:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016a62:	4a2a      	ldr	r2, [pc, #168]	; (8016b0c <RadioSetModem+0xb4>)
 8016a64:	79fb      	ldrb	r3, [r7, #7]
 8016a66:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8016a68:	79fb      	ldrb	r3, [r7, #7]
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f003 f943 	bl	8019cf6 <RFW_SetRadioModem>
    switch( modem )
 8016a70:	79fb      	ldrb	r3, [r7, #7]
 8016a72:	2b05      	cmp	r3, #5
 8016a74:	d80e      	bhi.n	8016a94 <RadioSetModem+0x3c>
 8016a76:	a201      	add	r2, pc, #4	; (adr r2, 8016a7c <RadioSetModem+0x24>)
 8016a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a7c:	08016aa3 	.word	0x08016aa3
 8016a80:	08016ab1 	.word	0x08016ab1
 8016a84:	08016a95 	.word	0x08016a95
 8016a88:	08016ad7 	.word	0x08016ad7
 8016a8c:	08016ae5 	.word	0x08016ae5
 8016a90:	08016af3 	.word	0x08016af3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8016a94:	2003      	movs	r0, #3
 8016a96:	f002 fb07 	bl	80190a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016a9a:	4b1c      	ldr	r3, [pc, #112]	; (8016b0c <RadioSetModem+0xb4>)
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	735a      	strb	r2, [r3, #13]
        break;
 8016aa0:	e02f      	b.n	8016b02 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016aa2:	2000      	movs	r0, #0
 8016aa4:	f002 fb00 	bl	80190a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016aa8:	4b18      	ldr	r3, [pc, #96]	; (8016b0c <RadioSetModem+0xb4>)
 8016aaa:	2200      	movs	r2, #0
 8016aac:	735a      	strb	r2, [r3, #13]
        break;
 8016aae:	e028      	b.n	8016b02 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016ab0:	2001      	movs	r0, #1
 8016ab2:	f002 faf9 	bl	80190a8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016ab6:	4b15      	ldr	r3, [pc, #84]	; (8016b0c <RadioSetModem+0xb4>)
 8016ab8:	7b5a      	ldrb	r2, [r3, #13]
 8016aba:	4b14      	ldr	r3, [pc, #80]	; (8016b0c <RadioSetModem+0xb4>)
 8016abc:	7b1b      	ldrb	r3, [r3, #12]
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d01e      	beq.n	8016b00 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016ac2:	4b12      	ldr	r3, [pc, #72]	; (8016b0c <RadioSetModem+0xb4>)
 8016ac4:	7b1a      	ldrb	r2, [r3, #12]
 8016ac6:	4b11      	ldr	r3, [pc, #68]	; (8016b0c <RadioSetModem+0xb4>)
 8016ac8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016aca:	4b10      	ldr	r3, [pc, #64]	; (8016b0c <RadioSetModem+0xb4>)
 8016acc:	7b5b      	ldrb	r3, [r3, #13]
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f000 ff86 	bl	80179e0 <RadioSetPublicNetwork>
        }
        break;
 8016ad4:	e014      	b.n	8016b00 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016ad6:	2002      	movs	r0, #2
 8016ad8:	f002 fae6 	bl	80190a8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016adc:	4b0b      	ldr	r3, [pc, #44]	; (8016b0c <RadioSetModem+0xb4>)
 8016ade:	2200      	movs	r2, #0
 8016ae0:	735a      	strb	r2, [r3, #13]
        break;
 8016ae2:	e00e      	b.n	8016b02 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016ae4:	2002      	movs	r0, #2
 8016ae6:	f002 fadf 	bl	80190a8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016aea:	4b08      	ldr	r3, [pc, #32]	; (8016b0c <RadioSetModem+0xb4>)
 8016aec:	2200      	movs	r2, #0
 8016aee:	735a      	strb	r2, [r3, #13]
        break;
 8016af0:	e007      	b.n	8016b02 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016af2:	2000      	movs	r0, #0
 8016af4:	f002 fad8 	bl	80190a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016af8:	4b04      	ldr	r3, [pc, #16]	; (8016b0c <RadioSetModem+0xb4>)
 8016afa:	2200      	movs	r2, #0
 8016afc:	735a      	strb	r2, [r3, #13]
        break;
 8016afe:	e000      	b.n	8016b02 <RadioSetModem+0xaa>
        break;
 8016b00:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8016b02:	bf00      	nop
 8016b04:	3708      	adds	r7, #8
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}
 8016b0a:	bf00      	nop
 8016b0c:	20001be8 	.word	0x20001be8

08016b10 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016b18:	6878      	ldr	r0, [r7, #4]
 8016b1a:	f002 fa7f 	bl	801901c <SUBGRF_SetRfFrequency>
}
 8016b1e:	bf00      	nop
 8016b20:	3708      	adds	r7, #8
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}

08016b26 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016b26:	b580      	push	{r7, lr}
 8016b28:	b090      	sub	sp, #64	; 0x40
 8016b2a:	af0a      	add	r7, sp, #40	; 0x28
 8016b2c:	60f8      	str	r0, [r7, #12]
 8016b2e:	60b9      	str	r1, [r7, #8]
 8016b30:	603b      	str	r3, [r7, #0]
 8016b32:	4613      	mov	r3, r2
 8016b34:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016b36:	2301      	movs	r3, #1
 8016b38:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8016b42:	f000 fddc 	bl	80176fe <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8016b46:	2000      	movs	r0, #0
 8016b48:	f7ff ff86 	bl	8016a58 <RadioSetModem>

    RadioSetChannel( freq );
 8016b4c:	68f8      	ldr	r0, [r7, #12]
 8016b4e:	f7ff ffdf 	bl	8016b10 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016b52:	2301      	movs	r3, #1
 8016b54:	9309      	str	r3, [sp, #36]	; 0x24
 8016b56:	2300      	movs	r3, #0
 8016b58:	9308      	str	r3, [sp, #32]
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	9307      	str	r3, [sp, #28]
 8016b5e:	2300      	movs	r3, #0
 8016b60:	9306      	str	r3, [sp, #24]
 8016b62:	2300      	movs	r3, #0
 8016b64:	9305      	str	r3, [sp, #20]
 8016b66:	2300      	movs	r3, #0
 8016b68:	9304      	str	r3, [sp, #16]
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	9303      	str	r3, [sp, #12]
 8016b6e:	2300      	movs	r3, #0
 8016b70:	9302      	str	r3, [sp, #8]
 8016b72:	2303      	movs	r3, #3
 8016b74:	9301      	str	r3, [sp, #4]
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	9300      	str	r3, [sp, #0]
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8016b80:	68b9      	ldr	r1, [r7, #8]
 8016b82:	2000      	movs	r0, #0
 8016b84:	f000 f83c 	bl	8016c00 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016b88:	2000      	movs	r0, #0
 8016b8a:	f000 fdbf 	bl	801770c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016b8e:	f000 ff55 	bl	8017a3c <RadioGetWakeupTime>
 8016b92:	4603      	mov	r3, r0
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7eb f957 	bl	8001e48 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016b9a:	f004 f8bd 	bl	801ad18 <UTIL_TIMER_GetCurrentTime>
 8016b9e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016ba0:	e00d      	b.n	8016bbe <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016ba2:	2000      	movs	r0, #0
 8016ba4:	f000 fe9a 	bl	80178dc <RadioRssi>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016bac:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	dd02      	ble.n	8016bbe <RadioIsChannelFree+0x98>
        {
            status = false;
 8016bb8:	2300      	movs	r3, #0
 8016bba:	75fb      	strb	r3, [r7, #23]
            break;
 8016bbc:	e006      	b.n	8016bcc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016bbe:	6938      	ldr	r0, [r7, #16]
 8016bc0:	f004 f8bc 	bl	801ad3c <UTIL_TIMER_GetElapsedTime>
 8016bc4:	4602      	mov	r2, r0
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	4293      	cmp	r3, r2
 8016bca:	d8ea      	bhi.n	8016ba2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8016bcc:	f000 fd97 	bl	80176fe <RadioStandby>

    return status;
 8016bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	3718      	adds	r7, #24
 8016bd6:	46bd      	mov	sp, r7
 8016bd8:	bd80      	pop	{r7, pc}

08016bda <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016bda:	b580      	push	{r7, lr}
 8016bdc:	b082      	sub	sp, #8
 8016bde:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016be0:	2300      	movs	r3, #0
 8016be2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016be4:	2300      	movs	r3, #0
 8016be6:	2200      	movs	r2, #0
 8016be8:	2100      	movs	r1, #0
 8016bea:	2000      	movs	r0, #0
 8016bec:	f002 f9ba 	bl	8018f64 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016bf0:	f001 ff6f 	bl	8018ad2 <SUBGRF_GetRandom>
 8016bf4:	6078      	str	r0, [r7, #4]

    return rnd;
 8016bf6:	687b      	ldr	r3, [r7, #4]
}
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	3708      	adds	r7, #8
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}

08016c00 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b08a      	sub	sp, #40	; 0x28
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	60b9      	str	r1, [r7, #8]
 8016c08:	607a      	str	r2, [r7, #4]
 8016c0a:	461a      	mov	r2, r3
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	73fb      	strb	r3, [r7, #15]
 8016c10:	4613      	mov	r3, r2
 8016c12:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8016c14:	4ab9      	ldr	r2, [pc, #740]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016c16:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016c1a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016c1c:	f003 f829 	bl	8019c72 <RFW_DeInit>
    if( rxContinuous == true )
 8016c20:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d001      	beq.n	8016c2c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8016c2c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d004      	beq.n	8016c3e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016c34:	4ab2      	ldr	r2, [pc, #712]	; (8016f00 <RadioSetRxConfig+0x300>)
 8016c36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016c3a:	7013      	strb	r3, [r2, #0]
 8016c3c:	e002      	b.n	8016c44 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016c3e:	4bb0      	ldr	r3, [pc, #704]	; (8016f00 <RadioSetRxConfig+0x300>)
 8016c40:	22ff      	movs	r2, #255	; 0xff
 8016c42:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016c44:	7bfb      	ldrb	r3, [r7, #15]
 8016c46:	2b05      	cmp	r3, #5
 8016c48:	d009      	beq.n	8016c5e <RadioSetRxConfig+0x5e>
 8016c4a:	2b05      	cmp	r3, #5
 8016c4c:	f300 81ca 	bgt.w	8016fe4 <RadioSetRxConfig+0x3e4>
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	f000 80bf 	beq.w	8016dd4 <RadioSetRxConfig+0x1d4>
 8016c56:	2b01      	cmp	r3, #1
 8016c58:	f000 8124 	beq.w	8016ea4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016c5c:	e1c2      	b.n	8016fe4 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016c5e:	2001      	movs	r0, #1
 8016c60:	f002 f87c 	bl	8018d5c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016c64:	4ba5      	ldr	r3, [pc, #660]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016c66:	2200      	movs	r2, #0
 8016c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016c6c:	4aa3      	ldr	r2, [pc, #652]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016c72:	4ba2      	ldr	r3, [pc, #648]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016c74:	2209      	movs	r2, #9
 8016c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016c7a:	4ba0      	ldr	r3, [pc, #640]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016c7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016c80:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016c82:	68b8      	ldr	r0, [r7, #8]
 8016c84:	f002 ff28 	bl	8019ad8 <SUBGRF_GetFskBandwidthRegValue>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	461a      	mov	r2, r3
 8016c8c:	4b9b      	ldr	r3, [pc, #620]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016c92:	4b9a      	ldr	r3, [pc, #616]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016c94:	2200      	movs	r2, #0
 8016c96:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016c98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016c9a:	00db      	lsls	r3, r3, #3
 8016c9c:	b29a      	uxth	r2, r3
 8016c9e:	4b97      	ldr	r3, [pc, #604]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016ca0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016ca2:	4b96      	ldr	r3, [pc, #600]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016ca8:	4b94      	ldr	r3, [pc, #592]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016caa:	2210      	movs	r2, #16
 8016cac:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016cae:	4b93      	ldr	r3, [pc, #588]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016cb4:	4b91      	ldr	r3, [pc, #580]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016cba:	4b91      	ldr	r3, [pc, #580]	; (8016f00 <RadioSetRxConfig+0x300>)
 8016cbc:	781a      	ldrb	r2, [r3, #0]
 8016cbe:	4b8f      	ldr	r3, [pc, #572]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016cc0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016cc2:	4b8e      	ldr	r3, [pc, #568]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016cc4:	2201      	movs	r2, #1
 8016cc6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016cc8:	4b8c      	ldr	r3, [pc, #560]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016cca:	2200      	movs	r2, #0
 8016ccc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016cce:	2005      	movs	r0, #5
 8016cd0:	f7ff fec2 	bl	8016a58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016cd4:	488b      	ldr	r0, [pc, #556]	; (8016f04 <RadioSetRxConfig+0x304>)
 8016cd6:	f002 fadb 	bl	8019290 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016cda:	488b      	ldr	r0, [pc, #556]	; (8016f08 <RadioSetRxConfig+0x308>)
 8016cdc:	f002 fbaa 	bl	8019434 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016ce0:	4a8a      	ldr	r2, [pc, #552]	; (8016f0c <RadioSetRxConfig+0x30c>)
 8016ce2:	f107 031c 	add.w	r3, r7, #28
 8016ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016cea:	e883 0003 	stmia.w	r3, {r0, r1}
 8016cee:	f107 031c 	add.w	r3, r7, #28
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f001 fe6b 	bl	80189ce <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016cf8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016cfc:	f001 feb6 	bl	8018a6c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8016d00:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016d04:	f000 fe09 	bl	801791a <RadioRead>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d12:	f023 0310 	bic.w	r3, r3, #16
 8016d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8016d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d1e:	4619      	mov	r1, r3
 8016d20:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016d24:	f000 fde7 	bl	80178f6 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8016d28:	2104      	movs	r1, #4
 8016d2a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8016d2e:	f000 fde2 	bl	80178f6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8016d32:	f640 009b 	movw	r0, #2203	; 0x89b
 8016d36:	f000 fdf0 	bl	801791a <RadioRead>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d44:	f023 031c 	bic.w	r3, r3, #28
 8016d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8016d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d50:	f043 0308 	orr.w	r3, r3, #8
 8016d54:	b2db      	uxtb	r3, r3
 8016d56:	4619      	mov	r1, r3
 8016d58:	f640 009b 	movw	r0, #2203	; 0x89b
 8016d5c:	f000 fdcb 	bl	80178f6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8016d60:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016d64:	f000 fdd9 	bl	801791a <RadioRead>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d72:	f023 0318 	bic.w	r3, r3, #24
 8016d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8016d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d7e:	f043 0318 	orr.w	r3, r3, #24
 8016d82:	b2db      	uxtb	r3, r3
 8016d84:	4619      	mov	r1, r3
 8016d86:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016d8a:	f000 fdb4 	bl	80178f6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8016d8e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016d92:	f000 fdc2 	bl	801791a <RadioRead>
 8016d96:	4603      	mov	r3, r0
 8016d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8016da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dac:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8016db0:	b2db      	uxtb	r3, r3
 8016db2:	4619      	mov	r1, r3
 8016db4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016db8:	f000 fd9d 	bl	80178f6 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016dbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016dbe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016dc2:	fb02 f303 	mul.w	r3, r2, r3
 8016dc6:	461a      	mov	r2, r3
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8016dce:	4a4b      	ldr	r2, [pc, #300]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016dd0:	6093      	str	r3, [r2, #8]
            break;
 8016dd2:	e108      	b.n	8016fe6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016dd4:	2000      	movs	r0, #0
 8016dd6:	f001 ffc1 	bl	8018d5c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016dda:	4b48      	ldr	r3, [pc, #288]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016ddc:	2200      	movs	r2, #0
 8016dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016de2:	4a46      	ldr	r2, [pc, #280]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016de8:	4b44      	ldr	r3, [pc, #272]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016dea:	220b      	movs	r2, #11
 8016dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016df0:	68b8      	ldr	r0, [r7, #8]
 8016df2:	f002 fe71 	bl	8019ad8 <SUBGRF_GetFskBandwidthRegValue>
 8016df6:	4603      	mov	r3, r0
 8016df8:	461a      	mov	r2, r3
 8016dfa:	4b40      	ldr	r3, [pc, #256]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016e00:	4b3e      	ldr	r3, [pc, #248]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016e02:	2200      	movs	r2, #0
 8016e04:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016e06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e08:	00db      	lsls	r3, r3, #3
 8016e0a:	b29a      	uxth	r2, r3
 8016e0c:	4b3b      	ldr	r3, [pc, #236]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016e0e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016e10:	4b3a      	ldr	r3, [pc, #232]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016e12:	2204      	movs	r2, #4
 8016e14:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016e16:	4b39      	ldr	r3, [pc, #228]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016e18:	2218      	movs	r2, #24
 8016e1a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016e1c:	4b37      	ldr	r3, [pc, #220]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016e1e:	2200      	movs	r2, #0
 8016e20:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016e22:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016e26:	f083 0301 	eor.w	r3, r3, #1
 8016e2a:	b2db      	uxtb	r3, r3
 8016e2c:	461a      	mov	r2, r3
 8016e2e:	4b33      	ldr	r3, [pc, #204]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016e30:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016e32:	4b33      	ldr	r3, [pc, #204]	; (8016f00 <RadioSetRxConfig+0x300>)
 8016e34:	781a      	ldrb	r2, [r3, #0]
 8016e36:	4b31      	ldr	r3, [pc, #196]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016e38:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016e3a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d003      	beq.n	8016e4a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016e42:	4b2e      	ldr	r3, [pc, #184]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016e44:	22f2      	movs	r2, #242	; 0xf2
 8016e46:	75da      	strb	r2, [r3, #23]
 8016e48:	e002      	b.n	8016e50 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016e4a:	4b2c      	ldr	r3, [pc, #176]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016e4c:	2201      	movs	r2, #1
 8016e4e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016e50:	4b2a      	ldr	r3, [pc, #168]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016e52:	2201      	movs	r2, #1
 8016e54:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016e56:	f000 fc52 	bl	80176fe <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8016e5a:	2000      	movs	r0, #0
 8016e5c:	f7ff fdfc 	bl	8016a58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016e60:	4828      	ldr	r0, [pc, #160]	; (8016f04 <RadioSetRxConfig+0x304>)
 8016e62:	f002 fa15 	bl	8019290 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016e66:	4828      	ldr	r0, [pc, #160]	; (8016f08 <RadioSetRxConfig+0x308>)
 8016e68:	f002 fae4 	bl	8019434 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016e6c:	4a28      	ldr	r2, [pc, #160]	; (8016f10 <RadioSetRxConfig+0x310>)
 8016e6e:	f107 0314 	add.w	r3, r7, #20
 8016e72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e76:	e883 0003 	stmia.w	r3, {r0, r1}
 8016e7a:	f107 0314 	add.w	r3, r7, #20
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f001 fda5 	bl	80189ce <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016e84:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016e88:	f001 fdf0 	bl	8018a6c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016e8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016e8e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016e92:	fb02 f303 	mul.w	r3, r2, r3
 8016e96:	461a      	mov	r2, r3
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8016e9e:	4a17      	ldr	r2, [pc, #92]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016ea0:	6093      	str	r3, [r2, #8]
            break;
 8016ea2:	e0a0      	b.n	8016fe6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016ea4:	2000      	movs	r0, #0
 8016ea6:	f001 ff59 	bl	8018d5c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016eaa:	4b14      	ldr	r3, [pc, #80]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016eac:	2201      	movs	r2, #1
 8016eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	b2da      	uxtb	r2, r3
 8016eb6:	4b11      	ldr	r3, [pc, #68]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016ebc:	4a15      	ldr	r2, [pc, #84]	; (8016f14 <RadioSetRxConfig+0x314>)
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	4413      	add	r3, r2
 8016ec2:	781a      	ldrb	r2, [r3, #0]
 8016ec4:	4b0d      	ldr	r3, [pc, #52]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016eca:	4a0c      	ldr	r2, [pc, #48]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016ecc:	7bbb      	ldrb	r3, [r7, #14]
 8016ece:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016ed2:	68bb      	ldr	r3, [r7, #8]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d105      	bne.n	8016ee4 <RadioSetRxConfig+0x2e4>
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	2b0b      	cmp	r3, #11
 8016edc:	d008      	beq.n	8016ef0 <RadioSetRxConfig+0x2f0>
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	2b0c      	cmp	r3, #12
 8016ee2:	d005      	beq.n	8016ef0 <RadioSetRxConfig+0x2f0>
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	2b01      	cmp	r3, #1
 8016ee8:	d116      	bne.n	8016f18 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	2b0c      	cmp	r3, #12
 8016eee:	d113      	bne.n	8016f18 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016ef0:	4b02      	ldr	r3, [pc, #8]	; (8016efc <RadioSetRxConfig+0x2fc>)
 8016ef2:	2201      	movs	r2, #1
 8016ef4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016ef8:	e012      	b.n	8016f20 <RadioSetRxConfig+0x320>
 8016efa:	bf00      	nop
 8016efc:	20001be8 	.word	0x20001be8
 8016f00:	20000150 	.word	0x20000150
 8016f04:	20001c20 	.word	0x20001c20
 8016f08:	20001bf6 	.word	0x20001bf6
 8016f0c:	0801be4c 	.word	0x0801be4c
 8016f10:	0801be54 	.word	0x0801be54
 8016f14:	0801c430 	.word	0x0801c430
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016f18:	4b35      	ldr	r3, [pc, #212]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016f20:	4b33      	ldr	r3, [pc, #204]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f22:	2201      	movs	r2, #1
 8016f24:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016f26:	4b32      	ldr	r3, [pc, #200]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016f2c:	2b05      	cmp	r3, #5
 8016f2e:	d004      	beq.n	8016f3a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016f30:	4b2f      	ldr	r3, [pc, #188]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016f36:	2b06      	cmp	r3, #6
 8016f38:	d10a      	bne.n	8016f50 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8016f3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016f3c:	2b0b      	cmp	r3, #11
 8016f3e:	d803      	bhi.n	8016f48 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016f40:	4b2b      	ldr	r3, [pc, #172]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f42:	220c      	movs	r2, #12
 8016f44:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016f46:	e006      	b.n	8016f56 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016f48:	4a29      	ldr	r2, [pc, #164]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016f4c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016f4e:	e002      	b.n	8016f56 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016f50:	4a27      	ldr	r2, [pc, #156]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016f54:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016f56:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016f5a:	4b25      	ldr	r3, [pc, #148]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f5c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016f5e:	4b25      	ldr	r3, [pc, #148]	; (8016ff4 <RadioSetRxConfig+0x3f4>)
 8016f60:	781a      	ldrb	r2, [r3, #0]
 8016f62:	4b23      	ldr	r3, [pc, #140]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f64:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016f66:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016f6a:	4b21      	ldr	r3, [pc, #132]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f6c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016f70:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016f74:	4b1e      	ldr	r3, [pc, #120]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016f7a:	f000 fbc0 	bl	80176fe <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8016f7e:	2001      	movs	r0, #1
 8016f80:	f7ff fd6a 	bl	8016a58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016f84:	481c      	ldr	r0, [pc, #112]	; (8016ff8 <RadioSetRxConfig+0x3f8>)
 8016f86:	f002 f983 	bl	8019290 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016f8a:	481c      	ldr	r0, [pc, #112]	; (8016ffc <RadioSetRxConfig+0x3fc>)
 8016f8c:	f002 fa52 	bl	8019434 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016f90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	4618      	mov	r0, r3
 8016f96:	f001 fef0 	bl	8018d7a <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016f9a:	4b15      	ldr	r3, [pc, #84]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016f9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016fa0:	2b01      	cmp	r3, #1
 8016fa2:	d10d      	bne.n	8016fc0 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8016fa4:	f240 7036 	movw	r0, #1846	; 0x736
 8016fa8:	f002 fba0 	bl	80196ec <SUBGRF_ReadRegister>
 8016fac:	4603      	mov	r3, r0
 8016fae:	f023 0304 	bic.w	r3, r3, #4
 8016fb2:	b2db      	uxtb	r3, r3
 8016fb4:	4619      	mov	r1, r3
 8016fb6:	f240 7036 	movw	r0, #1846	; 0x736
 8016fba:	f002 fb83 	bl	80196c4 <SUBGRF_WriteRegister>
 8016fbe:	e00c      	b.n	8016fda <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8016fc0:	f240 7036 	movw	r0, #1846	; 0x736
 8016fc4:	f002 fb92 	bl	80196ec <SUBGRF_ReadRegister>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	f043 0304 	orr.w	r3, r3, #4
 8016fce:	b2db      	uxtb	r3, r3
 8016fd0:	4619      	mov	r1, r3
 8016fd2:	f240 7036 	movw	r0, #1846	; 0x736
 8016fd6:	f002 fb75 	bl	80196c4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016fda:	4b05      	ldr	r3, [pc, #20]	; (8016ff0 <RadioSetRxConfig+0x3f0>)
 8016fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016fe0:	609a      	str	r2, [r3, #8]
            break;
 8016fe2:	e000      	b.n	8016fe6 <RadioSetRxConfig+0x3e6>
            break;
 8016fe4:	bf00      	nop
    }
}
 8016fe6:	bf00      	nop
 8016fe8:	3728      	adds	r7, #40	; 0x28
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	20001be8 	.word	0x20001be8
 8016ff4:	20000150 	.word	0x20000150
 8016ff8:	20001c20 	.word	0x20001c20
 8016ffc:	20001bf6 	.word	0x20001bf6

08017000 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b086      	sub	sp, #24
 8017004:	af00      	add	r7, sp, #0
 8017006:	60ba      	str	r2, [r7, #8]
 8017008:	607b      	str	r3, [r7, #4]
 801700a:	4603      	mov	r3, r0
 801700c:	73fb      	strb	r3, [r7, #15]
 801700e:	460b      	mov	r3, r1
 8017010:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8017012:	f002 fe2e 	bl	8019c72 <RFW_DeInit>
    switch( modem )
 8017016:	7bfb      	ldrb	r3, [r7, #15]
 8017018:	2b04      	cmp	r3, #4
 801701a:	f000 80c7 	beq.w	80171ac <RadioSetTxConfig+0x1ac>
 801701e:	2b04      	cmp	r3, #4
 8017020:	f300 80d6 	bgt.w	80171d0 <RadioSetTxConfig+0x1d0>
 8017024:	2b00      	cmp	r3, #0
 8017026:	d002      	beq.n	801702e <RadioSetTxConfig+0x2e>
 8017028:	2b01      	cmp	r3, #1
 801702a:	d059      	beq.n	80170e0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801702c:	e0d0      	b.n	80171d0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801702e:	4b74      	ldr	r3, [pc, #464]	; (8017200 <RadioSetTxConfig+0x200>)
 8017030:	2200      	movs	r2, #0
 8017032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017036:	4a72      	ldr	r2, [pc, #456]	; (8017200 <RadioSetTxConfig+0x200>)
 8017038:	6a3b      	ldr	r3, [r7, #32]
 801703a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801703c:	4b70      	ldr	r3, [pc, #448]	; (8017200 <RadioSetTxConfig+0x200>)
 801703e:	220b      	movs	r2, #11
 8017040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f002 fd47 	bl	8019ad8 <SUBGRF_GetFskBandwidthRegValue>
 801704a:	4603      	mov	r3, r0
 801704c:	461a      	mov	r2, r3
 801704e:	4b6c      	ldr	r3, [pc, #432]	; (8017200 <RadioSetTxConfig+0x200>)
 8017050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017054:	4a6a      	ldr	r2, [pc, #424]	; (8017200 <RadioSetTxConfig+0x200>)
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801705a:	4b69      	ldr	r3, [pc, #420]	; (8017200 <RadioSetTxConfig+0x200>)
 801705c:	2200      	movs	r2, #0
 801705e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017060:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017062:	00db      	lsls	r3, r3, #3
 8017064:	b29a      	uxth	r2, r3
 8017066:	4b66      	ldr	r3, [pc, #408]	; (8017200 <RadioSetTxConfig+0x200>)
 8017068:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801706a:	4b65      	ldr	r3, [pc, #404]	; (8017200 <RadioSetTxConfig+0x200>)
 801706c:	2204      	movs	r2, #4
 801706e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017070:	4b63      	ldr	r3, [pc, #396]	; (8017200 <RadioSetTxConfig+0x200>)
 8017072:	2218      	movs	r2, #24
 8017074:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017076:	4b62      	ldr	r3, [pc, #392]	; (8017200 <RadioSetTxConfig+0x200>)
 8017078:	2200      	movs	r2, #0
 801707a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801707c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017080:	f083 0301 	eor.w	r3, r3, #1
 8017084:	b2db      	uxtb	r3, r3
 8017086:	461a      	mov	r2, r3
 8017088:	4b5d      	ldr	r3, [pc, #372]	; (8017200 <RadioSetTxConfig+0x200>)
 801708a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801708c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017090:	2b00      	cmp	r3, #0
 8017092:	d003      	beq.n	801709c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017094:	4b5a      	ldr	r3, [pc, #360]	; (8017200 <RadioSetTxConfig+0x200>)
 8017096:	22f2      	movs	r2, #242	; 0xf2
 8017098:	75da      	strb	r2, [r3, #23]
 801709a:	e002      	b.n	80170a2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801709c:	4b58      	ldr	r3, [pc, #352]	; (8017200 <RadioSetTxConfig+0x200>)
 801709e:	2201      	movs	r2, #1
 80170a0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80170a2:	4b57      	ldr	r3, [pc, #348]	; (8017200 <RadioSetTxConfig+0x200>)
 80170a4:	2201      	movs	r2, #1
 80170a6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80170a8:	f000 fb29 	bl	80176fe <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80170ac:	2000      	movs	r0, #0
 80170ae:	f7ff fcd3 	bl	8016a58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80170b2:	4854      	ldr	r0, [pc, #336]	; (8017204 <RadioSetTxConfig+0x204>)
 80170b4:	f002 f8ec 	bl	8019290 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80170b8:	4853      	ldr	r0, [pc, #332]	; (8017208 <RadioSetTxConfig+0x208>)
 80170ba:	f002 f9bb 	bl	8019434 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80170be:	4a53      	ldr	r2, [pc, #332]	; (801720c <RadioSetTxConfig+0x20c>)
 80170c0:	f107 0310 	add.w	r3, r7, #16
 80170c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80170c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80170cc:	f107 0310 	add.w	r3, r7, #16
 80170d0:	4618      	mov	r0, r3
 80170d2:	f001 fc7c 	bl	80189ce <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80170d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80170da:	f001 fcc7 	bl	8018a6c <SUBGRF_SetWhiteningSeed>
            break;
 80170de:	e078      	b.n	80171d2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80170e0:	4b47      	ldr	r3, [pc, #284]	; (8017200 <RadioSetTxConfig+0x200>)
 80170e2:	2201      	movs	r2, #1
 80170e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80170e8:	6a3b      	ldr	r3, [r7, #32]
 80170ea:	b2da      	uxtb	r2, r3
 80170ec:	4b44      	ldr	r3, [pc, #272]	; (8017200 <RadioSetTxConfig+0x200>)
 80170ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80170f2:	4a47      	ldr	r2, [pc, #284]	; (8017210 <RadioSetTxConfig+0x210>)
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	4413      	add	r3, r2
 80170f8:	781a      	ldrb	r2, [r3, #0]
 80170fa:	4b41      	ldr	r3, [pc, #260]	; (8017200 <RadioSetTxConfig+0x200>)
 80170fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017100:	4a3f      	ldr	r2, [pc, #252]	; (8017200 <RadioSetTxConfig+0x200>)
 8017102:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017106:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d105      	bne.n	801711c <RadioSetTxConfig+0x11c>
 8017110:	6a3b      	ldr	r3, [r7, #32]
 8017112:	2b0b      	cmp	r3, #11
 8017114:	d008      	beq.n	8017128 <RadioSetTxConfig+0x128>
 8017116:	6a3b      	ldr	r3, [r7, #32]
 8017118:	2b0c      	cmp	r3, #12
 801711a:	d005      	beq.n	8017128 <RadioSetTxConfig+0x128>
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2b01      	cmp	r3, #1
 8017120:	d107      	bne.n	8017132 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017122:	6a3b      	ldr	r3, [r7, #32]
 8017124:	2b0c      	cmp	r3, #12
 8017126:	d104      	bne.n	8017132 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017128:	4b35      	ldr	r3, [pc, #212]	; (8017200 <RadioSetTxConfig+0x200>)
 801712a:	2201      	movs	r2, #1
 801712c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8017130:	e003      	b.n	801713a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017132:	4b33      	ldr	r3, [pc, #204]	; (8017200 <RadioSetTxConfig+0x200>)
 8017134:	2200      	movs	r2, #0
 8017136:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801713a:	4b31      	ldr	r3, [pc, #196]	; (8017200 <RadioSetTxConfig+0x200>)
 801713c:	2201      	movs	r2, #1
 801713e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017140:	4b2f      	ldr	r3, [pc, #188]	; (8017200 <RadioSetTxConfig+0x200>)
 8017142:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017146:	2b05      	cmp	r3, #5
 8017148:	d004      	beq.n	8017154 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801714a:	4b2d      	ldr	r3, [pc, #180]	; (8017200 <RadioSetTxConfig+0x200>)
 801714c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017150:	2b06      	cmp	r3, #6
 8017152:	d10a      	bne.n	801716a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017154:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017156:	2b0b      	cmp	r3, #11
 8017158:	d803      	bhi.n	8017162 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801715a:	4b29      	ldr	r3, [pc, #164]	; (8017200 <RadioSetTxConfig+0x200>)
 801715c:	220c      	movs	r2, #12
 801715e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017160:	e006      	b.n	8017170 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017162:	4a27      	ldr	r2, [pc, #156]	; (8017200 <RadioSetTxConfig+0x200>)
 8017164:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017166:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017168:	e002      	b.n	8017170 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801716a:	4a25      	ldr	r2, [pc, #148]	; (8017200 <RadioSetTxConfig+0x200>)
 801716c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801716e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017170:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017174:	4b22      	ldr	r3, [pc, #136]	; (8017200 <RadioSetTxConfig+0x200>)
 8017176:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017178:	4b26      	ldr	r3, [pc, #152]	; (8017214 <RadioSetTxConfig+0x214>)
 801717a:	781a      	ldrb	r2, [r3, #0]
 801717c:	4b20      	ldr	r3, [pc, #128]	; (8017200 <RadioSetTxConfig+0x200>)
 801717e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017180:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017184:	4b1e      	ldr	r3, [pc, #120]	; (8017200 <RadioSetTxConfig+0x200>)
 8017186:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801718a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801718e:	4b1c      	ldr	r3, [pc, #112]	; (8017200 <RadioSetTxConfig+0x200>)
 8017190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8017194:	f000 fab3 	bl	80176fe <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017198:	2001      	movs	r0, #1
 801719a:	f7ff fc5d 	bl	8016a58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801719e:	4819      	ldr	r0, [pc, #100]	; (8017204 <RadioSetTxConfig+0x204>)
 80171a0:	f002 f876 	bl	8019290 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80171a4:	4818      	ldr	r0, [pc, #96]	; (8017208 <RadioSetTxConfig+0x208>)
 80171a6:	f002 f945 	bl	8019434 <SUBGRF_SetPacketParams>
            break;
 80171aa:	e012      	b.n	80171d2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80171ac:	2004      	movs	r0, #4
 80171ae:	f7ff fc53 	bl	8016a58 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80171b2:	4b13      	ldr	r3, [pc, #76]	; (8017200 <RadioSetTxConfig+0x200>)
 80171b4:	2202      	movs	r2, #2
 80171b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80171ba:	4a11      	ldr	r2, [pc, #68]	; (8017200 <RadioSetTxConfig+0x200>)
 80171bc:	6a3b      	ldr	r3, [r7, #32]
 80171be:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80171c0:	4b0f      	ldr	r3, [pc, #60]	; (8017200 <RadioSetTxConfig+0x200>)
 80171c2:	2216      	movs	r2, #22
 80171c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80171c8:	480e      	ldr	r0, [pc, #56]	; (8017204 <RadioSetTxConfig+0x204>)
 80171ca:	f002 f861 	bl	8019290 <SUBGRF_SetModulationParams>
            break;
 80171ce:	e000      	b.n	80171d2 <RadioSetTxConfig+0x1d2>
            break;
 80171d0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80171d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80171d6:	4618      	mov	r0, r3
 80171d8:	f002 fb90 	bl	80198fc <SUBGRF_SetRfTxPower>
 80171dc:	4603      	mov	r3, r0
 80171de:	461a      	mov	r2, r3
 80171e0:	4b07      	ldr	r3, [pc, #28]	; (8017200 <RadioSetTxConfig+0x200>)
 80171e2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80171e6:	4b06      	ldr	r3, [pc, #24]	; (8017200 <RadioSetTxConfig+0x200>)
 80171e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80171ec:	4618      	mov	r0, r3
 80171ee:	f002 fd54 	bl	8019c9a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80171f2:	4a03      	ldr	r2, [pc, #12]	; (8017200 <RadioSetTxConfig+0x200>)
 80171f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171f6:	6053      	str	r3, [r2, #4]
}
 80171f8:	bf00      	nop
 80171fa:	3718      	adds	r7, #24
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}
 8017200:	20001be8 	.word	0x20001be8
 8017204:	20001c20 	.word	0x20001c20
 8017208:	20001bf6 	.word	0x20001bf6
 801720c:	0801be54 	.word	0x0801be54
 8017210:	0801c430 	.word	0x0801c430
 8017214:	20000150 	.word	0x20000150

08017218 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017218:	b480      	push	{r7}
 801721a:	b083      	sub	sp, #12
 801721c:	af00      	add	r7, sp, #0
 801721e:	6078      	str	r0, [r7, #4]
    return true;
 8017220:	2301      	movs	r3, #1
}
 8017222:	4618      	mov	r0, r3
 8017224:	370c      	adds	r7, #12
 8017226:	46bd      	mov	sp, r7
 8017228:	bc80      	pop	{r7}
 801722a:	4770      	bx	lr

0801722c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801722c:	b480      	push	{r7}
 801722e:	b085      	sub	sp, #20
 8017230:	af00      	add	r7, sp, #0
 8017232:	4603      	mov	r3, r0
 8017234:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017236:	2300      	movs	r3, #0
 8017238:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801723a:	79fb      	ldrb	r3, [r7, #7]
 801723c:	2b0a      	cmp	r3, #10
 801723e:	d83e      	bhi.n	80172be <RadioGetLoRaBandwidthInHz+0x92>
 8017240:	a201      	add	r2, pc, #4	; (adr r2, 8017248 <RadioGetLoRaBandwidthInHz+0x1c>)
 8017242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017246:	bf00      	nop
 8017248:	08017275 	.word	0x08017275
 801724c:	08017285 	.word	0x08017285
 8017250:	08017295 	.word	0x08017295
 8017254:	080172a5 	.word	0x080172a5
 8017258:	080172ad 	.word	0x080172ad
 801725c:	080172b3 	.word	0x080172b3
 8017260:	080172b9 	.word	0x080172b9
 8017264:	080172bf 	.word	0x080172bf
 8017268:	0801727d 	.word	0x0801727d
 801726c:	0801728d 	.word	0x0801728d
 8017270:	0801729d 	.word	0x0801729d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017274:	f641 6384 	movw	r3, #7812	; 0x1e84
 8017278:	60fb      	str	r3, [r7, #12]
        break;
 801727a:	e020      	b.n	80172be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801727c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8017280:	60fb      	str	r3, [r7, #12]
        break;
 8017282:	e01c      	b.n	80172be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017284:	f643 5309 	movw	r3, #15625	; 0x3d09
 8017288:	60fb      	str	r3, [r7, #12]
        break;
 801728a:	e018      	b.n	80172be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801728c:	f245 1361 	movw	r3, #20833	; 0x5161
 8017290:	60fb      	str	r3, [r7, #12]
        break;
 8017292:	e014      	b.n	80172be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017294:	f647 2312 	movw	r3, #31250	; 0x7a12
 8017298:	60fb      	str	r3, [r7, #12]
        break;
 801729a:	e010      	b.n	80172be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801729c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80172a0:	60fb      	str	r3, [r7, #12]
        break;
 80172a2:	e00c      	b.n	80172be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80172a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80172a8:	60fb      	str	r3, [r7, #12]
        break;
 80172aa:	e008      	b.n	80172be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80172ac:	4b07      	ldr	r3, [pc, #28]	; (80172cc <RadioGetLoRaBandwidthInHz+0xa0>)
 80172ae:	60fb      	str	r3, [r7, #12]
        break;
 80172b0:	e005      	b.n	80172be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80172b2:	4b07      	ldr	r3, [pc, #28]	; (80172d0 <RadioGetLoRaBandwidthInHz+0xa4>)
 80172b4:	60fb      	str	r3, [r7, #12]
        break;
 80172b6:	e002      	b.n	80172be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80172b8:	4b06      	ldr	r3, [pc, #24]	; (80172d4 <RadioGetLoRaBandwidthInHz+0xa8>)
 80172ba:	60fb      	str	r3, [r7, #12]
        break;
 80172bc:	bf00      	nop
    }

    return bandwidthInHz;
 80172be:	68fb      	ldr	r3, [r7, #12]
}
 80172c0:	4618      	mov	r0, r3
 80172c2:	3714      	adds	r7, #20
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bc80      	pop	{r7}
 80172c8:	4770      	bx	lr
 80172ca:	bf00      	nop
 80172cc:	0001e848 	.word	0x0001e848
 80172d0:	0003d090 	.word	0x0003d090
 80172d4:	0007a120 	.word	0x0007a120

080172d8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80172d8:	b480      	push	{r7}
 80172da:	b083      	sub	sp, #12
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
 80172e0:	4608      	mov	r0, r1
 80172e2:	4611      	mov	r1, r2
 80172e4:	461a      	mov	r2, r3
 80172e6:	4603      	mov	r3, r0
 80172e8:	70fb      	strb	r3, [r7, #3]
 80172ea:	460b      	mov	r3, r1
 80172ec:	803b      	strh	r3, [r7, #0]
 80172ee:	4613      	mov	r3, r2
 80172f0:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80172f2:	883b      	ldrh	r3, [r7, #0]
 80172f4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80172f6:	78ba      	ldrb	r2, [r7, #2]
 80172f8:	f082 0201 	eor.w	r2, r2, #1
 80172fc:	b2d2      	uxtb	r2, r2
 80172fe:	2a00      	cmp	r2, #0
 8017300:	d001      	beq.n	8017306 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017302:	2208      	movs	r2, #8
 8017304:	e000      	b.n	8017308 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017306:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017308:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801730a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801730e:	7c3b      	ldrb	r3, [r7, #16]
 8017310:	7d39      	ldrb	r1, [r7, #20]
 8017312:	2900      	cmp	r1, #0
 8017314:	d001      	beq.n	801731a <RadioGetGfskTimeOnAirNumerator+0x42>
 8017316:	2102      	movs	r1, #2
 8017318:	e000      	b.n	801731c <RadioGetGfskTimeOnAirNumerator+0x44>
 801731a:	2100      	movs	r1, #0
 801731c:	440b      	add	r3, r1
 801731e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017320:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8017322:	4618      	mov	r0, r3
 8017324:	370c      	adds	r7, #12
 8017326:	46bd      	mov	sp, r7
 8017328:	bc80      	pop	{r7}
 801732a:	4770      	bx	lr

0801732c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801732c:	b480      	push	{r7}
 801732e:	b08b      	sub	sp, #44	; 0x2c
 8017330:	af00      	add	r7, sp, #0
 8017332:	60f8      	str	r0, [r7, #12]
 8017334:	60b9      	str	r1, [r7, #8]
 8017336:	4611      	mov	r1, r2
 8017338:	461a      	mov	r2, r3
 801733a:	460b      	mov	r3, r1
 801733c:	71fb      	strb	r3, [r7, #7]
 801733e:	4613      	mov	r3, r2
 8017340:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017342:	79fb      	ldrb	r3, [r7, #7]
 8017344:	3304      	adds	r3, #4
 8017346:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017348:	2300      	movs	r3, #0
 801734a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801734e:	68bb      	ldr	r3, [r7, #8]
 8017350:	2b05      	cmp	r3, #5
 8017352:	d002      	beq.n	801735a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017354:	68bb      	ldr	r3, [r7, #8]
 8017356:	2b06      	cmp	r3, #6
 8017358:	d104      	bne.n	8017364 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801735a:	88bb      	ldrh	r3, [r7, #4]
 801735c:	2b0b      	cmp	r3, #11
 801735e:	d801      	bhi.n	8017364 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017360:	230c      	movs	r3, #12
 8017362:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d105      	bne.n	8017376 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801736a:	68bb      	ldr	r3, [r7, #8]
 801736c:	2b0b      	cmp	r3, #11
 801736e:	d008      	beq.n	8017382 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017370:	68bb      	ldr	r3, [r7, #8]
 8017372:	2b0c      	cmp	r3, #12
 8017374:	d005      	beq.n	8017382 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	2b01      	cmp	r3, #1
 801737a:	d105      	bne.n	8017388 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	2b0c      	cmp	r3, #12
 8017380:	d102      	bne.n	8017388 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017382:	2301      	movs	r3, #1
 8017384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017388:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801738c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801738e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017392:	2a00      	cmp	r2, #0
 8017394:	d001      	beq.n	801739a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8017396:	2210      	movs	r2, #16
 8017398:	e000      	b.n	801739c <RadioGetLoRaTimeOnAirNumerator+0x70>
 801739a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801739c:	4413      	add	r3, r2
 801739e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80173a0:	68bb      	ldr	r3, [r7, #8]
 80173a2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80173a4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80173a6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80173aa:	2a00      	cmp	r2, #0
 80173ac:	d001      	beq.n	80173b2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80173ae:	2200      	movs	r2, #0
 80173b0:	e000      	b.n	80173b4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80173b2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80173b4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80173b6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80173b8:	68bb      	ldr	r3, [r7, #8]
 80173ba:	2b06      	cmp	r3, #6
 80173bc:	d803      	bhi.n	80173c6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80173be:	68bb      	ldr	r3, [r7, #8]
 80173c0:	009b      	lsls	r3, r3, #2
 80173c2:	623b      	str	r3, [r7, #32]
 80173c4:	e00e      	b.n	80173e4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80173c6:	69fb      	ldr	r3, [r7, #28]
 80173c8:	3308      	adds	r3, #8
 80173ca:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80173cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d004      	beq.n	80173de <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80173d4:	68bb      	ldr	r3, [r7, #8]
 80173d6:	3b02      	subs	r3, #2
 80173d8:	009b      	lsls	r3, r3, #2
 80173da:	623b      	str	r3, [r7, #32]
 80173dc:	e002      	b.n	80173e4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80173de:	68bb      	ldr	r3, [r7, #8]
 80173e0:	009b      	lsls	r3, r3, #2
 80173e2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80173e4:	69fb      	ldr	r3, [r7, #28]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	da01      	bge.n	80173ee <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80173ea:	2300      	movs	r3, #0
 80173ec:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80173ee:	69fa      	ldr	r2, [r7, #28]
 80173f0:	6a3b      	ldr	r3, [r7, #32]
 80173f2:	4413      	add	r3, r2
 80173f4:	1e5a      	subs	r2, r3, #1
 80173f6:	6a3b      	ldr	r3, [r7, #32]
 80173f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80173fc:	697a      	ldr	r2, [r7, #20]
 80173fe:	fb03 f202 	mul.w	r2, r3, r2
 8017402:	88bb      	ldrh	r3, [r7, #4]
 8017404:	4413      	add	r3, r2
    int32_t intermediate =
 8017406:	330c      	adds	r3, #12
 8017408:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801740a:	68bb      	ldr	r3, [r7, #8]
 801740c:	2b06      	cmp	r3, #6
 801740e:	d802      	bhi.n	8017416 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017410:	69bb      	ldr	r3, [r7, #24]
 8017412:	3302      	adds	r3, #2
 8017414:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017416:	69bb      	ldr	r3, [r7, #24]
 8017418:	009b      	lsls	r3, r3, #2
 801741a:	1c5a      	adds	r2, r3, #1
 801741c:	68bb      	ldr	r3, [r7, #8]
 801741e:	3b02      	subs	r3, #2
 8017420:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017424:	4618      	mov	r0, r3
 8017426:	372c      	adds	r7, #44	; 0x2c
 8017428:	46bd      	mov	sp, r7
 801742a:	bc80      	pop	{r7}
 801742c:	4770      	bx	lr
	...

08017430 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b08a      	sub	sp, #40	; 0x28
 8017434:	af04      	add	r7, sp, #16
 8017436:	60b9      	str	r1, [r7, #8]
 8017438:	607a      	str	r2, [r7, #4]
 801743a:	461a      	mov	r2, r3
 801743c:	4603      	mov	r3, r0
 801743e:	73fb      	strb	r3, [r7, #15]
 8017440:	4613      	mov	r3, r2
 8017442:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017444:	2300      	movs	r3, #0
 8017446:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017448:	2301      	movs	r3, #1
 801744a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801744c:	7bfb      	ldrb	r3, [r7, #15]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d002      	beq.n	8017458 <RadioTimeOnAir+0x28>
 8017452:	2b01      	cmp	r3, #1
 8017454:	d017      	beq.n	8017486 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017456:	e035      	b.n	80174c4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017458:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801745c:	8c3a      	ldrh	r2, [r7, #32]
 801745e:	7bb9      	ldrb	r1, [r7, #14]
 8017460:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017464:	9301      	str	r3, [sp, #4]
 8017466:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801746a:	9300      	str	r3, [sp, #0]
 801746c:	4603      	mov	r3, r0
 801746e:	6878      	ldr	r0, [r7, #4]
 8017470:	f7ff ff32 	bl	80172d8 <RadioGetGfskTimeOnAirNumerator>
 8017474:	4603      	mov	r3, r0
 8017476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801747a:	fb02 f303 	mul.w	r3, r2, r3
 801747e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	613b      	str	r3, [r7, #16]
        break;
 8017484:	e01e      	b.n	80174c4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017486:	8c39      	ldrh	r1, [r7, #32]
 8017488:	7bba      	ldrb	r2, [r7, #14]
 801748a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801748e:	9302      	str	r3, [sp, #8]
 8017490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017494:	9301      	str	r3, [sp, #4]
 8017496:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801749a:	9300      	str	r3, [sp, #0]
 801749c:	460b      	mov	r3, r1
 801749e:	6879      	ldr	r1, [r7, #4]
 80174a0:	68b8      	ldr	r0, [r7, #8]
 80174a2:	f7ff ff43 	bl	801732c <RadioGetLoRaTimeOnAirNumerator>
 80174a6:	4603      	mov	r3, r0
 80174a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80174ac:	fb02 f303 	mul.w	r3, r2, r3
 80174b0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80174b2:	4a0a      	ldr	r2, [pc, #40]	; (80174dc <RadioTimeOnAir+0xac>)
 80174b4:	68bb      	ldr	r3, [r7, #8]
 80174b6:	4413      	add	r3, r2
 80174b8:	781b      	ldrb	r3, [r3, #0]
 80174ba:	4618      	mov	r0, r3
 80174bc:	f7ff feb6 	bl	801722c <RadioGetLoRaBandwidthInHz>
 80174c0:	6138      	str	r0, [r7, #16]
        break;
 80174c2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80174c4:	697a      	ldr	r2, [r7, #20]
 80174c6:	693b      	ldr	r3, [r7, #16]
 80174c8:	4413      	add	r3, r2
 80174ca:	1e5a      	subs	r2, r3, #1
 80174cc:	693b      	ldr	r3, [r7, #16]
 80174ce:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80174d2:	4618      	mov	r0, r3
 80174d4:	3718      	adds	r7, #24
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd80      	pop	{r7, pc}
 80174da:	bf00      	nop
 80174dc:	0801c430 	.word	0x0801c430

080174e0 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b084      	sub	sp, #16
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
 80174e8:	460b      	mov	r3, r1
 80174ea:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80174ec:	2300      	movs	r3, #0
 80174ee:	2200      	movs	r2, #0
 80174f0:	f240 2101 	movw	r1, #513	; 0x201
 80174f4:	f240 2001 	movw	r0, #513	; 0x201
 80174f8:	f001 fd34 	bl	8018f64 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80174fc:	4b71      	ldr	r3, [pc, #452]	; (80176c4 <RadioSend+0x1e4>)
 80174fe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017502:	2101      	movs	r1, #1
 8017504:	4618      	mov	r0, r3
 8017506:	f002 f9d1 	bl	80198ac <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801750a:	4b6e      	ldr	r3, [pc, #440]	; (80176c4 <RadioSend+0x1e4>)
 801750c:	781b      	ldrb	r3, [r3, #0]
 801750e:	2b01      	cmp	r3, #1
 8017510:	d112      	bne.n	8017538 <RadioSend+0x58>
 8017512:	4b6c      	ldr	r3, [pc, #432]	; (80176c4 <RadioSend+0x1e4>)
 8017514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017518:	2b06      	cmp	r3, #6
 801751a:	d10d      	bne.n	8017538 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801751c:	f640 0089 	movw	r0, #2185	; 0x889
 8017520:	f002 f8e4 	bl	80196ec <SUBGRF_ReadRegister>
 8017524:	4603      	mov	r3, r0
 8017526:	f023 0304 	bic.w	r3, r3, #4
 801752a:	b2db      	uxtb	r3, r3
 801752c:	4619      	mov	r1, r3
 801752e:	f640 0089 	movw	r0, #2185	; 0x889
 8017532:	f002 f8c7 	bl	80196c4 <SUBGRF_WriteRegister>
 8017536:	e00c      	b.n	8017552 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017538:	f640 0089 	movw	r0, #2185	; 0x889
 801753c:	f002 f8d6 	bl	80196ec <SUBGRF_ReadRegister>
 8017540:	4603      	mov	r3, r0
 8017542:	f043 0304 	orr.w	r3, r3, #4
 8017546:	b2db      	uxtb	r3, r3
 8017548:	4619      	mov	r1, r3
 801754a:	f640 0089 	movw	r0, #2185	; 0x889
 801754e:	f002 f8b9 	bl	80196c4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8017552:	4b5c      	ldr	r3, [pc, #368]	; (80176c4 <RadioSend+0x1e4>)
 8017554:	781b      	ldrb	r3, [r3, #0]
 8017556:	2b04      	cmp	r3, #4
 8017558:	f200 80a7 	bhi.w	80176aa <RadioSend+0x1ca>
 801755c:	a201      	add	r2, pc, #4	; (adr r2, 8017564 <RadioSend+0x84>)
 801755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017562:	bf00      	nop
 8017564:	08017593 	.word	0x08017593
 8017568:	08017579 	.word	0x08017579
 801756c:	08017593 	.word	0x08017593
 8017570:	080175f3 	.word	0x080175f3
 8017574:	08017613 	.word	0x08017613
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017578:	4a52      	ldr	r2, [pc, #328]	; (80176c4 <RadioSend+0x1e4>)
 801757a:	78fb      	ldrb	r3, [r7, #3]
 801757c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801757e:	4852      	ldr	r0, [pc, #328]	; (80176c8 <RadioSend+0x1e8>)
 8017580:	f001 ff58 	bl	8019434 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017584:	78fb      	ldrb	r3, [r7, #3]
 8017586:	2200      	movs	r2, #0
 8017588:	4619      	mov	r1, r3
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f001 fa0c 	bl	80189a8 <SUBGRF_SendPayload>
            break;
 8017590:	e08c      	b.n	80176ac <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017592:	f002 fb74 	bl	8019c7e <RFW_Is_Init>
 8017596:	4603      	mov	r3, r0
 8017598:	2b01      	cmp	r3, #1
 801759a:	d11d      	bne.n	80175d8 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801759c:	f107 020d 	add.w	r2, r7, #13
 80175a0:	78fb      	ldrb	r3, [r7, #3]
 80175a2:	4619      	mov	r1, r3
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f002 fb82 	bl	8019cae <RFW_TransmitInit>
 80175aa:	4603      	mov	r3, r0
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d10c      	bne.n	80175ca <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80175b0:	7b7a      	ldrb	r2, [r7, #13]
 80175b2:	4b44      	ldr	r3, [pc, #272]	; (80176c4 <RadioSend+0x1e4>)
 80175b4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80175b6:	4844      	ldr	r0, [pc, #272]	; (80176c8 <RadioSend+0x1e8>)
 80175b8:	f001 ff3c 	bl	8019434 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80175bc:	7b7b      	ldrb	r3, [r7, #13]
 80175be:	2200      	movs	r2, #0
 80175c0:	4619      	mov	r1, r3
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f001 f9f0 	bl	80189a8 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80175c8:	e070      	b.n	80176ac <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80175ca:	4b40      	ldr	r3, [pc, #256]	; (80176cc <RadioSend+0x1ec>)
 80175cc:	2201      	movs	r2, #1
 80175ce:	2100      	movs	r1, #0
 80175d0:	2002      	movs	r0, #2
 80175d2:	f003 fc91 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
 80175d6:	e072      	b.n	80176be <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80175d8:	4a3a      	ldr	r2, [pc, #232]	; (80176c4 <RadioSend+0x1e4>)
 80175da:	78fb      	ldrb	r3, [r7, #3]
 80175dc:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80175de:	483a      	ldr	r0, [pc, #232]	; (80176c8 <RadioSend+0x1e8>)
 80175e0:	f001 ff28 	bl	8019434 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80175e4:	78fb      	ldrb	r3, [r7, #3]
 80175e6:	2200      	movs	r2, #0
 80175e8:	4619      	mov	r1, r3
 80175ea:	6878      	ldr	r0, [r7, #4]
 80175ec:	f001 f9dc 	bl	80189a8 <SUBGRF_SendPayload>
            break;
 80175f0:	e05c      	b.n	80176ac <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80175f2:	4b34      	ldr	r3, [pc, #208]	; (80176c4 <RadioSend+0x1e4>)
 80175f4:	2202      	movs	r2, #2
 80175f6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80175f8:	4a32      	ldr	r2, [pc, #200]	; (80176c4 <RadioSend+0x1e4>)
 80175fa:	78fb      	ldrb	r3, [r7, #3]
 80175fc:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80175fe:	4832      	ldr	r0, [pc, #200]	; (80176c8 <RadioSend+0x1e8>)
 8017600:	f001 ff18 	bl	8019434 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017604:	78fb      	ldrb	r3, [r7, #3]
 8017606:	2200      	movs	r2, #0
 8017608:	4619      	mov	r1, r3
 801760a:	6878      	ldr	r0, [r7, #4]
 801760c:	f001 f9cc 	bl	80189a8 <SUBGRF_SendPayload>
            break;
 8017610:	e04c      	b.n	80176ac <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017612:	78fb      	ldrb	r3, [r7, #3]
 8017614:	461a      	mov	r2, r3
 8017616:	6879      	ldr	r1, [r7, #4]
 8017618:	482d      	ldr	r0, [pc, #180]	; (80176d0 <RadioSend+0x1f0>)
 801761a:	f000 fcbc 	bl	8017f96 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801761e:	4b29      	ldr	r3, [pc, #164]	; (80176c4 <RadioSend+0x1e4>)
 8017620:	2202      	movs	r2, #2
 8017622:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017624:	78fb      	ldrb	r3, [r7, #3]
 8017626:	3301      	adds	r3, #1
 8017628:	b2da      	uxtb	r2, r3
 801762a:	4b26      	ldr	r3, [pc, #152]	; (80176c4 <RadioSend+0x1e4>)
 801762c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801762e:	4826      	ldr	r0, [pc, #152]	; (80176c8 <RadioSend+0x1e8>)
 8017630:	f001 ff00 	bl	8019434 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8017634:	2100      	movs	r1, #0
 8017636:	20f1      	movs	r0, #241	; 0xf1
 8017638:	f000 f95d 	bl	80178f6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801763c:	2100      	movs	r1, #0
 801763e:	20f0      	movs	r0, #240	; 0xf0
 8017640:	f000 f959 	bl	80178f6 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017644:	4b1f      	ldr	r3, [pc, #124]	; (80176c4 <RadioSend+0x1e4>)
 8017646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017648:	2b64      	cmp	r3, #100	; 0x64
 801764a:	d108      	bne.n	801765e <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801764c:	2170      	movs	r1, #112	; 0x70
 801764e:	20f3      	movs	r0, #243	; 0xf3
 8017650:	f000 f951 	bl	80178f6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8017654:	211d      	movs	r1, #29
 8017656:	20f2      	movs	r0, #242	; 0xf2
 8017658:	f000 f94d 	bl	80178f6 <RadioWrite>
 801765c:	e007      	b.n	801766e <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801765e:	21e1      	movs	r1, #225	; 0xe1
 8017660:	20f3      	movs	r0, #243	; 0xf3
 8017662:	f000 f948 	bl	80178f6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8017666:	2104      	movs	r1, #4
 8017668:	20f2      	movs	r0, #242	; 0xf2
 801766a:	f000 f944 	bl	80178f6 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801766e:	78fb      	ldrb	r3, [r7, #3]
 8017670:	b29b      	uxth	r3, r3
 8017672:	00db      	lsls	r3, r3, #3
 8017674:	b29b      	uxth	r3, r3
 8017676:	3302      	adds	r3, #2
 8017678:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801767a:	89fb      	ldrh	r3, [r7, #14]
 801767c:	0a1b      	lsrs	r3, r3, #8
 801767e:	b29b      	uxth	r3, r3
 8017680:	b2db      	uxtb	r3, r3
 8017682:	4619      	mov	r1, r3
 8017684:	20f4      	movs	r0, #244	; 0xf4
 8017686:	f000 f936 	bl	80178f6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801768a:	89fb      	ldrh	r3, [r7, #14]
 801768c:	b2db      	uxtb	r3, r3
 801768e:	4619      	mov	r1, r3
 8017690:	20f5      	movs	r0, #245	; 0xf5
 8017692:	f000 f930 	bl	80178f6 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8017696:	78fb      	ldrb	r3, [r7, #3]
 8017698:	3301      	adds	r3, #1
 801769a:	b2db      	uxtb	r3, r3
 801769c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80176a0:	4619      	mov	r1, r3
 80176a2:	480b      	ldr	r0, [pc, #44]	; (80176d0 <RadioSend+0x1f0>)
 80176a4:	f001 f980 	bl	80189a8 <SUBGRF_SendPayload>
            break;
 80176a8:	e000      	b.n	80176ac <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80176aa:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80176ac:	4b05      	ldr	r3, [pc, #20]	; (80176c4 <RadioSend+0x1e4>)
 80176ae:	685b      	ldr	r3, [r3, #4]
 80176b0:	4619      	mov	r1, r3
 80176b2:	4808      	ldr	r0, [pc, #32]	; (80176d4 <RadioSend+0x1f4>)
 80176b4:	f003 fa86 	bl	801abc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80176b8:	4806      	ldr	r0, [pc, #24]	; (80176d4 <RadioSend+0x1f4>)
 80176ba:	f003 f9a5 	bl	801aa08 <UTIL_TIMER_Start>
}
 80176be:	3710      	adds	r7, #16
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}
 80176c4:	20001be8 	.word	0x20001be8
 80176c8:	20001bf6 	.word	0x20001bf6
 80176cc:	0801be5c 	.word	0x0801be5c
 80176d0:	20001ae4 	.word	0x20001ae4
 80176d4:	20001c44 	.word	0x20001c44

080176d8 <RadioSleep>:

static void RadioSleep( void )
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b082      	sub	sp, #8
 80176dc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80176de:	2300      	movs	r3, #0
 80176e0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80176e2:	793b      	ldrb	r3, [r7, #4]
 80176e4:	f043 0304 	orr.w	r3, r3, #4
 80176e8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80176ea:	7938      	ldrb	r0, [r7, #4]
 80176ec:	f001 fa38 	bl	8018b60 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80176f0:	2002      	movs	r0, #2
 80176f2:	f7ea fba9 	bl	8001e48 <HAL_Delay>
}
 80176f6:	bf00      	nop
 80176f8:	3708      	adds	r7, #8
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}

080176fe <RadioStandby>:

static void RadioStandby( void )
{
 80176fe:	b580      	push	{r7, lr}
 8017700:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8017702:	2000      	movs	r0, #0
 8017704:	f001 fa5e 	bl	8018bc4 <SUBGRF_SetStandby>
}
 8017708:	bf00      	nop
 801770a:	bd80      	pop	{r7, pc}

0801770c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b082      	sub	sp, #8
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8017714:	f002 fab3 	bl	8019c7e <RFW_Is_Init>
 8017718:	4603      	mov	r3, r0
 801771a:	2b01      	cmp	r3, #1
 801771c:	d102      	bne.n	8017724 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801771e:	f002 fad6 	bl	8019cce <RFW_ReceiveInit>
 8017722:	e007      	b.n	8017734 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017724:	2300      	movs	r3, #0
 8017726:	2200      	movs	r2, #0
 8017728:	f240 2162 	movw	r1, #610	; 0x262
 801772c:	f240 2062 	movw	r0, #610	; 0x262
 8017730:	f001 fc18 	bl	8018f64 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d006      	beq.n	8017748 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801773a:	6879      	ldr	r1, [r7, #4]
 801773c:	4811      	ldr	r0, [pc, #68]	; (8017784 <RadioRx+0x78>)
 801773e:	f003 fa41 	bl	801abc4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017742:	4810      	ldr	r0, [pc, #64]	; (8017784 <RadioRx+0x78>)
 8017744:	f003 f960 	bl	801aa08 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017748:	4b0f      	ldr	r3, [pc, #60]	; (8017788 <RadioRx+0x7c>)
 801774a:	2200      	movs	r2, #0
 801774c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801774e:	4b0e      	ldr	r3, [pc, #56]	; (8017788 <RadioRx+0x7c>)
 8017750:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017754:	2100      	movs	r1, #0
 8017756:	4618      	mov	r0, r3
 8017758:	f002 f8a8 	bl	80198ac <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801775c:	4b0a      	ldr	r3, [pc, #40]	; (8017788 <RadioRx+0x7c>)
 801775e:	785b      	ldrb	r3, [r3, #1]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d004      	beq.n	801776e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017764:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017768:	f001 fa68 	bl	8018c3c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801776c:	e005      	b.n	801777a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801776e:	4b06      	ldr	r3, [pc, #24]	; (8017788 <RadioRx+0x7c>)
 8017770:	689b      	ldr	r3, [r3, #8]
 8017772:	019b      	lsls	r3, r3, #6
 8017774:	4618      	mov	r0, r3
 8017776:	f001 fa61 	bl	8018c3c <SUBGRF_SetRx>
}
 801777a:	bf00      	nop
 801777c:	3708      	adds	r7, #8
 801777e:	46bd      	mov	sp, r7
 8017780:	bd80      	pop	{r7, pc}
 8017782:	bf00      	nop
 8017784:	20001c5c 	.word	0x20001c5c
 8017788:	20001be8 	.word	0x20001be8

0801778c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b082      	sub	sp, #8
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8017794:	f002 fa73 	bl	8019c7e <RFW_Is_Init>
 8017798:	4603      	mov	r3, r0
 801779a:	2b01      	cmp	r3, #1
 801779c:	d102      	bne.n	80177a4 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801779e:	f002 fa96 	bl	8019cce <RFW_ReceiveInit>
 80177a2:	e007      	b.n	80177b4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80177a4:	2300      	movs	r3, #0
 80177a6:	2200      	movs	r2, #0
 80177a8:	f240 2162 	movw	r1, #610	; 0x262
 80177ac:	f240 2062 	movw	r0, #610	; 0x262
 80177b0:	f001 fbd8 	bl	8018f64 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d006      	beq.n	80177c8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80177ba:	6879      	ldr	r1, [r7, #4]
 80177bc:	4811      	ldr	r0, [pc, #68]	; (8017804 <RadioRxBoosted+0x78>)
 80177be:	f003 fa01 	bl	801abc4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80177c2:	4810      	ldr	r0, [pc, #64]	; (8017804 <RadioRxBoosted+0x78>)
 80177c4:	f003 f920 	bl	801aa08 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80177c8:	4b0f      	ldr	r3, [pc, #60]	; (8017808 <RadioRxBoosted+0x7c>)
 80177ca:	2200      	movs	r2, #0
 80177cc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80177ce:	4b0e      	ldr	r3, [pc, #56]	; (8017808 <RadioRxBoosted+0x7c>)
 80177d0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80177d4:	2100      	movs	r1, #0
 80177d6:	4618      	mov	r0, r3
 80177d8:	f002 f868 	bl	80198ac <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80177dc:	4b0a      	ldr	r3, [pc, #40]	; (8017808 <RadioRxBoosted+0x7c>)
 80177de:	785b      	ldrb	r3, [r3, #1]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d004      	beq.n	80177ee <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80177e4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80177e8:	f001 fa48 	bl	8018c7c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80177ec:	e005      	b.n	80177fa <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80177ee:	4b06      	ldr	r3, [pc, #24]	; (8017808 <RadioRxBoosted+0x7c>)
 80177f0:	689b      	ldr	r3, [r3, #8]
 80177f2:	019b      	lsls	r3, r3, #6
 80177f4:	4618      	mov	r0, r3
 80177f6:	f001 fa41 	bl	8018c7c <SUBGRF_SetRxBoosted>
}
 80177fa:	bf00      	nop
 80177fc:	3708      	adds	r7, #8
 80177fe:	46bd      	mov	sp, r7
 8017800:	bd80      	pop	{r7, pc}
 8017802:	bf00      	nop
 8017804:	20001c5c 	.word	0x20001c5c
 8017808:	20001be8 	.word	0x20001be8

0801780c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b082      	sub	sp, #8
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
 8017814:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	005a      	lsls	r2, r3, #1
 801781a:	683b      	ldr	r3, [r7, #0]
 801781c:	4413      	add	r3, r2
 801781e:	4a0c      	ldr	r2, [pc, #48]	; (8017850 <RadioSetRxDutyCycle+0x44>)
 8017820:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017822:	2300      	movs	r3, #0
 8017824:	2200      	movs	r2, #0
 8017826:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801782a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801782e:	f001 fb99 	bl	8018f64 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017832:	4b07      	ldr	r3, [pc, #28]	; (8017850 <RadioSetRxDutyCycle+0x44>)
 8017834:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017838:	2100      	movs	r1, #0
 801783a:	4618      	mov	r0, r3
 801783c:	f002 f836 	bl	80198ac <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017840:	6839      	ldr	r1, [r7, #0]
 8017842:	6878      	ldr	r0, [r7, #4]
 8017844:	f001 fa3e 	bl	8018cc4 <SUBGRF_SetRxDutyCycle>
}
 8017848:	bf00      	nop
 801784a:	3708      	adds	r7, #8
 801784c:	46bd      	mov	sp, r7
 801784e:	bd80      	pop	{r7, pc}
 8017850:	20001be8 	.word	0x20001be8

08017854 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017854:	b580      	push	{r7, lr}
 8017856:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017858:	4b09      	ldr	r3, [pc, #36]	; (8017880 <RadioStartCad+0x2c>)
 801785a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801785e:	2100      	movs	r1, #0
 8017860:	4618      	mov	r0, r3
 8017862:	f002 f823 	bl	80198ac <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017866:	2300      	movs	r3, #0
 8017868:	2200      	movs	r2, #0
 801786a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801786e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8017872:	f001 fb77 	bl	8018f64 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017876:	f001 fa51 	bl	8018d1c <SUBGRF_SetCad>
}
 801787a:	bf00      	nop
 801787c:	bd80      	pop	{r7, pc}
 801787e:	bf00      	nop
 8017880:	20001be8 	.word	0x20001be8

08017884 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b084      	sub	sp, #16
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
 801788c:	460b      	mov	r3, r1
 801788e:	70fb      	strb	r3, [r7, #3]
 8017890:	4613      	mov	r3, r2
 8017892:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017894:	883b      	ldrh	r3, [r7, #0]
 8017896:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801789a:	fb02 f303 	mul.w	r3, r2, r3
 801789e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80178a0:	6878      	ldr	r0, [r7, #4]
 80178a2:	f001 fbbb 	bl	801901c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80178a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80178aa:	4618      	mov	r0, r3
 80178ac:	f002 f826 	bl	80198fc <SUBGRF_SetRfTxPower>
 80178b0:	4603      	mov	r3, r0
 80178b2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80178b4:	7afb      	ldrb	r3, [r7, #11]
 80178b6:	2101      	movs	r1, #1
 80178b8:	4618      	mov	r0, r3
 80178ba:	f001 fff7 	bl	80198ac <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80178be:	f001 fa3b 	bl	8018d38 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80178c2:	68f9      	ldr	r1, [r7, #12]
 80178c4:	4804      	ldr	r0, [pc, #16]	; (80178d8 <RadioSetTxContinuousWave+0x54>)
 80178c6:	f003 f97d 	bl	801abc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80178ca:	4803      	ldr	r0, [pc, #12]	; (80178d8 <RadioSetTxContinuousWave+0x54>)
 80178cc:	f003 f89c 	bl	801aa08 <UTIL_TIMER_Start>
}
 80178d0:	bf00      	nop
 80178d2:	3710      	adds	r7, #16
 80178d4:	46bd      	mov	sp, r7
 80178d6:	bd80      	pop	{r7, pc}
 80178d8:	20001c44 	.word	0x20001c44

080178dc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	4603      	mov	r3, r0
 80178e4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80178e6:	f001 fe5a 	bl	801959e <SUBGRF_GetRssiInst>
 80178ea:	4603      	mov	r3, r0
 80178ec:	b21b      	sxth	r3, r3
}
 80178ee:	4618      	mov	r0, r3
 80178f0:	3708      	adds	r7, #8
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}

080178f6 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80178f6:	b580      	push	{r7, lr}
 80178f8:	b082      	sub	sp, #8
 80178fa:	af00      	add	r7, sp, #0
 80178fc:	4603      	mov	r3, r0
 80178fe:	460a      	mov	r2, r1
 8017900:	80fb      	strh	r3, [r7, #6]
 8017902:	4613      	mov	r3, r2
 8017904:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8017906:	797a      	ldrb	r2, [r7, #5]
 8017908:	88fb      	ldrh	r3, [r7, #6]
 801790a:	4611      	mov	r1, r2
 801790c:	4618      	mov	r0, r3
 801790e:	f001 fed9 	bl	80196c4 <SUBGRF_WriteRegister>
}
 8017912:	bf00      	nop
 8017914:	3708      	adds	r7, #8
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}

0801791a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801791a:	b580      	push	{r7, lr}
 801791c:	b082      	sub	sp, #8
 801791e:	af00      	add	r7, sp, #0
 8017920:	4603      	mov	r3, r0
 8017922:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8017924:	88fb      	ldrh	r3, [r7, #6]
 8017926:	4618      	mov	r0, r3
 8017928:	f001 fee0 	bl	80196ec <SUBGRF_ReadRegister>
 801792c:	4603      	mov	r3, r0
}
 801792e:	4618      	mov	r0, r3
 8017930:	3708      	adds	r7, #8
 8017932:	46bd      	mov	sp, r7
 8017934:	bd80      	pop	{r7, pc}

08017936 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017936:	b580      	push	{r7, lr}
 8017938:	b082      	sub	sp, #8
 801793a:	af00      	add	r7, sp, #0
 801793c:	4603      	mov	r3, r0
 801793e:	6039      	str	r1, [r7, #0]
 8017940:	80fb      	strh	r3, [r7, #6]
 8017942:	4613      	mov	r3, r2
 8017944:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017946:	797b      	ldrb	r3, [r7, #5]
 8017948:	b29a      	uxth	r2, r3
 801794a:	88fb      	ldrh	r3, [r7, #6]
 801794c:	6839      	ldr	r1, [r7, #0]
 801794e:	4618      	mov	r0, r3
 8017950:	f001 fee0 	bl	8019714 <SUBGRF_WriteRegisters>
}
 8017954:	bf00      	nop
 8017956:	3708      	adds	r7, #8
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}

0801795c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b082      	sub	sp, #8
 8017960:	af00      	add	r7, sp, #0
 8017962:	4603      	mov	r3, r0
 8017964:	6039      	str	r1, [r7, #0]
 8017966:	80fb      	strh	r3, [r7, #6]
 8017968:	4613      	mov	r3, r2
 801796a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801796c:	797b      	ldrb	r3, [r7, #5]
 801796e:	b29a      	uxth	r2, r3
 8017970:	88fb      	ldrh	r3, [r7, #6]
 8017972:	6839      	ldr	r1, [r7, #0]
 8017974:	4618      	mov	r0, r3
 8017976:	f001 feef 	bl	8019758 <SUBGRF_ReadRegisters>
}
 801797a:	bf00      	nop
 801797c:	3708      	adds	r7, #8
 801797e:	46bd      	mov	sp, r7
 8017980:	bd80      	pop	{r7, pc}
	...

08017984 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017984:	b580      	push	{r7, lr}
 8017986:	b082      	sub	sp, #8
 8017988:	af00      	add	r7, sp, #0
 801798a:	4603      	mov	r3, r0
 801798c:	460a      	mov	r2, r1
 801798e:	71fb      	strb	r3, [r7, #7]
 8017990:	4613      	mov	r3, r2
 8017992:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017994:	79fb      	ldrb	r3, [r7, #7]
 8017996:	2b01      	cmp	r3, #1
 8017998:	d10a      	bne.n	80179b0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801799a:	4a0e      	ldr	r2, [pc, #56]	; (80179d4 <RadioSetMaxPayloadLength+0x50>)
 801799c:	79bb      	ldrb	r3, [r7, #6]
 801799e:	7013      	strb	r3, [r2, #0]
 80179a0:	4b0c      	ldr	r3, [pc, #48]	; (80179d4 <RadioSetMaxPayloadLength+0x50>)
 80179a2:	781a      	ldrb	r2, [r3, #0]
 80179a4:	4b0c      	ldr	r3, [pc, #48]	; (80179d8 <RadioSetMaxPayloadLength+0x54>)
 80179a6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80179a8:	480c      	ldr	r0, [pc, #48]	; (80179dc <RadioSetMaxPayloadLength+0x58>)
 80179aa:	f001 fd43 	bl	8019434 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80179ae:	e00d      	b.n	80179cc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80179b0:	4b09      	ldr	r3, [pc, #36]	; (80179d8 <RadioSetMaxPayloadLength+0x54>)
 80179b2:	7d5b      	ldrb	r3, [r3, #21]
 80179b4:	2b01      	cmp	r3, #1
 80179b6:	d109      	bne.n	80179cc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80179b8:	4a06      	ldr	r2, [pc, #24]	; (80179d4 <RadioSetMaxPayloadLength+0x50>)
 80179ba:	79bb      	ldrb	r3, [r7, #6]
 80179bc:	7013      	strb	r3, [r2, #0]
 80179be:	4b05      	ldr	r3, [pc, #20]	; (80179d4 <RadioSetMaxPayloadLength+0x50>)
 80179c0:	781a      	ldrb	r2, [r3, #0]
 80179c2:	4b05      	ldr	r3, [pc, #20]	; (80179d8 <RadioSetMaxPayloadLength+0x54>)
 80179c4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80179c6:	4805      	ldr	r0, [pc, #20]	; (80179dc <RadioSetMaxPayloadLength+0x58>)
 80179c8:	f001 fd34 	bl	8019434 <SUBGRF_SetPacketParams>
}
 80179cc:	bf00      	nop
 80179ce:	3708      	adds	r7, #8
 80179d0:	46bd      	mov	sp, r7
 80179d2:	bd80      	pop	{r7, pc}
 80179d4:	20000150 	.word	0x20000150
 80179d8:	20001be8 	.word	0x20001be8
 80179dc:	20001bf6 	.word	0x20001bf6

080179e0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b082      	sub	sp, #8
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	4603      	mov	r3, r0
 80179e8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80179ea:	4a13      	ldr	r2, [pc, #76]	; (8017a38 <RadioSetPublicNetwork+0x58>)
 80179ec:	79fb      	ldrb	r3, [r7, #7]
 80179ee:	7313      	strb	r3, [r2, #12]
 80179f0:	4b11      	ldr	r3, [pc, #68]	; (8017a38 <RadioSetPublicNetwork+0x58>)
 80179f2:	7b1a      	ldrb	r2, [r3, #12]
 80179f4:	4b10      	ldr	r3, [pc, #64]	; (8017a38 <RadioSetPublicNetwork+0x58>)
 80179f6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80179f8:	2001      	movs	r0, #1
 80179fa:	f7ff f82d 	bl	8016a58 <RadioSetModem>
    if( enable == true )
 80179fe:	79fb      	ldrb	r3, [r7, #7]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d00a      	beq.n	8017a1a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017a04:	2134      	movs	r1, #52	; 0x34
 8017a06:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017a0a:	f001 fe5b 	bl	80196c4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8017a0e:	2144      	movs	r1, #68	; 0x44
 8017a10:	f240 7041 	movw	r0, #1857	; 0x741
 8017a14:	f001 fe56 	bl	80196c4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017a18:	e009      	b.n	8017a2e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017a1a:	2114      	movs	r1, #20
 8017a1c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017a20:	f001 fe50 	bl	80196c4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017a24:	2124      	movs	r1, #36	; 0x24
 8017a26:	f240 7041 	movw	r0, #1857	; 0x741
 8017a2a:	f001 fe4b 	bl	80196c4 <SUBGRF_WriteRegister>
}
 8017a2e:	bf00      	nop
 8017a30:	3708      	adds	r7, #8
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd80      	pop	{r7, pc}
 8017a36:	bf00      	nop
 8017a38:	20001be8 	.word	0x20001be8

08017a3c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017a40:	f001 ff90 	bl	8019964 <SUBGRF_GetRadioWakeUpTime>
 8017a44:	4603      	mov	r3, r0
 8017a46:	3303      	adds	r3, #3
}
 8017a48:	4618      	mov	r0, r3
 8017a4a:	bd80      	pop	{r7, pc}

08017a4c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b082      	sub	sp, #8
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017a54:	f000 f80e 	bl	8017a74 <RadioOnTxTimeoutProcess>
}
 8017a58:	bf00      	nop
 8017a5a:	3708      	adds	r7, #8
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd80      	pop	{r7, pc}

08017a60 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017a68:	f000 f818 	bl	8017a9c <RadioOnRxTimeoutProcess>
}
 8017a6c:	bf00      	nop
 8017a6e:	3708      	adds	r7, #8
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}

08017a74 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017a78:	4b07      	ldr	r3, [pc, #28]	; (8017a98 <RadioOnTxTimeoutProcess+0x24>)
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d008      	beq.n	8017a92 <RadioOnTxTimeoutProcess+0x1e>
 8017a80:	4b05      	ldr	r3, [pc, #20]	; (8017a98 <RadioOnTxTimeoutProcess+0x24>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	685b      	ldr	r3, [r3, #4]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d003      	beq.n	8017a92 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8017a8a:	4b03      	ldr	r3, [pc, #12]	; (8017a98 <RadioOnTxTimeoutProcess+0x24>)
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	685b      	ldr	r3, [r3, #4]
 8017a90:	4798      	blx	r3
    }
}
 8017a92:	bf00      	nop
 8017a94:	bd80      	pop	{r7, pc}
 8017a96:	bf00      	nop
 8017a98:	20001be4 	.word	0x20001be4

08017a9c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017aa0:	4b07      	ldr	r3, [pc, #28]	; (8017ac0 <RadioOnRxTimeoutProcess+0x24>)
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d008      	beq.n	8017aba <RadioOnRxTimeoutProcess+0x1e>
 8017aa8:	4b05      	ldr	r3, [pc, #20]	; (8017ac0 <RadioOnRxTimeoutProcess+0x24>)
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	68db      	ldr	r3, [r3, #12]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d003      	beq.n	8017aba <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8017ab2:	4b03      	ldr	r3, [pc, #12]	; (8017ac0 <RadioOnRxTimeoutProcess+0x24>)
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	68db      	ldr	r3, [r3, #12]
 8017ab8:	4798      	blx	r3
    }
}
 8017aba:	bf00      	nop
 8017abc:	bd80      	pop	{r7, pc}
 8017abe:	bf00      	nop
 8017ac0:	20001be4 	.word	0x20001be4

08017ac4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b082      	sub	sp, #8
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	4603      	mov	r3, r0
 8017acc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017ace:	4a05      	ldr	r2, [pc, #20]	; (8017ae4 <RadioOnDioIrq+0x20>)
 8017ad0:	88fb      	ldrh	r3, [r7, #6]
 8017ad2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8017ad6:	f000 f807 	bl	8017ae8 <RadioIrqProcess>
}
 8017ada:	bf00      	nop
 8017adc:	3708      	adds	r7, #8
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}
 8017ae2:	bf00      	nop
 8017ae4:	20001be8 	.word	0x20001be8

08017ae8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017ae8:	b590      	push	{r4, r7, lr}
 8017aea:	b083      	sub	sp, #12
 8017aec:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017aee:	2300      	movs	r3, #0
 8017af0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017af2:	2300      	movs	r3, #0
 8017af4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8017af6:	4ba8      	ldr	r3, [pc, #672]	; (8017d98 <RadioIrqProcess+0x2b0>)
 8017af8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b00:	f000 810c 	beq.w	8017d1c <RadioIrqProcess+0x234>
 8017b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b08:	f300 81e8 	bgt.w	8017edc <RadioIrqProcess+0x3f4>
 8017b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017b10:	f000 80f0 	beq.w	8017cf4 <RadioIrqProcess+0x20c>
 8017b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017b18:	f300 81e0 	bgt.w	8017edc <RadioIrqProcess+0x3f4>
 8017b1c:	2b80      	cmp	r3, #128	; 0x80
 8017b1e:	f000 80d5 	beq.w	8017ccc <RadioIrqProcess+0x1e4>
 8017b22:	2b80      	cmp	r3, #128	; 0x80
 8017b24:	f300 81da 	bgt.w	8017edc <RadioIrqProcess+0x3f4>
 8017b28:	2b20      	cmp	r3, #32
 8017b2a:	dc49      	bgt.n	8017bc0 <RadioIrqProcess+0xd8>
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	f340 81d5 	ble.w	8017edc <RadioIrqProcess+0x3f4>
 8017b32:	3b01      	subs	r3, #1
 8017b34:	2b1f      	cmp	r3, #31
 8017b36:	f200 81d1 	bhi.w	8017edc <RadioIrqProcess+0x3f4>
 8017b3a:	a201      	add	r2, pc, #4	; (adr r2, 8017b40 <RadioIrqProcess+0x58>)
 8017b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b40:	08017bc9 	.word	0x08017bc9
 8017b44:	08017c03 	.word	0x08017c03
 8017b48:	08017edd 	.word	0x08017edd
 8017b4c:	08017db9 	.word	0x08017db9
 8017b50:	08017edd 	.word	0x08017edd
 8017b54:	08017edd 	.word	0x08017edd
 8017b58:	08017edd 	.word	0x08017edd
 8017b5c:	08017e35 	.word	0x08017e35
 8017b60:	08017edd 	.word	0x08017edd
 8017b64:	08017edd 	.word	0x08017edd
 8017b68:	08017edd 	.word	0x08017edd
 8017b6c:	08017edd 	.word	0x08017edd
 8017b70:	08017edd 	.word	0x08017edd
 8017b74:	08017edd 	.word	0x08017edd
 8017b78:	08017edd 	.word	0x08017edd
 8017b7c:	08017e51 	.word	0x08017e51
 8017b80:	08017edd 	.word	0x08017edd
 8017b84:	08017edd 	.word	0x08017edd
 8017b88:	08017edd 	.word	0x08017edd
 8017b8c:	08017edd 	.word	0x08017edd
 8017b90:	08017edd 	.word	0x08017edd
 8017b94:	08017edd 	.word	0x08017edd
 8017b98:	08017edd 	.word	0x08017edd
 8017b9c:	08017edd 	.word	0x08017edd
 8017ba0:	08017edd 	.word	0x08017edd
 8017ba4:	08017edd 	.word	0x08017edd
 8017ba8:	08017edd 	.word	0x08017edd
 8017bac:	08017edd 	.word	0x08017edd
 8017bb0:	08017edd 	.word	0x08017edd
 8017bb4:	08017edd 	.word	0x08017edd
 8017bb8:	08017edd 	.word	0x08017edd
 8017bbc:	08017e5f 	.word	0x08017e5f
 8017bc0:	2b40      	cmp	r3, #64	; 0x40
 8017bc2:	f000 816d 	beq.w	8017ea0 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017bc6:	e189      	b.n	8017edc <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8017bc8:	4874      	ldr	r0, [pc, #464]	; (8017d9c <RadioIrqProcess+0x2b4>)
 8017bca:	f002 ff8b 	bl	801aae4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017bce:	2000      	movs	r0, #0
 8017bd0:	f000 fff8 	bl	8018bc4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8017bd4:	f002 f85a 	bl	8019c8c <RFW_Is_LongPacketModeEnabled>
 8017bd8:	4603      	mov	r3, r0
 8017bda:	2b01      	cmp	r3, #1
 8017bdc:	d101      	bne.n	8017be2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8017bde:	f002 f87e 	bl	8019cde <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017be2:	4b6f      	ldr	r3, [pc, #444]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	f000 817a 	beq.w	8017ee0 <RadioIrqProcess+0x3f8>
 8017bec:	4b6c      	ldr	r3, [pc, #432]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	f000 8174 	beq.w	8017ee0 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8017bf8:	4b69      	ldr	r3, [pc, #420]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	4798      	blx	r3
        break;
 8017c00:	e16e      	b.n	8017ee0 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8017c02:	4868      	ldr	r0, [pc, #416]	; (8017da4 <RadioIrqProcess+0x2bc>)
 8017c04:	f002 ff6e 	bl	801aae4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017c08:	4b63      	ldr	r3, [pc, #396]	; (8017d98 <RadioIrqProcess+0x2b0>)
 8017c0a:	785b      	ldrb	r3, [r3, #1]
 8017c0c:	f083 0301 	eor.w	r3, r3, #1
 8017c10:	b2db      	uxtb	r3, r3
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d014      	beq.n	8017c40 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8017c16:	2000      	movs	r0, #0
 8017c18:	f000 ffd4 	bl	8018bc4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8017c1c:	2100      	movs	r1, #0
 8017c1e:	f640 1002 	movw	r0, #2306	; 0x902
 8017c22:	f001 fd4f 	bl	80196c4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017c26:	f640 1044 	movw	r0, #2372	; 0x944
 8017c2a:	f001 fd5f 	bl	80196ec <SUBGRF_ReadRegister>
 8017c2e:	4603      	mov	r3, r0
 8017c30:	f043 0302 	orr.w	r3, r3, #2
 8017c34:	b2db      	uxtb	r3, r3
 8017c36:	4619      	mov	r1, r3
 8017c38:	f640 1044 	movw	r0, #2372	; 0x944
 8017c3c:	f001 fd42 	bl	80196c4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8017c40:	1dfb      	adds	r3, r7, #7
 8017c42:	22ff      	movs	r2, #255	; 0xff
 8017c44:	4619      	mov	r1, r3
 8017c46:	4858      	ldr	r0, [pc, #352]	; (8017da8 <RadioIrqProcess+0x2c0>)
 8017c48:	f000 fe8c 	bl	8018964 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8017c4c:	4857      	ldr	r0, [pc, #348]	; (8017dac <RadioIrqProcess+0x2c4>)
 8017c4e:	f001 fce7 	bl	8019620 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017c52:	4b53      	ldr	r3, [pc, #332]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d036      	beq.n	8017cc8 <RadioIrqProcess+0x1e0>
 8017c5a:	4b51      	ldr	r3, [pc, #324]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	689b      	ldr	r3, [r3, #8]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d031      	beq.n	8017cc8 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8017c64:	4b4c      	ldr	r3, [pc, #304]	; (8017d98 <RadioIrqProcess+0x2b0>)
 8017c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017c6a:	2b01      	cmp	r3, #1
 8017c6c:	d10e      	bne.n	8017c8c <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8017c6e:	4b4c      	ldr	r3, [pc, #304]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	689c      	ldr	r4, [r3, #8]
 8017c74:	79fb      	ldrb	r3, [r7, #7]
 8017c76:	b299      	uxth	r1, r3
 8017c78:	4b47      	ldr	r3, [pc, #284]	; (8017d98 <RadioIrqProcess+0x2b0>)
 8017c7a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8017c7e:	b21a      	sxth	r2, r3
 8017c80:	4b45      	ldr	r3, [pc, #276]	; (8017d98 <RadioIrqProcess+0x2b0>)
 8017c82:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8017c86:	4848      	ldr	r0, [pc, #288]	; (8017da8 <RadioIrqProcess+0x2c0>)
 8017c88:	47a0      	blx	r4
                break;
 8017c8a:	e01e      	b.n	8017cca <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017c8c:	4b42      	ldr	r3, [pc, #264]	; (8017d98 <RadioIrqProcess+0x2b0>)
 8017c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c90:	463a      	mov	r2, r7
 8017c92:	4611      	mov	r1, r2
 8017c94:	4618      	mov	r0, r3
 8017c96:	f001 ff47 	bl	8019b28 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8017c9a:	4b41      	ldr	r3, [pc, #260]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	689c      	ldr	r4, [r3, #8]
 8017ca0:	79fb      	ldrb	r3, [r7, #7]
 8017ca2:	b299      	uxth	r1, r3
 8017ca4:	4b3c      	ldr	r3, [pc, #240]	; (8017d98 <RadioIrqProcess+0x2b0>)
 8017ca6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8017caa:	b218      	sxth	r0, r3
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017cb2:	4a3f      	ldr	r2, [pc, #252]	; (8017db0 <RadioIrqProcess+0x2c8>)
 8017cb4:	fb82 c203 	smull	ip, r2, r2, r3
 8017cb8:	1192      	asrs	r2, r2, #6
 8017cba:	17db      	asrs	r3, r3, #31
 8017cbc:	1ad3      	subs	r3, r2, r3
 8017cbe:	b25b      	sxtb	r3, r3
 8017cc0:	4602      	mov	r2, r0
 8017cc2:	4839      	ldr	r0, [pc, #228]	; (8017da8 <RadioIrqProcess+0x2c0>)
 8017cc4:	47a0      	blx	r4
                break;
 8017cc6:	e000      	b.n	8017cca <RadioIrqProcess+0x1e2>
        }
 8017cc8:	bf00      	nop
        break;
 8017cca:	e118      	b.n	8017efe <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8017ccc:	2000      	movs	r0, #0
 8017cce:	f000 ff79 	bl	8018bc4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017cd2:	4b33      	ldr	r3, [pc, #204]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	f000 8104 	beq.w	8017ee4 <RadioIrqProcess+0x3fc>
 8017cdc:	4b30      	ldr	r3, [pc, #192]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	699b      	ldr	r3, [r3, #24]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	f000 80fe 	beq.w	8017ee4 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8017ce8:	4b2d      	ldr	r3, [pc, #180]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	699b      	ldr	r3, [r3, #24]
 8017cee:	2000      	movs	r0, #0
 8017cf0:	4798      	blx	r3
        break;
 8017cf2:	e0f7      	b.n	8017ee4 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8017cf4:	2000      	movs	r0, #0
 8017cf6:	f000 ff65 	bl	8018bc4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017cfa:	4b29      	ldr	r3, [pc, #164]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	f000 80f2 	beq.w	8017ee8 <RadioIrqProcess+0x400>
 8017d04:	4b26      	ldr	r3, [pc, #152]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	699b      	ldr	r3, [r3, #24]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	f000 80ec 	beq.w	8017ee8 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 8017d10:	4b23      	ldr	r3, [pc, #140]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	699b      	ldr	r3, [r3, #24]
 8017d16:	2001      	movs	r0, #1
 8017d18:	4798      	blx	r3
        break;
 8017d1a:	e0e5      	b.n	8017ee8 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017d1c:	4b25      	ldr	r3, [pc, #148]	; (8017db4 <RadioIrqProcess+0x2cc>)
 8017d1e:	2201      	movs	r2, #1
 8017d20:	2100      	movs	r1, #0
 8017d22:	2002      	movs	r0, #2
 8017d24:	f003 f8e8 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017d28:	f000 fe02 	bl	8018930 <SUBGRF_GetOperatingMode>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	2b04      	cmp	r3, #4
 8017d30:	d115      	bne.n	8017d5e <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8017d32:	481a      	ldr	r0, [pc, #104]	; (8017d9c <RadioIrqProcess+0x2b4>)
 8017d34:	f002 fed6 	bl	801aae4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017d38:	2000      	movs	r0, #0
 8017d3a:	f000 ff43 	bl	8018bc4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017d3e:	4b18      	ldr	r3, [pc, #96]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	f000 80d2 	beq.w	8017eec <RadioIrqProcess+0x404>
 8017d48:	4b15      	ldr	r3, [pc, #84]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	685b      	ldr	r3, [r3, #4]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	f000 80cc 	beq.w	8017eec <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 8017d54:	4b12      	ldr	r3, [pc, #72]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	685b      	ldr	r3, [r3, #4]
 8017d5a:	4798      	blx	r3
        break;
 8017d5c:	e0c6      	b.n	8017eec <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017d5e:	f000 fde7 	bl	8018930 <SUBGRF_GetOperatingMode>
 8017d62:	4603      	mov	r3, r0
 8017d64:	2b05      	cmp	r3, #5
 8017d66:	f040 80c1 	bne.w	8017eec <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 8017d6a:	480e      	ldr	r0, [pc, #56]	; (8017da4 <RadioIrqProcess+0x2bc>)
 8017d6c:	f002 feba 	bl	801aae4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017d70:	2000      	movs	r0, #0
 8017d72:	f000 ff27 	bl	8018bc4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017d76:	4b0a      	ldr	r3, [pc, #40]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	f000 80b6 	beq.w	8017eec <RadioIrqProcess+0x404>
 8017d80:	4b07      	ldr	r3, [pc, #28]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	68db      	ldr	r3, [r3, #12]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	f000 80b0 	beq.w	8017eec <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8017d8c:	4b04      	ldr	r3, [pc, #16]	; (8017da0 <RadioIrqProcess+0x2b8>)
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	68db      	ldr	r3, [r3, #12]
 8017d92:	4798      	blx	r3
        break;
 8017d94:	e0aa      	b.n	8017eec <RadioIrqProcess+0x404>
 8017d96:	bf00      	nop
 8017d98:	20001be8 	.word	0x20001be8
 8017d9c:	20001c44 	.word	0x20001c44
 8017da0:	20001be4 	.word	0x20001be4
 8017da4:	20001c5c 	.word	0x20001c5c
 8017da8:	20001ae4 	.word	0x20001ae4
 8017dac:	20001c0c 	.word	0x20001c0c
 8017db0:	10624dd3 	.word	0x10624dd3
 8017db4:	0801be74 	.word	0x0801be74
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017db8:	4b53      	ldr	r3, [pc, #332]	; (8017f08 <RadioIrqProcess+0x420>)
 8017dba:	2201      	movs	r2, #1
 8017dbc:	2100      	movs	r1, #0
 8017dbe:	2002      	movs	r0, #2
 8017dc0:	f003 f89a 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8017dc4:	4b51      	ldr	r3, [pc, #324]	; (8017f0c <RadioIrqProcess+0x424>)
 8017dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	f000 8091 	beq.w	8017ef0 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8017dce:	4a50      	ldr	r2, [pc, #320]	; (8017f10 <RadioIrqProcess+0x428>)
 8017dd0:	4b4e      	ldr	r3, [pc, #312]	; (8017f0c <RadioIrqProcess+0x424>)
 8017dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017dd4:	0c1b      	lsrs	r3, r3, #16
 8017dd6:	b2db      	uxtb	r3, r3
 8017dd8:	4619      	mov	r1, r3
 8017dda:	f640 1003 	movw	r0, #2307	; 0x903
 8017dde:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8017de0:	4a4b      	ldr	r2, [pc, #300]	; (8017f10 <RadioIrqProcess+0x428>)
 8017de2:	4b4a      	ldr	r3, [pc, #296]	; (8017f0c <RadioIrqProcess+0x424>)
 8017de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017de6:	0a1b      	lsrs	r3, r3, #8
 8017de8:	b2db      	uxtb	r3, r3
 8017dea:	4619      	mov	r1, r3
 8017dec:	f640 1004 	movw	r0, #2308	; 0x904
 8017df0:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8017df2:	4a47      	ldr	r2, [pc, #284]	; (8017f10 <RadioIrqProcess+0x428>)
 8017df4:	4b45      	ldr	r3, [pc, #276]	; (8017f0c <RadioIrqProcess+0x424>)
 8017df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017df8:	b2db      	uxtb	r3, r3
 8017dfa:	4619      	mov	r1, r3
 8017dfc:	f640 1005 	movw	r0, #2309	; 0x905
 8017e00:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8017e02:	4c43      	ldr	r4, [pc, #268]	; (8017f10 <RadioIrqProcess+0x428>)
 8017e04:	4b43      	ldr	r3, [pc, #268]	; (8017f14 <RadioIrqProcess+0x42c>)
 8017e06:	f640 1002 	movw	r0, #2306	; 0x902
 8017e0a:	4798      	blx	r3
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	f043 0301 	orr.w	r3, r3, #1
 8017e12:	b2db      	uxtb	r3, r3
 8017e14:	4619      	mov	r1, r3
 8017e16:	f640 1002 	movw	r0, #2306	; 0x902
 8017e1a:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8017e1c:	4b3b      	ldr	r3, [pc, #236]	; (8017f0c <RadioIrqProcess+0x424>)
 8017e1e:	2200      	movs	r2, #0
 8017e20:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017e22:	2300      	movs	r3, #0
 8017e24:	2200      	movs	r2, #0
 8017e26:	f240 2162 	movw	r1, #610	; 0x262
 8017e2a:	f240 2062 	movw	r0, #610	; 0x262
 8017e2e:	f001 f899 	bl	8018f64 <SUBGRF_SetDioIrqParams>
        break;
 8017e32:	e05d      	b.n	8017ef0 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017e34:	4b38      	ldr	r3, [pc, #224]	; (8017f18 <RadioIrqProcess+0x430>)
 8017e36:	2201      	movs	r2, #1
 8017e38:	2100      	movs	r1, #0
 8017e3a:	2002      	movs	r0, #2
 8017e3c:	f003 f85c 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8017e40:	f001 ff1d 	bl	8019c7e <RFW_Is_Init>
 8017e44:	4603      	mov	r3, r0
 8017e46:	2b01      	cmp	r3, #1
 8017e48:	d154      	bne.n	8017ef4 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 8017e4a:	f001 ff4e 	bl	8019cea <RFW_ReceivePayload>
        break;
 8017e4e:	e051      	b.n	8017ef4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017e50:	4b32      	ldr	r3, [pc, #200]	; (8017f1c <RadioIrqProcess+0x434>)
 8017e52:	2201      	movs	r2, #1
 8017e54:	2100      	movs	r1, #0
 8017e56:	2002      	movs	r0, #2
 8017e58:	f003 f84e 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017e5c:	e04f      	b.n	8017efe <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 8017e5e:	4830      	ldr	r0, [pc, #192]	; (8017f20 <RadioIrqProcess+0x438>)
 8017e60:	f002 fe40 	bl	801aae4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017e64:	4b29      	ldr	r3, [pc, #164]	; (8017f0c <RadioIrqProcess+0x424>)
 8017e66:	785b      	ldrb	r3, [r3, #1]
 8017e68:	f083 0301 	eor.w	r3, r3, #1
 8017e6c:	b2db      	uxtb	r3, r3
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d002      	beq.n	8017e78 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8017e72:	2000      	movs	r0, #0
 8017e74:	f000 fea6 	bl	8018bc4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017e78:	4b2a      	ldr	r3, [pc, #168]	; (8017f24 <RadioIrqProcess+0x43c>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d03b      	beq.n	8017ef8 <RadioIrqProcess+0x410>
 8017e80:	4b28      	ldr	r3, [pc, #160]	; (8017f24 <RadioIrqProcess+0x43c>)
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	68db      	ldr	r3, [r3, #12]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d036      	beq.n	8017ef8 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 8017e8a:	4b26      	ldr	r3, [pc, #152]	; (8017f24 <RadioIrqProcess+0x43c>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	68db      	ldr	r3, [r3, #12]
 8017e90:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017e92:	4b25      	ldr	r3, [pc, #148]	; (8017f28 <RadioIrqProcess+0x440>)
 8017e94:	2201      	movs	r2, #1
 8017e96:	2100      	movs	r1, #0
 8017e98:	2002      	movs	r0, #2
 8017e9a:	f003 f82d 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017e9e:	e02b      	b.n	8017ef8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017ea0:	4b22      	ldr	r3, [pc, #136]	; (8017f2c <RadioIrqProcess+0x444>)
 8017ea2:	2201      	movs	r2, #1
 8017ea4:	2100      	movs	r1, #0
 8017ea6:	2002      	movs	r0, #2
 8017ea8:	f003 f826 	bl	801aef8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017eac:	4b17      	ldr	r3, [pc, #92]	; (8017f0c <RadioIrqProcess+0x424>)
 8017eae:	785b      	ldrb	r3, [r3, #1]
 8017eb0:	f083 0301 	eor.w	r3, r3, #1
 8017eb4:	b2db      	uxtb	r3, r3
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d002      	beq.n	8017ec0 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8017eba:	2000      	movs	r0, #0
 8017ebc:	f000 fe82 	bl	8018bc4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017ec0:	4b18      	ldr	r3, [pc, #96]	; (8017f24 <RadioIrqProcess+0x43c>)
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d019      	beq.n	8017efc <RadioIrqProcess+0x414>
 8017ec8:	4b16      	ldr	r3, [pc, #88]	; (8017f24 <RadioIrqProcess+0x43c>)
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	691b      	ldr	r3, [r3, #16]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d014      	beq.n	8017efc <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8017ed2:	4b14      	ldr	r3, [pc, #80]	; (8017f24 <RadioIrqProcess+0x43c>)
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	691b      	ldr	r3, [r3, #16]
 8017ed8:	4798      	blx	r3
        break;
 8017eda:	e00f      	b.n	8017efc <RadioIrqProcess+0x414>
        break;
 8017edc:	bf00      	nop
 8017ede:	e00e      	b.n	8017efe <RadioIrqProcess+0x416>
        break;
 8017ee0:	bf00      	nop
 8017ee2:	e00c      	b.n	8017efe <RadioIrqProcess+0x416>
        break;
 8017ee4:	bf00      	nop
 8017ee6:	e00a      	b.n	8017efe <RadioIrqProcess+0x416>
        break;
 8017ee8:	bf00      	nop
 8017eea:	e008      	b.n	8017efe <RadioIrqProcess+0x416>
        break;
 8017eec:	bf00      	nop
 8017eee:	e006      	b.n	8017efe <RadioIrqProcess+0x416>
        break;
 8017ef0:	bf00      	nop
 8017ef2:	e004      	b.n	8017efe <RadioIrqProcess+0x416>
        break;
 8017ef4:	bf00      	nop
 8017ef6:	e002      	b.n	8017efe <RadioIrqProcess+0x416>
        break;
 8017ef8:	bf00      	nop
 8017efa:	e000      	b.n	8017efe <RadioIrqProcess+0x416>
        break;
 8017efc:	bf00      	nop
    }
}
 8017efe:	bf00      	nop
 8017f00:	370c      	adds	r7, #12
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd90      	pop	{r4, r7, pc}
 8017f06:	bf00      	nop
 8017f08:	0801be88 	.word	0x0801be88
 8017f0c:	20001be8 	.word	0x20001be8
 8017f10:	080178f7 	.word	0x080178f7
 8017f14:	0801791b 	.word	0x0801791b
 8017f18:	0801be94 	.word	0x0801be94
 8017f1c:	0801bea0 	.word	0x0801bea0
 8017f20:	20001c5c 	.word	0x20001c5c
 8017f24:	20001be4 	.word	0x20001be4
 8017f28:	0801beac 	.word	0x0801beac
 8017f2c:	0801beb8 	.word	0x0801beb8

08017f30 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017f34:	4b09      	ldr	r3, [pc, #36]	; (8017f5c <RadioTxPrbs+0x2c>)
 8017f36:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017f3a:	2101      	movs	r1, #1
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f001 fcb5 	bl	80198ac <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8017f42:	4b07      	ldr	r3, [pc, #28]	; (8017f60 <RadioTxPrbs+0x30>)
 8017f44:	212d      	movs	r1, #45	; 0x2d
 8017f46:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017f4a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017f4c:	f000 fefd 	bl	8018d4a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017f50:	4804      	ldr	r0, [pc, #16]	; (8017f64 <RadioTxPrbs+0x34>)
 8017f52:	f000 fe53 	bl	8018bfc <SUBGRF_SetTx>
}
 8017f56:	bf00      	nop
 8017f58:	bd80      	pop	{r7, pc}
 8017f5a:	bf00      	nop
 8017f5c:	20001be8 	.word	0x20001be8
 8017f60:	080178f7 	.word	0x080178f7
 8017f64:	000fffff 	.word	0x000fffff

08017f68 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b084      	sub	sp, #16
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	4603      	mov	r3, r0
 8017f70:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f76:	4618      	mov	r0, r3
 8017f78:	f001 fcc0 	bl	80198fc <SUBGRF_SetRfTxPower>
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017f80:	7bfb      	ldrb	r3, [r7, #15]
 8017f82:	2101      	movs	r1, #1
 8017f84:	4618      	mov	r0, r3
 8017f86:	f001 fc91 	bl	80198ac <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017f8a:	f000 fed5 	bl	8018d38 <SUBGRF_SetTxContinuousWave>
}
 8017f8e:	bf00      	nop
 8017f90:	3710      	adds	r7, #16
 8017f92:	46bd      	mov	sp, r7
 8017f94:	bd80      	pop	{r7, pc}

08017f96 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017f96:	b480      	push	{r7}
 8017f98:	b089      	sub	sp, #36	; 0x24
 8017f9a:	af00      	add	r7, sp, #0
 8017f9c:	60f8      	str	r0, [r7, #12]
 8017f9e:	60b9      	str	r1, [r7, #8]
 8017fa0:	4613      	mov	r3, r2
 8017fa2:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8017fac:	2300      	movs	r3, #0
 8017fae:	61bb      	str	r3, [r7, #24]
 8017fb0:	e011      	b.n	8017fd6 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017fb2:	69bb      	ldr	r3, [r7, #24]
 8017fb4:	68ba      	ldr	r2, [r7, #8]
 8017fb6:	4413      	add	r3, r2
 8017fb8:	781a      	ldrb	r2, [r3, #0]
 8017fba:	69bb      	ldr	r3, [r7, #24]
 8017fbc:	68b9      	ldr	r1, [r7, #8]
 8017fbe:	440b      	add	r3, r1
 8017fc0:	43d2      	mvns	r2, r2
 8017fc2:	b2d2      	uxtb	r2, r2
 8017fc4:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017fc6:	69bb      	ldr	r3, [r7, #24]
 8017fc8:	68fa      	ldr	r2, [r7, #12]
 8017fca:	4413      	add	r3, r2
 8017fcc:	2200      	movs	r2, #0
 8017fce:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017fd0:	69bb      	ldr	r3, [r7, #24]
 8017fd2:	3301      	adds	r3, #1
 8017fd4:	61bb      	str	r3, [r7, #24]
 8017fd6:	79fb      	ldrb	r3, [r7, #7]
 8017fd8:	69ba      	ldr	r2, [r7, #24]
 8017fda:	429a      	cmp	r2, r3
 8017fdc:	dbe9      	blt.n	8017fb2 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8017fde:	2300      	movs	r3, #0
 8017fe0:	61bb      	str	r3, [r7, #24]
 8017fe2:	e049      	b.n	8018078 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017fe4:	69bb      	ldr	r3, [r7, #24]
 8017fe6:	425a      	negs	r2, r3
 8017fe8:	f003 0307 	and.w	r3, r3, #7
 8017fec:	f002 0207 	and.w	r2, r2, #7
 8017ff0:	bf58      	it	pl
 8017ff2:	4253      	negpl	r3, r2
 8017ff4:	b2db      	uxtb	r3, r3
 8017ff6:	f1c3 0307 	rsb	r3, r3, #7
 8017ffa:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017ffc:	69bb      	ldr	r3, [r7, #24]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	da00      	bge.n	8018004 <payload_integration+0x6e>
 8018002:	3307      	adds	r3, #7
 8018004:	10db      	asrs	r3, r3, #3
 8018006:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8018008:	69bb      	ldr	r3, [r7, #24]
 801800a:	3301      	adds	r3, #1
 801800c:	425a      	negs	r2, r3
 801800e:	f003 0307 	and.w	r3, r3, #7
 8018012:	f002 0207 	and.w	r2, r2, #7
 8018016:	bf58      	it	pl
 8018018:	4253      	negpl	r3, r2
 801801a:	b2db      	uxtb	r3, r3
 801801c:	f1c3 0307 	rsb	r3, r3, #7
 8018020:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8018022:	69bb      	ldr	r3, [r7, #24]
 8018024:	3301      	adds	r3, #1
 8018026:	2b00      	cmp	r3, #0
 8018028:	da00      	bge.n	801802c <payload_integration+0x96>
 801802a:	3307      	adds	r3, #7
 801802c:	10db      	asrs	r3, r3, #3
 801802e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018030:	7dbb      	ldrb	r3, [r7, #22]
 8018032:	68ba      	ldr	r2, [r7, #8]
 8018034:	4413      	add	r3, r2
 8018036:	781b      	ldrb	r3, [r3, #0]
 8018038:	461a      	mov	r2, r3
 801803a:	7dfb      	ldrb	r3, [r7, #23]
 801803c:	fa42 f303 	asr.w	r3, r2, r3
 8018040:	b2db      	uxtb	r3, r3
 8018042:	f003 0301 	and.w	r3, r3, #1
 8018046:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8018048:	7ffa      	ldrb	r2, [r7, #31]
 801804a:	7cfb      	ldrb	r3, [r7, #19]
 801804c:	4053      	eors	r3, r2
 801804e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018050:	7d3b      	ldrb	r3, [r7, #20]
 8018052:	68fa      	ldr	r2, [r7, #12]
 8018054:	4413      	add	r3, r2
 8018056:	781b      	ldrb	r3, [r3, #0]
 8018058:	b25a      	sxtb	r2, r3
 801805a:	7ff9      	ldrb	r1, [r7, #31]
 801805c:	7d7b      	ldrb	r3, [r7, #21]
 801805e:	fa01 f303 	lsl.w	r3, r1, r3
 8018062:	b25b      	sxtb	r3, r3
 8018064:	4313      	orrs	r3, r2
 8018066:	b259      	sxtb	r1, r3
 8018068:	7d3b      	ldrb	r3, [r7, #20]
 801806a:	68fa      	ldr	r2, [r7, #12]
 801806c:	4413      	add	r3, r2
 801806e:	b2ca      	uxtb	r2, r1
 8018070:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8018072:	69bb      	ldr	r3, [r7, #24]
 8018074:	3301      	adds	r3, #1
 8018076:	61bb      	str	r3, [r7, #24]
 8018078:	79fb      	ldrb	r3, [r7, #7]
 801807a:	00db      	lsls	r3, r3, #3
 801807c:	69ba      	ldr	r2, [r7, #24]
 801807e:	429a      	cmp	r2, r3
 8018080:	dbb0      	blt.n	8017fe4 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8018082:	7ffb      	ldrb	r3, [r7, #31]
 8018084:	01db      	lsls	r3, r3, #7
 8018086:	b25a      	sxtb	r2, r3
 8018088:	7ffb      	ldrb	r3, [r7, #31]
 801808a:	019b      	lsls	r3, r3, #6
 801808c:	b25b      	sxtb	r3, r3
 801808e:	4313      	orrs	r3, r2
 8018090:	b25b      	sxtb	r3, r3
 8018092:	7ffa      	ldrb	r2, [r7, #31]
 8018094:	2a00      	cmp	r2, #0
 8018096:	d101      	bne.n	801809c <payload_integration+0x106>
 8018098:	2220      	movs	r2, #32
 801809a:	e000      	b.n	801809e <payload_integration+0x108>
 801809c:	2200      	movs	r2, #0
 801809e:	4313      	orrs	r3, r2
 80180a0:	b259      	sxtb	r1, r3
 80180a2:	79fb      	ldrb	r3, [r7, #7]
 80180a4:	68fa      	ldr	r2, [r7, #12]
 80180a6:	4413      	add	r3, r2
 80180a8:	b2ca      	uxtb	r2, r1
 80180aa:	701a      	strb	r2, [r3, #0]
}
 80180ac:	bf00      	nop
 80180ae:	3724      	adds	r7, #36	; 0x24
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bc80      	pop	{r7}
 80180b4:	4770      	bx	lr
	...

080180b8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b08c      	sub	sp, #48	; 0x30
 80180bc:	af00      	add	r7, sp, #0
 80180be:	60b9      	str	r1, [r7, #8]
 80180c0:	607a      	str	r2, [r7, #4]
 80180c2:	603b      	str	r3, [r7, #0]
 80180c4:	4603      	mov	r3, r0
 80180c6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80180c8:	2300      	movs	r3, #0
 80180ca:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80180cc:	2300      	movs	r3, #0
 80180ce:	623b      	str	r3, [r7, #32]
 80180d0:	2300      	movs	r3, #0
 80180d2:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80180d4:	f001 fdcd 	bl	8019c72 <RFW_DeInit>

    if( rxContinuous != 0 )
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d001      	beq.n	80180e2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80180de:	2300      	movs	r3, #0
 80180e0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	bf14      	ite	ne
 80180e8:	2301      	movne	r3, #1
 80180ea:	2300      	moveq	r3, #0
 80180ec:	b2da      	uxtb	r2, r3
 80180ee:	4ba3      	ldr	r3, [pc, #652]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 80180f0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80180f2:	7bfb      	ldrb	r3, [r7, #15]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d003      	beq.n	8018100 <RadioSetRxGenericConfig+0x48>
 80180f8:	2b01      	cmp	r3, #1
 80180fa:	f000 80dc 	beq.w	80182b6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80180fe:	e194      	b.n	801842a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	689b      	ldr	r3, [r3, #8]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d003      	beq.n	8018110 <RadioSetRxGenericConfig+0x58>
 8018108:	68bb      	ldr	r3, [r7, #8]
 801810a:	68db      	ldr	r3, [r3, #12]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d102      	bne.n	8018116 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8018110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018114:	e18a      	b.n	801842c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8018116:	68bb      	ldr	r3, [r7, #8]
 8018118:	7f9b      	ldrb	r3, [r3, #30]
 801811a:	2b08      	cmp	r3, #8
 801811c:	d902      	bls.n	8018124 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801811e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018122:	e183      	b.n	801842c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018124:	68bb      	ldr	r3, [r7, #8]
 8018126:	6919      	ldr	r1, [r3, #16]
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	7f9b      	ldrb	r3, [r3, #30]
 801812c:	b29a      	uxth	r2, r3
 801812e:	f107 0320 	add.w	r3, r7, #32
 8018132:	4618      	mov	r0, r3
 8018134:	f001 fe90 	bl	8019e58 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018138:	68bb      	ldr	r3, [r7, #8]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	bf14      	ite	ne
 8018140:	2301      	movne	r3, #1
 8018142:	2300      	moveq	r3, #0
 8018144:	b2db      	uxtb	r3, r3
 8018146:	4618      	mov	r0, r3
 8018148:	f000 fe08 	bl	8018d5c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801814c:	4b8b      	ldr	r3, [pc, #556]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 801814e:	2200      	movs	r2, #0
 8018150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018154:	68bb      	ldr	r3, [r7, #8]
 8018156:	689b      	ldr	r3, [r3, #8]
 8018158:	4a88      	ldr	r2, [pc, #544]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 801815a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801815c:	68bb      	ldr	r3, [r7, #8]
 801815e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018162:	4b86      	ldr	r3, [pc, #536]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 8018164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	685b      	ldr	r3, [r3, #4]
 801816c:	4618      	mov	r0, r3
 801816e:	f001 fcb3 	bl	8019ad8 <SUBGRF_GetFskBandwidthRegValue>
 8018172:	4603      	mov	r3, r0
 8018174:	461a      	mov	r2, r3
 8018176:	4b81      	ldr	r3, [pc, #516]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 8018178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801817c:	4b7f      	ldr	r3, [pc, #508]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 801817e:	2200      	movs	r2, #0
 8018180:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	68db      	ldr	r3, [r3, #12]
 8018186:	b29b      	uxth	r3, r3
 8018188:	00db      	lsls	r3, r3, #3
 801818a:	b29a      	uxth	r2, r3
 801818c:	4b7b      	ldr	r3, [pc, #492]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 801818e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8018190:	68bb      	ldr	r3, [r7, #8]
 8018192:	7fda      	ldrb	r2, [r3, #31]
 8018194:	4b79      	ldr	r3, [pc, #484]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 8018196:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018198:	68bb      	ldr	r3, [r7, #8]
 801819a:	7f9b      	ldrb	r3, [r3, #30]
 801819c:	00db      	lsls	r3, r3, #3
 801819e:	b2da      	uxtb	r2, r3
 80181a0:	4b76      	ldr	r3, [pc, #472]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 80181a2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80181a4:	68bb      	ldr	r3, [r7, #8]
 80181a6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80181aa:	4b74      	ldr	r3, [pc, #464]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 80181ac:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80181ae:	68bb      	ldr	r3, [r7, #8]
 80181b0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d105      	bne.n	80181c4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80181b8:	68bb      	ldr	r3, [r7, #8]
 80181ba:	695b      	ldr	r3, [r3, #20]
 80181bc:	b2da      	uxtb	r2, r3
 80181be:	4b6f      	ldr	r3, [pc, #444]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 80181c0:	759a      	strb	r2, [r3, #22]
 80181c2:	e00b      	b.n	80181dc <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80181ca:	2b02      	cmp	r3, #2
 80181cc:	d103      	bne.n	80181d6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80181ce:	4b6b      	ldr	r3, [pc, #428]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 80181d0:	22ff      	movs	r2, #255	; 0xff
 80181d2:	759a      	strb	r2, [r3, #22]
 80181d4:	e002      	b.n	80181dc <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80181d6:	4b69      	ldr	r3, [pc, #420]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 80181d8:	22ff      	movs	r2, #255	; 0xff
 80181da:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80181dc:	68bb      	ldr	r3, [r7, #8]
 80181de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80181e2:	2b02      	cmp	r3, #2
 80181e4:	d004      	beq.n	80181f0 <RadioSetRxGenericConfig+0x138>
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80181ec:	2b02      	cmp	r3, #2
 80181ee:	d12d      	bne.n	801824c <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80181f0:	68bb      	ldr	r3, [r7, #8]
 80181f2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80181f6:	2bf1      	cmp	r3, #241	; 0xf1
 80181f8:	d00c      	beq.n	8018214 <RadioSetRxGenericConfig+0x15c>
 80181fa:	68bb      	ldr	r3, [r7, #8]
 80181fc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8018200:	2bf2      	cmp	r3, #242	; 0xf2
 8018202:	d007      	beq.n	8018214 <RadioSetRxGenericConfig+0x15c>
 8018204:	68bb      	ldr	r3, [r7, #8]
 8018206:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801820a:	2b01      	cmp	r3, #1
 801820c:	d002      	beq.n	8018214 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801820e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018212:	e10b      	b.n	801842c <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8018214:	2300      	movs	r3, #0
 8018216:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8018218:	68bb      	ldr	r3, [r7, #8]
 801821a:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801821c:	4b58      	ldr	r3, [pc, #352]	; (8018380 <RadioSetRxGenericConfig+0x2c8>)
 801821e:	6819      	ldr	r1, [r3, #0]
 8018220:	f107 0314 	add.w	r3, r7, #20
 8018224:	4a57      	ldr	r2, [pc, #348]	; (8018384 <RadioSetRxGenericConfig+0x2cc>)
 8018226:	4618      	mov	r0, r3
 8018228:	f001 fd16 	bl	8019c58 <RFW_Init>
 801822c:	4603      	mov	r3, r0
 801822e:	2b00      	cmp	r3, #0
 8018230:	d002      	beq.n	8018238 <RadioSetRxGenericConfig+0x180>
            return -1;
 8018232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018236:	e0f9      	b.n	801842c <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018238:	4b50      	ldr	r3, [pc, #320]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 801823a:	2200      	movs	r2, #0
 801823c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801823e:	4b4f      	ldr	r3, [pc, #316]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 8018240:	2201      	movs	r2, #1
 8018242:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018244:	4b4d      	ldr	r3, [pc, #308]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 8018246:	2200      	movs	r2, #0
 8018248:	755a      	strb	r2, [r3, #21]
        {
 801824a:	e00e      	b.n	801826a <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801824c:	68bb      	ldr	r3, [r7, #8]
 801824e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8018252:	4b4a      	ldr	r3, [pc, #296]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 8018254:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018256:	68bb      	ldr	r3, [r7, #8]
 8018258:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801825c:	4b47      	ldr	r3, [pc, #284]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 801825e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018260:	68bb      	ldr	r3, [r7, #8]
 8018262:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8018266:	4b45      	ldr	r3, [pc, #276]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 8018268:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801826a:	f7ff fa48 	bl	80176fe <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801826e:	2000      	movs	r0, #0
 8018270:	f7fe fbf2 	bl	8016a58 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018274:	4844      	ldr	r0, [pc, #272]	; (8018388 <RadioSetRxGenericConfig+0x2d0>)
 8018276:	f001 f80b 	bl	8019290 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801827a:	4844      	ldr	r0, [pc, #272]	; (801838c <RadioSetRxGenericConfig+0x2d4>)
 801827c:	f001 f8da 	bl	8019434 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018280:	f107 0320 	add.w	r3, r7, #32
 8018284:	4618      	mov	r0, r3
 8018286:	f000 fba2 	bl	80189ce <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801828a:	68bb      	ldr	r3, [r7, #8]
 801828c:	8b9b      	ldrh	r3, [r3, #28]
 801828e:	4618      	mov	r0, r3
 8018290:	f000 fbec 	bl	8018a6c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018294:	68bb      	ldr	r3, [r7, #8]
 8018296:	8b1b      	ldrh	r3, [r3, #24]
 8018298:	4618      	mov	r0, r3
 801829a:	f000 fbc7 	bl	8018a2c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801829e:	683b      	ldr	r3, [r7, #0]
 80182a0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80182a4:	fb03 f202 	mul.w	r2, r3, r2
 80182a8:	68bb      	ldr	r3, [r7, #8]
 80182aa:	689b      	ldr	r3, [r3, #8]
 80182ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80182b0:	4a32      	ldr	r2, [pc, #200]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 80182b2:	6093      	str	r3, [r2, #8]
        break;
 80182b4:	e0b9      	b.n	801842a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80182b6:	68bb      	ldr	r3, [r7, #8]
 80182b8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d102      	bne.n	80182c4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80182be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80182c2:	e0b3      	b.n	801842c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80182c4:	68bb      	ldr	r3, [r7, #8]
 80182c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80182ca:	2b01      	cmp	r3, #1
 80182cc:	d104      	bne.n	80182d8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80182ce:	68bb      	ldr	r3, [r7, #8]
 80182d0:	695b      	ldr	r3, [r3, #20]
 80182d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80182d6:	e002      	b.n	80182de <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80182d8:	23ff      	movs	r3, #255	; 0xff
 80182da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80182de:	68bb      	ldr	r3, [r7, #8]
 80182e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	bf14      	ite	ne
 80182e6:	2301      	movne	r3, #1
 80182e8:	2300      	moveq	r3, #0
 80182ea:	b2db      	uxtb	r3, r3
 80182ec:	4618      	mov	r0, r3
 80182ee:	f000 fd35 	bl	8018d5c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	b2db      	uxtb	r3, r3
 80182f6:	4618      	mov	r0, r3
 80182f8:	f000 fd3f 	bl	8018d7a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80182fc:	4b1f      	ldr	r3, [pc, #124]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 80182fe:	2201      	movs	r2, #1
 8018300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801830a:	4b1c      	ldr	r3, [pc, #112]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 801830c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018310:	68bb      	ldr	r3, [r7, #8]
 8018312:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8018316:	4b19      	ldr	r3, [pc, #100]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 8018318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801831c:	68bb      	ldr	r3, [r7, #8]
 801831e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8018322:	4b16      	ldr	r3, [pc, #88]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 8018324:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8018328:	68bb      	ldr	r3, [r7, #8]
 801832a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801832e:	2b02      	cmp	r3, #2
 8018330:	d010      	beq.n	8018354 <RadioSetRxGenericConfig+0x29c>
 8018332:	2b02      	cmp	r3, #2
 8018334:	dc2c      	bgt.n	8018390 <RadioSetRxGenericConfig+0x2d8>
 8018336:	2b00      	cmp	r3, #0
 8018338:	d002      	beq.n	8018340 <RadioSetRxGenericConfig+0x288>
 801833a:	2b01      	cmp	r3, #1
 801833c:	d005      	beq.n	801834a <RadioSetRxGenericConfig+0x292>
            break;
 801833e:	e027      	b.n	8018390 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018340:	4b0e      	ldr	r3, [pc, #56]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 8018342:	2200      	movs	r2, #0
 8018344:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018348:	e023      	b.n	8018392 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801834a:	4b0c      	ldr	r3, [pc, #48]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 801834c:	2201      	movs	r2, #1
 801834e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018352:	e01e      	b.n	8018392 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018354:	68bb      	ldr	r3, [r7, #8]
 8018356:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801835a:	2b0b      	cmp	r3, #11
 801835c:	d004      	beq.n	8018368 <RadioSetRxGenericConfig+0x2b0>
 801835e:	68bb      	ldr	r3, [r7, #8]
 8018360:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018364:	2b0c      	cmp	r3, #12
 8018366:	d104      	bne.n	8018372 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018368:	4b04      	ldr	r3, [pc, #16]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 801836a:	2201      	movs	r2, #1
 801836c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018370:	e00f      	b.n	8018392 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018372:	4b02      	ldr	r3, [pc, #8]	; (801837c <RadioSetRxGenericConfig+0x2c4>)
 8018374:	2200      	movs	r2, #0
 8018376:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801837a:	e00a      	b.n	8018392 <RadioSetRxGenericConfig+0x2da>
 801837c:	20001be8 	.word	0x20001be8
 8018380:	20001be4 	.word	0x20001be4
 8018384:	20001c5c 	.word	0x20001c5c
 8018388:	20001c20 	.word	0x20001c20
 801838c:	20001bf6 	.word	0x20001bf6
            break;
 8018390:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018392:	4b28      	ldr	r3, [pc, #160]	; (8018434 <RadioSetRxGenericConfig+0x37c>)
 8018394:	2201      	movs	r2, #1
 8018396:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018398:	68bb      	ldr	r3, [r7, #8]
 801839a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801839c:	4b25      	ldr	r3, [pc, #148]	; (8018434 <RadioSetRxGenericConfig+0x37c>)
 801839e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80183a0:	68bb      	ldr	r3, [r7, #8]
 80183a2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80183a6:	4b23      	ldr	r3, [pc, #140]	; (8018434 <RadioSetRxGenericConfig+0x37c>)
 80183a8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80183aa:	4a22      	ldr	r2, [pc, #136]	; (8018434 <RadioSetRxGenericConfig+0x37c>)
 80183ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80183b0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80183b2:	68bb      	ldr	r3, [r7, #8]
 80183b4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80183b8:	4b1e      	ldr	r3, [pc, #120]	; (8018434 <RadioSetRxGenericConfig+0x37c>)
 80183ba:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80183c4:	4b1b      	ldr	r3, [pc, #108]	; (8018434 <RadioSetRxGenericConfig+0x37c>)
 80183c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80183ca:	f7ff f998 	bl	80176fe <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80183ce:	2001      	movs	r0, #1
 80183d0:	f7fe fb42 	bl	8016a58 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80183d4:	4818      	ldr	r0, [pc, #96]	; (8018438 <RadioSetRxGenericConfig+0x380>)
 80183d6:	f000 ff5b 	bl	8019290 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80183da:	4818      	ldr	r0, [pc, #96]	; (801843c <RadioSetRxGenericConfig+0x384>)
 80183dc:	f001 f82a 	bl	8019434 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80183e0:	4b14      	ldr	r3, [pc, #80]	; (8018434 <RadioSetRxGenericConfig+0x37c>)
 80183e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80183e6:	2b01      	cmp	r3, #1
 80183e8:	d10d      	bne.n	8018406 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80183ea:	f240 7036 	movw	r0, #1846	; 0x736
 80183ee:	f001 f97d 	bl	80196ec <SUBGRF_ReadRegister>
 80183f2:	4603      	mov	r3, r0
 80183f4:	f023 0304 	bic.w	r3, r3, #4
 80183f8:	b2db      	uxtb	r3, r3
 80183fa:	4619      	mov	r1, r3
 80183fc:	f240 7036 	movw	r0, #1846	; 0x736
 8018400:	f001 f960 	bl	80196c4 <SUBGRF_WriteRegister>
 8018404:	e00c      	b.n	8018420 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018406:	f240 7036 	movw	r0, #1846	; 0x736
 801840a:	f001 f96f 	bl	80196ec <SUBGRF_ReadRegister>
 801840e:	4603      	mov	r3, r0
 8018410:	f043 0304 	orr.w	r3, r3, #4
 8018414:	b2db      	uxtb	r3, r3
 8018416:	4619      	mov	r1, r3
 8018418:	f240 7036 	movw	r0, #1846	; 0x736
 801841c:	f001 f952 	bl	80196c4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018420:	4b04      	ldr	r3, [pc, #16]	; (8018434 <RadioSetRxGenericConfig+0x37c>)
 8018422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018426:	609a      	str	r2, [r3, #8]
        break;
 8018428:	bf00      	nop
    }
    return status;
 801842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801842c:	4618      	mov	r0, r3
 801842e:	3730      	adds	r7, #48	; 0x30
 8018430:	46bd      	mov	sp, r7
 8018432:	bd80      	pop	{r7, pc}
 8018434:	20001be8 	.word	0x20001be8
 8018438:	20001c20 	.word	0x20001c20
 801843c:	20001bf6 	.word	0x20001bf6

08018440 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b08e      	sub	sp, #56	; 0x38
 8018444:	af00      	add	r7, sp, #0
 8018446:	60b9      	str	r1, [r7, #8]
 8018448:	607b      	str	r3, [r7, #4]
 801844a:	4603      	mov	r3, r0
 801844c:	73fb      	strb	r3, [r7, #15]
 801844e:	4613      	mov	r3, r2
 8018450:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8018452:	2300      	movs	r3, #0
 8018454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018456:	2300      	movs	r3, #0
 8018458:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801845a:	f001 fc0a 	bl	8019c72 <RFW_DeInit>
    switch( modem )
 801845e:	7bfb      	ldrb	r3, [r7, #15]
 8018460:	2b03      	cmp	r3, #3
 8018462:	f200 8204 	bhi.w	801886e <RadioSetTxGenericConfig+0x42e>
 8018466:	a201      	add	r2, pc, #4	; (adr r2, 801846c <RadioSetTxGenericConfig+0x2c>)
 8018468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801846c:	080185f1 	.word	0x080185f1
 8018470:	08018739 	.word	0x08018739
 8018474:	08018831 	.word	0x08018831
 8018478:	0801847d 	.word	0x0801847d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801847c:	68bb      	ldr	r3, [r7, #8]
 801847e:	7c9b      	ldrb	r3, [r3, #18]
 8018480:	2b08      	cmp	r3, #8
 8018482:	d902      	bls.n	801848a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8018484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018488:	e206      	b.n	8018898 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801848a:	68bb      	ldr	r3, [r7, #8]
 801848c:	6899      	ldr	r1, [r3, #8]
 801848e:	68bb      	ldr	r3, [r7, #8]
 8018490:	7c9b      	ldrb	r3, [r3, #18]
 8018492:	b29a      	uxth	r2, r3
 8018494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018498:	4618      	mov	r0, r3
 801849a:	f001 fcdd 	bl	8019e58 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801849e:	68bb      	ldr	r3, [r7, #8]
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d102      	bne.n	80184ac <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80184a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184aa:	e1f5      	b.n	8018898 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80184b4:	4293      	cmp	r3, r2
 80184b6:	d813      	bhi.n	80184e0 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 80184b8:	2302      	movs	r3, #2
 80184ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80184be:	4b99      	ldr	r3, [pc, #612]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80184c0:	2203      	movs	r2, #3
 80184c2:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80184c4:	4b97      	ldr	r3, [pc, #604]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80184c6:	2203      	movs	r2, #3
 80184c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80184cc:	68bb      	ldr	r3, [r7, #8]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	4a94      	ldr	r2, [pc, #592]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80184d2:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	7cda      	ldrb	r2, [r3, #19]
 80184d8:	4b92      	ldr	r3, [pc, #584]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80184da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80184de:	e017      	b.n	8018510 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 80184e0:	2300      	movs	r3, #0
 80184e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80184e6:	4b8f      	ldr	r3, [pc, #572]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80184e8:	2200      	movs	r2, #0
 80184ea:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80184ec:	4b8d      	ldr	r3, [pc, #564]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80184ee:	2200      	movs	r2, #0
 80184f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80184f4:	68bb      	ldr	r3, [r7, #8]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	4a8a      	ldr	r2, [pc, #552]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80184fa:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80184fc:	68bb      	ldr	r3, [r7, #8]
 80184fe:	7cda      	ldrb	r2, [r3, #19]
 8018500:	4b88      	ldr	r3, [pc, #544]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8018506:	68bb      	ldr	r3, [r7, #8]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	089b      	lsrs	r3, r3, #2
 801850c:	4a85      	ldr	r2, [pc, #532]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 801850e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018510:	68bb      	ldr	r3, [r7, #8]
 8018512:	685b      	ldr	r3, [r3, #4]
 8018514:	b29b      	uxth	r3, r3
 8018516:	00db      	lsls	r3, r3, #3
 8018518:	b29a      	uxth	r2, r3
 801851a:	4b82      	ldr	r3, [pc, #520]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 801851c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801851e:	4b81      	ldr	r3, [pc, #516]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018520:	2204      	movs	r2, #4
 8018522:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018524:	68bb      	ldr	r3, [r7, #8]
 8018526:	7c9b      	ldrb	r3, [r3, #18]
 8018528:	00db      	lsls	r3, r3, #3
 801852a:	b2da      	uxtb	r2, r3
 801852c:	4b7d      	ldr	r3, [pc, #500]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 801852e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018530:	4b7c      	ldr	r3, [pc, #496]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018532:	2200      	movs	r2, #0
 8018534:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018536:	68bb      	ldr	r3, [r7, #8]
 8018538:	7d9b      	ldrb	r3, [r3, #22]
 801853a:	2b02      	cmp	r3, #2
 801853c:	d003      	beq.n	8018546 <RadioSetTxGenericConfig+0x106>
 801853e:	68bb      	ldr	r3, [r7, #8]
 8018540:	7d1b      	ldrb	r3, [r3, #20]
 8018542:	2b02      	cmp	r3, #2
 8018544:	d12b      	bne.n	801859e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018546:	68bb      	ldr	r3, [r7, #8]
 8018548:	7d5b      	ldrb	r3, [r3, #21]
 801854a:	2bf1      	cmp	r3, #241	; 0xf1
 801854c:	d00a      	beq.n	8018564 <RadioSetTxGenericConfig+0x124>
 801854e:	68bb      	ldr	r3, [r7, #8]
 8018550:	7d5b      	ldrb	r3, [r3, #21]
 8018552:	2bf2      	cmp	r3, #242	; 0xf2
 8018554:	d006      	beq.n	8018564 <RadioSetTxGenericConfig+0x124>
 8018556:	68bb      	ldr	r3, [r7, #8]
 8018558:	7d5b      	ldrb	r3, [r3, #21]
 801855a:	2b01      	cmp	r3, #1
 801855c:	d002      	beq.n	8018564 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801855e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018562:	e199      	b.n	8018898 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8018568:	2301      	movs	r3, #1
 801856a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801856e:	4b6e      	ldr	r3, [pc, #440]	; (8018728 <RadioSetTxGenericConfig+0x2e8>)
 8018570:	6819      	ldr	r1, [r3, #0]
 8018572:	f107 0320 	add.w	r3, r7, #32
 8018576:	4a6d      	ldr	r2, [pc, #436]	; (801872c <RadioSetTxGenericConfig+0x2ec>)
 8018578:	4618      	mov	r0, r3
 801857a:	f001 fb6d 	bl	8019c58 <RFW_Init>
 801857e:	4603      	mov	r3, r0
 8018580:	2b00      	cmp	r3, #0
 8018582:	d002      	beq.n	801858a <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8018584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018588:	e186      	b.n	8018898 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801858a:	4b66      	ldr	r3, [pc, #408]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 801858c:	2200      	movs	r2, #0
 801858e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018590:	4b64      	ldr	r3, [pc, #400]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018592:	2201      	movs	r2, #1
 8018594:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018596:	4b63      	ldr	r3, [pc, #396]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018598:	2200      	movs	r2, #0
 801859a:	755a      	strb	r2, [r3, #21]
        {
 801859c:	e00b      	b.n	80185b6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801859e:	68bb      	ldr	r3, [r7, #8]
 80185a0:	7d5a      	ldrb	r2, [r3, #21]
 80185a2:	4b60      	ldr	r3, [pc, #384]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80185a4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80185a6:	68bb      	ldr	r3, [r7, #8]
 80185a8:	7d9a      	ldrb	r2, [r3, #22]
 80185aa:	4b5e      	ldr	r3, [pc, #376]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80185ac:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80185ae:	68bb      	ldr	r3, [r7, #8]
 80185b0:	7d1a      	ldrb	r2, [r3, #20]
 80185b2:	4b5c      	ldr	r3, [pc, #368]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80185b4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80185b6:	f7ff f8a2 	bl	80176fe <RadioStandby>
        RadioSetModem( radio_modem );
 80185ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80185be:	4618      	mov	r0, r3
 80185c0:	f7fe fa4a 	bl	8016a58 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80185c4:	485a      	ldr	r0, [pc, #360]	; (8018730 <RadioSetTxGenericConfig+0x2f0>)
 80185c6:	f000 fe63 	bl	8019290 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80185ca:	485a      	ldr	r0, [pc, #360]	; (8018734 <RadioSetTxGenericConfig+0x2f4>)
 80185cc:	f000 ff32 	bl	8019434 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80185d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80185d4:	4618      	mov	r0, r3
 80185d6:	f000 f9fa 	bl	80189ce <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80185da:	68bb      	ldr	r3, [r7, #8]
 80185dc:	8a1b      	ldrh	r3, [r3, #16]
 80185de:	4618      	mov	r0, r3
 80185e0:	f000 fa44 	bl	8018a6c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 80185e4:	68bb      	ldr	r3, [r7, #8]
 80185e6:	899b      	ldrh	r3, [r3, #12]
 80185e8:	4618      	mov	r0, r3
 80185ea:	f000 fa1f 	bl	8018a2c <SUBGRF_SetCrcPolynomial>
        break;
 80185ee:	e13f      	b.n	8018870 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80185f0:	68bb      	ldr	r3, [r7, #8]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d102      	bne.n	80185fe <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 80185f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80185fc:	e14c      	b.n	8018898 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	7c9b      	ldrb	r3, [r3, #18]
 8018602:	2b08      	cmp	r3, #8
 8018604:	d902      	bls.n	801860c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8018606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801860a:	e145      	b.n	8018898 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801860c:	68bb      	ldr	r3, [r7, #8]
 801860e:	6899      	ldr	r1, [r3, #8]
 8018610:	68bb      	ldr	r3, [r7, #8]
 8018612:	7c9b      	ldrb	r3, [r3, #18]
 8018614:	b29a      	uxth	r2, r3
 8018616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801861a:	4618      	mov	r0, r3
 801861c:	f001 fc1c 	bl	8019e58 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018620:	4b40      	ldr	r3, [pc, #256]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018622:	2200      	movs	r2, #0
 8018624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018628:	68bb      	ldr	r3, [r7, #8]
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	4a3d      	ldr	r2, [pc, #244]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 801862e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018630:	68bb      	ldr	r3, [r7, #8]
 8018632:	7cda      	ldrb	r2, [r3, #19]
 8018634:	4b3b      	ldr	r3, [pc, #236]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801863a:	68bb      	ldr	r3, [r7, #8]
 801863c:	699b      	ldr	r3, [r3, #24]
 801863e:	4a39      	ldr	r2, [pc, #228]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018640:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018642:	4b38      	ldr	r3, [pc, #224]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018644:	2200      	movs	r2, #0
 8018646:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018648:	68bb      	ldr	r3, [r7, #8]
 801864a:	685b      	ldr	r3, [r3, #4]
 801864c:	b29b      	uxth	r3, r3
 801864e:	00db      	lsls	r3, r3, #3
 8018650:	b29a      	uxth	r2, r3
 8018652:	4b34      	ldr	r3, [pc, #208]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018654:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018656:	4b33      	ldr	r3, [pc, #204]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018658:	2204      	movs	r2, #4
 801865a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801865c:	68bb      	ldr	r3, [r7, #8]
 801865e:	7c9b      	ldrb	r3, [r3, #18]
 8018660:	00db      	lsls	r3, r3, #3
 8018662:	b2da      	uxtb	r2, r3
 8018664:	4b2f      	ldr	r3, [pc, #188]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 8018666:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018668:	4b2e      	ldr	r3, [pc, #184]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 801866a:	2200      	movs	r2, #0
 801866c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801866e:	68bb      	ldr	r3, [r7, #8]
 8018670:	7d9b      	ldrb	r3, [r3, #22]
 8018672:	2b02      	cmp	r3, #2
 8018674:	d003      	beq.n	801867e <RadioSetTxGenericConfig+0x23e>
 8018676:	68bb      	ldr	r3, [r7, #8]
 8018678:	7d1b      	ldrb	r3, [r3, #20]
 801867a:	2b02      	cmp	r3, #2
 801867c:	d12a      	bne.n	80186d4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801867e:	68bb      	ldr	r3, [r7, #8]
 8018680:	7d5b      	ldrb	r3, [r3, #21]
 8018682:	2bf1      	cmp	r3, #241	; 0xf1
 8018684:	d00a      	beq.n	801869c <RadioSetTxGenericConfig+0x25c>
 8018686:	68bb      	ldr	r3, [r7, #8]
 8018688:	7d5b      	ldrb	r3, [r3, #21]
 801868a:	2bf2      	cmp	r3, #242	; 0xf2
 801868c:	d006      	beq.n	801869c <RadioSetTxGenericConfig+0x25c>
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	7d5b      	ldrb	r3, [r3, #21]
 8018692:	2b01      	cmp	r3, #1
 8018694:	d002      	beq.n	801869c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8018696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801869a:	e0fd      	b.n	8018898 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801869c:	2301      	movs	r3, #1
 801869e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80186a4:	4b20      	ldr	r3, [pc, #128]	; (8018728 <RadioSetTxGenericConfig+0x2e8>)
 80186a6:	6819      	ldr	r1, [r3, #0]
 80186a8:	f107 0314 	add.w	r3, r7, #20
 80186ac:	4a1f      	ldr	r2, [pc, #124]	; (801872c <RadioSetTxGenericConfig+0x2ec>)
 80186ae:	4618      	mov	r0, r3
 80186b0:	f001 fad2 	bl	8019c58 <RFW_Init>
 80186b4:	4603      	mov	r3, r0
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d002      	beq.n	80186c0 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 80186ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80186be:	e0eb      	b.n	8018898 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80186c0:	4b18      	ldr	r3, [pc, #96]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80186c2:	2200      	movs	r2, #0
 80186c4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80186c6:	4b17      	ldr	r3, [pc, #92]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80186c8:	2201      	movs	r2, #1
 80186ca:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80186cc:	4b15      	ldr	r3, [pc, #84]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80186ce:	2200      	movs	r2, #0
 80186d0:	755a      	strb	r2, [r3, #21]
        {
 80186d2:	e00b      	b.n	80186ec <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80186d4:	68bb      	ldr	r3, [r7, #8]
 80186d6:	7d5a      	ldrb	r2, [r3, #21]
 80186d8:	4b12      	ldr	r3, [pc, #72]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80186da:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80186dc:	68bb      	ldr	r3, [r7, #8]
 80186de:	7d9a      	ldrb	r2, [r3, #22]
 80186e0:	4b10      	ldr	r3, [pc, #64]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80186e2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	7d1a      	ldrb	r2, [r3, #20]
 80186e8:	4b0e      	ldr	r3, [pc, #56]	; (8018724 <RadioSetTxGenericConfig+0x2e4>)
 80186ea:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80186ec:	f7ff f807 	bl	80176fe <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80186f0:	2000      	movs	r0, #0
 80186f2:	f7fe f9b1 	bl	8016a58 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80186f6:	480e      	ldr	r0, [pc, #56]	; (8018730 <RadioSetTxGenericConfig+0x2f0>)
 80186f8:	f000 fdca 	bl	8019290 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80186fc:	480d      	ldr	r0, [pc, #52]	; (8018734 <RadioSetTxGenericConfig+0x2f4>)
 80186fe:	f000 fe99 	bl	8019434 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018706:	4618      	mov	r0, r3
 8018708:	f000 f961 	bl	80189ce <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801870c:	68bb      	ldr	r3, [r7, #8]
 801870e:	8a1b      	ldrh	r3, [r3, #16]
 8018710:	4618      	mov	r0, r3
 8018712:	f000 f9ab 	bl	8018a6c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018716:	68bb      	ldr	r3, [r7, #8]
 8018718:	899b      	ldrh	r3, [r3, #12]
 801871a:	4618      	mov	r0, r3
 801871c:	f000 f986 	bl	8018a2c <SUBGRF_SetCrcPolynomial>
        break;
 8018720:	e0a6      	b.n	8018870 <RadioSetTxGenericConfig+0x430>
 8018722:	bf00      	nop
 8018724:	20001be8 	.word	0x20001be8
 8018728:	20001be4 	.word	0x20001be4
 801872c:	20001c44 	.word	0x20001c44
 8018730:	20001c20 	.word	0x20001c20
 8018734:	20001bf6 	.word	0x20001bf6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018738:	4b59      	ldr	r3, [pc, #356]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 801873a:	2201      	movs	r2, #1
 801873c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018740:	68bb      	ldr	r3, [r7, #8]
 8018742:	781a      	ldrb	r2, [r3, #0]
 8018744:	4b56      	ldr	r3, [pc, #344]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 8018746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801874a:	68bb      	ldr	r3, [r7, #8]
 801874c:	785a      	ldrb	r2, [r3, #1]
 801874e:	4b54      	ldr	r3, [pc, #336]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 8018750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018754:	68bb      	ldr	r3, [r7, #8]
 8018756:	789a      	ldrb	r2, [r3, #2]
 8018758:	4b51      	ldr	r3, [pc, #324]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 801875a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801875e:	68bb      	ldr	r3, [r7, #8]
 8018760:	78db      	ldrb	r3, [r3, #3]
 8018762:	2b02      	cmp	r3, #2
 8018764:	d010      	beq.n	8018788 <RadioSetTxGenericConfig+0x348>
 8018766:	2b02      	cmp	r3, #2
 8018768:	dc20      	bgt.n	80187ac <RadioSetTxGenericConfig+0x36c>
 801876a:	2b00      	cmp	r3, #0
 801876c:	d002      	beq.n	8018774 <RadioSetTxGenericConfig+0x334>
 801876e:	2b01      	cmp	r3, #1
 8018770:	d005      	beq.n	801877e <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8018772:	e01b      	b.n	80187ac <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018774:	4b4a      	ldr	r3, [pc, #296]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 8018776:	2200      	movs	r2, #0
 8018778:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801877c:	e017      	b.n	80187ae <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801877e:	4b48      	ldr	r3, [pc, #288]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 8018780:	2201      	movs	r2, #1
 8018782:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018786:	e012      	b.n	80187ae <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018788:	68bb      	ldr	r3, [r7, #8]
 801878a:	781b      	ldrb	r3, [r3, #0]
 801878c:	2b0b      	cmp	r3, #11
 801878e:	d003      	beq.n	8018798 <RadioSetTxGenericConfig+0x358>
 8018790:	68bb      	ldr	r3, [r7, #8]
 8018792:	781b      	ldrb	r3, [r3, #0]
 8018794:	2b0c      	cmp	r3, #12
 8018796:	d104      	bne.n	80187a2 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018798:	4b41      	ldr	r3, [pc, #260]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 801879a:	2201      	movs	r2, #1
 801879c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80187a0:	e005      	b.n	80187ae <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80187a2:	4b3f      	ldr	r3, [pc, #252]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 80187a4:	2200      	movs	r2, #0
 80187a6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80187aa:	e000      	b.n	80187ae <RadioSetTxGenericConfig+0x36e>
            break;
 80187ac:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80187ae:	4b3c      	ldr	r3, [pc, #240]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 80187b0:	2201      	movs	r2, #1
 80187b2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80187b4:	68bb      	ldr	r3, [r7, #8]
 80187b6:	889a      	ldrh	r2, [r3, #4]
 80187b8:	4b39      	ldr	r3, [pc, #228]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 80187ba:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80187bc:	68bb      	ldr	r3, [r7, #8]
 80187be:	799a      	ldrb	r2, [r3, #6]
 80187c0:	4b37      	ldr	r3, [pc, #220]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 80187c2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80187c4:	68bb      	ldr	r3, [r7, #8]
 80187c6:	79da      	ldrb	r2, [r3, #7]
 80187c8:	4b35      	ldr	r3, [pc, #212]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 80187ca:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80187ce:	68bb      	ldr	r3, [r7, #8]
 80187d0:	7a1a      	ldrb	r2, [r3, #8]
 80187d2:	4b33      	ldr	r3, [pc, #204]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 80187d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 80187d8:	f7fe ff91 	bl	80176fe <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80187dc:	2001      	movs	r0, #1
 80187de:	f7fe f93b 	bl	8016a58 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80187e2:	4830      	ldr	r0, [pc, #192]	; (80188a4 <RadioSetTxGenericConfig+0x464>)
 80187e4:	f000 fd54 	bl	8019290 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187e8:	482f      	ldr	r0, [pc, #188]	; (80188a8 <RadioSetTxGenericConfig+0x468>)
 80187ea:	f000 fe23 	bl	8019434 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80187ee:	4b2c      	ldr	r3, [pc, #176]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 80187f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80187f4:	2b06      	cmp	r3, #6
 80187f6:	d10d      	bne.n	8018814 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80187f8:	f640 0089 	movw	r0, #2185	; 0x889
 80187fc:	f000 ff76 	bl	80196ec <SUBGRF_ReadRegister>
 8018800:	4603      	mov	r3, r0
 8018802:	f023 0304 	bic.w	r3, r3, #4
 8018806:	b2db      	uxtb	r3, r3
 8018808:	4619      	mov	r1, r3
 801880a:	f640 0089 	movw	r0, #2185	; 0x889
 801880e:	f000 ff59 	bl	80196c4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8018812:	e02d      	b.n	8018870 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018814:	f640 0089 	movw	r0, #2185	; 0x889
 8018818:	f000 ff68 	bl	80196ec <SUBGRF_ReadRegister>
 801881c:	4603      	mov	r3, r0
 801881e:	f043 0304 	orr.w	r3, r3, #4
 8018822:	b2db      	uxtb	r3, r3
 8018824:	4619      	mov	r1, r3
 8018826:	f640 0089 	movw	r0, #2185	; 0x889
 801882a:	f000 ff4b 	bl	80196c4 <SUBGRF_WriteRegister>
        break;
 801882e:	e01f      	b.n	8018870 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d004      	beq.n	8018842 <RadioSetTxGenericConfig+0x402>
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018840:	d902      	bls.n	8018848 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8018842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018846:	e027      	b.n	8018898 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8018848:	2003      	movs	r0, #3
 801884a:	f7fe f905 	bl	8016a58 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801884e:	4b14      	ldr	r3, [pc, #80]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 8018850:	2202      	movs	r2, #2
 8018852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018856:	68bb      	ldr	r3, [r7, #8]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	4a11      	ldr	r2, [pc, #68]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 801885c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801885e:	4b10      	ldr	r3, [pc, #64]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 8018860:	2216      	movs	r2, #22
 8018862:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018866:	480f      	ldr	r0, [pc, #60]	; (80188a4 <RadioSetTxGenericConfig+0x464>)
 8018868:	f000 fd12 	bl	8019290 <SUBGRF_SetModulationParams>
        break;
 801886c:	e000      	b.n	8018870 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801886e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018874:	4618      	mov	r0, r3
 8018876:	f001 f841 	bl	80198fc <SUBGRF_SetRfTxPower>
 801887a:	4603      	mov	r3, r0
 801887c:	461a      	mov	r2, r3
 801887e:	4b08      	ldr	r3, [pc, #32]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 8018880:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018884:	4b06      	ldr	r3, [pc, #24]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 8018886:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801888a:	4618      	mov	r0, r3
 801888c:	f001 fa05 	bl	8019c9a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018890:	4a03      	ldr	r2, [pc, #12]	; (80188a0 <RadioSetTxGenericConfig+0x460>)
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	6053      	str	r3, [r2, #4]
    return 0;
 8018896:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018898:	4618      	mov	r0, r3
 801889a:	3738      	adds	r7, #56	; 0x38
 801889c:	46bd      	mov	sp, r7
 801889e:	bd80      	pop	{r7, pc}
 80188a0:	20001be8 	.word	0x20001be8
 80188a4:	20001c20 	.word	0x20001c20
 80188a8:	20001bf6 	.word	0x20001bf6

080188ac <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	b084      	sub	sp, #16
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d002      	beq.n	80188c0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80188ba:	4a1a      	ldr	r2, [pc, #104]	; (8018924 <SUBGRF_Init+0x78>)
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80188c0:	f7e9 f8d8 	bl	8001a74 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80188c4:	2002      	movs	r0, #2
 80188c6:	f001 f8e5 	bl	8019a94 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80188ca:	4b17      	ldr	r3, [pc, #92]	; (8018928 <SUBGRF_Init+0x7c>)
 80188cc:	2200      	movs	r2, #0
 80188ce:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80188d0:	2000      	movs	r0, #0
 80188d2:	f000 f977 	bl	8018bc4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80188d6:	f7f2 f82b 	bl	800a930 <RBI_IsTCXO>
 80188da:	4603      	mov	r3, r0
 80188dc:	2b01      	cmp	r3, #1
 80188de:	d10e      	bne.n	80188fe <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80188e0:	2140      	movs	r1, #64	; 0x40
 80188e2:	2001      	movs	r0, #1
 80188e4:	f000 fb78 	bl	8018fd8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80188e8:	2100      	movs	r1, #0
 80188ea:	f640 1011 	movw	r0, #2321	; 0x911
 80188ee:	f000 fee9 	bl	80196c4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80188f2:	237f      	movs	r3, #127	; 0x7f
 80188f4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80188f6:	7b38      	ldrb	r0, [r7, #12]
 80188f8:	f000 fa85 	bl	8018e06 <SUBGRF_Calibrate>
 80188fc:	e009      	b.n	8018912 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80188fe:	2120      	movs	r1, #32
 8018900:	f640 1011 	movw	r0, #2321	; 0x911
 8018904:	f000 fede 	bl	80196c4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018908:	2120      	movs	r1, #32
 801890a:	f640 1012 	movw	r0, #2322	; 0x912
 801890e:	f000 fed9 	bl	80196c4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8018912:	f7f1 fff1 	bl	800a8f8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018916:	4b05      	ldr	r3, [pc, #20]	; (801892c <SUBGRF_Init+0x80>)
 8018918:	2201      	movs	r2, #1
 801891a:	701a      	strb	r2, [r3, #0]
}
 801891c:	bf00      	nop
 801891e:	3710      	adds	r7, #16
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}
 8018924:	20001c80 	.word	0x20001c80
 8018928:	20001c7c 	.word	0x20001c7c
 801892c:	20001c74 	.word	0x20001c74

08018930 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018930:	b480      	push	{r7}
 8018932:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018934:	4b02      	ldr	r3, [pc, #8]	; (8018940 <SUBGRF_GetOperatingMode+0x10>)
 8018936:	781b      	ldrb	r3, [r3, #0]
}
 8018938:	4618      	mov	r0, r3
 801893a:	46bd      	mov	sp, r7
 801893c:	bc80      	pop	{r7}
 801893e:	4770      	bx	lr
 8018940:	20001c74 	.word	0x20001c74

08018944 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b082      	sub	sp, #8
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
 801894c:	460b      	mov	r3, r1
 801894e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018950:	78fb      	ldrb	r3, [r7, #3]
 8018952:	461a      	mov	r2, r3
 8018954:	6879      	ldr	r1, [r7, #4]
 8018956:	2000      	movs	r0, #0
 8018958:	f000 ff20 	bl	801979c <SUBGRF_WriteBuffer>
}
 801895c:	bf00      	nop
 801895e:	3708      	adds	r7, #8
 8018960:	46bd      	mov	sp, r7
 8018962:	bd80      	pop	{r7, pc}

08018964 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b086      	sub	sp, #24
 8018968:	af00      	add	r7, sp, #0
 801896a:	60f8      	str	r0, [r7, #12]
 801896c:	60b9      	str	r1, [r7, #8]
 801896e:	4613      	mov	r3, r2
 8018970:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018972:	2300      	movs	r3, #0
 8018974:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018976:	f107 0317 	add.w	r3, r7, #23
 801897a:	4619      	mov	r1, r3
 801897c:	68b8      	ldr	r0, [r7, #8]
 801897e:	f000 fe23 	bl	80195c8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018982:	68bb      	ldr	r3, [r7, #8]
 8018984:	781b      	ldrb	r3, [r3, #0]
 8018986:	79fa      	ldrb	r2, [r7, #7]
 8018988:	429a      	cmp	r2, r3
 801898a:	d201      	bcs.n	8018990 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801898c:	2301      	movs	r3, #1
 801898e:	e007      	b.n	80189a0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018990:	7df8      	ldrb	r0, [r7, #23]
 8018992:	68bb      	ldr	r3, [r7, #8]
 8018994:	781b      	ldrb	r3, [r3, #0]
 8018996:	461a      	mov	r2, r3
 8018998:	68f9      	ldr	r1, [r7, #12]
 801899a:	f000 ff21 	bl	80197e0 <SUBGRF_ReadBuffer>

    return 0;
 801899e:	2300      	movs	r3, #0
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	3718      	adds	r7, #24
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}

080189a8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b084      	sub	sp, #16
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	60f8      	str	r0, [r7, #12]
 80189b0:	460b      	mov	r3, r1
 80189b2:	607a      	str	r2, [r7, #4]
 80189b4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80189b6:	7afb      	ldrb	r3, [r7, #11]
 80189b8:	4619      	mov	r1, r3
 80189ba:	68f8      	ldr	r0, [r7, #12]
 80189bc:	f7ff ffc2 	bl	8018944 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	f000 f91b 	bl	8018bfc <SUBGRF_SetTx>
}
 80189c6:	bf00      	nop
 80189c8:	3710      	adds	r7, #16
 80189ca:	46bd      	mov	sp, r7
 80189cc:	bd80      	pop	{r7, pc}

080189ce <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80189ce:	b580      	push	{r7, lr}
 80189d0:	b082      	sub	sp, #8
 80189d2:	af00      	add	r7, sp, #0
 80189d4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80189d6:	2208      	movs	r2, #8
 80189d8:	6879      	ldr	r1, [r7, #4]
 80189da:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80189de:	f000 fe99 	bl	8019714 <SUBGRF_WriteRegisters>
    return 0;
 80189e2:	2300      	movs	r3, #0
}
 80189e4:	4618      	mov	r0, r3
 80189e6:	3708      	adds	r7, #8
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd80      	pop	{r7, pc}

080189ec <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b084      	sub	sp, #16
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	4603      	mov	r3, r0
 80189f4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80189f6:	88fb      	ldrh	r3, [r7, #6]
 80189f8:	0a1b      	lsrs	r3, r3, #8
 80189fa:	b29b      	uxth	r3, r3
 80189fc:	b2db      	uxtb	r3, r3
 80189fe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018a00:	88fb      	ldrh	r3, [r7, #6]
 8018a02:	b2db      	uxtb	r3, r3
 8018a04:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018a06:	f000 fb6b 	bl	80190e0 <SUBGRF_GetPacketType>
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d108      	bne.n	8018a22 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018a10:	f107 030c 	add.w	r3, r7, #12
 8018a14:	2202      	movs	r2, #2
 8018a16:	4619      	mov	r1, r3
 8018a18:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8018a1c:	f000 fe7a 	bl	8019714 <SUBGRF_WriteRegisters>
            break;
 8018a20:	e000      	b.n	8018a24 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018a22:	bf00      	nop
    }
}
 8018a24:	bf00      	nop
 8018a26:	3710      	adds	r7, #16
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}

08018a2c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b084      	sub	sp, #16
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	4603      	mov	r3, r0
 8018a34:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018a36:	88fb      	ldrh	r3, [r7, #6]
 8018a38:	0a1b      	lsrs	r3, r3, #8
 8018a3a:	b29b      	uxth	r3, r3
 8018a3c:	b2db      	uxtb	r3, r3
 8018a3e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018a40:	88fb      	ldrh	r3, [r7, #6]
 8018a42:	b2db      	uxtb	r3, r3
 8018a44:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018a46:	f000 fb4b 	bl	80190e0 <SUBGRF_GetPacketType>
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d108      	bne.n	8018a62 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018a50:	f107 030c 	add.w	r3, r7, #12
 8018a54:	2202      	movs	r2, #2
 8018a56:	4619      	mov	r1, r3
 8018a58:	f240 60be 	movw	r0, #1726	; 0x6be
 8018a5c:	f000 fe5a 	bl	8019714 <SUBGRF_WriteRegisters>
            break;
 8018a60:	e000      	b.n	8018a64 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8018a62:	bf00      	nop
    }
}
 8018a64:	bf00      	nop
 8018a66:	3710      	adds	r7, #16
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	bd80      	pop	{r7, pc}

08018a6c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018a6c:	b580      	push	{r7, lr}
 8018a6e:	b084      	sub	sp, #16
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	4603      	mov	r3, r0
 8018a74:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8018a76:	2300      	movs	r3, #0
 8018a78:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8018a7a:	f000 fb31 	bl	80190e0 <SUBGRF_GetPacketType>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d121      	bne.n	8018ac8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018a84:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018a88:	f000 fe30 	bl	80196ec <SUBGRF_ReadRegister>
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	f023 0301 	bic.w	r3, r3, #1
 8018a92:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018a94:	88fb      	ldrh	r3, [r7, #6]
 8018a96:	0a1b      	lsrs	r3, r3, #8
 8018a98:	b29b      	uxth	r3, r3
 8018a9a:	b25b      	sxtb	r3, r3
 8018a9c:	f003 0301 	and.w	r3, r3, #1
 8018aa0:	b25a      	sxtb	r2, r3
 8018aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018aa6:	4313      	orrs	r3, r2
 8018aa8:	b25b      	sxtb	r3, r3
 8018aaa:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018aac:	7bfb      	ldrb	r3, [r7, #15]
 8018aae:	4619      	mov	r1, r3
 8018ab0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018ab4:	f000 fe06 	bl	80196c4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018ab8:	88fb      	ldrh	r3, [r7, #6]
 8018aba:	b2db      	uxtb	r3, r3
 8018abc:	4619      	mov	r1, r3
 8018abe:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8018ac2:	f000 fdff 	bl	80196c4 <SUBGRF_WriteRegister>
            break;
 8018ac6:	e000      	b.n	8018aca <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018ac8:	bf00      	nop
    }
}
 8018aca:	bf00      	nop
 8018acc:	3710      	adds	r7, #16
 8018ace:	46bd      	mov	sp, r7
 8018ad0:	bd80      	pop	{r7, pc}

08018ad2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018ad2:	b580      	push	{r7, lr}
 8018ad4:	b082      	sub	sp, #8
 8018ad6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018ad8:	2300      	movs	r3, #0
 8018ada:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018adc:	2300      	movs	r3, #0
 8018ade:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018ae4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018ae8:	f000 fe00 	bl	80196ec <SUBGRF_ReadRegister>
 8018aec:	4603      	mov	r3, r0
 8018aee:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018af0:	79fb      	ldrb	r3, [r7, #7]
 8018af2:	f023 0301 	bic.w	r3, r3, #1
 8018af6:	b2db      	uxtb	r3, r3
 8018af8:	4619      	mov	r1, r3
 8018afa:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018afe:	f000 fde1 	bl	80196c4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018b02:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018b06:	f000 fdf1 	bl	80196ec <SUBGRF_ReadRegister>
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018b0e:	79bb      	ldrb	r3, [r7, #6]
 8018b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018b14:	b2db      	uxtb	r3, r3
 8018b16:	4619      	mov	r1, r3
 8018b18:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018b1c:	f000 fdd2 	bl	80196c4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018b20:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018b24:	f000 f88a 	bl	8018c3c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018b28:	463b      	mov	r3, r7
 8018b2a:	2204      	movs	r2, #4
 8018b2c:	4619      	mov	r1, r3
 8018b2e:	f640 0019 	movw	r0, #2073	; 0x819
 8018b32:	f000 fe11 	bl	8019758 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018b36:	2000      	movs	r0, #0
 8018b38:	f000 f844 	bl	8018bc4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018b3c:	79fb      	ldrb	r3, [r7, #7]
 8018b3e:	4619      	mov	r1, r3
 8018b40:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018b44:	f000 fdbe 	bl	80196c4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018b48:	79bb      	ldrb	r3, [r7, #6]
 8018b4a:	4619      	mov	r1, r3
 8018b4c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018b50:	f000 fdb8 	bl	80196c4 <SUBGRF_WriteRegister>

    return number;
 8018b54:	683b      	ldr	r3, [r7, #0]
}
 8018b56:	4618      	mov	r0, r3
 8018b58:	3708      	adds	r7, #8
 8018b5a:	46bd      	mov	sp, r7
 8018b5c:	bd80      	pop	{r7, pc}
	...

08018b60 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b084      	sub	sp, #16
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018b68:	2000      	movs	r0, #0
 8018b6a:	f7f1 fecc 	bl	800a906 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018b6e:	2002      	movs	r0, #2
 8018b70:	f000 ff90 	bl	8019a94 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018b74:	793b      	ldrb	r3, [r7, #4]
 8018b76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018b7a:	b2db      	uxtb	r3, r3
 8018b7c:	009b      	lsls	r3, r3, #2
 8018b7e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018b80:	793b      	ldrb	r3, [r7, #4]
 8018b82:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018b86:	b2db      	uxtb	r3, r3
 8018b88:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018b8a:	b25b      	sxtb	r3, r3
 8018b8c:	4313      	orrs	r3, r2
 8018b8e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018b90:	793b      	ldrb	r3, [r7, #4]
 8018b92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018b96:	b2db      	uxtb	r3, r3
 8018b98:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018b9a:	4313      	orrs	r3, r2
 8018b9c:	b25b      	sxtb	r3, r3
 8018b9e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018ba0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018ba2:	f107 030f 	add.w	r3, r7, #15
 8018ba6:	2201      	movs	r2, #1
 8018ba8:	4619      	mov	r1, r3
 8018baa:	2084      	movs	r0, #132	; 0x84
 8018bac:	f000 fe3a 	bl	8019824 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018bb0:	4b03      	ldr	r3, [pc, #12]	; (8018bc0 <SUBGRF_SetSleep+0x60>)
 8018bb2:	2200      	movs	r2, #0
 8018bb4:	701a      	strb	r2, [r3, #0]
}
 8018bb6:	bf00      	nop
 8018bb8:	3710      	adds	r7, #16
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd80      	pop	{r7, pc}
 8018bbe:	bf00      	nop
 8018bc0:	20001c74 	.word	0x20001c74

08018bc4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b082      	sub	sp, #8
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	4603      	mov	r3, r0
 8018bcc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018bce:	1dfb      	adds	r3, r7, #7
 8018bd0:	2201      	movs	r2, #1
 8018bd2:	4619      	mov	r1, r3
 8018bd4:	2080      	movs	r0, #128	; 0x80
 8018bd6:	f000 fe25 	bl	8019824 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018bda:	79fb      	ldrb	r3, [r7, #7]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d103      	bne.n	8018be8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018be0:	4b05      	ldr	r3, [pc, #20]	; (8018bf8 <SUBGRF_SetStandby+0x34>)
 8018be2:	2201      	movs	r2, #1
 8018be4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018be6:	e002      	b.n	8018bee <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018be8:	4b03      	ldr	r3, [pc, #12]	; (8018bf8 <SUBGRF_SetStandby+0x34>)
 8018bea:	2202      	movs	r2, #2
 8018bec:	701a      	strb	r2, [r3, #0]
}
 8018bee:	bf00      	nop
 8018bf0:	3708      	adds	r7, #8
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}
 8018bf6:	bf00      	nop
 8018bf8:	20001c74 	.word	0x20001c74

08018bfc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b084      	sub	sp, #16
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018c04:	4b0c      	ldr	r3, [pc, #48]	; (8018c38 <SUBGRF_SetTx+0x3c>)
 8018c06:	2204      	movs	r2, #4
 8018c08:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	0c1b      	lsrs	r3, r3, #16
 8018c0e:	b2db      	uxtb	r3, r3
 8018c10:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	0a1b      	lsrs	r3, r3, #8
 8018c16:	b2db      	uxtb	r3, r3
 8018c18:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	b2db      	uxtb	r3, r3
 8018c1e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018c20:	f107 030c 	add.w	r3, r7, #12
 8018c24:	2203      	movs	r2, #3
 8018c26:	4619      	mov	r1, r3
 8018c28:	2083      	movs	r0, #131	; 0x83
 8018c2a:	f000 fdfb 	bl	8019824 <SUBGRF_WriteCommand>
}
 8018c2e:	bf00      	nop
 8018c30:	3710      	adds	r7, #16
 8018c32:	46bd      	mov	sp, r7
 8018c34:	bd80      	pop	{r7, pc}
 8018c36:	bf00      	nop
 8018c38:	20001c74 	.word	0x20001c74

08018c3c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b084      	sub	sp, #16
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018c44:	4b0c      	ldr	r3, [pc, #48]	; (8018c78 <SUBGRF_SetRx+0x3c>)
 8018c46:	2205      	movs	r2, #5
 8018c48:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	0c1b      	lsrs	r3, r3, #16
 8018c4e:	b2db      	uxtb	r3, r3
 8018c50:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	0a1b      	lsrs	r3, r3, #8
 8018c56:	b2db      	uxtb	r3, r3
 8018c58:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	b2db      	uxtb	r3, r3
 8018c5e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018c60:	f107 030c 	add.w	r3, r7, #12
 8018c64:	2203      	movs	r2, #3
 8018c66:	4619      	mov	r1, r3
 8018c68:	2082      	movs	r0, #130	; 0x82
 8018c6a:	f000 fddb 	bl	8019824 <SUBGRF_WriteCommand>
}
 8018c6e:	bf00      	nop
 8018c70:	3710      	adds	r7, #16
 8018c72:	46bd      	mov	sp, r7
 8018c74:	bd80      	pop	{r7, pc}
 8018c76:	bf00      	nop
 8018c78:	20001c74 	.word	0x20001c74

08018c7c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b084      	sub	sp, #16
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018c84:	4b0e      	ldr	r3, [pc, #56]	; (8018cc0 <SUBGRF_SetRxBoosted+0x44>)
 8018c86:	2205      	movs	r2, #5
 8018c88:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018c8a:	2197      	movs	r1, #151	; 0x97
 8018c8c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8018c90:	f000 fd18 	bl	80196c4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	0c1b      	lsrs	r3, r3, #16
 8018c98:	b2db      	uxtb	r3, r3
 8018c9a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	0a1b      	lsrs	r3, r3, #8
 8018ca0:	b2db      	uxtb	r3, r3
 8018ca2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	b2db      	uxtb	r3, r3
 8018ca8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018caa:	f107 030c 	add.w	r3, r7, #12
 8018cae:	2203      	movs	r2, #3
 8018cb0:	4619      	mov	r1, r3
 8018cb2:	2082      	movs	r0, #130	; 0x82
 8018cb4:	f000 fdb6 	bl	8019824 <SUBGRF_WriteCommand>
}
 8018cb8:	bf00      	nop
 8018cba:	3710      	adds	r7, #16
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}
 8018cc0:	20001c74 	.word	0x20001c74

08018cc4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b084      	sub	sp, #16
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	6078      	str	r0, [r7, #4]
 8018ccc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	0c1b      	lsrs	r3, r3, #16
 8018cd2:	b2db      	uxtb	r3, r3
 8018cd4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	0a1b      	lsrs	r3, r3, #8
 8018cda:	b2db      	uxtb	r3, r3
 8018cdc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	b2db      	uxtb	r3, r3
 8018ce2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018ce4:	683b      	ldr	r3, [r7, #0]
 8018ce6:	0c1b      	lsrs	r3, r3, #16
 8018ce8:	b2db      	uxtb	r3, r3
 8018cea:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018cec:	683b      	ldr	r3, [r7, #0]
 8018cee:	0a1b      	lsrs	r3, r3, #8
 8018cf0:	b2db      	uxtb	r3, r3
 8018cf2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018cf4:	683b      	ldr	r3, [r7, #0]
 8018cf6:	b2db      	uxtb	r3, r3
 8018cf8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018cfa:	f107 0308 	add.w	r3, r7, #8
 8018cfe:	2206      	movs	r2, #6
 8018d00:	4619      	mov	r1, r3
 8018d02:	2094      	movs	r0, #148	; 0x94
 8018d04:	f000 fd8e 	bl	8019824 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018d08:	4b03      	ldr	r3, [pc, #12]	; (8018d18 <SUBGRF_SetRxDutyCycle+0x54>)
 8018d0a:	2206      	movs	r2, #6
 8018d0c:	701a      	strb	r2, [r3, #0]
}
 8018d0e:	bf00      	nop
 8018d10:	3710      	adds	r7, #16
 8018d12:	46bd      	mov	sp, r7
 8018d14:	bd80      	pop	{r7, pc}
 8018d16:	bf00      	nop
 8018d18:	20001c74 	.word	0x20001c74

08018d1c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018d20:	2200      	movs	r2, #0
 8018d22:	2100      	movs	r1, #0
 8018d24:	20c5      	movs	r0, #197	; 0xc5
 8018d26:	f000 fd7d 	bl	8019824 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018d2a:	4b02      	ldr	r3, [pc, #8]	; (8018d34 <SUBGRF_SetCad+0x18>)
 8018d2c:	2207      	movs	r2, #7
 8018d2e:	701a      	strb	r2, [r3, #0]
}
 8018d30:	bf00      	nop
 8018d32:	bd80      	pop	{r7, pc}
 8018d34:	20001c74 	.word	0x20001c74

08018d38 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018d38:	b580      	push	{r7, lr}
 8018d3a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	2100      	movs	r1, #0
 8018d40:	20d1      	movs	r0, #209	; 0xd1
 8018d42:	f000 fd6f 	bl	8019824 <SUBGRF_WriteCommand>
}
 8018d46:	bf00      	nop
 8018d48:	bd80      	pop	{r7, pc}

08018d4a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018d4a:	b580      	push	{r7, lr}
 8018d4c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018d4e:	2200      	movs	r2, #0
 8018d50:	2100      	movs	r1, #0
 8018d52:	20d2      	movs	r0, #210	; 0xd2
 8018d54:	f000 fd66 	bl	8019824 <SUBGRF_WriteCommand>
}
 8018d58:	bf00      	nop
 8018d5a:	bd80      	pop	{r7, pc}

08018d5c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b082      	sub	sp, #8
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	4603      	mov	r3, r0
 8018d64:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018d66:	1dfb      	adds	r3, r7, #7
 8018d68:	2201      	movs	r2, #1
 8018d6a:	4619      	mov	r1, r3
 8018d6c:	209f      	movs	r0, #159	; 0x9f
 8018d6e:	f000 fd59 	bl	8019824 <SUBGRF_WriteCommand>
}
 8018d72:	bf00      	nop
 8018d74:	3708      	adds	r7, #8
 8018d76:	46bd      	mov	sp, r7
 8018d78:	bd80      	pop	{r7, pc}

08018d7a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018d7a:	b580      	push	{r7, lr}
 8018d7c:	b084      	sub	sp, #16
 8018d7e:	af00      	add	r7, sp, #0
 8018d80:	4603      	mov	r3, r0
 8018d82:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018d84:	1dfb      	adds	r3, r7, #7
 8018d86:	2201      	movs	r2, #1
 8018d88:	4619      	mov	r1, r3
 8018d8a:	20a0      	movs	r0, #160	; 0xa0
 8018d8c:	f000 fd4a 	bl	8019824 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018d90:	79fb      	ldrb	r3, [r7, #7]
 8018d92:	2b3f      	cmp	r3, #63	; 0x3f
 8018d94:	d91c      	bls.n	8018dd0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018d96:	79fb      	ldrb	r3, [r7, #7]
 8018d98:	085b      	lsrs	r3, r3, #1
 8018d9a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018da0:	2300      	movs	r3, #0
 8018da2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018da4:	e005      	b.n	8018db2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018da6:	7bfb      	ldrb	r3, [r7, #15]
 8018da8:	089b      	lsrs	r3, r3, #2
 8018daa:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018dac:	7bbb      	ldrb	r3, [r7, #14]
 8018dae:	3301      	adds	r3, #1
 8018db0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018db2:	7bfb      	ldrb	r3, [r7, #15]
 8018db4:	2b1f      	cmp	r3, #31
 8018db6:	d8f6      	bhi.n	8018da6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018db8:	7bfb      	ldrb	r3, [r7, #15]
 8018dba:	00db      	lsls	r3, r3, #3
 8018dbc:	b2da      	uxtb	r2, r3
 8018dbe:	7bbb      	ldrb	r3, [r7, #14]
 8018dc0:	4413      	add	r3, r2
 8018dc2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018dc4:	7b7b      	ldrb	r3, [r7, #13]
 8018dc6:	4619      	mov	r1, r3
 8018dc8:	f240 7006 	movw	r0, #1798	; 0x706
 8018dcc:	f000 fc7a 	bl	80196c4 <SUBGRF_WriteRegister>
    }
}
 8018dd0:	bf00      	nop
 8018dd2:	3710      	adds	r7, #16
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd80      	pop	{r7, pc}

08018dd8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b082      	sub	sp, #8
 8018ddc:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018dde:	f7f1 fdae 	bl	800a93e <RBI_IsDCDC>
 8018de2:	4603      	mov	r3, r0
 8018de4:	2b01      	cmp	r3, #1
 8018de6:	d102      	bne.n	8018dee <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018de8:	2301      	movs	r3, #1
 8018dea:	71fb      	strb	r3, [r7, #7]
 8018dec:	e001      	b.n	8018df2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018dee:	2300      	movs	r3, #0
 8018df0:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018df2:	1dfb      	adds	r3, r7, #7
 8018df4:	2201      	movs	r2, #1
 8018df6:	4619      	mov	r1, r3
 8018df8:	2096      	movs	r0, #150	; 0x96
 8018dfa:	f000 fd13 	bl	8019824 <SUBGRF_WriteCommand>
}
 8018dfe:	bf00      	nop
 8018e00:	3708      	adds	r7, #8
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}

08018e06 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8018e06:	b580      	push	{r7, lr}
 8018e08:	b084      	sub	sp, #16
 8018e0a:	af00      	add	r7, sp, #0
 8018e0c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018e0e:	793b      	ldrb	r3, [r7, #4]
 8018e10:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018e14:	b2db      	uxtb	r3, r3
 8018e16:	019b      	lsls	r3, r3, #6
 8018e18:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018e1a:	793b      	ldrb	r3, [r7, #4]
 8018e1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018e20:	b2db      	uxtb	r3, r3
 8018e22:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018e24:	b25b      	sxtb	r3, r3
 8018e26:	4313      	orrs	r3, r2
 8018e28:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018e2a:	793b      	ldrb	r3, [r7, #4]
 8018e2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018e30:	b2db      	uxtb	r3, r3
 8018e32:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018e34:	b25b      	sxtb	r3, r3
 8018e36:	4313      	orrs	r3, r2
 8018e38:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018e3a:	793b      	ldrb	r3, [r7, #4]
 8018e3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018e40:	b2db      	uxtb	r3, r3
 8018e42:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018e44:	b25b      	sxtb	r3, r3
 8018e46:	4313      	orrs	r3, r2
 8018e48:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018e4a:	793b      	ldrb	r3, [r7, #4]
 8018e4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018e50:	b2db      	uxtb	r3, r3
 8018e52:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018e54:	b25b      	sxtb	r3, r3
 8018e56:	4313      	orrs	r3, r2
 8018e58:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018e5a:	793b      	ldrb	r3, [r7, #4]
 8018e5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018e60:	b2db      	uxtb	r3, r3
 8018e62:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018e64:	b25b      	sxtb	r3, r3
 8018e66:	4313      	orrs	r3, r2
 8018e68:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8018e6a:	793b      	ldrb	r3, [r7, #4]
 8018e6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018e70:	b2db      	uxtb	r3, r3
 8018e72:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018e74:	4313      	orrs	r3, r2
 8018e76:	b25b      	sxtb	r3, r3
 8018e78:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018e7a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018e7c:	f107 030f 	add.w	r3, r7, #15
 8018e80:	2201      	movs	r2, #1
 8018e82:	4619      	mov	r1, r3
 8018e84:	2089      	movs	r0, #137	; 0x89
 8018e86:	f000 fccd 	bl	8019824 <SUBGRF_WriteCommand>
}
 8018e8a:	bf00      	nop
 8018e8c:	3710      	adds	r7, #16
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	bd80      	pop	{r7, pc}
	...

08018e94 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b084      	sub	sp, #16
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	4a1b      	ldr	r2, [pc, #108]	; (8018f0c <SUBGRF_CalibrateImage+0x78>)
 8018ea0:	4293      	cmp	r3, r2
 8018ea2:	d904      	bls.n	8018eae <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018ea4:	23e1      	movs	r3, #225	; 0xe1
 8018ea6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018ea8:	23e9      	movs	r3, #233	; 0xe9
 8018eaa:	737b      	strb	r3, [r7, #13]
 8018eac:	e022      	b.n	8018ef4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	4a17      	ldr	r2, [pc, #92]	; (8018f10 <SUBGRF_CalibrateImage+0x7c>)
 8018eb2:	4293      	cmp	r3, r2
 8018eb4:	d904      	bls.n	8018ec0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018eb6:	23d7      	movs	r3, #215	; 0xd7
 8018eb8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8018eba:	23db      	movs	r3, #219	; 0xdb
 8018ebc:	737b      	strb	r3, [r7, #13]
 8018ebe:	e019      	b.n	8018ef4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	4a14      	ldr	r2, [pc, #80]	; (8018f14 <SUBGRF_CalibrateImage+0x80>)
 8018ec4:	4293      	cmp	r3, r2
 8018ec6:	d904      	bls.n	8018ed2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018ec8:	23c1      	movs	r3, #193	; 0xc1
 8018eca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018ecc:	23c5      	movs	r3, #197	; 0xc5
 8018ece:	737b      	strb	r3, [r7, #13]
 8018ed0:	e010      	b.n	8018ef4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	4a10      	ldr	r2, [pc, #64]	; (8018f18 <SUBGRF_CalibrateImage+0x84>)
 8018ed6:	4293      	cmp	r3, r2
 8018ed8:	d904      	bls.n	8018ee4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8018eda:	2375      	movs	r3, #117	; 0x75
 8018edc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018ede:	2381      	movs	r3, #129	; 0x81
 8018ee0:	737b      	strb	r3, [r7, #13]
 8018ee2:	e007      	b.n	8018ef4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	4a0d      	ldr	r2, [pc, #52]	; (8018f1c <SUBGRF_CalibrateImage+0x88>)
 8018ee8:	4293      	cmp	r3, r2
 8018eea:	d903      	bls.n	8018ef4 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018eec:	236b      	movs	r3, #107	; 0x6b
 8018eee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018ef0:	236f      	movs	r3, #111	; 0x6f
 8018ef2:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018ef4:	f107 030c 	add.w	r3, r7, #12
 8018ef8:	2202      	movs	r2, #2
 8018efa:	4619      	mov	r1, r3
 8018efc:	2098      	movs	r0, #152	; 0x98
 8018efe:	f000 fc91 	bl	8019824 <SUBGRF_WriteCommand>
}
 8018f02:	bf00      	nop
 8018f04:	3710      	adds	r7, #16
 8018f06:	46bd      	mov	sp, r7
 8018f08:	bd80      	pop	{r7, pc}
 8018f0a:	bf00      	nop
 8018f0c:	35a4e900 	.word	0x35a4e900
 8018f10:	32a9f880 	.word	0x32a9f880
 8018f14:	2de54480 	.word	0x2de54480
 8018f18:	1b6b0b00 	.word	0x1b6b0b00
 8018f1c:	1954fc40 	.word	0x1954fc40

08018f20 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018f20:	b590      	push	{r4, r7, lr}
 8018f22:	b085      	sub	sp, #20
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	4604      	mov	r4, r0
 8018f28:	4608      	mov	r0, r1
 8018f2a:	4611      	mov	r1, r2
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	4623      	mov	r3, r4
 8018f30:	71fb      	strb	r3, [r7, #7]
 8018f32:	4603      	mov	r3, r0
 8018f34:	71bb      	strb	r3, [r7, #6]
 8018f36:	460b      	mov	r3, r1
 8018f38:	717b      	strb	r3, [r7, #5]
 8018f3a:	4613      	mov	r3, r2
 8018f3c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018f3e:	79fb      	ldrb	r3, [r7, #7]
 8018f40:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018f42:	79bb      	ldrb	r3, [r7, #6]
 8018f44:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018f46:	797b      	ldrb	r3, [r7, #5]
 8018f48:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018f4a:	793b      	ldrb	r3, [r7, #4]
 8018f4c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018f4e:	f107 030c 	add.w	r3, r7, #12
 8018f52:	2204      	movs	r2, #4
 8018f54:	4619      	mov	r1, r3
 8018f56:	2095      	movs	r0, #149	; 0x95
 8018f58:	f000 fc64 	bl	8019824 <SUBGRF_WriteCommand>
}
 8018f5c:	bf00      	nop
 8018f5e:	3714      	adds	r7, #20
 8018f60:	46bd      	mov	sp, r7
 8018f62:	bd90      	pop	{r4, r7, pc}

08018f64 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018f64:	b590      	push	{r4, r7, lr}
 8018f66:	b085      	sub	sp, #20
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	4604      	mov	r4, r0
 8018f6c:	4608      	mov	r0, r1
 8018f6e:	4611      	mov	r1, r2
 8018f70:	461a      	mov	r2, r3
 8018f72:	4623      	mov	r3, r4
 8018f74:	80fb      	strh	r3, [r7, #6]
 8018f76:	4603      	mov	r3, r0
 8018f78:	80bb      	strh	r3, [r7, #4]
 8018f7a:	460b      	mov	r3, r1
 8018f7c:	807b      	strh	r3, [r7, #2]
 8018f7e:	4613      	mov	r3, r2
 8018f80:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018f82:	88fb      	ldrh	r3, [r7, #6]
 8018f84:	0a1b      	lsrs	r3, r3, #8
 8018f86:	b29b      	uxth	r3, r3
 8018f88:	b2db      	uxtb	r3, r3
 8018f8a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018f8c:	88fb      	ldrh	r3, [r7, #6]
 8018f8e:	b2db      	uxtb	r3, r3
 8018f90:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018f92:	88bb      	ldrh	r3, [r7, #4]
 8018f94:	0a1b      	lsrs	r3, r3, #8
 8018f96:	b29b      	uxth	r3, r3
 8018f98:	b2db      	uxtb	r3, r3
 8018f9a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018f9c:	88bb      	ldrh	r3, [r7, #4]
 8018f9e:	b2db      	uxtb	r3, r3
 8018fa0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018fa2:	887b      	ldrh	r3, [r7, #2]
 8018fa4:	0a1b      	lsrs	r3, r3, #8
 8018fa6:	b29b      	uxth	r3, r3
 8018fa8:	b2db      	uxtb	r3, r3
 8018faa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018fac:	887b      	ldrh	r3, [r7, #2]
 8018fae:	b2db      	uxtb	r3, r3
 8018fb0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018fb2:	883b      	ldrh	r3, [r7, #0]
 8018fb4:	0a1b      	lsrs	r3, r3, #8
 8018fb6:	b29b      	uxth	r3, r3
 8018fb8:	b2db      	uxtb	r3, r3
 8018fba:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018fbc:	883b      	ldrh	r3, [r7, #0]
 8018fbe:	b2db      	uxtb	r3, r3
 8018fc0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018fc2:	f107 0308 	add.w	r3, r7, #8
 8018fc6:	2208      	movs	r2, #8
 8018fc8:	4619      	mov	r1, r3
 8018fca:	2008      	movs	r0, #8
 8018fcc:	f000 fc2a 	bl	8019824 <SUBGRF_WriteCommand>
}
 8018fd0:	bf00      	nop
 8018fd2:	3714      	adds	r7, #20
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	bd90      	pop	{r4, r7, pc}

08018fd8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b084      	sub	sp, #16
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	4603      	mov	r3, r0
 8018fe0:	6039      	str	r1, [r7, #0]
 8018fe2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018fe4:	79fb      	ldrb	r3, [r7, #7]
 8018fe6:	f003 0307 	and.w	r3, r3, #7
 8018fea:	b2db      	uxtb	r3, r3
 8018fec:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	0c1b      	lsrs	r3, r3, #16
 8018ff2:	b2db      	uxtb	r3, r3
 8018ff4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018ff6:	683b      	ldr	r3, [r7, #0]
 8018ff8:	0a1b      	lsrs	r3, r3, #8
 8018ffa:	b2db      	uxtb	r3, r3
 8018ffc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018ffe:	683b      	ldr	r3, [r7, #0]
 8019000:	b2db      	uxtb	r3, r3
 8019002:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8019004:	f107 030c 	add.w	r3, r7, #12
 8019008:	2204      	movs	r2, #4
 801900a:	4619      	mov	r1, r3
 801900c:	2097      	movs	r0, #151	; 0x97
 801900e:	f000 fc09 	bl	8019824 <SUBGRF_WriteCommand>
}
 8019012:	bf00      	nop
 8019014:	3710      	adds	r7, #16
 8019016:	46bd      	mov	sp, r7
 8019018:	bd80      	pop	{r7, pc}
	...

0801901c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801901c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019020:	b084      	sub	sp, #16
 8019022:	af00      	add	r7, sp, #0
 8019024:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8019026:	2300      	movs	r3, #0
 8019028:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801902a:	4b1d      	ldr	r3, [pc, #116]	; (80190a0 <SUBGRF_SetRfFrequency+0x84>)
 801902c:	781b      	ldrb	r3, [r3, #0]
 801902e:	f083 0301 	eor.w	r3, r3, #1
 8019032:	b2db      	uxtb	r3, r3
 8019034:	2b00      	cmp	r3, #0
 8019036:	d005      	beq.n	8019044 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019038:	6878      	ldr	r0, [r7, #4]
 801903a:	f7ff ff2b 	bl	8018e94 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801903e:	4b18      	ldr	r3, [pc, #96]	; (80190a0 <SUBGRF_SetRfFrequency+0x84>)
 8019040:	2201      	movs	r2, #1
 8019042:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2200      	movs	r2, #0
 8019048:	461c      	mov	r4, r3
 801904a:	4615      	mov	r5, r2
 801904c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019050:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019054:	4a13      	ldr	r2, [pc, #76]	; (80190a4 <SUBGRF_SetRfFrequency+0x88>)
 8019056:	f04f 0300 	mov.w	r3, #0
 801905a:	4640      	mov	r0, r8
 801905c:	4649      	mov	r1, r9
 801905e:	f7e7 fda3 	bl	8000ba8 <__aeabi_uldivmod>
 8019062:	4602      	mov	r2, r0
 8019064:	460b      	mov	r3, r1
 8019066:	4613      	mov	r3, r2
 8019068:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	0e1b      	lsrs	r3, r3, #24
 801906e:	b2db      	uxtb	r3, r3
 8019070:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	0c1b      	lsrs	r3, r3, #16
 8019076:	b2db      	uxtb	r3, r3
 8019078:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	0a1b      	lsrs	r3, r3, #8
 801907e:	b2db      	uxtb	r3, r3
 8019080:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	b2db      	uxtb	r3, r3
 8019086:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019088:	f107 0308 	add.w	r3, r7, #8
 801908c:	2204      	movs	r2, #4
 801908e:	4619      	mov	r1, r3
 8019090:	2086      	movs	r0, #134	; 0x86
 8019092:	f000 fbc7 	bl	8019824 <SUBGRF_WriteCommand>
}
 8019096:	bf00      	nop
 8019098:	3710      	adds	r7, #16
 801909a:	46bd      	mov	sp, r7
 801909c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80190a0:	20001c7c 	.word	0x20001c7c
 80190a4:	01e84800 	.word	0x01e84800

080190a8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b082      	sub	sp, #8
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	4603      	mov	r3, r0
 80190b0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80190b2:	79fa      	ldrb	r2, [r7, #7]
 80190b4:	4b09      	ldr	r3, [pc, #36]	; (80190dc <SUBGRF_SetPacketType+0x34>)
 80190b6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80190b8:	79fb      	ldrb	r3, [r7, #7]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d104      	bne.n	80190c8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80190be:	2100      	movs	r1, #0
 80190c0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80190c4:	f000 fafe 	bl	80196c4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80190c8:	1dfb      	adds	r3, r7, #7
 80190ca:	2201      	movs	r2, #1
 80190cc:	4619      	mov	r1, r3
 80190ce:	208a      	movs	r0, #138	; 0x8a
 80190d0:	f000 fba8 	bl	8019824 <SUBGRF_WriteCommand>
}
 80190d4:	bf00      	nop
 80190d6:	3708      	adds	r7, #8
 80190d8:	46bd      	mov	sp, r7
 80190da:	bd80      	pop	{r7, pc}
 80190dc:	20001c75 	.word	0x20001c75

080190e0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80190e0:	b480      	push	{r7}
 80190e2:	af00      	add	r7, sp, #0
    return PacketType;
 80190e4:	4b02      	ldr	r3, [pc, #8]	; (80190f0 <SUBGRF_GetPacketType+0x10>)
 80190e6:	781b      	ldrb	r3, [r3, #0]
}
 80190e8:	4618      	mov	r0, r3
 80190ea:	46bd      	mov	sp, r7
 80190ec:	bc80      	pop	{r7}
 80190ee:	4770      	bx	lr
 80190f0:	20001c75 	.word	0x20001c75

080190f4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80190f4:	b580      	push	{r7, lr}
 80190f6:	b084      	sub	sp, #16
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	4603      	mov	r3, r0
 80190fc:	71fb      	strb	r3, [r7, #7]
 80190fe:	460b      	mov	r3, r1
 8019100:	71bb      	strb	r3, [r7, #6]
 8019102:	4613      	mov	r3, r2
 8019104:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8019106:	79fb      	ldrb	r3, [r7, #7]
 8019108:	2b01      	cmp	r3, #1
 801910a:	d149      	bne.n	80191a0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801910c:	2000      	movs	r0, #0
 801910e:	f7f1 fc1d 	bl	800a94c <RBI_GetRFOMaxPowerConfig>
 8019112:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019114:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019118:	68fa      	ldr	r2, [r7, #12]
 801911a:	429a      	cmp	r2, r3
 801911c:	da01      	bge.n	8019122 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	2b0e      	cmp	r3, #14
 8019126:	d10e      	bne.n	8019146 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019128:	2301      	movs	r3, #1
 801912a:	2201      	movs	r2, #1
 801912c:	2100      	movs	r1, #0
 801912e:	2004      	movs	r0, #4
 8019130:	f7ff fef6 	bl	8018f20 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019134:	79ba      	ldrb	r2, [r7, #6]
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	b2db      	uxtb	r3, r3
 801913a:	1ad3      	subs	r3, r2, r3
 801913c:	b2db      	uxtb	r3, r3
 801913e:	330e      	adds	r3, #14
 8019140:	b2db      	uxtb	r3, r3
 8019142:	71bb      	strb	r3, [r7, #6]
 8019144:	e01f      	b.n	8019186 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	2b0a      	cmp	r3, #10
 801914a:	d10e      	bne.n	801916a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801914c:	2301      	movs	r3, #1
 801914e:	2201      	movs	r2, #1
 8019150:	2100      	movs	r1, #0
 8019152:	2001      	movs	r0, #1
 8019154:	f7ff fee4 	bl	8018f20 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8019158:	79ba      	ldrb	r2, [r7, #6]
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	b2db      	uxtb	r3, r3
 801915e:	1ad3      	subs	r3, r2, r3
 8019160:	b2db      	uxtb	r3, r3
 8019162:	330d      	adds	r3, #13
 8019164:	b2db      	uxtb	r3, r3
 8019166:	71bb      	strb	r3, [r7, #6]
 8019168:	e00d      	b.n	8019186 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801916a:	2301      	movs	r3, #1
 801916c:	2201      	movs	r2, #1
 801916e:	2100      	movs	r1, #0
 8019170:	2006      	movs	r0, #6
 8019172:	f7ff fed5 	bl	8018f20 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019176:	79ba      	ldrb	r2, [r7, #6]
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	b2db      	uxtb	r3, r3
 801917c:	1ad3      	subs	r3, r2, r3
 801917e:	b2db      	uxtb	r3, r3
 8019180:	330e      	adds	r3, #14
 8019182:	b2db      	uxtb	r3, r3
 8019184:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8019186:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801918a:	f113 0f11 	cmn.w	r3, #17
 801918e:	da01      	bge.n	8019194 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8019190:	23ef      	movs	r3, #239	; 0xef
 8019192:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8019194:	2118      	movs	r1, #24
 8019196:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801919a:	f000 fa93 	bl	80196c4 <SUBGRF_WriteRegister>
 801919e:	e067      	b.n	8019270 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80191a0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80191a4:	f000 faa2 	bl	80196ec <SUBGRF_ReadRegister>
 80191a8:	4603      	mov	r3, r0
 80191aa:	f043 031e 	orr.w	r3, r3, #30
 80191ae:	b2db      	uxtb	r3, r3
 80191b0:	4619      	mov	r1, r3
 80191b2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80191b6:	f000 fa85 	bl	80196c4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80191ba:	2001      	movs	r0, #1
 80191bc:	f7f1 fbc6 	bl	800a94c <RBI_GetRFOMaxPowerConfig>
 80191c0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80191c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80191c6:	68fa      	ldr	r2, [r7, #12]
 80191c8:	429a      	cmp	r2, r3
 80191ca:	da01      	bge.n	80191d0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	2b14      	cmp	r3, #20
 80191d4:	d10e      	bne.n	80191f4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80191d6:	2301      	movs	r3, #1
 80191d8:	2200      	movs	r2, #0
 80191da:	2105      	movs	r1, #5
 80191dc:	2003      	movs	r0, #3
 80191de:	f7ff fe9f 	bl	8018f20 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80191e2:	79ba      	ldrb	r2, [r7, #6]
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	b2db      	uxtb	r3, r3
 80191e8:	1ad3      	subs	r3, r2, r3
 80191ea:	b2db      	uxtb	r3, r3
 80191ec:	3316      	adds	r3, #22
 80191ee:	b2db      	uxtb	r3, r3
 80191f0:	71bb      	strb	r3, [r7, #6]
 80191f2:	e031      	b.n	8019258 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	2b11      	cmp	r3, #17
 80191f8:	d10e      	bne.n	8019218 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80191fa:	2301      	movs	r3, #1
 80191fc:	2200      	movs	r2, #0
 80191fe:	2103      	movs	r1, #3
 8019200:	2002      	movs	r0, #2
 8019202:	f7ff fe8d 	bl	8018f20 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019206:	79ba      	ldrb	r2, [r7, #6]
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	b2db      	uxtb	r3, r3
 801920c:	1ad3      	subs	r3, r2, r3
 801920e:	b2db      	uxtb	r3, r3
 8019210:	3316      	adds	r3, #22
 8019212:	b2db      	uxtb	r3, r3
 8019214:	71bb      	strb	r3, [r7, #6]
 8019216:	e01f      	b.n	8019258 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	2b0e      	cmp	r3, #14
 801921c:	d10e      	bne.n	801923c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801921e:	2301      	movs	r3, #1
 8019220:	2200      	movs	r2, #0
 8019222:	2102      	movs	r1, #2
 8019224:	2002      	movs	r0, #2
 8019226:	f7ff fe7b 	bl	8018f20 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801922a:	79ba      	ldrb	r2, [r7, #6]
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	b2db      	uxtb	r3, r3
 8019230:	1ad3      	subs	r3, r2, r3
 8019232:	b2db      	uxtb	r3, r3
 8019234:	330e      	adds	r3, #14
 8019236:	b2db      	uxtb	r3, r3
 8019238:	71bb      	strb	r3, [r7, #6]
 801923a:	e00d      	b.n	8019258 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801923c:	2301      	movs	r3, #1
 801923e:	2200      	movs	r2, #0
 8019240:	2107      	movs	r1, #7
 8019242:	2004      	movs	r0, #4
 8019244:	f7ff fe6c 	bl	8018f20 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019248:	79ba      	ldrb	r2, [r7, #6]
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	b2db      	uxtb	r3, r3
 801924e:	1ad3      	subs	r3, r2, r3
 8019250:	b2db      	uxtb	r3, r3
 8019252:	3316      	adds	r3, #22
 8019254:	b2db      	uxtb	r3, r3
 8019256:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019258:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801925c:	f113 0f09 	cmn.w	r3, #9
 8019260:	da01      	bge.n	8019266 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019262:	23f7      	movs	r3, #247	; 0xf7
 8019264:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019266:	2138      	movs	r1, #56	; 0x38
 8019268:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801926c:	f000 fa2a 	bl	80196c4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019270:	79bb      	ldrb	r3, [r7, #6]
 8019272:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019274:	797b      	ldrb	r3, [r7, #5]
 8019276:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019278:	f107 0308 	add.w	r3, r7, #8
 801927c:	2202      	movs	r2, #2
 801927e:	4619      	mov	r1, r3
 8019280:	208e      	movs	r0, #142	; 0x8e
 8019282:	f000 facf 	bl	8019824 <SUBGRF_WriteCommand>
}
 8019286:	bf00      	nop
 8019288:	3710      	adds	r7, #16
 801928a:	46bd      	mov	sp, r7
 801928c:	bd80      	pop	{r7, pc}
	...

08019290 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019290:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019294:	b086      	sub	sp, #24
 8019296:	af00      	add	r7, sp, #0
 8019298:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801929a:	2300      	movs	r3, #0
 801929c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801929e:	4a61      	ldr	r2, [pc, #388]	; (8019424 <SUBGRF_SetModulationParams+0x194>)
 80192a0:	f107 0308 	add.w	r3, r7, #8
 80192a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80192a8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	781a      	ldrb	r2, [r3, #0]
 80192b0:	4b5d      	ldr	r3, [pc, #372]	; (8019428 <SUBGRF_SetModulationParams+0x198>)
 80192b2:	781b      	ldrb	r3, [r3, #0]
 80192b4:	429a      	cmp	r2, r3
 80192b6:	d004      	beq.n	80192c2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	781b      	ldrb	r3, [r3, #0]
 80192bc:	4618      	mov	r0, r3
 80192be:	f7ff fef3 	bl	80190a8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	781b      	ldrb	r3, [r3, #0]
 80192c6:	2b03      	cmp	r3, #3
 80192c8:	f200 80a5 	bhi.w	8019416 <SUBGRF_SetModulationParams+0x186>
 80192cc:	a201      	add	r2, pc, #4	; (adr r2, 80192d4 <SUBGRF_SetModulationParams+0x44>)
 80192ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192d2:	bf00      	nop
 80192d4:	080192e5 	.word	0x080192e5
 80192d8:	080193a5 	.word	0x080193a5
 80192dc:	08019367 	.word	0x08019367
 80192e0:	080193d3 	.word	0x080193d3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80192e4:	2308      	movs	r3, #8
 80192e6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	685b      	ldr	r3, [r3, #4]
 80192ec:	4a4f      	ldr	r2, [pc, #316]	; (801942c <SUBGRF_SetModulationParams+0x19c>)
 80192ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80192f2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80192f4:	697b      	ldr	r3, [r7, #20]
 80192f6:	0c1b      	lsrs	r3, r3, #16
 80192f8:	b2db      	uxtb	r3, r3
 80192fa:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80192fc:	697b      	ldr	r3, [r7, #20]
 80192fe:	0a1b      	lsrs	r3, r3, #8
 8019300:	b2db      	uxtb	r3, r3
 8019302:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019304:	697b      	ldr	r3, [r7, #20]
 8019306:	b2db      	uxtb	r3, r3
 8019308:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	7b1b      	ldrb	r3, [r3, #12]
 801930e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	7b5b      	ldrb	r3, [r3, #13]
 8019314:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	689b      	ldr	r3, [r3, #8]
 801931a:	2200      	movs	r2, #0
 801931c:	461c      	mov	r4, r3
 801931e:	4615      	mov	r5, r2
 8019320:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019324:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019328:	4a41      	ldr	r2, [pc, #260]	; (8019430 <SUBGRF_SetModulationParams+0x1a0>)
 801932a:	f04f 0300 	mov.w	r3, #0
 801932e:	4640      	mov	r0, r8
 8019330:	4649      	mov	r1, r9
 8019332:	f7e7 fc39 	bl	8000ba8 <__aeabi_uldivmod>
 8019336:	4602      	mov	r2, r0
 8019338:	460b      	mov	r3, r1
 801933a:	4613      	mov	r3, r2
 801933c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801933e:	697b      	ldr	r3, [r7, #20]
 8019340:	0c1b      	lsrs	r3, r3, #16
 8019342:	b2db      	uxtb	r3, r3
 8019344:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019346:	697b      	ldr	r3, [r7, #20]
 8019348:	0a1b      	lsrs	r3, r3, #8
 801934a:	b2db      	uxtb	r3, r3
 801934c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801934e:	697b      	ldr	r3, [r7, #20]
 8019350:	b2db      	uxtb	r3, r3
 8019352:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019354:	7cfb      	ldrb	r3, [r7, #19]
 8019356:	b29a      	uxth	r2, r3
 8019358:	f107 0308 	add.w	r3, r7, #8
 801935c:	4619      	mov	r1, r3
 801935e:	208b      	movs	r0, #139	; 0x8b
 8019360:	f000 fa60 	bl	8019824 <SUBGRF_WriteCommand>
        break;
 8019364:	e058      	b.n	8019418 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019366:	2304      	movs	r3, #4
 8019368:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	691b      	ldr	r3, [r3, #16]
 801936e:	4a2f      	ldr	r2, [pc, #188]	; (801942c <SUBGRF_SetModulationParams+0x19c>)
 8019370:	fbb2 f3f3 	udiv	r3, r2, r3
 8019374:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019376:	697b      	ldr	r3, [r7, #20]
 8019378:	0c1b      	lsrs	r3, r3, #16
 801937a:	b2db      	uxtb	r3, r3
 801937c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801937e:	697b      	ldr	r3, [r7, #20]
 8019380:	0a1b      	lsrs	r3, r3, #8
 8019382:	b2db      	uxtb	r3, r3
 8019384:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019386:	697b      	ldr	r3, [r7, #20]
 8019388:	b2db      	uxtb	r3, r3
 801938a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	7d1b      	ldrb	r3, [r3, #20]
 8019390:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019392:	7cfb      	ldrb	r3, [r7, #19]
 8019394:	b29a      	uxth	r2, r3
 8019396:	f107 0308 	add.w	r3, r7, #8
 801939a:	4619      	mov	r1, r3
 801939c:	208b      	movs	r0, #139	; 0x8b
 801939e:	f000 fa41 	bl	8019824 <SUBGRF_WriteCommand>
        break;
 80193a2:	e039      	b.n	8019418 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80193a4:	2304      	movs	r3, #4
 80193a6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	7e1b      	ldrb	r3, [r3, #24]
 80193ac:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	7e5b      	ldrb	r3, [r3, #25]
 80193b2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	7e9b      	ldrb	r3, [r3, #26]
 80193b8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	7edb      	ldrb	r3, [r3, #27]
 80193be:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80193c0:	7cfb      	ldrb	r3, [r7, #19]
 80193c2:	b29a      	uxth	r2, r3
 80193c4:	f107 0308 	add.w	r3, r7, #8
 80193c8:	4619      	mov	r1, r3
 80193ca:	208b      	movs	r0, #139	; 0x8b
 80193cc:	f000 fa2a 	bl	8019824 <SUBGRF_WriteCommand>

        break;
 80193d0:	e022      	b.n	8019418 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80193d2:	2305      	movs	r3, #5
 80193d4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	685b      	ldr	r3, [r3, #4]
 80193da:	4a14      	ldr	r2, [pc, #80]	; (801942c <SUBGRF_SetModulationParams+0x19c>)
 80193dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80193e0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80193e2:	697b      	ldr	r3, [r7, #20]
 80193e4:	0c1b      	lsrs	r3, r3, #16
 80193e6:	b2db      	uxtb	r3, r3
 80193e8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80193ea:	697b      	ldr	r3, [r7, #20]
 80193ec:	0a1b      	lsrs	r3, r3, #8
 80193ee:	b2db      	uxtb	r3, r3
 80193f0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80193f2:	697b      	ldr	r3, [r7, #20]
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	7b1b      	ldrb	r3, [r3, #12]
 80193fc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	7b5b      	ldrb	r3, [r3, #13]
 8019402:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019404:	7cfb      	ldrb	r3, [r7, #19]
 8019406:	b29a      	uxth	r2, r3
 8019408:	f107 0308 	add.w	r3, r7, #8
 801940c:	4619      	mov	r1, r3
 801940e:	208b      	movs	r0, #139	; 0x8b
 8019410:	f000 fa08 	bl	8019824 <SUBGRF_WriteCommand>
        break;
 8019414:	e000      	b.n	8019418 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019416:	bf00      	nop
    }
}
 8019418:	bf00      	nop
 801941a:	3718      	adds	r7, #24
 801941c:	46bd      	mov	sp, r7
 801941e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019422:	bf00      	nop
 8019424:	0801bec8 	.word	0x0801bec8
 8019428:	20001c75 	.word	0x20001c75
 801942c:	3d090000 	.word	0x3d090000
 8019430:	01e84800 	.word	0x01e84800

08019434 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b086      	sub	sp, #24
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801943c:	2300      	movs	r3, #0
 801943e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019440:	4a48      	ldr	r2, [pc, #288]	; (8019564 <SUBGRF_SetPacketParams+0x130>)
 8019442:	f107 030c 	add.w	r3, r7, #12
 8019446:	ca07      	ldmia	r2, {r0, r1, r2}
 8019448:	c303      	stmia	r3!, {r0, r1}
 801944a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	781a      	ldrb	r2, [r3, #0]
 8019450:	4b45      	ldr	r3, [pc, #276]	; (8019568 <SUBGRF_SetPacketParams+0x134>)
 8019452:	781b      	ldrb	r3, [r3, #0]
 8019454:	429a      	cmp	r2, r3
 8019456:	d004      	beq.n	8019462 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	781b      	ldrb	r3, [r3, #0]
 801945c:	4618      	mov	r0, r3
 801945e:	f7ff fe23 	bl	80190a8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	781b      	ldrb	r3, [r3, #0]
 8019466:	2b03      	cmp	r3, #3
 8019468:	d878      	bhi.n	801955c <SUBGRF_SetPacketParams+0x128>
 801946a:	a201      	add	r2, pc, #4	; (adr r2, 8019470 <SUBGRF_SetPacketParams+0x3c>)
 801946c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019470:	08019481 	.word	0x08019481
 8019474:	08019511 	.word	0x08019511
 8019478:	08019505 	.word	0x08019505
 801947c:	08019481 	.word	0x08019481
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	7a5b      	ldrb	r3, [r3, #9]
 8019484:	2bf1      	cmp	r3, #241	; 0xf1
 8019486:	d10a      	bne.n	801949e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019488:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801948c:	f7ff faae 	bl	80189ec <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019490:	f248 0005 	movw	r0, #32773	; 0x8005
 8019494:	f7ff faca 	bl	8018a2c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019498:	2302      	movs	r3, #2
 801949a:	75bb      	strb	r3, [r7, #22]
 801949c:	e011      	b.n	80194c2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	7a5b      	ldrb	r3, [r3, #9]
 80194a2:	2bf2      	cmp	r3, #242	; 0xf2
 80194a4:	d10a      	bne.n	80194bc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80194a6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80194aa:	f7ff fa9f 	bl	80189ec <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80194ae:	f241 0021 	movw	r0, #4129	; 0x1021
 80194b2:	f7ff fabb 	bl	8018a2c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80194b6:	2306      	movs	r3, #6
 80194b8:	75bb      	strb	r3, [r7, #22]
 80194ba:	e002      	b.n	80194c2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	7a5b      	ldrb	r3, [r3, #9]
 80194c0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80194c2:	2309      	movs	r3, #9
 80194c4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	885b      	ldrh	r3, [r3, #2]
 80194ca:	0a1b      	lsrs	r3, r3, #8
 80194cc:	b29b      	uxth	r3, r3
 80194ce:	b2db      	uxtb	r3, r3
 80194d0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	885b      	ldrh	r3, [r3, #2]
 80194d6:	b2db      	uxtb	r3, r3
 80194d8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	791b      	ldrb	r3, [r3, #4]
 80194de:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	795b      	ldrb	r3, [r3, #5]
 80194e4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	799b      	ldrb	r3, [r3, #6]
 80194ea:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	79db      	ldrb	r3, [r3, #7]
 80194f0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	7a1b      	ldrb	r3, [r3, #8]
 80194f6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80194f8:	7dbb      	ldrb	r3, [r7, #22]
 80194fa:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	7a9b      	ldrb	r3, [r3, #10]
 8019500:	753b      	strb	r3, [r7, #20]
        break;
 8019502:	e022      	b.n	801954a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019504:	2301      	movs	r3, #1
 8019506:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	7b1b      	ldrb	r3, [r3, #12]
 801950c:	733b      	strb	r3, [r7, #12]
        break;
 801950e:	e01c      	b.n	801954a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019510:	2306      	movs	r3, #6
 8019512:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	89db      	ldrh	r3, [r3, #14]
 8019518:	0a1b      	lsrs	r3, r3, #8
 801951a:	b29b      	uxth	r3, r3
 801951c:	b2db      	uxtb	r3, r3
 801951e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	89db      	ldrh	r3, [r3, #14]
 8019524:	b2db      	uxtb	r3, r3
 8019526:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	7c1a      	ldrb	r2, [r3, #16]
 801952c:	4b0f      	ldr	r3, [pc, #60]	; (801956c <SUBGRF_SetPacketParams+0x138>)
 801952e:	4611      	mov	r1, r2
 8019530:	7019      	strb	r1, [r3, #0]
 8019532:	4613      	mov	r3, r2
 8019534:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	7c5b      	ldrb	r3, [r3, #17]
 801953a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	7c9b      	ldrb	r3, [r3, #18]
 8019540:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	7cdb      	ldrb	r3, [r3, #19]
 8019546:	747b      	strb	r3, [r7, #17]
        break;
 8019548:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801954a:	7dfb      	ldrb	r3, [r7, #23]
 801954c:	b29a      	uxth	r2, r3
 801954e:	f107 030c 	add.w	r3, r7, #12
 8019552:	4619      	mov	r1, r3
 8019554:	208c      	movs	r0, #140	; 0x8c
 8019556:	f000 f965 	bl	8019824 <SUBGRF_WriteCommand>
 801955a:	e000      	b.n	801955e <SUBGRF_SetPacketParams+0x12a>
        return;
 801955c:	bf00      	nop
}
 801955e:	3718      	adds	r7, #24
 8019560:	46bd      	mov	sp, r7
 8019562:	bd80      	pop	{r7, pc}
 8019564:	0801bed0 	.word	0x0801bed0
 8019568:	20001c75 	.word	0x20001c75
 801956c:	20001c76 	.word	0x20001c76

08019570 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019570:	b580      	push	{r7, lr}
 8019572:	b084      	sub	sp, #16
 8019574:	af00      	add	r7, sp, #0
 8019576:	4603      	mov	r3, r0
 8019578:	460a      	mov	r2, r1
 801957a:	71fb      	strb	r3, [r7, #7]
 801957c:	4613      	mov	r3, r2
 801957e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019580:	79fb      	ldrb	r3, [r7, #7]
 8019582:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019584:	79bb      	ldrb	r3, [r7, #6]
 8019586:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019588:	f107 030c 	add.w	r3, r7, #12
 801958c:	2202      	movs	r2, #2
 801958e:	4619      	mov	r1, r3
 8019590:	208f      	movs	r0, #143	; 0x8f
 8019592:	f000 f947 	bl	8019824 <SUBGRF_WriteCommand>
}
 8019596:	bf00      	nop
 8019598:	3710      	adds	r7, #16
 801959a:	46bd      	mov	sp, r7
 801959c:	bd80      	pop	{r7, pc}

0801959e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801959e:	b580      	push	{r7, lr}
 80195a0:	b082      	sub	sp, #8
 80195a2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80195a4:	2300      	movs	r3, #0
 80195a6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80195a8:	1d3b      	adds	r3, r7, #4
 80195aa:	2201      	movs	r2, #1
 80195ac:	4619      	mov	r1, r3
 80195ae:	2015      	movs	r0, #21
 80195b0:	f000 f95a 	bl	8019868 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80195b4:	793b      	ldrb	r3, [r7, #4]
 80195b6:	425b      	negs	r3, r3
 80195b8:	105b      	asrs	r3, r3, #1
 80195ba:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80195bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80195c0:	4618      	mov	r0, r3
 80195c2:	3708      	adds	r7, #8
 80195c4:	46bd      	mov	sp, r7
 80195c6:	bd80      	pop	{r7, pc}

080195c8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b084      	sub	sp, #16
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	6078      	str	r0, [r7, #4]
 80195d0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80195d2:	f107 030c 	add.w	r3, r7, #12
 80195d6:	2202      	movs	r2, #2
 80195d8:	4619      	mov	r1, r3
 80195da:	2013      	movs	r0, #19
 80195dc:	f000 f944 	bl	8019868 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80195e0:	f7ff fd7e 	bl	80190e0 <SUBGRF_GetPacketType>
 80195e4:	4603      	mov	r3, r0
 80195e6:	2b01      	cmp	r3, #1
 80195e8:	d10d      	bne.n	8019606 <SUBGRF_GetRxBufferStatus+0x3e>
 80195ea:	4b0c      	ldr	r3, [pc, #48]	; (801961c <SUBGRF_GetRxBufferStatus+0x54>)
 80195ec:	781b      	ldrb	r3, [r3, #0]
 80195ee:	b2db      	uxtb	r3, r3
 80195f0:	2b01      	cmp	r3, #1
 80195f2:	d108      	bne.n	8019606 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80195f4:	f240 7002 	movw	r0, #1794	; 0x702
 80195f8:	f000 f878 	bl	80196ec <SUBGRF_ReadRegister>
 80195fc:	4603      	mov	r3, r0
 80195fe:	461a      	mov	r2, r3
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	701a      	strb	r2, [r3, #0]
 8019604:	e002      	b.n	801960c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019606:	7b3a      	ldrb	r2, [r7, #12]
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801960c:	7b7a      	ldrb	r2, [r7, #13]
 801960e:	683b      	ldr	r3, [r7, #0]
 8019610:	701a      	strb	r2, [r3, #0]
}
 8019612:	bf00      	nop
 8019614:	3710      	adds	r7, #16
 8019616:	46bd      	mov	sp, r7
 8019618:	bd80      	pop	{r7, pc}
 801961a:	bf00      	nop
 801961c:	20001c76 	.word	0x20001c76

08019620 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019620:	b580      	push	{r7, lr}
 8019622:	b084      	sub	sp, #16
 8019624:	af00      	add	r7, sp, #0
 8019626:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019628:	f107 030c 	add.w	r3, r7, #12
 801962c:	2203      	movs	r2, #3
 801962e:	4619      	mov	r1, r3
 8019630:	2014      	movs	r0, #20
 8019632:	f000 f919 	bl	8019868 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019636:	f7ff fd53 	bl	80190e0 <SUBGRF_GetPacketType>
 801963a:	4603      	mov	r3, r0
 801963c:	461a      	mov	r2, r3
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	781b      	ldrb	r3, [r3, #0]
 8019646:	2b00      	cmp	r3, #0
 8019648:	d002      	beq.n	8019650 <SUBGRF_GetPacketStatus+0x30>
 801964a:	2b01      	cmp	r3, #1
 801964c:	d013      	beq.n	8019676 <SUBGRF_GetPacketStatus+0x56>
 801964e:	e02a      	b.n	80196a6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019650:	7b3a      	ldrb	r2, [r7, #12]
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019656:	7b7b      	ldrb	r3, [r7, #13]
 8019658:	425b      	negs	r3, r3
 801965a:	105b      	asrs	r3, r3, #1
 801965c:	b25a      	sxtb	r2, r3
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019662:	7bbb      	ldrb	r3, [r7, #14]
 8019664:	425b      	negs	r3, r3
 8019666:	105b      	asrs	r3, r3, #1
 8019668:	b25a      	sxtb	r2, r3
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	2200      	movs	r2, #0
 8019672:	609a      	str	r2, [r3, #8]
            break;
 8019674:	e020      	b.n	80196b8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019676:	7b3b      	ldrb	r3, [r7, #12]
 8019678:	425b      	negs	r3, r3
 801967a:	105b      	asrs	r3, r3, #1
 801967c:	b25a      	sxtb	r2, r3
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019682:	7b7b      	ldrb	r3, [r7, #13]
 8019684:	b25b      	sxtb	r3, r3
 8019686:	3302      	adds	r3, #2
 8019688:	109b      	asrs	r3, r3, #2
 801968a:	b25a      	sxtb	r2, r3
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019690:	7bbb      	ldrb	r3, [r7, #14]
 8019692:	425b      	negs	r3, r3
 8019694:	105b      	asrs	r3, r3, #1
 8019696:	b25a      	sxtb	r2, r3
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801969c:	4b08      	ldr	r3, [pc, #32]	; (80196c0 <SUBGRF_GetPacketStatus+0xa0>)
 801969e:	681a      	ldr	r2, [r3, #0]
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	611a      	str	r2, [r3, #16]
            break;
 80196a4:	e008      	b.n	80196b8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80196a6:	2214      	movs	r2, #20
 80196a8:	2100      	movs	r1, #0
 80196aa:	6878      	ldr	r0, [r7, #4]
 80196ac:	f000 fbf3 	bl	8019e96 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	220f      	movs	r2, #15
 80196b4:	701a      	strb	r2, [r3, #0]
            break;
 80196b6:	bf00      	nop
    }
}
 80196b8:	bf00      	nop
 80196ba:	3710      	adds	r7, #16
 80196bc:	46bd      	mov	sp, r7
 80196be:	bd80      	pop	{r7, pc}
 80196c0:	20001c78 	.word	0x20001c78

080196c4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b082      	sub	sp, #8
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	4603      	mov	r3, r0
 80196cc:	460a      	mov	r2, r1
 80196ce:	80fb      	strh	r3, [r7, #6]
 80196d0:	4613      	mov	r3, r2
 80196d2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80196d4:	1d7a      	adds	r2, r7, #5
 80196d6:	88f9      	ldrh	r1, [r7, #6]
 80196d8:	2301      	movs	r3, #1
 80196da:	4803      	ldr	r0, [pc, #12]	; (80196e8 <SUBGRF_WriteRegister+0x24>)
 80196dc:	f7ed fc82 	bl	8006fe4 <HAL_SUBGHZ_WriteRegisters>
}
 80196e0:	bf00      	nop
 80196e2:	3708      	adds	r7, #8
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}
 80196e8:	2000021c 	.word	0x2000021c

080196ec <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b084      	sub	sp, #16
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	4603      	mov	r3, r0
 80196f4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80196f6:	f107 020f 	add.w	r2, r7, #15
 80196fa:	88f9      	ldrh	r1, [r7, #6]
 80196fc:	2301      	movs	r3, #1
 80196fe:	4804      	ldr	r0, [pc, #16]	; (8019710 <SUBGRF_ReadRegister+0x24>)
 8019700:	f7ed fccf 	bl	80070a2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019704:	7bfb      	ldrb	r3, [r7, #15]
}
 8019706:	4618      	mov	r0, r3
 8019708:	3710      	adds	r7, #16
 801970a:	46bd      	mov	sp, r7
 801970c:	bd80      	pop	{r7, pc}
 801970e:	bf00      	nop
 8019710:	2000021c 	.word	0x2000021c

08019714 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019714:	b580      	push	{r7, lr}
 8019716:	b086      	sub	sp, #24
 8019718:	af00      	add	r7, sp, #0
 801971a:	4603      	mov	r3, r0
 801971c:	6039      	str	r1, [r7, #0]
 801971e:	80fb      	strh	r3, [r7, #6]
 8019720:	4613      	mov	r3, r2
 8019722:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019724:	f3ef 8310 	mrs	r3, PRIMASK
 8019728:	60fb      	str	r3, [r7, #12]
  return(result);
 801972a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801972c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801972e:	b672      	cpsid	i
}
 8019730:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019732:	88bb      	ldrh	r3, [r7, #4]
 8019734:	88f9      	ldrh	r1, [r7, #6]
 8019736:	683a      	ldr	r2, [r7, #0]
 8019738:	4806      	ldr	r0, [pc, #24]	; (8019754 <SUBGRF_WriteRegisters+0x40>)
 801973a:	f7ed fc53 	bl	8006fe4 <HAL_SUBGHZ_WriteRegisters>
 801973e:	697b      	ldr	r3, [r7, #20]
 8019740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019742:	693b      	ldr	r3, [r7, #16]
 8019744:	f383 8810 	msr	PRIMASK, r3
}
 8019748:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801974a:	bf00      	nop
 801974c:	3718      	adds	r7, #24
 801974e:	46bd      	mov	sp, r7
 8019750:	bd80      	pop	{r7, pc}
 8019752:	bf00      	nop
 8019754:	2000021c 	.word	0x2000021c

08019758 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019758:	b580      	push	{r7, lr}
 801975a:	b086      	sub	sp, #24
 801975c:	af00      	add	r7, sp, #0
 801975e:	4603      	mov	r3, r0
 8019760:	6039      	str	r1, [r7, #0]
 8019762:	80fb      	strh	r3, [r7, #6]
 8019764:	4613      	mov	r3, r2
 8019766:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019768:	f3ef 8310 	mrs	r3, PRIMASK
 801976c:	60fb      	str	r3, [r7, #12]
  return(result);
 801976e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019770:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019772:	b672      	cpsid	i
}
 8019774:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019776:	88bb      	ldrh	r3, [r7, #4]
 8019778:	88f9      	ldrh	r1, [r7, #6]
 801977a:	683a      	ldr	r2, [r7, #0]
 801977c:	4806      	ldr	r0, [pc, #24]	; (8019798 <SUBGRF_ReadRegisters+0x40>)
 801977e:	f7ed fc90 	bl	80070a2 <HAL_SUBGHZ_ReadRegisters>
 8019782:	697b      	ldr	r3, [r7, #20]
 8019784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019786:	693b      	ldr	r3, [r7, #16]
 8019788:	f383 8810 	msr	PRIMASK, r3
}
 801978c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801978e:	bf00      	nop
 8019790:	3718      	adds	r7, #24
 8019792:	46bd      	mov	sp, r7
 8019794:	bd80      	pop	{r7, pc}
 8019796:	bf00      	nop
 8019798:	2000021c 	.word	0x2000021c

0801979c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b086      	sub	sp, #24
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	4603      	mov	r3, r0
 80197a4:	6039      	str	r1, [r7, #0]
 80197a6:	71fb      	strb	r3, [r7, #7]
 80197a8:	4613      	mov	r3, r2
 80197aa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80197ac:	f3ef 8310 	mrs	r3, PRIMASK
 80197b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80197b2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80197b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80197b6:	b672      	cpsid	i
}
 80197b8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80197ba:	79bb      	ldrb	r3, [r7, #6]
 80197bc:	b29b      	uxth	r3, r3
 80197be:	79f9      	ldrb	r1, [r7, #7]
 80197c0:	683a      	ldr	r2, [r7, #0]
 80197c2:	4806      	ldr	r0, [pc, #24]	; (80197dc <SUBGRF_WriteBuffer+0x40>)
 80197c4:	f7ed fd81 	bl	80072ca <HAL_SUBGHZ_WriteBuffer>
 80197c8:	697b      	ldr	r3, [r7, #20]
 80197ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197cc:	693b      	ldr	r3, [r7, #16]
 80197ce:	f383 8810 	msr	PRIMASK, r3
}
 80197d2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80197d4:	bf00      	nop
 80197d6:	3718      	adds	r7, #24
 80197d8:	46bd      	mov	sp, r7
 80197da:	bd80      	pop	{r7, pc}
 80197dc:	2000021c 	.word	0x2000021c

080197e0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80197e0:	b580      	push	{r7, lr}
 80197e2:	b086      	sub	sp, #24
 80197e4:	af00      	add	r7, sp, #0
 80197e6:	4603      	mov	r3, r0
 80197e8:	6039      	str	r1, [r7, #0]
 80197ea:	71fb      	strb	r3, [r7, #7]
 80197ec:	4613      	mov	r3, r2
 80197ee:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80197f0:	f3ef 8310 	mrs	r3, PRIMASK
 80197f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80197f6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80197f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80197fa:	b672      	cpsid	i
}
 80197fc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80197fe:	79bb      	ldrb	r3, [r7, #6]
 8019800:	b29b      	uxth	r3, r3
 8019802:	79f9      	ldrb	r1, [r7, #7]
 8019804:	683a      	ldr	r2, [r7, #0]
 8019806:	4806      	ldr	r0, [pc, #24]	; (8019820 <SUBGRF_ReadBuffer+0x40>)
 8019808:	f7ed fdb2 	bl	8007370 <HAL_SUBGHZ_ReadBuffer>
 801980c:	697b      	ldr	r3, [r7, #20]
 801980e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019810:	693b      	ldr	r3, [r7, #16]
 8019812:	f383 8810 	msr	PRIMASK, r3
}
 8019816:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019818:	bf00      	nop
 801981a:	3718      	adds	r7, #24
 801981c:	46bd      	mov	sp, r7
 801981e:	bd80      	pop	{r7, pc}
 8019820:	2000021c 	.word	0x2000021c

08019824 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019824:	b580      	push	{r7, lr}
 8019826:	b086      	sub	sp, #24
 8019828:	af00      	add	r7, sp, #0
 801982a:	4603      	mov	r3, r0
 801982c:	6039      	str	r1, [r7, #0]
 801982e:	71fb      	strb	r3, [r7, #7]
 8019830:	4613      	mov	r3, r2
 8019832:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019834:	f3ef 8310 	mrs	r3, PRIMASK
 8019838:	60fb      	str	r3, [r7, #12]
  return(result);
 801983a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801983c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801983e:	b672      	cpsid	i
}
 8019840:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019842:	88bb      	ldrh	r3, [r7, #4]
 8019844:	79f9      	ldrb	r1, [r7, #7]
 8019846:	683a      	ldr	r2, [r7, #0]
 8019848:	4806      	ldr	r0, [pc, #24]	; (8019864 <SUBGRF_WriteCommand+0x40>)
 801984a:	f7ed fc8b 	bl	8007164 <HAL_SUBGHZ_ExecSetCmd>
 801984e:	697b      	ldr	r3, [r7, #20]
 8019850:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019852:	693b      	ldr	r3, [r7, #16]
 8019854:	f383 8810 	msr	PRIMASK, r3
}
 8019858:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801985a:	bf00      	nop
 801985c:	3718      	adds	r7, #24
 801985e:	46bd      	mov	sp, r7
 8019860:	bd80      	pop	{r7, pc}
 8019862:	bf00      	nop
 8019864:	2000021c 	.word	0x2000021c

08019868 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b086      	sub	sp, #24
 801986c:	af00      	add	r7, sp, #0
 801986e:	4603      	mov	r3, r0
 8019870:	6039      	str	r1, [r7, #0]
 8019872:	71fb      	strb	r3, [r7, #7]
 8019874:	4613      	mov	r3, r2
 8019876:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019878:	f3ef 8310 	mrs	r3, PRIMASK
 801987c:	60fb      	str	r3, [r7, #12]
  return(result);
 801987e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019880:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019882:	b672      	cpsid	i
}
 8019884:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019886:	88bb      	ldrh	r3, [r7, #4]
 8019888:	79f9      	ldrb	r1, [r7, #7]
 801988a:	683a      	ldr	r2, [r7, #0]
 801988c:	4806      	ldr	r0, [pc, #24]	; (80198a8 <SUBGRF_ReadCommand+0x40>)
 801988e:	f7ed fcc8 	bl	8007222 <HAL_SUBGHZ_ExecGetCmd>
 8019892:	697b      	ldr	r3, [r7, #20]
 8019894:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019896:	693b      	ldr	r3, [r7, #16]
 8019898:	f383 8810 	msr	PRIMASK, r3
}
 801989c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801989e:	bf00      	nop
 80198a0:	3718      	adds	r7, #24
 80198a2:	46bd      	mov	sp, r7
 80198a4:	bd80      	pop	{r7, pc}
 80198a6:	bf00      	nop
 80198a8:	2000021c 	.word	0x2000021c

080198ac <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80198ac:	b580      	push	{r7, lr}
 80198ae:	b084      	sub	sp, #16
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	4603      	mov	r3, r0
 80198b4:	460a      	mov	r2, r1
 80198b6:	71fb      	strb	r3, [r7, #7]
 80198b8:	4613      	mov	r3, r2
 80198ba:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80198bc:	2301      	movs	r3, #1
 80198be:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80198c0:	79bb      	ldrb	r3, [r7, #6]
 80198c2:	2b01      	cmp	r3, #1
 80198c4:	d10d      	bne.n	80198e2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80198c6:	79fb      	ldrb	r3, [r7, #7]
 80198c8:	2b01      	cmp	r3, #1
 80198ca:	d104      	bne.n	80198d6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80198cc:	2302      	movs	r3, #2
 80198ce:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80198d0:	2004      	movs	r0, #4
 80198d2:	f000 f8df 	bl	8019a94 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80198d6:	79fb      	ldrb	r3, [r7, #7]
 80198d8:	2b02      	cmp	r3, #2
 80198da:	d107      	bne.n	80198ec <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80198dc:	2303      	movs	r3, #3
 80198de:	73fb      	strb	r3, [r7, #15]
 80198e0:	e004      	b.n	80198ec <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80198e2:	79bb      	ldrb	r3, [r7, #6]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d101      	bne.n	80198ec <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80198e8:	2301      	movs	r3, #1
 80198ea:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80198ec:	7bfb      	ldrb	r3, [r7, #15]
 80198ee:	4618      	mov	r0, r3
 80198f0:	f7f1 f809 	bl	800a906 <RBI_ConfigRFSwitch>
}
 80198f4:	bf00      	nop
 80198f6:	3710      	adds	r7, #16
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bd80      	pop	{r7, pc}

080198fc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b084      	sub	sp, #16
 8019900:	af00      	add	r7, sp, #0
 8019902:	4603      	mov	r3, r0
 8019904:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019906:	2301      	movs	r3, #1
 8019908:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801990a:	f7f1 f80a 	bl	800a922 <RBI_GetTxConfig>
 801990e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019910:	68bb      	ldr	r3, [r7, #8]
 8019912:	2b02      	cmp	r3, #2
 8019914:	d016      	beq.n	8019944 <SUBGRF_SetRfTxPower+0x48>
 8019916:	68bb      	ldr	r3, [r7, #8]
 8019918:	2b02      	cmp	r3, #2
 801991a:	dc16      	bgt.n	801994a <SUBGRF_SetRfTxPower+0x4e>
 801991c:	68bb      	ldr	r3, [r7, #8]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d003      	beq.n	801992a <SUBGRF_SetRfTxPower+0x2e>
 8019922:	68bb      	ldr	r3, [r7, #8]
 8019924:	2b01      	cmp	r3, #1
 8019926:	d00a      	beq.n	801993e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019928:	e00f      	b.n	801994a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801992a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801992e:	2b0f      	cmp	r3, #15
 8019930:	dd02      	ble.n	8019938 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019932:	2302      	movs	r3, #2
 8019934:	73fb      	strb	r3, [r7, #15]
            break;
 8019936:	e009      	b.n	801994c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019938:	2301      	movs	r3, #1
 801993a:	73fb      	strb	r3, [r7, #15]
            break;
 801993c:	e006      	b.n	801994c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801993e:	2301      	movs	r3, #1
 8019940:	73fb      	strb	r3, [r7, #15]
            break;
 8019942:	e003      	b.n	801994c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019944:	2302      	movs	r3, #2
 8019946:	73fb      	strb	r3, [r7, #15]
            break;
 8019948:	e000      	b.n	801994c <SUBGRF_SetRfTxPower+0x50>
            break;
 801994a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801994c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019950:	7bfb      	ldrb	r3, [r7, #15]
 8019952:	2202      	movs	r2, #2
 8019954:	4618      	mov	r0, r3
 8019956:	f7ff fbcd 	bl	80190f4 <SUBGRF_SetTxParams>

    return paSelect;
 801995a:	7bfb      	ldrb	r3, [r7, #15]
}
 801995c:	4618      	mov	r0, r3
 801995e:	3710      	adds	r7, #16
 8019960:	46bd      	mov	sp, r7
 8019962:	bd80      	pop	{r7, pc}

08019964 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019964:	b480      	push	{r7}
 8019966:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019968:	2301      	movs	r3, #1
}
 801996a:	4618      	mov	r0, r3
 801996c:	46bd      	mov	sp, r7
 801996e:	bc80      	pop	{r7}
 8019970:	4770      	bx	lr
	...

08019974 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019974:	b580      	push	{r7, lr}
 8019976:	b082      	sub	sp, #8
 8019978:	af00      	add	r7, sp, #0
 801997a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801997c:	4b03      	ldr	r3, [pc, #12]	; (801998c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	2001      	movs	r0, #1
 8019982:	4798      	blx	r3
}
 8019984:	bf00      	nop
 8019986:	3708      	adds	r7, #8
 8019988:	46bd      	mov	sp, r7
 801998a:	bd80      	pop	{r7, pc}
 801998c:	20001c80 	.word	0x20001c80

08019990 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019990:	b580      	push	{r7, lr}
 8019992:	b082      	sub	sp, #8
 8019994:	af00      	add	r7, sp, #0
 8019996:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019998:	4b03      	ldr	r3, [pc, #12]	; (80199a8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	2002      	movs	r0, #2
 801999e:	4798      	blx	r3
}
 80199a0:	bf00      	nop
 80199a2:	3708      	adds	r7, #8
 80199a4:	46bd      	mov	sp, r7
 80199a6:	bd80      	pop	{r7, pc}
 80199a8:	20001c80 	.word	0x20001c80

080199ac <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b082      	sub	sp, #8
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80199b4:	4b03      	ldr	r3, [pc, #12]	; (80199c4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	2040      	movs	r0, #64	; 0x40
 80199ba:	4798      	blx	r3
}
 80199bc:	bf00      	nop
 80199be:	3708      	adds	r7, #8
 80199c0:	46bd      	mov	sp, r7
 80199c2:	bd80      	pop	{r7, pc}
 80199c4:	20001c80 	.word	0x20001c80

080199c8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b082      	sub	sp, #8
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
 80199d0:	460b      	mov	r3, r1
 80199d2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80199d4:	78fb      	ldrb	r3, [r7, #3]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d002      	beq.n	80199e0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80199da:	2b01      	cmp	r3, #1
 80199dc:	d005      	beq.n	80199ea <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80199de:	e00a      	b.n	80199f6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80199e0:	4b07      	ldr	r3, [pc, #28]	; (8019a00 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	2080      	movs	r0, #128	; 0x80
 80199e6:	4798      	blx	r3
            break;
 80199e8:	e005      	b.n	80199f6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80199ea:	4b05      	ldr	r3, [pc, #20]	; (8019a00 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80199f2:	4798      	blx	r3
            break;
 80199f4:	bf00      	nop
    }
}
 80199f6:	bf00      	nop
 80199f8:	3708      	adds	r7, #8
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bd80      	pop	{r7, pc}
 80199fe:	bf00      	nop
 8019a00:	20001c80 	.word	0x20001c80

08019a04 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019a04:	b580      	push	{r7, lr}
 8019a06:	b082      	sub	sp, #8
 8019a08:	af00      	add	r7, sp, #0
 8019a0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019a0c:	4b04      	ldr	r3, [pc, #16]	; (8019a20 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019a14:	4798      	blx	r3
}
 8019a16:	bf00      	nop
 8019a18:	3708      	adds	r7, #8
 8019a1a:	46bd      	mov	sp, r7
 8019a1c:	bd80      	pop	{r7, pc}
 8019a1e:	bf00      	nop
 8019a20:	20001c80 	.word	0x20001c80

08019a24 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b082      	sub	sp, #8
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019a2c:	4b03      	ldr	r3, [pc, #12]	; (8019a3c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	2020      	movs	r0, #32
 8019a32:	4798      	blx	r3
}
 8019a34:	bf00      	nop
 8019a36:	3708      	adds	r7, #8
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	bd80      	pop	{r7, pc}
 8019a3c:	20001c80 	.word	0x20001c80

08019a40 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b082      	sub	sp, #8
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019a48:	4b03      	ldr	r3, [pc, #12]	; (8019a58 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	2004      	movs	r0, #4
 8019a4e:	4798      	blx	r3
}
 8019a50:	bf00      	nop
 8019a52:	3708      	adds	r7, #8
 8019a54:	46bd      	mov	sp, r7
 8019a56:	bd80      	pop	{r7, pc}
 8019a58:	20001c80 	.word	0x20001c80

08019a5c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b082      	sub	sp, #8
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019a64:	4b03      	ldr	r3, [pc, #12]	; (8019a74 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	2008      	movs	r0, #8
 8019a6a:	4798      	blx	r3
}
 8019a6c:	bf00      	nop
 8019a6e:	3708      	adds	r7, #8
 8019a70:	46bd      	mov	sp, r7
 8019a72:	bd80      	pop	{r7, pc}
 8019a74:	20001c80 	.word	0x20001c80

08019a78 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b082      	sub	sp, #8
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019a80:	4b03      	ldr	r3, [pc, #12]	; (8019a90 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	2010      	movs	r0, #16
 8019a86:	4798      	blx	r3
}
 8019a88:	bf00      	nop
 8019a8a:	3708      	adds	r7, #8
 8019a8c:	46bd      	mov	sp, r7
 8019a8e:	bd80      	pop	{r7, pc}
 8019a90:	20001c80 	.word	0x20001c80

08019a94 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b084      	sub	sp, #16
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	4603      	mov	r3, r0
 8019a9c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019a9e:	f7f0 ff4e 	bl	800a93e <RBI_IsDCDC>
 8019aa2:	4603      	mov	r3, r0
 8019aa4:	2b01      	cmp	r3, #1
 8019aa6:	d112      	bne.n	8019ace <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019aa8:	f640 1023 	movw	r0, #2339	; 0x923
 8019aac:	f7ff fe1e 	bl	80196ec <SUBGRF_ReadRegister>
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019ab4:	7bfb      	ldrb	r3, [r7, #15]
 8019ab6:	f023 0306 	bic.w	r3, r3, #6
 8019aba:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019abc:	7bfa      	ldrb	r2, [r7, #15]
 8019abe:	79fb      	ldrb	r3, [r7, #7]
 8019ac0:	4313      	orrs	r3, r2
 8019ac2:	b2db      	uxtb	r3, r3
 8019ac4:	4619      	mov	r1, r3
 8019ac6:	f640 1023 	movw	r0, #2339	; 0x923
 8019aca:	f7ff fdfb 	bl	80196c4 <SUBGRF_WriteRegister>
  }
}
 8019ace:	bf00      	nop
 8019ad0:	3710      	adds	r7, #16
 8019ad2:	46bd      	mov	sp, r7
 8019ad4:	bd80      	pop	{r7, pc}
	...

08019ad8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019ad8:	b480      	push	{r7}
 8019ada:	b085      	sub	sp, #20
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d101      	bne.n	8019aea <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8019ae6:	231f      	movs	r3, #31
 8019ae8:	e016      	b.n	8019b18 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019aea:	2300      	movs	r3, #0
 8019aec:	73fb      	strb	r3, [r7, #15]
 8019aee:	e00f      	b.n	8019b10 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019af0:	7bfb      	ldrb	r3, [r7, #15]
 8019af2:	4a0c      	ldr	r2, [pc, #48]	; (8019b24 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019af4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019af8:	687a      	ldr	r2, [r7, #4]
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d205      	bcs.n	8019b0a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019afe:	7bfb      	ldrb	r3, [r7, #15]
 8019b00:	4a08      	ldr	r2, [pc, #32]	; (8019b24 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019b02:	00db      	lsls	r3, r3, #3
 8019b04:	4413      	add	r3, r2
 8019b06:	791b      	ldrb	r3, [r3, #4]
 8019b08:	e006      	b.n	8019b18 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019b0a:	7bfb      	ldrb	r3, [r7, #15]
 8019b0c:	3301      	adds	r3, #1
 8019b0e:	73fb      	strb	r3, [r7, #15]
 8019b10:	7bfb      	ldrb	r3, [r7, #15]
 8019b12:	2b15      	cmp	r3, #21
 8019b14:	d9ec      	bls.n	8019af0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8019b16:	e7fe      	b.n	8019b16 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019b18:	4618      	mov	r0, r3
 8019b1a:	3714      	adds	r7, #20
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	bc80      	pop	{r7}
 8019b20:	4770      	bx	lr
 8019b22:	bf00      	nop
 8019b24:	0801c434 	.word	0x0801c434

08019b28 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	b08a      	sub	sp, #40	; 0x28
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	6078      	str	r0, [r7, #4]
 8019b30:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019b32:	4b35      	ldr	r3, [pc, #212]	; (8019c08 <SUBGRF_GetCFO+0xe0>)
 8019b34:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8019b36:	f640 0007 	movw	r0, #2055	; 0x807
 8019b3a:	f7ff fdd7 	bl	80196ec <SUBGRF_ReadRegister>
 8019b3e:	4603      	mov	r3, r0
 8019b40:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019b42:	7ffb      	ldrb	r3, [r7, #31]
 8019b44:	08db      	lsrs	r3, r3, #3
 8019b46:	b2db      	uxtb	r3, r3
 8019b48:	f003 0303 	and.w	r3, r3, #3
 8019b4c:	3328      	adds	r3, #40	; 0x28
 8019b4e:	443b      	add	r3, r7
 8019b50:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019b54:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019b56:	7ffb      	ldrb	r3, [r7, #31]
 8019b58:	f003 0307 	and.w	r3, r3, #7
 8019b5c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8019b5e:	7fba      	ldrb	r2, [r7, #30]
 8019b60:	7f7b      	ldrb	r3, [r7, #29]
 8019b62:	3b01      	subs	r3, #1
 8019b64:	fa02 f303 	lsl.w	r3, r2, r3
 8019b68:	461a      	mov	r2, r3
 8019b6a:	4b28      	ldr	r3, [pc, #160]	; (8019c0c <SUBGRF_GetCFO+0xe4>)
 8019b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019b70:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019b72:	69ba      	ldr	r2, [r7, #24]
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b7a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019b7c:	2301      	movs	r3, #1
 8019b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019b82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b86:	697a      	ldr	r2, [r7, #20]
 8019b88:	fb02 f303 	mul.w	r3, r2, r3
 8019b8c:	2b07      	cmp	r3, #7
 8019b8e:	d802      	bhi.n	8019b96 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8019b90:	2302      	movs	r3, #2
 8019b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8019b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b9a:	697a      	ldr	r2, [r7, #20]
 8019b9c:	fb02 f303 	mul.w	r3, r2, r3
 8019ba0:	2b03      	cmp	r3, #3
 8019ba2:	d802      	bhi.n	8019baa <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8019ba4:	2304      	movs	r3, #4
 8019ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019baa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019bae:	69bb      	ldr	r3, [r7, #24]
 8019bb0:	fb02 f303 	mul.w	r3, r2, r3
 8019bb4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8019bb6:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8019bba:	f7ff fd97 	bl	80196ec <SUBGRF_ReadRegister>
 8019bbe:	4603      	mov	r3, r0
 8019bc0:	021b      	lsls	r3, r3, #8
 8019bc2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019bc6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8019bc8:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8019bcc:	f7ff fd8e 	bl	80196ec <SUBGRF_ReadRegister>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	461a      	mov	r2, r3
 8019bd4:	6a3b      	ldr	r3, [r7, #32]
 8019bd6:	4313      	orrs	r3, r2
 8019bd8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019bda:	6a3b      	ldr	r3, [r7, #32]
 8019bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d005      	beq.n	8019bf0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8019be4:	6a3b      	ldr	r3, [r7, #32]
 8019be6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019bea:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019bee:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019bf0:	693b      	ldr	r3, [r7, #16]
 8019bf2:	095b      	lsrs	r3, r3, #5
 8019bf4:	6a3a      	ldr	r2, [r7, #32]
 8019bf6:	fb02 f303 	mul.w	r3, r2, r3
 8019bfa:	11da      	asrs	r2, r3, #7
 8019bfc:	683b      	ldr	r3, [r7, #0]
 8019bfe:	601a      	str	r2, [r3, #0]
}
 8019c00:	bf00      	nop
 8019c02:	3728      	adds	r7, #40	; 0x28
 8019c04:	46bd      	mov	sp, r7
 8019c06:	bd80      	pop	{r7, pc}
 8019c08:	0c0a0804 	.word	0x0c0a0804
 8019c0c:	01e84800 	.word	0x01e84800

08019c10 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019c10:	b480      	push	{r7}
 8019c12:	b087      	sub	sp, #28
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	4603      	mov	r3, r0
 8019c18:	60b9      	str	r1, [r7, #8]
 8019c1a:	607a      	str	r2, [r7, #4]
 8019c1c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8019c1e:	2300      	movs	r3, #0
 8019c20:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8019c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c26:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019c28:	697b      	ldr	r3, [r7, #20]
}
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	371c      	adds	r7, #28
 8019c2e:	46bd      	mov	sp, r7
 8019c30:	bc80      	pop	{r7}
 8019c32:	4770      	bx	lr

08019c34 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019c34:	b480      	push	{r7}
 8019c36:	b087      	sub	sp, #28
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	60b9      	str	r1, [r7, #8]
 8019c3e:	607a      	str	r2, [r7, #4]
 8019c40:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8019c42:	2300      	movs	r3, #0
 8019c44:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8019c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c4a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019c4c:	697b      	ldr	r3, [r7, #20]
}
 8019c4e:	4618      	mov	r0, r3
 8019c50:	371c      	adds	r7, #28
 8019c52:	46bd      	mov	sp, r7
 8019c54:	bc80      	pop	{r7}
 8019c56:	4770      	bx	lr

08019c58 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8019c58:	b480      	push	{r7}
 8019c5a:	b085      	sub	sp, #20
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	60f8      	str	r0, [r7, #12]
 8019c60:	60b9      	str	r1, [r7, #8]
 8019c62:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8019c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 8019c68:	4618      	mov	r0, r3
 8019c6a:	3714      	adds	r7, #20
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bc80      	pop	{r7}
 8019c70:	4770      	bx	lr

08019c72 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8019c72:	b480      	push	{r7}
 8019c74:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8019c76:	bf00      	nop
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	bc80      	pop	{r7}
 8019c7c:	4770      	bx	lr

08019c7e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8019c7e:	b480      	push	{r7}
 8019c80:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8019c82:	2300      	movs	r3, #0
#endif
}
 8019c84:	4618      	mov	r0, r3
 8019c86:	46bd      	mov	sp, r7
 8019c88:	bc80      	pop	{r7}
 8019c8a:	4770      	bx	lr

08019c8c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019c8c:	b480      	push	{r7}
 8019c8e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8019c90:	2300      	movs	r3, #0
#endif
}
 8019c92:	4618      	mov	r0, r3
 8019c94:	46bd      	mov	sp, r7
 8019c96:	bc80      	pop	{r7}
 8019c98:	4770      	bx	lr

08019c9a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8019c9a:	b480      	push	{r7}
 8019c9c:	b083      	sub	sp, #12
 8019c9e:	af00      	add	r7, sp, #0
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019ca4:	bf00      	nop
 8019ca6:	370c      	adds	r7, #12
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bc80      	pop	{r7}
 8019cac:	4770      	bx	lr

08019cae <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8019cae:	b480      	push	{r7}
 8019cb0:	b087      	sub	sp, #28
 8019cb2:	af00      	add	r7, sp, #0
 8019cb4:	60f8      	str	r0, [r7, #12]
 8019cb6:	460b      	mov	r3, r1
 8019cb8:	607a      	str	r2, [r7, #4]
 8019cba:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019cc0:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 8019cc2:	697b      	ldr	r3, [r7, #20]
}
 8019cc4:	4618      	mov	r0, r3
 8019cc6:	371c      	adds	r7, #28
 8019cc8:	46bd      	mov	sp, r7
 8019cca:	bc80      	pop	{r7}
 8019ccc:	4770      	bx	lr

08019cce <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019cce:	b480      	push	{r7}
 8019cd0:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8019cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 8019cd6:	4618      	mov	r0, r3
 8019cd8:	46bd      	mov	sp, r7
 8019cda:	bc80      	pop	{r7}
 8019cdc:	4770      	bx	lr

08019cde <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8019cde:	b480      	push	{r7}
 8019ce0:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8019ce2:	bf00      	nop
 8019ce4:	46bd      	mov	sp, r7
 8019ce6:	bc80      	pop	{r7}
 8019ce8:	4770      	bx	lr

08019cea <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019cea:	b480      	push	{r7}
 8019cec:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8019cee:	bf00      	nop
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	bc80      	pop	{r7}
 8019cf4:	4770      	bx	lr

08019cf6 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8019cf6:	b480      	push	{r7}
 8019cf8:	b083      	sub	sp, #12
 8019cfa:	af00      	add	r7, sp, #0
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8019d00:	bf00      	nop
 8019d02:	370c      	adds	r7, #12
 8019d04:	46bd      	mov	sp, r7
 8019d06:	bc80      	pop	{r7}
 8019d08:	4770      	bx	lr
	...

08019d0c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019d0c:	b480      	push	{r7}
 8019d0e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019d10:	4b04      	ldr	r3, [pc, #16]	; (8019d24 <UTIL_LPM_Init+0x18>)
 8019d12:	2200      	movs	r2, #0
 8019d14:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019d16:	4b04      	ldr	r3, [pc, #16]	; (8019d28 <UTIL_LPM_Init+0x1c>)
 8019d18:	2200      	movs	r2, #0
 8019d1a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019d1c:	bf00      	nop
 8019d1e:	46bd      	mov	sp, r7
 8019d20:	bc80      	pop	{r7}
 8019d22:	4770      	bx	lr
 8019d24:	20001c84 	.word	0x20001c84
 8019d28:	20001c88 	.word	0x20001c88

08019d2c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019d2c:	b480      	push	{r7}
 8019d2e:	b087      	sub	sp, #28
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	6078      	str	r0, [r7, #4]
 8019d34:	460b      	mov	r3, r1
 8019d36:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d38:	f3ef 8310 	mrs	r3, PRIMASK
 8019d3c:	613b      	str	r3, [r7, #16]
  return(result);
 8019d3e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019d40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d42:	b672      	cpsid	i
}
 8019d44:	bf00      	nop
  
  switch( state )
 8019d46:	78fb      	ldrb	r3, [r7, #3]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d008      	beq.n	8019d5e <UTIL_LPM_SetStopMode+0x32>
 8019d4c:	2b01      	cmp	r3, #1
 8019d4e:	d10e      	bne.n	8019d6e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019d50:	4b0d      	ldr	r3, [pc, #52]	; (8019d88 <UTIL_LPM_SetStopMode+0x5c>)
 8019d52:	681a      	ldr	r2, [r3, #0]
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	4313      	orrs	r3, r2
 8019d58:	4a0b      	ldr	r2, [pc, #44]	; (8019d88 <UTIL_LPM_SetStopMode+0x5c>)
 8019d5a:	6013      	str	r3, [r2, #0]
      break;
 8019d5c:	e008      	b.n	8019d70 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	43da      	mvns	r2, r3
 8019d62:	4b09      	ldr	r3, [pc, #36]	; (8019d88 <UTIL_LPM_SetStopMode+0x5c>)
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	4013      	ands	r3, r2
 8019d68:	4a07      	ldr	r2, [pc, #28]	; (8019d88 <UTIL_LPM_SetStopMode+0x5c>)
 8019d6a:	6013      	str	r3, [r2, #0]
      break;
 8019d6c:	e000      	b.n	8019d70 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019d6e:	bf00      	nop
 8019d70:	697b      	ldr	r3, [r7, #20]
 8019d72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	f383 8810 	msr	PRIMASK, r3
}
 8019d7a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019d7c:	bf00      	nop
 8019d7e:	371c      	adds	r7, #28
 8019d80:	46bd      	mov	sp, r7
 8019d82:	bc80      	pop	{r7}
 8019d84:	4770      	bx	lr
 8019d86:	bf00      	nop
 8019d88:	20001c84 	.word	0x20001c84

08019d8c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019d8c:	b480      	push	{r7}
 8019d8e:	b087      	sub	sp, #28
 8019d90:	af00      	add	r7, sp, #0
 8019d92:	6078      	str	r0, [r7, #4]
 8019d94:	460b      	mov	r3, r1
 8019d96:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d98:	f3ef 8310 	mrs	r3, PRIMASK
 8019d9c:	613b      	str	r3, [r7, #16]
  return(result);
 8019d9e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019da0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019da2:	b672      	cpsid	i
}
 8019da4:	bf00      	nop
  
  switch(state)
 8019da6:	78fb      	ldrb	r3, [r7, #3]
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d008      	beq.n	8019dbe <UTIL_LPM_SetOffMode+0x32>
 8019dac:	2b01      	cmp	r3, #1
 8019dae:	d10e      	bne.n	8019dce <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019db0:	4b0d      	ldr	r3, [pc, #52]	; (8019de8 <UTIL_LPM_SetOffMode+0x5c>)
 8019db2:	681a      	ldr	r2, [r3, #0]
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	4313      	orrs	r3, r2
 8019db8:	4a0b      	ldr	r2, [pc, #44]	; (8019de8 <UTIL_LPM_SetOffMode+0x5c>)
 8019dba:	6013      	str	r3, [r2, #0]
      break;
 8019dbc:	e008      	b.n	8019dd0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	43da      	mvns	r2, r3
 8019dc2:	4b09      	ldr	r3, [pc, #36]	; (8019de8 <UTIL_LPM_SetOffMode+0x5c>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	4013      	ands	r3, r2
 8019dc8:	4a07      	ldr	r2, [pc, #28]	; (8019de8 <UTIL_LPM_SetOffMode+0x5c>)
 8019dca:	6013      	str	r3, [r2, #0]
      break;
 8019dcc:	e000      	b.n	8019dd0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019dce:	bf00      	nop
 8019dd0:	697b      	ldr	r3, [r7, #20]
 8019dd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	f383 8810 	msr	PRIMASK, r3
}
 8019dda:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019ddc:	bf00      	nop
 8019dde:	371c      	adds	r7, #28
 8019de0:	46bd      	mov	sp, r7
 8019de2:	bc80      	pop	{r7}
 8019de4:	4770      	bx	lr
 8019de6:	bf00      	nop
 8019de8:	20001c88 	.word	0x20001c88

08019dec <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b084      	sub	sp, #16
 8019df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019df2:	f3ef 8310 	mrs	r3, PRIMASK
 8019df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8019df8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8019dfa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019dfc:	b672      	cpsid	i
}
 8019dfe:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8019e00:	4b12      	ldr	r3, [pc, #72]	; (8019e4c <UTIL_LPM_EnterLowPower+0x60>)
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d006      	beq.n	8019e16 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8019e08:	4b11      	ldr	r3, [pc, #68]	; (8019e50 <UTIL_LPM_EnterLowPower+0x64>)
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8019e0e:	4b10      	ldr	r3, [pc, #64]	; (8019e50 <UTIL_LPM_EnterLowPower+0x64>)
 8019e10:	685b      	ldr	r3, [r3, #4]
 8019e12:	4798      	blx	r3
 8019e14:	e010      	b.n	8019e38 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8019e16:	4b0f      	ldr	r3, [pc, #60]	; (8019e54 <UTIL_LPM_EnterLowPower+0x68>)
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d006      	beq.n	8019e2c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8019e1e:	4b0c      	ldr	r3, [pc, #48]	; (8019e50 <UTIL_LPM_EnterLowPower+0x64>)
 8019e20:	689b      	ldr	r3, [r3, #8]
 8019e22:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019e24:	4b0a      	ldr	r3, [pc, #40]	; (8019e50 <UTIL_LPM_EnterLowPower+0x64>)
 8019e26:	68db      	ldr	r3, [r3, #12]
 8019e28:	4798      	blx	r3
 8019e2a:	e005      	b.n	8019e38 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8019e2c:	4b08      	ldr	r3, [pc, #32]	; (8019e50 <UTIL_LPM_EnterLowPower+0x64>)
 8019e2e:	691b      	ldr	r3, [r3, #16]
 8019e30:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019e32:	4b07      	ldr	r3, [pc, #28]	; (8019e50 <UTIL_LPM_EnterLowPower+0x64>)
 8019e34:	695b      	ldr	r3, [r3, #20]
 8019e36:	4798      	blx	r3
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	f383 8810 	msr	PRIMASK, r3
}
 8019e42:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8019e44:	bf00      	nop
 8019e46:	3710      	adds	r7, #16
 8019e48:	46bd      	mov	sp, r7
 8019e4a:	bd80      	pop	{r7, pc}
 8019e4c:	20001c84 	.word	0x20001c84
 8019e50:	0801bf34 	.word	0x0801bf34
 8019e54:	20001c88 	.word	0x20001c88

08019e58 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8019e58:	b480      	push	{r7}
 8019e5a:	b087      	sub	sp, #28
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	60f8      	str	r0, [r7, #12]
 8019e60:	60b9      	str	r1, [r7, #8]
 8019e62:	4613      	mov	r3, r2
 8019e64:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	613b      	str	r3, [r7, #16]

  while( size-- )
 8019e6e:	e007      	b.n	8019e80 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019e70:	693a      	ldr	r2, [r7, #16]
 8019e72:	1c53      	adds	r3, r2, #1
 8019e74:	613b      	str	r3, [r7, #16]
 8019e76:	697b      	ldr	r3, [r7, #20]
 8019e78:	1c59      	adds	r1, r3, #1
 8019e7a:	6179      	str	r1, [r7, #20]
 8019e7c:	7812      	ldrb	r2, [r2, #0]
 8019e7e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019e80:	88fb      	ldrh	r3, [r7, #6]
 8019e82:	1e5a      	subs	r2, r3, #1
 8019e84:	80fa      	strh	r2, [r7, #6]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d1f2      	bne.n	8019e70 <UTIL_MEM_cpy_8+0x18>
    }
}
 8019e8a:	bf00      	nop
 8019e8c:	bf00      	nop
 8019e8e:	371c      	adds	r7, #28
 8019e90:	46bd      	mov	sp, r7
 8019e92:	bc80      	pop	{r7}
 8019e94:	4770      	bx	lr

08019e96 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019e96:	b480      	push	{r7}
 8019e98:	b085      	sub	sp, #20
 8019e9a:	af00      	add	r7, sp, #0
 8019e9c:	6078      	str	r0, [r7, #4]
 8019e9e:	460b      	mov	r3, r1
 8019ea0:	70fb      	strb	r3, [r7, #3]
 8019ea2:	4613      	mov	r3, r2
 8019ea4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8019eaa:	e004      	b.n	8019eb6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	1c5a      	adds	r2, r3, #1
 8019eb0:	60fa      	str	r2, [r7, #12]
 8019eb2:	78fa      	ldrb	r2, [r7, #3]
 8019eb4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019eb6:	883b      	ldrh	r3, [r7, #0]
 8019eb8:	1e5a      	subs	r2, r3, #1
 8019eba:	803a      	strh	r2, [r7, #0]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d1f5      	bne.n	8019eac <UTIL_MEM_set_8+0x16>
  }
}
 8019ec0:	bf00      	nop
 8019ec2:	bf00      	nop
 8019ec4:	3714      	adds	r7, #20
 8019ec6:	46bd      	mov	sp, r7
 8019ec8:	bc80      	pop	{r7}
 8019eca:	4770      	bx	lr

08019ecc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019ecc:	b082      	sub	sp, #8
 8019ece:	b480      	push	{r7}
 8019ed0:	b087      	sub	sp, #28
 8019ed2:	af00      	add	r7, sp, #0
 8019ed4:	60f8      	str	r0, [r7, #12]
 8019ed6:	1d38      	adds	r0, r7, #4
 8019ed8:	e880 0006 	stmia.w	r0, {r1, r2}
 8019edc:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019ede:	2300      	movs	r3, #0
 8019ee0:	613b      	str	r3, [r7, #16]
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019ee6:	687a      	ldr	r2, [r7, #4]
 8019ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eea:	4413      	add	r3, r2
 8019eec:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019eee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019ef2:	b29a      	uxth	r2, r3
 8019ef4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019ef8:	b29b      	uxth	r3, r3
 8019efa:	4413      	add	r3, r2
 8019efc:	b29b      	uxth	r3, r3
 8019efe:	b21b      	sxth	r3, r3
 8019f00:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019f02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019f0a:	db0a      	blt.n	8019f22 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019f0c:	693b      	ldr	r3, [r7, #16]
 8019f0e:	3301      	adds	r3, #1
 8019f10:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019f12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019f16:	b29b      	uxth	r3, r3
 8019f18:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019f1c:	b29b      	uxth	r3, r3
 8019f1e:	b21b      	sxth	r3, r3
 8019f20:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	461a      	mov	r2, r3
 8019f26:	f107 0310 	add.w	r3, r7, #16
 8019f2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019f2e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019f32:	68f8      	ldr	r0, [r7, #12]
 8019f34:	371c      	adds	r7, #28
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bc80      	pop	{r7}
 8019f3a:	b002      	add	sp, #8
 8019f3c:	4770      	bx	lr

08019f3e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019f3e:	b082      	sub	sp, #8
 8019f40:	b480      	push	{r7}
 8019f42:	b087      	sub	sp, #28
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	60f8      	str	r0, [r7, #12]
 8019f48:	1d38      	adds	r0, r7, #4
 8019f4a:	e880 0006 	stmia.w	r0, {r1, r2}
 8019f4e:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019f50:	2300      	movs	r3, #0
 8019f52:	613b      	str	r3, [r7, #16]
 8019f54:	2300      	movs	r3, #0
 8019f56:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019f58:	687a      	ldr	r2, [r7, #4]
 8019f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f5c:	1ad3      	subs	r3, r2, r3
 8019f5e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019f60:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019f64:	b29a      	uxth	r2, r3
 8019f66:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	1ad3      	subs	r3, r2, r3
 8019f6e:	b29b      	uxth	r3, r3
 8019f70:	b21b      	sxth	r3, r3
 8019f72:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019f74:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	da0a      	bge.n	8019f92 <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019f7c:	693b      	ldr	r3, [r7, #16]
 8019f7e:	3b01      	subs	r3, #1
 8019f80:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019f82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019f86:	b29b      	uxth	r3, r3
 8019f88:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8019f8c:	b29b      	uxth	r3, r3
 8019f8e:	b21b      	sxth	r3, r3
 8019f90:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	461a      	mov	r2, r3
 8019f96:	f107 0310 	add.w	r3, r7, #16
 8019f9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019f9e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019fa2:	68f8      	ldr	r0, [r7, #12]
 8019fa4:	371c      	adds	r7, #28
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	bc80      	pop	{r7}
 8019faa:	b002      	add	sp, #8
 8019fac:	4770      	bx	lr
	...

08019fb0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b088      	sub	sp, #32
 8019fb4:	af02      	add	r7, sp, #8
 8019fb6:	463b      	mov	r3, r7
 8019fb8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	60bb      	str	r3, [r7, #8]
 8019fc0:	2300      	movs	r3, #0
 8019fc2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019fc4:	4b10      	ldr	r3, [pc, #64]	; (801a008 <SysTimeSet+0x58>)
 8019fc6:	691b      	ldr	r3, [r3, #16]
 8019fc8:	f107 0208 	add.w	r2, r7, #8
 8019fcc:	3204      	adds	r2, #4
 8019fce:	4610      	mov	r0, r2
 8019fd0:	4798      	blx	r3
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019fd6:	f107 0010 	add.w	r0, r7, #16
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	9300      	str	r3, [sp, #0]
 8019fde:	68bb      	ldr	r3, [r7, #8]
 8019fe0:	463a      	mov	r2, r7
 8019fe2:	ca06      	ldmia	r2, {r1, r2}
 8019fe4:	f7ff ffab 	bl	8019f3e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019fe8:	4b07      	ldr	r3, [pc, #28]	; (801a008 <SysTimeSet+0x58>)
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	693a      	ldr	r2, [r7, #16]
 8019fee:	4610      	mov	r0, r2
 8019ff0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019ff2:	4b05      	ldr	r3, [pc, #20]	; (801a008 <SysTimeSet+0x58>)
 8019ff4:	689b      	ldr	r3, [r3, #8]
 8019ff6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019ffa:	4610      	mov	r0, r2
 8019ffc:	4798      	blx	r3
}
 8019ffe:	bf00      	nop
 801a000:	3718      	adds	r7, #24
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}
 801a006:	bf00      	nop
 801a008:	0801c018 	.word	0x0801c018

0801a00c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a00c:	b580      	push	{r7, lr}
 801a00e:	b08a      	sub	sp, #40	; 0x28
 801a010:	af02      	add	r7, sp, #8
 801a012:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a014:	2300      	movs	r3, #0
 801a016:	61bb      	str	r3, [r7, #24]
 801a018:	2300      	movs	r3, #0
 801a01a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a01c:	2300      	movs	r3, #0
 801a01e:	613b      	str	r3, [r7, #16]
 801a020:	2300      	movs	r3, #0
 801a022:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a024:	4b14      	ldr	r3, [pc, #80]	; (801a078 <SysTimeGet+0x6c>)
 801a026:	691b      	ldr	r3, [r3, #16]
 801a028:	f107 0218 	add.w	r2, r7, #24
 801a02c:	3204      	adds	r2, #4
 801a02e:	4610      	mov	r0, r2
 801a030:	4798      	blx	r3
 801a032:	4603      	mov	r3, r0
 801a034:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a036:	4b10      	ldr	r3, [pc, #64]	; (801a078 <SysTimeGet+0x6c>)
 801a038:	68db      	ldr	r3, [r3, #12]
 801a03a:	4798      	blx	r3
 801a03c:	4603      	mov	r3, r0
 801a03e:	b21b      	sxth	r3, r3
 801a040:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a042:	4b0d      	ldr	r3, [pc, #52]	; (801a078 <SysTimeGet+0x6c>)
 801a044:	685b      	ldr	r3, [r3, #4]
 801a046:	4798      	blx	r3
 801a048:	4603      	mov	r3, r0
 801a04a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a04c:	f107 0010 	add.w	r0, r7, #16
 801a050:	69fb      	ldr	r3, [r7, #28]
 801a052:	9300      	str	r3, [sp, #0]
 801a054:	69bb      	ldr	r3, [r7, #24]
 801a056:	f107 0208 	add.w	r2, r7, #8
 801a05a:	ca06      	ldmia	r2, {r1, r2}
 801a05c:	f7ff ff36 	bl	8019ecc <SysTimeAdd>

  return sysTime;
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	461a      	mov	r2, r3
 801a064:	f107 0310 	add.w	r3, r7, #16
 801a068:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a06c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a070:	6878      	ldr	r0, [r7, #4]
 801a072:	3720      	adds	r7, #32
 801a074:	46bd      	mov	sp, r7
 801a076:	bd80      	pop	{r7, pc}
 801a078:	0801c018 	.word	0x0801c018

0801a07c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b084      	sub	sp, #16
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a084:	2300      	movs	r3, #0
 801a086:	60bb      	str	r3, [r7, #8]
 801a088:	2300      	movs	r3, #0
 801a08a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a08c:	4b0a      	ldr	r3, [pc, #40]	; (801a0b8 <SysTimeGetMcuTime+0x3c>)
 801a08e:	691b      	ldr	r3, [r3, #16]
 801a090:	f107 0208 	add.w	r2, r7, #8
 801a094:	3204      	adds	r2, #4
 801a096:	4610      	mov	r0, r2
 801a098:	4798      	blx	r3
 801a09a:	4603      	mov	r3, r0
 801a09c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	461a      	mov	r2, r3
 801a0a2:	f107 0308 	add.w	r3, r7, #8
 801a0a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a0aa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a0ae:	6878      	ldr	r0, [r7, #4]
 801a0b0:	3710      	adds	r7, #16
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bd80      	pop	{r7, pc}
 801a0b6:	bf00      	nop
 801a0b8:	0801c018 	.word	0x0801c018

0801a0bc <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b088      	sub	sp, #32
 801a0c0:	af02      	add	r7, sp, #8
 801a0c2:	463b      	mov	r3, r7
 801a0c4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a0c8:	4b0f      	ldr	r3, [pc, #60]	; (801a108 <SysTimeToMs+0x4c>)
 801a0ca:	68db      	ldr	r3, [r3, #12]
 801a0cc:	4798      	blx	r3
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	b21b      	sxth	r3, r3
 801a0d2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a0d4:	4b0c      	ldr	r3, [pc, #48]	; (801a108 <SysTimeToMs+0x4c>)
 801a0d6:	685b      	ldr	r3, [r3, #4]
 801a0d8:	4798      	blx	r3
 801a0da:	4603      	mov	r3, r0
 801a0dc:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a0de:	f107 0008 	add.w	r0, r7, #8
 801a0e2:	697b      	ldr	r3, [r7, #20]
 801a0e4:	9300      	str	r3, [sp, #0]
 801a0e6:	693b      	ldr	r3, [r7, #16]
 801a0e8:	463a      	mov	r2, r7
 801a0ea:	ca06      	ldmia	r2, {r1, r2}
 801a0ec:	f7ff ff27 	bl	8019f3e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a0f0:	68bb      	ldr	r3, [r7, #8]
 801a0f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a0f6:	fb02 f303 	mul.w	r3, r2, r3
 801a0fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a0fe:	4413      	add	r3, r2
}
 801a100:	4618      	mov	r0, r3
 801a102:	3718      	adds	r7, #24
 801a104:	46bd      	mov	sp, r7
 801a106:	bd80      	pop	{r7, pc}
 801a108:	0801c018 	.word	0x0801c018

0801a10c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b08a      	sub	sp, #40	; 0x28
 801a110:	af02      	add	r7, sp, #8
 801a112:	6078      	str	r0, [r7, #4]
 801a114:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a116:	683b      	ldr	r3, [r7, #0]
 801a118:	4a19      	ldr	r2, [pc, #100]	; (801a180 <SysTimeFromMs+0x74>)
 801a11a:	fba2 2303 	umull	r2, r3, r2, r3
 801a11e:	099b      	lsrs	r3, r3, #6
 801a120:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a122:	69fb      	ldr	r3, [r7, #28]
 801a124:	617b      	str	r3, [r7, #20]
 801a126:	683b      	ldr	r3, [r7, #0]
 801a128:	b29a      	uxth	r2, r3
 801a12a:	69fb      	ldr	r3, [r7, #28]
 801a12c:	b29b      	uxth	r3, r3
 801a12e:	4619      	mov	r1, r3
 801a130:	0149      	lsls	r1, r1, #5
 801a132:	1ac9      	subs	r1, r1, r3
 801a134:	0089      	lsls	r1, r1, #2
 801a136:	440b      	add	r3, r1
 801a138:	00db      	lsls	r3, r3, #3
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	1ad3      	subs	r3, r2, r3
 801a13e:	b29b      	uxth	r3, r3
 801a140:	b21b      	sxth	r3, r3
 801a142:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a144:	f107 030c 	add.w	r3, r7, #12
 801a148:	2200      	movs	r2, #0
 801a14a:	601a      	str	r2, [r3, #0]
 801a14c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a14e:	4b0d      	ldr	r3, [pc, #52]	; (801a184 <SysTimeFromMs+0x78>)
 801a150:	68db      	ldr	r3, [r3, #12]
 801a152:	4798      	blx	r3
 801a154:	4603      	mov	r3, r0
 801a156:	b21b      	sxth	r3, r3
 801a158:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a15a:	4b0a      	ldr	r3, [pc, #40]	; (801a184 <SysTimeFromMs+0x78>)
 801a15c:	685b      	ldr	r3, [r3, #4]
 801a15e:	4798      	blx	r3
 801a160:	4603      	mov	r3, r0
 801a162:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a164:	6878      	ldr	r0, [r7, #4]
 801a166:	693b      	ldr	r3, [r7, #16]
 801a168:	9300      	str	r3, [sp, #0]
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	f107 0214 	add.w	r2, r7, #20
 801a170:	ca06      	ldmia	r2, {r1, r2}
 801a172:	f7ff feab 	bl	8019ecc <SysTimeAdd>
}
 801a176:	6878      	ldr	r0, [r7, #4]
 801a178:	3720      	adds	r7, #32
 801a17a:	46bd      	mov	sp, r7
 801a17c:	bd80      	pop	{r7, pc}
 801a17e:	bf00      	nop
 801a180:	10624dd3 	.word	0x10624dd3
 801a184:	0801c018 	.word	0x0801c018

0801a188 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a188:	b480      	push	{r7}
 801a18a:	b085      	sub	sp, #20
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a190:	2300      	movs	r3, #0
 801a192:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a194:	e00e      	b.n	801a1b4 <ee_skip_atoi+0x2c>
 801a196:	68fa      	ldr	r2, [r7, #12]
 801a198:	4613      	mov	r3, r2
 801a19a:	009b      	lsls	r3, r3, #2
 801a19c:	4413      	add	r3, r2
 801a19e:	005b      	lsls	r3, r3, #1
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	1c59      	adds	r1, r3, #1
 801a1a8:	687a      	ldr	r2, [r7, #4]
 801a1aa:	6011      	str	r1, [r2, #0]
 801a1ac:	781b      	ldrb	r3, [r3, #0]
 801a1ae:	4403      	add	r3, r0
 801a1b0:	3b30      	subs	r3, #48	; 0x30
 801a1b2:	60fb      	str	r3, [r7, #12]
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	781b      	ldrb	r3, [r3, #0]
 801a1ba:	2b2f      	cmp	r3, #47	; 0x2f
 801a1bc:	d904      	bls.n	801a1c8 <ee_skip_atoi+0x40>
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	781b      	ldrb	r3, [r3, #0]
 801a1c4:	2b39      	cmp	r3, #57	; 0x39
 801a1c6:	d9e6      	bls.n	801a196 <ee_skip_atoi+0xe>
  return i;
 801a1c8:	68fb      	ldr	r3, [r7, #12]
}
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	3714      	adds	r7, #20
 801a1ce:	46bd      	mov	sp, r7
 801a1d0:	bc80      	pop	{r7}
 801a1d2:	4770      	bx	lr

0801a1d4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a1d4:	b480      	push	{r7}
 801a1d6:	b099      	sub	sp, #100	; 0x64
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	60f8      	str	r0, [r7, #12]
 801a1dc:	60b9      	str	r1, [r7, #8]
 801a1de:	607a      	str	r2, [r7, #4]
 801a1e0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a1e2:	4b71      	ldr	r3, [pc, #452]	; (801a3a8 <ee_number+0x1d4>)
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a1e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d002      	beq.n	801a1f8 <ee_number+0x24>
 801a1f2:	4b6e      	ldr	r3, [pc, #440]	; (801a3ac <ee_number+0x1d8>)
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a1f8:	683b      	ldr	r3, [r7, #0]
 801a1fa:	2b01      	cmp	r3, #1
 801a1fc:	dd02      	ble.n	801a204 <ee_number+0x30>
 801a1fe:	683b      	ldr	r3, [r7, #0]
 801a200:	2b24      	cmp	r3, #36	; 0x24
 801a202:	dd01      	ble.n	801a208 <ee_number+0x34>
 801a204:	2300      	movs	r3, #0
 801a206:	e0ca      	b.n	801a39e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a20a:	f003 0301 	and.w	r3, r3, #1
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d001      	beq.n	801a216 <ee_number+0x42>
 801a212:	2330      	movs	r3, #48	; 0x30
 801a214:	e000      	b.n	801a218 <ee_number+0x44>
 801a216:	2320      	movs	r3, #32
 801a218:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801a21c:	2300      	movs	r3, #0
 801a21e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801a222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a224:	f003 0302 	and.w	r3, r3, #2
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d00b      	beq.n	801a244 <ee_number+0x70>
  {
    if (num < 0)
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	da08      	bge.n	801a244 <ee_number+0x70>
    {
      sign = '-';
 801a232:	232d      	movs	r3, #45	; 0x2d
 801a234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	425b      	negs	r3, r3
 801a23c:	607b      	str	r3, [r7, #4]
      size--;
 801a23e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a240:	3b01      	subs	r3, #1
 801a242:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a244:	2300      	movs	r3, #0
 801a246:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d11e      	bne.n	801a28c <ee_number+0xb8>
    tmp[i++] = '0';
 801a24e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a250:	1c5a      	adds	r2, r3, #1
 801a252:	657a      	str	r2, [r7, #84]	; 0x54
 801a254:	3360      	adds	r3, #96	; 0x60
 801a256:	443b      	add	r3, r7
 801a258:	2230      	movs	r2, #48	; 0x30
 801a25a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a25e:	e018      	b.n	801a292 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	683a      	ldr	r2, [r7, #0]
 801a264:	fbb3 f1f2 	udiv	r1, r3, r2
 801a268:	fb01 f202 	mul.w	r2, r1, r2
 801a26c:	1a9b      	subs	r3, r3, r2
 801a26e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a270:	441a      	add	r2, r3
 801a272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a274:	1c59      	adds	r1, r3, #1
 801a276:	6579      	str	r1, [r7, #84]	; 0x54
 801a278:	7812      	ldrb	r2, [r2, #0]
 801a27a:	3360      	adds	r3, #96	; 0x60
 801a27c:	443b      	add	r3, r7
 801a27e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a282:	687a      	ldr	r2, [r7, #4]
 801a284:	683b      	ldr	r3, [r7, #0]
 801a286:	fbb2 f3f3 	udiv	r3, r2, r3
 801a28a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d1e6      	bne.n	801a260 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801a292:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a296:	429a      	cmp	r2, r3
 801a298:	dd01      	ble.n	801a29e <ee_number+0xca>
 801a29a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a29c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801a29e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a2a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a2a2:	1ad3      	subs	r3, r2, r3
 801a2a4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a2a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a2a8:	f003 0301 	and.w	r3, r3, #1
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d112      	bne.n	801a2d6 <ee_number+0x102>
 801a2b0:	e00c      	b.n	801a2cc <ee_number+0xf8>
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	1c5a      	adds	r2, r3, #1
 801a2b6:	60fa      	str	r2, [r7, #12]
 801a2b8:	2220      	movs	r2, #32
 801a2ba:	701a      	strb	r2, [r3, #0]
 801a2bc:	68bb      	ldr	r3, [r7, #8]
 801a2be:	3b01      	subs	r3, #1
 801a2c0:	60bb      	str	r3, [r7, #8]
 801a2c2:	68bb      	ldr	r3, [r7, #8]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d101      	bne.n	801a2cc <ee_number+0xf8>
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	e068      	b.n	801a39e <ee_number+0x1ca>
 801a2cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a2ce:	1e5a      	subs	r2, r3, #1
 801a2d0:	66ba      	str	r2, [r7, #104]	; 0x68
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	dced      	bgt.n	801a2b2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801a2d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d01b      	beq.n	801a316 <ee_number+0x142>
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	1c5a      	adds	r2, r3, #1
 801a2e2:	60fa      	str	r2, [r7, #12]
 801a2e4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801a2e8:	701a      	strb	r2, [r3, #0]
 801a2ea:	68bb      	ldr	r3, [r7, #8]
 801a2ec:	3b01      	subs	r3, #1
 801a2ee:	60bb      	str	r3, [r7, #8]
 801a2f0:	68bb      	ldr	r3, [r7, #8]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d10f      	bne.n	801a316 <ee_number+0x142>
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	e051      	b.n	801a39e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	1c5a      	adds	r2, r3, #1
 801a2fe:	60fa      	str	r2, [r7, #12]
 801a300:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801a304:	701a      	strb	r2, [r3, #0]
 801a306:	68bb      	ldr	r3, [r7, #8]
 801a308:	3b01      	subs	r3, #1
 801a30a:	60bb      	str	r3, [r7, #8]
 801a30c:	68bb      	ldr	r3, [r7, #8]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d101      	bne.n	801a316 <ee_number+0x142>
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	e043      	b.n	801a39e <ee_number+0x1ca>
 801a316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a318:	1e5a      	subs	r2, r3, #1
 801a31a:	66ba      	str	r2, [r7, #104]	; 0x68
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	dcec      	bgt.n	801a2fa <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801a320:	e00c      	b.n	801a33c <ee_number+0x168>
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	1c5a      	adds	r2, r3, #1
 801a326:	60fa      	str	r2, [r7, #12]
 801a328:	2230      	movs	r2, #48	; 0x30
 801a32a:	701a      	strb	r2, [r3, #0]
 801a32c:	68bb      	ldr	r3, [r7, #8]
 801a32e:	3b01      	subs	r3, #1
 801a330:	60bb      	str	r3, [r7, #8]
 801a332:	68bb      	ldr	r3, [r7, #8]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d101      	bne.n	801a33c <ee_number+0x168>
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	e030      	b.n	801a39e <ee_number+0x1ca>
 801a33c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a33e:	1e5a      	subs	r2, r3, #1
 801a340:	66fa      	str	r2, [r7, #108]	; 0x6c
 801a342:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a344:	429a      	cmp	r2, r3
 801a346:	dbec      	blt.n	801a322 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801a348:	e010      	b.n	801a36c <ee_number+0x198>
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	1c5a      	adds	r2, r3, #1
 801a34e:	60fa      	str	r2, [r7, #12]
 801a350:	f107 0110 	add.w	r1, r7, #16
 801a354:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a356:	440a      	add	r2, r1
 801a358:	7812      	ldrb	r2, [r2, #0]
 801a35a:	701a      	strb	r2, [r3, #0]
 801a35c:	68bb      	ldr	r3, [r7, #8]
 801a35e:	3b01      	subs	r3, #1
 801a360:	60bb      	str	r3, [r7, #8]
 801a362:	68bb      	ldr	r3, [r7, #8]
 801a364:	2b00      	cmp	r3, #0
 801a366:	d101      	bne.n	801a36c <ee_number+0x198>
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	e018      	b.n	801a39e <ee_number+0x1ca>
 801a36c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a36e:	1e5a      	subs	r2, r3, #1
 801a370:	657a      	str	r2, [r7, #84]	; 0x54
 801a372:	2b00      	cmp	r3, #0
 801a374:	dce9      	bgt.n	801a34a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801a376:	e00c      	b.n	801a392 <ee_number+0x1be>
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	1c5a      	adds	r2, r3, #1
 801a37c:	60fa      	str	r2, [r7, #12]
 801a37e:	2220      	movs	r2, #32
 801a380:	701a      	strb	r2, [r3, #0]
 801a382:	68bb      	ldr	r3, [r7, #8]
 801a384:	3b01      	subs	r3, #1
 801a386:	60bb      	str	r3, [r7, #8]
 801a388:	68bb      	ldr	r3, [r7, #8]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d101      	bne.n	801a392 <ee_number+0x1be>
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	e005      	b.n	801a39e <ee_number+0x1ca>
 801a392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a394:	1e5a      	subs	r2, r3, #1
 801a396:	66ba      	str	r2, [r7, #104]	; 0x68
 801a398:	2b00      	cmp	r3, #0
 801a39a:	dced      	bgt.n	801a378 <ee_number+0x1a4>

  return str;
 801a39c:	68fb      	ldr	r3, [r7, #12]
}
 801a39e:	4618      	mov	r0, r3
 801a3a0:	3764      	adds	r7, #100	; 0x64
 801a3a2:	46bd      	mov	sp, r7
 801a3a4:	bc80      	pop	{r7}
 801a3a6:	4770      	bx	lr
 801a3a8:	20000154 	.word	0x20000154
 801a3ac:	20000158 	.word	0x20000158

0801a3b0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a3b0:	b580      	push	{r7, lr}
 801a3b2:	b092      	sub	sp, #72	; 0x48
 801a3b4:	af04      	add	r7, sp, #16
 801a3b6:	60f8      	str	r0, [r7, #12]
 801a3b8:	60b9      	str	r1, [r7, #8]
 801a3ba:	607a      	str	r2, [r7, #4]
 801a3bc:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a3be:	68bb      	ldr	r3, [r7, #8]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	dc01      	bgt.n	801a3c8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a3c4:	2300      	movs	r3, #0
 801a3c6:	e142      	b.n	801a64e <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a3cc:	e12a      	b.n	801a624 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a3ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	1ad2      	subs	r2, r2, r3
 801a3d4:	68bb      	ldr	r3, [r7, #8]
 801a3d6:	3b01      	subs	r3, #1
 801a3d8:	429a      	cmp	r2, r3
 801a3da:	f280 8131 	bge.w	801a640 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	781b      	ldrb	r3, [r3, #0]
 801a3e2:	2b25      	cmp	r3, #37	; 0x25
 801a3e4:	d006      	beq.n	801a3f4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a3e6:	687a      	ldr	r2, [r7, #4]
 801a3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ea:	1c59      	adds	r1, r3, #1
 801a3ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a3ee:	7812      	ldrb	r2, [r2, #0]
 801a3f0:	701a      	strb	r2, [r3, #0]
      continue;
 801a3f2:	e114      	b.n	801a61e <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	3301      	adds	r3, #1
 801a3fc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	781b      	ldrb	r3, [r3, #0]
 801a402:	2b30      	cmp	r3, #48	; 0x30
 801a404:	d103      	bne.n	801a40e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a406:	6a3b      	ldr	r3, [r7, #32]
 801a408:	f043 0301 	orr.w	r3, r3, #1
 801a40c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801a40e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a412:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	781b      	ldrb	r3, [r3, #0]
 801a418:	2b2f      	cmp	r3, #47	; 0x2f
 801a41a:	d908      	bls.n	801a42e <tiny_vsnprintf_like+0x7e>
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	781b      	ldrb	r3, [r3, #0]
 801a420:	2b39      	cmp	r3, #57	; 0x39
 801a422:	d804      	bhi.n	801a42e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a424:	1d3b      	adds	r3, r7, #4
 801a426:	4618      	mov	r0, r3
 801a428:	f7ff feae 	bl	801a188 <ee_skip_atoi>
 801a42c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801a42e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a432:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801a434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a438:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801a43a:	230a      	movs	r3, #10
 801a43c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	781b      	ldrb	r3, [r3, #0]
 801a442:	3b58      	subs	r3, #88	; 0x58
 801a444:	2b20      	cmp	r3, #32
 801a446:	f200 8094 	bhi.w	801a572 <tiny_vsnprintf_like+0x1c2>
 801a44a:	a201      	add	r2, pc, #4	; (adr r2, 801a450 <tiny_vsnprintf_like+0xa0>)
 801a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a450:	0801a55b 	.word	0x0801a55b
 801a454:	0801a573 	.word	0x0801a573
 801a458:	0801a573 	.word	0x0801a573
 801a45c:	0801a573 	.word	0x0801a573
 801a460:	0801a573 	.word	0x0801a573
 801a464:	0801a573 	.word	0x0801a573
 801a468:	0801a573 	.word	0x0801a573
 801a46c:	0801a573 	.word	0x0801a573
 801a470:	0801a573 	.word	0x0801a573
 801a474:	0801a573 	.word	0x0801a573
 801a478:	0801a573 	.word	0x0801a573
 801a47c:	0801a4df 	.word	0x0801a4df
 801a480:	0801a569 	.word	0x0801a569
 801a484:	0801a573 	.word	0x0801a573
 801a488:	0801a573 	.word	0x0801a573
 801a48c:	0801a573 	.word	0x0801a573
 801a490:	0801a573 	.word	0x0801a573
 801a494:	0801a569 	.word	0x0801a569
 801a498:	0801a573 	.word	0x0801a573
 801a49c:	0801a573 	.word	0x0801a573
 801a4a0:	0801a573 	.word	0x0801a573
 801a4a4:	0801a573 	.word	0x0801a573
 801a4a8:	0801a573 	.word	0x0801a573
 801a4ac:	0801a573 	.word	0x0801a573
 801a4b0:	0801a573 	.word	0x0801a573
 801a4b4:	0801a573 	.word	0x0801a573
 801a4b8:	0801a573 	.word	0x0801a573
 801a4bc:	0801a4ff 	.word	0x0801a4ff
 801a4c0:	0801a573 	.word	0x0801a573
 801a4c4:	0801a5bf 	.word	0x0801a5bf
 801a4c8:	0801a573 	.word	0x0801a573
 801a4cc:	0801a573 	.word	0x0801a573
 801a4d0:	0801a563 	.word	0x0801a563
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4d6:	1c5a      	adds	r2, r3, #1
 801a4d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a4da:	2220      	movs	r2, #32
 801a4dc:	701a      	strb	r2, [r3, #0]
 801a4de:	69fb      	ldr	r3, [r7, #28]
 801a4e0:	3b01      	subs	r3, #1
 801a4e2:	61fb      	str	r3, [r7, #28]
 801a4e4:	69fb      	ldr	r3, [r7, #28]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	dcf4      	bgt.n	801a4d4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a4ea:	683b      	ldr	r3, [r7, #0]
 801a4ec:	1d1a      	adds	r2, r3, #4
 801a4ee:	603a      	str	r2, [r7, #0]
 801a4f0:	6819      	ldr	r1, [r3, #0]
 801a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4f4:	1c5a      	adds	r2, r3, #1
 801a4f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a4f8:	b2ca      	uxtb	r2, r1
 801a4fa:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a4fc:	e08f      	b.n	801a61e <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801a4fe:	683b      	ldr	r3, [r7, #0]
 801a500:	1d1a      	adds	r2, r3, #4
 801a502:	603a      	str	r2, [r7, #0]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d101      	bne.n	801a512 <tiny_vsnprintf_like+0x162>
 801a50e:	4b52      	ldr	r3, [pc, #328]	; (801a658 <tiny_vsnprintf_like+0x2a8>)
 801a510:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a514:	f7e5 fe30 	bl	8000178 <strlen>
 801a518:	4603      	mov	r3, r0
 801a51a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a51c:	e004      	b.n	801a528 <tiny_vsnprintf_like+0x178>
 801a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a520:	1c5a      	adds	r2, r3, #1
 801a522:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a524:	2220      	movs	r2, #32
 801a526:	701a      	strb	r2, [r3, #0]
 801a528:	69fb      	ldr	r3, [r7, #28]
 801a52a:	1e5a      	subs	r2, r3, #1
 801a52c:	61fa      	str	r2, [r7, #28]
 801a52e:	693a      	ldr	r2, [r7, #16]
 801a530:	429a      	cmp	r2, r3
 801a532:	dbf4      	blt.n	801a51e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a534:	2300      	movs	r3, #0
 801a536:	62bb      	str	r3, [r7, #40]	; 0x28
 801a538:	e00a      	b.n	801a550 <tiny_vsnprintf_like+0x1a0>
 801a53a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a53c:	1c53      	adds	r3, r2, #1
 801a53e:	627b      	str	r3, [r7, #36]	; 0x24
 801a540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a542:	1c59      	adds	r1, r3, #1
 801a544:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a546:	7812      	ldrb	r2, [r2, #0]
 801a548:	701a      	strb	r2, [r3, #0]
 801a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a54c:	3301      	adds	r3, #1
 801a54e:	62bb      	str	r3, [r7, #40]	; 0x28
 801a550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a552:	693b      	ldr	r3, [r7, #16]
 801a554:	429a      	cmp	r2, r3
 801a556:	dbf0      	blt.n	801a53a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a558:	e061      	b.n	801a61e <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801a55a:	6a3b      	ldr	r3, [r7, #32]
 801a55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a560:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a562:	2310      	movs	r3, #16
 801a564:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801a566:	e02d      	b.n	801a5c4 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a568:	6a3b      	ldr	r3, [r7, #32]
 801a56a:	f043 0302 	orr.w	r3, r3, #2
 801a56e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a570:	e025      	b.n	801a5be <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	781b      	ldrb	r3, [r3, #0]
 801a576:	2b25      	cmp	r3, #37	; 0x25
 801a578:	d004      	beq.n	801a584 <tiny_vsnprintf_like+0x1d4>
 801a57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a57c:	1c5a      	adds	r2, r3, #1
 801a57e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a580:	2225      	movs	r2, #37	; 0x25
 801a582:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	1ad2      	subs	r2, r2, r3
 801a58a:	68bb      	ldr	r3, [r7, #8]
 801a58c:	3b01      	subs	r3, #1
 801a58e:	429a      	cmp	r2, r3
 801a590:	da17      	bge.n	801a5c2 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	781b      	ldrb	r3, [r3, #0]
 801a596:	2b00      	cmp	r3, #0
 801a598:	d006      	beq.n	801a5a8 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a59a:	687a      	ldr	r2, [r7, #4]
 801a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a59e:	1c59      	adds	r1, r3, #1
 801a5a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a5a2:	7812      	ldrb	r2, [r2, #0]
 801a5a4:	701a      	strb	r2, [r3, #0]
 801a5a6:	e002      	b.n	801a5ae <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	3b01      	subs	r3, #1
 801a5ac:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	1ad2      	subs	r2, r2, r3
 801a5b4:	68bb      	ldr	r3, [r7, #8]
 801a5b6:	3b01      	subs	r3, #1
 801a5b8:	429a      	cmp	r2, r3
 801a5ba:	db2f      	blt.n	801a61c <tiny_vsnprintf_like+0x26c>
 801a5bc:	e002      	b.n	801a5c4 <tiny_vsnprintf_like+0x214>
        break;
 801a5be:	bf00      	nop
 801a5c0:	e000      	b.n	801a5c4 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801a5c2:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a5c4:	697b      	ldr	r3, [r7, #20]
 801a5c6:	2b6c      	cmp	r3, #108	; 0x6c
 801a5c8:	d105      	bne.n	801a5d6 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801a5ca:	683b      	ldr	r3, [r7, #0]
 801a5cc:	1d1a      	adds	r2, r3, #4
 801a5ce:	603a      	str	r2, [r7, #0]
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	637b      	str	r3, [r7, #52]	; 0x34
 801a5d4:	e00f      	b.n	801a5f6 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801a5d6:	6a3b      	ldr	r3, [r7, #32]
 801a5d8:	f003 0302 	and.w	r3, r3, #2
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d005      	beq.n	801a5ec <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801a5e0:	683b      	ldr	r3, [r7, #0]
 801a5e2:	1d1a      	adds	r2, r3, #4
 801a5e4:	603a      	str	r2, [r7, #0]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	637b      	str	r3, [r7, #52]	; 0x34
 801a5ea:	e004      	b.n	801a5f6 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801a5ec:	683b      	ldr	r3, [r7, #0]
 801a5ee:	1d1a      	adds	r2, r3, #4
 801a5f0:	603a      	str	r2, [r7, #0]
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a5f6:	68bb      	ldr	r3, [r7, #8]
 801a5f8:	1e5a      	subs	r2, r3, #1
 801a5fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	1acb      	subs	r3, r1, r3
 801a600:	1ad1      	subs	r1, r2, r3
 801a602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a604:	6a3b      	ldr	r3, [r7, #32]
 801a606:	9302      	str	r3, [sp, #8]
 801a608:	69bb      	ldr	r3, [r7, #24]
 801a60a:	9301      	str	r3, [sp, #4]
 801a60c:	69fb      	ldr	r3, [r7, #28]
 801a60e:	9300      	str	r3, [sp, #0]
 801a610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a614:	f7ff fdde 	bl	801a1d4 <ee_number>
 801a618:	62f8      	str	r0, [r7, #44]	; 0x2c
 801a61a:	e000      	b.n	801a61e <tiny_vsnprintf_like+0x26e>
        continue;
 801a61c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	3301      	adds	r3, #1
 801a622:	607b      	str	r3, [r7, #4]
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	781b      	ldrb	r3, [r3, #0]
 801a628:	2b00      	cmp	r3, #0
 801a62a:	f47f aed0 	bne.w	801a3ce <tiny_vsnprintf_like+0x1e>
 801a62e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	1ad2      	subs	r2, r2, r3
 801a634:	68bb      	ldr	r3, [r7, #8]
 801a636:	3b01      	subs	r3, #1
 801a638:	429a      	cmp	r2, r3
 801a63a:	f6bf aec8 	bge.w	801a3ce <tiny_vsnprintf_like+0x1e>
 801a63e:	e000      	b.n	801a642 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801a640:	bf00      	nop
  }

  *str = '\0';
 801a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a644:	2200      	movs	r2, #0
 801a646:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	1ad3      	subs	r3, r2, r3
}
 801a64e:	4618      	mov	r0, r3
 801a650:	3738      	adds	r7, #56	; 0x38
 801a652:	46bd      	mov	sp, r7
 801a654:	bd80      	pop	{r7, pc}
 801a656:	bf00      	nop
 801a658:	0801bf2c 	.word	0x0801bf2c

0801a65c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a65c:	b580      	push	{r7, lr}
 801a65e:	b090      	sub	sp, #64	; 0x40
 801a660:	af00      	add	r7, sp, #0
 801a662:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a664:	4b73      	ldr	r3, [pc, #460]	; (801a834 <UTIL_SEQ_Run+0x1d8>)
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801a66a:	4b72      	ldr	r3, [pc, #456]	; (801a834 <UTIL_SEQ_Run+0x1d8>)
 801a66c:	681a      	ldr	r2, [r3, #0]
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	4013      	ands	r3, r2
 801a672:	4a70      	ldr	r2, [pc, #448]	; (801a834 <UTIL_SEQ_Run+0x1d8>)
 801a674:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a676:	4b70      	ldr	r3, [pc, #448]	; (801a838 <UTIL_SEQ_Run+0x1dc>)
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801a67c:	4b6f      	ldr	r3, [pc, #444]	; (801a83c <UTIL_SEQ_Run+0x1e0>)
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801a682:	4b6f      	ldr	r3, [pc, #444]	; (801a840 <UTIL_SEQ_Run+0x1e4>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801a688:	4b6e      	ldr	r3, [pc, #440]	; (801a844 <UTIL_SEQ_Run+0x1e8>)
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a68e:	e08d      	b.n	801a7ac <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a690:	2300      	movs	r3, #0
 801a692:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a694:	e002      	b.n	801a69c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a698:	3301      	adds	r3, #1
 801a69a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a69c:	4a6a      	ldr	r2, [pc, #424]	; (801a848 <UTIL_SEQ_Run+0x1ec>)
 801a69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6a6:	401a      	ands	r2, r3
 801a6a8:	4b62      	ldr	r3, [pc, #392]	; (801a834 <UTIL_SEQ_Run+0x1d8>)
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	4013      	ands	r3, r2
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d0f1      	beq.n	801a696 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a6b2:	4a65      	ldr	r2, [pc, #404]	; (801a848 <UTIL_SEQ_Run+0x1ec>)
 801a6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6bc:	401a      	ands	r2, r3
 801a6be:	4b5d      	ldr	r3, [pc, #372]	; (801a834 <UTIL_SEQ_Run+0x1d8>)
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	4013      	ands	r3, r2
 801a6c4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a6c6:	4a60      	ldr	r2, [pc, #384]	; (801a848 <UTIL_SEQ_Run+0x1ec>)
 801a6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6ca:	00db      	lsls	r3, r3, #3
 801a6cc:	4413      	add	r3, r2
 801a6ce:	685a      	ldr	r2, [r3, #4]
 801a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6d2:	4013      	ands	r3, r2
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d106      	bne.n	801a6e6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a6d8:	4a5b      	ldr	r2, [pc, #364]	; (801a848 <UTIL_SEQ_Run+0x1ec>)
 801a6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6dc:	00db      	lsls	r3, r3, #3
 801a6de:	4413      	add	r3, r2
 801a6e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a6e4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a6e6:	4a58      	ldr	r2, [pc, #352]	; (801a848 <UTIL_SEQ_Run+0x1ec>)
 801a6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6ea:	00db      	lsls	r3, r3, #3
 801a6ec:	4413      	add	r3, r2
 801a6ee:	685a      	ldr	r2, [r3, #4]
 801a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6f2:	4013      	ands	r3, r2
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	f000 f907 	bl	801a908 <SEQ_BitPosition>
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	461a      	mov	r2, r3
 801a6fe:	4b53      	ldr	r3, [pc, #332]	; (801a84c <UTIL_SEQ_Run+0x1f0>)
 801a700:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a702:	4a51      	ldr	r2, [pc, #324]	; (801a848 <UTIL_SEQ_Run+0x1ec>)
 801a704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a706:	00db      	lsls	r3, r3, #3
 801a708:	4413      	add	r3, r2
 801a70a:	685a      	ldr	r2, [r3, #4]
 801a70c:	4b4f      	ldr	r3, [pc, #316]	; (801a84c <UTIL_SEQ_Run+0x1f0>)
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	2101      	movs	r1, #1
 801a712:	fa01 f303 	lsl.w	r3, r1, r3
 801a716:	43db      	mvns	r3, r3
 801a718:	401a      	ands	r2, r3
 801a71a:	494b      	ldr	r1, [pc, #300]	; (801a848 <UTIL_SEQ_Run+0x1ec>)
 801a71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a71e:	00db      	lsls	r3, r3, #3
 801a720:	440b      	add	r3, r1
 801a722:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a724:	f3ef 8310 	mrs	r3, PRIMASK
 801a728:	61bb      	str	r3, [r7, #24]
  return(result);
 801a72a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a72c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a72e:	b672      	cpsid	i
}
 801a730:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a732:	4b46      	ldr	r3, [pc, #280]	; (801a84c <UTIL_SEQ_Run+0x1f0>)
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	2201      	movs	r2, #1
 801a738:	fa02 f303 	lsl.w	r3, r2, r3
 801a73c:	43da      	mvns	r2, r3
 801a73e:	4b3e      	ldr	r3, [pc, #248]	; (801a838 <UTIL_SEQ_Run+0x1dc>)
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	4013      	ands	r3, r2
 801a744:	4a3c      	ldr	r2, [pc, #240]	; (801a838 <UTIL_SEQ_Run+0x1dc>)
 801a746:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a748:	2301      	movs	r3, #1
 801a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a74c:	e013      	b.n	801a776 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a750:	3b01      	subs	r3, #1
 801a752:	4a3d      	ldr	r2, [pc, #244]	; (801a848 <UTIL_SEQ_Run+0x1ec>)
 801a754:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a758:	4b3c      	ldr	r3, [pc, #240]	; (801a84c <UTIL_SEQ_Run+0x1f0>)
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	2201      	movs	r2, #1
 801a75e:	fa02 f303 	lsl.w	r3, r2, r3
 801a762:	43da      	mvns	r2, r3
 801a764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a766:	3b01      	subs	r3, #1
 801a768:	400a      	ands	r2, r1
 801a76a:	4937      	ldr	r1, [pc, #220]	; (801a848 <UTIL_SEQ_Run+0x1ec>)
 801a76c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a772:	3b01      	subs	r3, #1
 801a774:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d1e8      	bne.n	801a74e <UTIL_SEQ_Run+0xf2>
 801a77c:	6a3b      	ldr	r3, [r7, #32]
 801a77e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a780:	697b      	ldr	r3, [r7, #20]
 801a782:	f383 8810 	msr	PRIMASK, r3
}
 801a786:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a788:	4b30      	ldr	r3, [pc, #192]	; (801a84c <UTIL_SEQ_Run+0x1f0>)
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	4a30      	ldr	r2, [pc, #192]	; (801a850 <UTIL_SEQ_Run+0x1f4>)
 801a78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a792:	4798      	blx	r3

    local_taskset = TaskSet;
 801a794:	4b28      	ldr	r3, [pc, #160]	; (801a838 <UTIL_SEQ_Run+0x1dc>)
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801a79a:	4b28      	ldr	r3, [pc, #160]	; (801a83c <UTIL_SEQ_Run+0x1e0>)
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801a7a0:	4b27      	ldr	r3, [pc, #156]	; (801a840 <UTIL_SEQ_Run+0x1e4>)
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801a7a6:	4b27      	ldr	r3, [pc, #156]	; (801a844 <UTIL_SEQ_Run+0x1e8>)
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a7ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7b0:	401a      	ands	r2, r3
 801a7b2:	4b20      	ldr	r3, [pc, #128]	; (801a834 <UTIL_SEQ_Run+0x1d8>)
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	4013      	ands	r3, r2
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d005      	beq.n	801a7c8 <UTIL_SEQ_Run+0x16c>
 801a7bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7c0:	4013      	ands	r3, r2
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	f43f af64 	beq.w	801a690 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a7c8:	4b20      	ldr	r3, [pc, #128]	; (801a84c <UTIL_SEQ_Run+0x1f0>)
 801a7ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a7ce:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a7d0:	f000 f88e 	bl	801a8f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7d4:	f3ef 8310 	mrs	r3, PRIMASK
 801a7d8:	613b      	str	r3, [r7, #16]
  return(result);
 801a7da:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a7dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7de:	b672      	cpsid	i
}
 801a7e0:	bf00      	nop
  local_taskset = TaskSet;
 801a7e2:	4b15      	ldr	r3, [pc, #84]	; (801a838 <UTIL_SEQ_Run+0x1dc>)
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801a7e8:	4b14      	ldr	r3, [pc, #80]	; (801a83c <UTIL_SEQ_Run+0x1e0>)
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801a7ee:	4b14      	ldr	r3, [pc, #80]	; (801a840 <UTIL_SEQ_Run+0x1e4>)
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801a7f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7f8:	401a      	ands	r2, r3
 801a7fa:	4b0e      	ldr	r3, [pc, #56]	; (801a834 <UTIL_SEQ_Run+0x1d8>)
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	4013      	ands	r3, r2
 801a800:	2b00      	cmp	r3, #0
 801a802:	d107      	bne.n	801a814 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801a804:	4b0f      	ldr	r3, [pc, #60]	; (801a844 <UTIL_SEQ_Run+0x1e8>)
 801a806:	681a      	ldr	r2, [r3, #0]
 801a808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a80a:	4013      	ands	r3, r2
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d101      	bne.n	801a814 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801a810:	f7e7 f9ba 	bl	8001b88 <UTIL_SEQ_Idle>
 801a814:	69fb      	ldr	r3, [r7, #28]
 801a816:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	f383 8810 	msr	PRIMASK, r3
}
 801a81e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801a820:	f000 f86c 	bl	801a8fc <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a824:	4a03      	ldr	r2, [pc, #12]	; (801a834 <UTIL_SEQ_Run+0x1d8>)
 801a826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a828:	6013      	str	r3, [r2, #0]

  return;
 801a82a:	bf00      	nop
}
 801a82c:	3740      	adds	r7, #64	; 0x40
 801a82e:	46bd      	mov	sp, r7
 801a830:	bd80      	pop	{r7, pc}
 801a832:	bf00      	nop
 801a834:	20000160 	.word	0x20000160
 801a838:	20001c8c 	.word	0x20001c8c
 801a83c:	20001c90 	.word	0x20001c90
 801a840:	2000015c 	.word	0x2000015c
 801a844:	20001c94 	.word	0x20001c94
 801a848:	20001cac 	.word	0x20001cac
 801a84c:	20001c98 	.word	0x20001c98
 801a850:	20001c9c 	.word	0x20001c9c

0801a854 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a854:	b580      	push	{r7, lr}
 801a856:	b088      	sub	sp, #32
 801a858:	af00      	add	r7, sp, #0
 801a85a:	60f8      	str	r0, [r7, #12]
 801a85c:	60b9      	str	r1, [r7, #8]
 801a85e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a860:	f3ef 8310 	mrs	r3, PRIMASK
 801a864:	617b      	str	r3, [r7, #20]
  return(result);
 801a866:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a86a:	b672      	cpsid	i
}
 801a86c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a86e:	68f8      	ldr	r0, [r7, #12]
 801a870:	f000 f84a 	bl	801a908 <SEQ_BitPosition>
 801a874:	4603      	mov	r3, r0
 801a876:	4619      	mov	r1, r3
 801a878:	4a06      	ldr	r2, [pc, #24]	; (801a894 <UTIL_SEQ_RegTask+0x40>)
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a880:	69fb      	ldr	r3, [r7, #28]
 801a882:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a884:	69bb      	ldr	r3, [r7, #24]
 801a886:	f383 8810 	msr	PRIMASK, r3
}
 801a88a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a88c:	bf00      	nop
}
 801a88e:	3720      	adds	r7, #32
 801a890:	46bd      	mov	sp, r7
 801a892:	bd80      	pop	{r7, pc}
 801a894:	20001c9c 	.word	0x20001c9c

0801a898 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a898:	b480      	push	{r7}
 801a89a:	b087      	sub	sp, #28
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	6078      	str	r0, [r7, #4]
 801a8a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8a2:	f3ef 8310 	mrs	r3, PRIMASK
 801a8a6:	60fb      	str	r3, [r7, #12]
  return(result);
 801a8a8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a8aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8ac:	b672      	cpsid	i
}
 801a8ae:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a8b0:	4b0d      	ldr	r3, [pc, #52]	; (801a8e8 <UTIL_SEQ_SetTask+0x50>)
 801a8b2:	681a      	ldr	r2, [r3, #0]
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	4313      	orrs	r3, r2
 801a8b8:	4a0b      	ldr	r2, [pc, #44]	; (801a8e8 <UTIL_SEQ_SetTask+0x50>)
 801a8ba:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a8bc:	4a0b      	ldr	r2, [pc, #44]	; (801a8ec <UTIL_SEQ_SetTask+0x54>)
 801a8be:	683b      	ldr	r3, [r7, #0]
 801a8c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	431a      	orrs	r2, r3
 801a8c8:	4908      	ldr	r1, [pc, #32]	; (801a8ec <UTIL_SEQ_SetTask+0x54>)
 801a8ca:	683b      	ldr	r3, [r7, #0]
 801a8cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a8d0:	697b      	ldr	r3, [r7, #20]
 801a8d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8d4:	693b      	ldr	r3, [r7, #16]
 801a8d6:	f383 8810 	msr	PRIMASK, r3
}
 801a8da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a8dc:	bf00      	nop
}
 801a8de:	371c      	adds	r7, #28
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	bc80      	pop	{r7}
 801a8e4:	4770      	bx	lr
 801a8e6:	bf00      	nop
 801a8e8:	20001c8c 	.word	0x20001c8c
 801a8ec:	20001cac 	.word	0x20001cac

0801a8f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a8f0:	b480      	push	{r7}
 801a8f2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a8f4:	bf00      	nop
}
 801a8f6:	46bd      	mov	sp, r7
 801a8f8:	bc80      	pop	{r7}
 801a8fa:	4770      	bx	lr

0801a8fc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a8fc:	b480      	push	{r7}
 801a8fe:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a900:	bf00      	nop
}
 801a902:	46bd      	mov	sp, r7
 801a904:	bc80      	pop	{r7}
 801a906:	4770      	bx	lr

0801a908 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a908:	b480      	push	{r7}
 801a90a:	b085      	sub	sp, #20
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801a910:	2300      	movs	r3, #0
 801a912:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801a918:	68bb      	ldr	r3, [r7, #8]
 801a91a:	0c1b      	lsrs	r3, r3, #16
 801a91c:	041b      	lsls	r3, r3, #16
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d104      	bne.n	801a92c <SEQ_BitPosition+0x24>
 801a922:	2310      	movs	r3, #16
 801a924:	73fb      	strb	r3, [r7, #15]
 801a926:	68bb      	ldr	r3, [r7, #8]
 801a928:	041b      	lsls	r3, r3, #16
 801a92a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801a92c:	68bb      	ldr	r3, [r7, #8]
 801a92e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a932:	2b00      	cmp	r3, #0
 801a934:	d105      	bne.n	801a942 <SEQ_BitPosition+0x3a>
 801a936:	7bfb      	ldrb	r3, [r7, #15]
 801a938:	3308      	adds	r3, #8
 801a93a:	73fb      	strb	r3, [r7, #15]
 801a93c:	68bb      	ldr	r3, [r7, #8]
 801a93e:	021b      	lsls	r3, r3, #8
 801a940:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801a942:	68bb      	ldr	r3, [r7, #8]
 801a944:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d105      	bne.n	801a958 <SEQ_BitPosition+0x50>
 801a94c:	7bfb      	ldrb	r3, [r7, #15]
 801a94e:	3304      	adds	r3, #4
 801a950:	73fb      	strb	r3, [r7, #15]
 801a952:	68bb      	ldr	r3, [r7, #8]
 801a954:	011b      	lsls	r3, r3, #4
 801a956:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	0f1b      	lsrs	r3, r3, #28
 801a95c:	4a06      	ldr	r2, [pc, #24]	; (801a978 <SEQ_BitPosition+0x70>)
 801a95e:	5cd2      	ldrb	r2, [r2, r3]
 801a960:	7bfb      	ldrb	r3, [r7, #15]
 801a962:	4413      	add	r3, r2
 801a964:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a966:	7bfb      	ldrb	r3, [r7, #15]
 801a968:	f1c3 031f 	rsb	r3, r3, #31
 801a96c:	b2db      	uxtb	r3, r3
}
 801a96e:	4618      	mov	r0, r3
 801a970:	3714      	adds	r7, #20
 801a972:	46bd      	mov	sp, r7
 801a974:	bc80      	pop	{r7}
 801a976:	4770      	bx	lr
 801a978:	0801c4e4 	.word	0x0801c4e4

0801a97c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a980:	4b04      	ldr	r3, [pc, #16]	; (801a994 <UTIL_TIMER_Init+0x18>)
 801a982:	2200      	movs	r2, #0
 801a984:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a986:	4b04      	ldr	r3, [pc, #16]	; (801a998 <UTIL_TIMER_Init+0x1c>)
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	4798      	blx	r3
 801a98c:	4603      	mov	r3, r0
}
 801a98e:	4618      	mov	r0, r3
 801a990:	bd80      	pop	{r7, pc}
 801a992:	bf00      	nop
 801a994:	20001cb4 	.word	0x20001cb4
 801a998:	0801bfec 	.word	0x0801bfec

0801a99c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b084      	sub	sp, #16
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	60f8      	str	r0, [r7, #12]
 801a9a4:	60b9      	str	r1, [r7, #8]
 801a9a6:	603b      	str	r3, [r7, #0]
 801a9a8:	4613      	mov	r3, r2
 801a9aa:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d023      	beq.n	801a9fa <UTIL_TIMER_Create+0x5e>
 801a9b2:	683b      	ldr	r3, [r7, #0]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d020      	beq.n	801a9fa <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a9be:	4b11      	ldr	r3, [pc, #68]	; (801aa04 <UTIL_TIMER_Create+0x68>)
 801a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9c2:	68b8      	ldr	r0, [r7, #8]
 801a9c4:	4798      	blx	r3
 801a9c6:	4602      	mov	r2, r0
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	2200      	movs	r2, #0
 801a9d0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	2200      	movs	r2, #0
 801a9d6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	2200      	movs	r2, #0
 801a9dc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	683a      	ldr	r2, [r7, #0]
 801a9e2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	69ba      	ldr	r2, [r7, #24]
 801a9e8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	79fa      	ldrb	r2, [r7, #7]
 801a9ee:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	e000      	b.n	801a9fc <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a9fa:	2301      	movs	r3, #1
  }
}
 801a9fc:	4618      	mov	r0, r3
 801a9fe:	3710      	adds	r7, #16
 801aa00:	46bd      	mov	sp, r7
 801aa02:	bd80      	pop	{r7, pc}
 801aa04:	0801bfec 	.word	0x0801bfec

0801aa08 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801aa08:	b580      	push	{r7, lr}
 801aa0a:	b08a      	sub	sp, #40	; 0x28
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801aa10:	2300      	movs	r3, #0
 801aa12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d056      	beq.n	801aaca <UTIL_TIMER_Start+0xc2>
 801aa1c:	6878      	ldr	r0, [r7, #4]
 801aa1e:	f000 f9a9 	bl	801ad74 <TimerExists>
 801aa22:	4603      	mov	r3, r0
 801aa24:	f083 0301 	eor.w	r3, r3, #1
 801aa28:	b2db      	uxtb	r3, r3
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d04d      	beq.n	801aaca <UTIL_TIMER_Start+0xc2>
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	7a5b      	ldrb	r3, [r3, #9]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d149      	bne.n	801aaca <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa36:	f3ef 8310 	mrs	r3, PRIMASK
 801aa3a:	613b      	str	r3, [r7, #16]
  return(result);
 801aa3c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801aa3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa40:	b672      	cpsid	i
}
 801aa42:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	685b      	ldr	r3, [r3, #4]
 801aa48:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801aa4a:	4b24      	ldr	r3, [pc, #144]	; (801aadc <UTIL_TIMER_Start+0xd4>)
 801aa4c:	6a1b      	ldr	r3, [r3, #32]
 801aa4e:	4798      	blx	r3
 801aa50:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801aa52:	6a3a      	ldr	r2, [r7, #32]
 801aa54:	69bb      	ldr	r3, [r7, #24]
 801aa56:	429a      	cmp	r2, r3
 801aa58:	d201      	bcs.n	801aa5e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801aa5a:	69bb      	ldr	r3, [r7, #24]
 801aa5c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	6a3a      	ldr	r2, [r7, #32]
 801aa62:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	2200      	movs	r2, #0
 801aa68:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	2201      	movs	r2, #1
 801aa6e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	2200      	movs	r2, #0
 801aa74:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801aa76:	4b1a      	ldr	r3, [pc, #104]	; (801aae0 <UTIL_TIMER_Start+0xd8>)
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d106      	bne.n	801aa8c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801aa7e:	4b17      	ldr	r3, [pc, #92]	; (801aadc <UTIL_TIMER_Start+0xd4>)
 801aa80:	691b      	ldr	r3, [r3, #16]
 801aa82:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801aa84:	6878      	ldr	r0, [r7, #4]
 801aa86:	f000 f9eb 	bl	801ae60 <TimerInsertNewHeadTimer>
 801aa8a:	e017      	b.n	801aabc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801aa8c:	4b13      	ldr	r3, [pc, #76]	; (801aadc <UTIL_TIMER_Start+0xd4>)
 801aa8e:	699b      	ldr	r3, [r3, #24]
 801aa90:	4798      	blx	r3
 801aa92:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	681a      	ldr	r2, [r3, #0]
 801aa98:	697b      	ldr	r3, [r7, #20]
 801aa9a:	441a      	add	r2, r3
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	681a      	ldr	r2, [r3, #0]
 801aaa4:	4b0e      	ldr	r3, [pc, #56]	; (801aae0 <UTIL_TIMER_Start+0xd8>)
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	429a      	cmp	r2, r3
 801aaac:	d203      	bcs.n	801aab6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801aaae:	6878      	ldr	r0, [r7, #4]
 801aab0:	f000 f9d6 	bl	801ae60 <TimerInsertNewHeadTimer>
 801aab4:	e002      	b.n	801aabc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801aab6:	6878      	ldr	r0, [r7, #4]
 801aab8:	f000 f9a2 	bl	801ae00 <TimerInsertTimer>
 801aabc:	69fb      	ldr	r3, [r7, #28]
 801aabe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	f383 8810 	msr	PRIMASK, r3
}
 801aac6:	bf00      	nop
  {
 801aac8:	e002      	b.n	801aad0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801aaca:	2301      	movs	r3, #1
 801aacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801aad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801aad4:	4618      	mov	r0, r3
 801aad6:	3728      	adds	r7, #40	; 0x28
 801aad8:	46bd      	mov	sp, r7
 801aada:	bd80      	pop	{r7, pc}
 801aadc:	0801bfec 	.word	0x0801bfec
 801aae0:	20001cb4 	.word	0x20001cb4

0801aae4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b088      	sub	sp, #32
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801aaec:	2300      	movs	r3, #0
 801aaee:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d05b      	beq.n	801abae <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aaf6:	f3ef 8310 	mrs	r3, PRIMASK
 801aafa:	60fb      	str	r3, [r7, #12]
  return(result);
 801aafc:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801aafe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab00:	b672      	cpsid	i
}
 801ab02:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801ab04:	4b2d      	ldr	r3, [pc, #180]	; (801abbc <UTIL_TIMER_Stop+0xd8>)
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801ab0a:	4b2c      	ldr	r3, [pc, #176]	; (801abbc <UTIL_TIMER_Stop+0xd8>)
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	2201      	movs	r2, #1
 801ab14:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801ab16:	4b29      	ldr	r3, [pc, #164]	; (801abbc <UTIL_TIMER_Stop+0xd8>)
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d041      	beq.n	801aba2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	2200      	movs	r2, #0
 801ab22:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801ab24:	4b25      	ldr	r3, [pc, #148]	; (801abbc <UTIL_TIMER_Stop+0xd8>)
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	687a      	ldr	r2, [r7, #4]
 801ab2a:	429a      	cmp	r2, r3
 801ab2c:	d134      	bne.n	801ab98 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801ab2e:	4b23      	ldr	r3, [pc, #140]	; (801abbc <UTIL_TIMER_Stop+0xd8>)
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	2200      	movs	r2, #0
 801ab34:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801ab36:	4b21      	ldr	r3, [pc, #132]	; (801abbc <UTIL_TIMER_Stop+0xd8>)
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	695b      	ldr	r3, [r3, #20]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d00a      	beq.n	801ab56 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801ab40:	4b1e      	ldr	r3, [pc, #120]	; (801abbc <UTIL_TIMER_Stop+0xd8>)
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	695b      	ldr	r3, [r3, #20]
 801ab46:	4a1d      	ldr	r2, [pc, #116]	; (801abbc <UTIL_TIMER_Stop+0xd8>)
 801ab48:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801ab4a:	4b1c      	ldr	r3, [pc, #112]	; (801abbc <UTIL_TIMER_Stop+0xd8>)
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f000 f92c 	bl	801adac <TimerSetTimeout>
 801ab54:	e023      	b.n	801ab9e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801ab56:	4b1a      	ldr	r3, [pc, #104]	; (801abc0 <UTIL_TIMER_Stop+0xdc>)
 801ab58:	68db      	ldr	r3, [r3, #12]
 801ab5a:	4798      	blx	r3
            TimerListHead = NULL;
 801ab5c:	4b17      	ldr	r3, [pc, #92]	; (801abbc <UTIL_TIMER_Stop+0xd8>)
 801ab5e:	2200      	movs	r2, #0
 801ab60:	601a      	str	r2, [r3, #0]
 801ab62:	e01c      	b.n	801ab9e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801ab64:	697a      	ldr	r2, [r7, #20]
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	429a      	cmp	r2, r3
 801ab6a:	d110      	bne.n	801ab8e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801ab6c:	697b      	ldr	r3, [r7, #20]
 801ab6e:	695b      	ldr	r3, [r3, #20]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d006      	beq.n	801ab82 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801ab74:	697b      	ldr	r3, [r7, #20]
 801ab76:	695b      	ldr	r3, [r3, #20]
 801ab78:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ab7a:	69bb      	ldr	r3, [r7, #24]
 801ab7c:	697a      	ldr	r2, [r7, #20]
 801ab7e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801ab80:	e00d      	b.n	801ab9e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801ab82:	2300      	movs	r3, #0
 801ab84:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ab86:	69bb      	ldr	r3, [r7, #24]
 801ab88:	697a      	ldr	r2, [r7, #20]
 801ab8a:	615a      	str	r2, [r3, #20]
            break;
 801ab8c:	e007      	b.n	801ab9e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801ab8e:	697b      	ldr	r3, [r7, #20]
 801ab90:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ab92:	697b      	ldr	r3, [r7, #20]
 801ab94:	695b      	ldr	r3, [r3, #20]
 801ab96:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ab98:	697b      	ldr	r3, [r7, #20]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d1e2      	bne.n	801ab64 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801ab9e:	2300      	movs	r3, #0
 801aba0:	77fb      	strb	r3, [r7, #31]
 801aba2:	693b      	ldr	r3, [r7, #16]
 801aba4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aba6:	68bb      	ldr	r3, [r7, #8]
 801aba8:	f383 8810 	msr	PRIMASK, r3
}
 801abac:	e001      	b.n	801abb2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801abae:	2301      	movs	r3, #1
 801abb0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801abb2:	7ffb      	ldrb	r3, [r7, #31]
}
 801abb4:	4618      	mov	r0, r3
 801abb6:	3720      	adds	r7, #32
 801abb8:	46bd      	mov	sp, r7
 801abba:	bd80      	pop	{r7, pc}
 801abbc:	20001cb4 	.word	0x20001cb4
 801abc0:	0801bfec 	.word	0x0801bfec

0801abc4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801abc4:	b580      	push	{r7, lr}
 801abc6:	b084      	sub	sp, #16
 801abc8:	af00      	add	r7, sp, #0
 801abca:	6078      	str	r0, [r7, #4]
 801abcc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801abce:	2300      	movs	r3, #0
 801abd0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d102      	bne.n	801abde <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801abd8:	2301      	movs	r3, #1
 801abda:	73fb      	strb	r3, [r7, #15]
 801abdc:	e014      	b.n	801ac08 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801abde:	4b0d      	ldr	r3, [pc, #52]	; (801ac14 <UTIL_TIMER_SetPeriod+0x50>)
 801abe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abe2:	6838      	ldr	r0, [r7, #0]
 801abe4:	4798      	blx	r3
 801abe6:	4602      	mov	r2, r0
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801abec:	6878      	ldr	r0, [r7, #4]
 801abee:	f000 f8c1 	bl	801ad74 <TimerExists>
 801abf2:	4603      	mov	r3, r0
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d007      	beq.n	801ac08 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801abf8:	6878      	ldr	r0, [r7, #4]
 801abfa:	f7ff ff73 	bl	801aae4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801abfe:	6878      	ldr	r0, [r7, #4]
 801ac00:	f7ff ff02 	bl	801aa08 <UTIL_TIMER_Start>
 801ac04:	4603      	mov	r3, r0
 801ac06:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801ac08:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	3710      	adds	r7, #16
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	bd80      	pop	{r7, pc}
 801ac12:	bf00      	nop
 801ac14:	0801bfec 	.word	0x0801bfec

0801ac18 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801ac18:	b590      	push	{r4, r7, lr}
 801ac1a:	b089      	sub	sp, #36	; 0x24
 801ac1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac1e:	f3ef 8310 	mrs	r3, PRIMASK
 801ac22:	60bb      	str	r3, [r7, #8]
  return(result);
 801ac24:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ac26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ac28:	b672      	cpsid	i
}
 801ac2a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801ac2c:	4b38      	ldr	r3, [pc, #224]	; (801ad10 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ac2e:	695b      	ldr	r3, [r3, #20]
 801ac30:	4798      	blx	r3
 801ac32:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801ac34:	4b36      	ldr	r3, [pc, #216]	; (801ad10 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ac36:	691b      	ldr	r3, [r3, #16]
 801ac38:	4798      	blx	r3
 801ac3a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801ac3c:	693a      	ldr	r2, [r7, #16]
 801ac3e:	697b      	ldr	r3, [r7, #20]
 801ac40:	1ad3      	subs	r3, r2, r3
 801ac42:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ac44:	4b33      	ldr	r3, [pc, #204]	; (801ad14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d037      	beq.n	801acbc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801ac4c:	4b31      	ldr	r3, [pc, #196]	; (801ad14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801ac52:	69fb      	ldr	r3, [r7, #28]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	68fa      	ldr	r2, [r7, #12]
 801ac58:	429a      	cmp	r2, r3
 801ac5a:	d206      	bcs.n	801ac6a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801ac5c:	69fb      	ldr	r3, [r7, #28]
 801ac5e:	681a      	ldr	r2, [r3, #0]
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	1ad2      	subs	r2, r2, r3
 801ac64:	69fb      	ldr	r3, [r7, #28]
 801ac66:	601a      	str	r2, [r3, #0]
 801ac68:	e002      	b.n	801ac70 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801ac6a:	69fb      	ldr	r3, [r7, #28]
 801ac6c:	2200      	movs	r2, #0
 801ac6e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801ac70:	69fb      	ldr	r3, [r7, #28]
 801ac72:	695b      	ldr	r3, [r3, #20]
 801ac74:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801ac76:	69fb      	ldr	r3, [r7, #28]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d1ea      	bne.n	801ac52 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ac7c:	e01e      	b.n	801acbc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801ac7e:	4b25      	ldr	r3, [pc, #148]	; (801ad14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801ac84:	4b23      	ldr	r3, [pc, #140]	; (801ad14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	695b      	ldr	r3, [r3, #20]
 801ac8a:	4a22      	ldr	r2, [pc, #136]	; (801ad14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ac8c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801ac8e:	69fb      	ldr	r3, [r7, #28]
 801ac90:	2200      	movs	r2, #0
 801ac92:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801ac94:	69fb      	ldr	r3, [r7, #28]
 801ac96:	2200      	movs	r2, #0
 801ac98:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801ac9a:	69fb      	ldr	r3, [r7, #28]
 801ac9c:	68db      	ldr	r3, [r3, #12]
 801ac9e:	69fa      	ldr	r2, [r7, #28]
 801aca0:	6912      	ldr	r2, [r2, #16]
 801aca2:	4610      	mov	r0, r2
 801aca4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801aca6:	69fb      	ldr	r3, [r7, #28]
 801aca8:	7adb      	ldrb	r3, [r3, #11]
 801acaa:	2b01      	cmp	r3, #1
 801acac:	d106      	bne.n	801acbc <UTIL_TIMER_IRQ_Handler+0xa4>
 801acae:	69fb      	ldr	r3, [r7, #28]
 801acb0:	7a9b      	ldrb	r3, [r3, #10]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d102      	bne.n	801acbc <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801acb6:	69f8      	ldr	r0, [r7, #28]
 801acb8:	f7ff fea6 	bl	801aa08 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801acbc:	4b15      	ldr	r3, [pc, #84]	; (801ad14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d00d      	beq.n	801ace0 <UTIL_TIMER_IRQ_Handler+0xc8>
 801acc4:	4b13      	ldr	r3, [pc, #76]	; (801ad14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	2b00      	cmp	r3, #0
 801accc:	d0d7      	beq.n	801ac7e <UTIL_TIMER_IRQ_Handler+0x66>
 801acce:	4b11      	ldr	r3, [pc, #68]	; (801ad14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	681c      	ldr	r4, [r3, #0]
 801acd4:	4b0e      	ldr	r3, [pc, #56]	; (801ad10 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801acd6:	699b      	ldr	r3, [r3, #24]
 801acd8:	4798      	blx	r3
 801acda:	4603      	mov	r3, r0
 801acdc:	429c      	cmp	r4, r3
 801acde:	d3ce      	bcc.n	801ac7e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ace0:	4b0c      	ldr	r3, [pc, #48]	; (801ad14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d009      	beq.n	801acfc <UTIL_TIMER_IRQ_Handler+0xe4>
 801ace8:	4b0a      	ldr	r3, [pc, #40]	; (801ad14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	7a1b      	ldrb	r3, [r3, #8]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d104      	bne.n	801acfc <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801acf2:	4b08      	ldr	r3, [pc, #32]	; (801ad14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	4618      	mov	r0, r3
 801acf8:	f000 f858 	bl	801adac <TimerSetTimeout>
 801acfc:	69bb      	ldr	r3, [r7, #24]
 801acfe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	f383 8810 	msr	PRIMASK, r3
}
 801ad06:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ad08:	bf00      	nop
 801ad0a:	3724      	adds	r7, #36	; 0x24
 801ad0c:	46bd      	mov	sp, r7
 801ad0e:	bd90      	pop	{r4, r7, pc}
 801ad10:	0801bfec 	.word	0x0801bfec
 801ad14:	20001cb4 	.word	0x20001cb4

0801ad18 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801ad18:	b580      	push	{r7, lr}
 801ad1a:	b082      	sub	sp, #8
 801ad1c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801ad1e:	4b06      	ldr	r3, [pc, #24]	; (801ad38 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ad20:	69db      	ldr	r3, [r3, #28]
 801ad22:	4798      	blx	r3
 801ad24:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ad26:	4b04      	ldr	r3, [pc, #16]	; (801ad38 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ad28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad2a:	6878      	ldr	r0, [r7, #4]
 801ad2c:	4798      	blx	r3
 801ad2e:	4603      	mov	r3, r0
}
 801ad30:	4618      	mov	r0, r3
 801ad32:	3708      	adds	r7, #8
 801ad34:	46bd      	mov	sp, r7
 801ad36:	bd80      	pop	{r7, pc}
 801ad38:	0801bfec 	.word	0x0801bfec

0801ad3c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b084      	sub	sp, #16
 801ad40:	af00      	add	r7, sp, #0
 801ad42:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801ad44:	4b0a      	ldr	r3, [pc, #40]	; (801ad70 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ad46:	69db      	ldr	r3, [r3, #28]
 801ad48:	4798      	blx	r3
 801ad4a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801ad4c:	4b08      	ldr	r3, [pc, #32]	; (801ad70 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad50:	6878      	ldr	r0, [r7, #4]
 801ad52:	4798      	blx	r3
 801ad54:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801ad56:	4b06      	ldr	r3, [pc, #24]	; (801ad70 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ad58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad5a:	68f9      	ldr	r1, [r7, #12]
 801ad5c:	68ba      	ldr	r2, [r7, #8]
 801ad5e:	1a8a      	subs	r2, r1, r2
 801ad60:	4610      	mov	r0, r2
 801ad62:	4798      	blx	r3
 801ad64:	4603      	mov	r3, r0
}
 801ad66:	4618      	mov	r0, r3
 801ad68:	3710      	adds	r7, #16
 801ad6a:	46bd      	mov	sp, r7
 801ad6c:	bd80      	pop	{r7, pc}
 801ad6e:	bf00      	nop
 801ad70:	0801bfec 	.word	0x0801bfec

0801ad74 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801ad74:	b480      	push	{r7}
 801ad76:	b085      	sub	sp, #20
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ad7c:	4b0a      	ldr	r3, [pc, #40]	; (801ada8 <TimerExists+0x34>)
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801ad82:	e008      	b.n	801ad96 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801ad84:	68fa      	ldr	r2, [r7, #12]
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	429a      	cmp	r2, r3
 801ad8a:	d101      	bne.n	801ad90 <TimerExists+0x1c>
    {
      return true;
 801ad8c:	2301      	movs	r3, #1
 801ad8e:	e006      	b.n	801ad9e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	695b      	ldr	r3, [r3, #20]
 801ad94:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d1f3      	bne.n	801ad84 <TimerExists+0x10>
  }
  return false;
 801ad9c:	2300      	movs	r3, #0
}
 801ad9e:	4618      	mov	r0, r3
 801ada0:	3714      	adds	r7, #20
 801ada2:	46bd      	mov	sp, r7
 801ada4:	bc80      	pop	{r7}
 801ada6:	4770      	bx	lr
 801ada8:	20001cb4 	.word	0x20001cb4

0801adac <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801adac:	b590      	push	{r4, r7, lr}
 801adae:	b085      	sub	sp, #20
 801adb0:	af00      	add	r7, sp, #0
 801adb2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801adb4:	4b11      	ldr	r3, [pc, #68]	; (801adfc <TimerSetTimeout+0x50>)
 801adb6:	6a1b      	ldr	r3, [r3, #32]
 801adb8:	4798      	blx	r3
 801adba:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	2201      	movs	r2, #1
 801adc0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	681c      	ldr	r4, [r3, #0]
 801adc6:	4b0d      	ldr	r3, [pc, #52]	; (801adfc <TimerSetTimeout+0x50>)
 801adc8:	699b      	ldr	r3, [r3, #24]
 801adca:	4798      	blx	r3
 801adcc:	4602      	mov	r2, r0
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	4413      	add	r3, r2
 801add2:	429c      	cmp	r4, r3
 801add4:	d207      	bcs.n	801ade6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801add6:	4b09      	ldr	r3, [pc, #36]	; (801adfc <TimerSetTimeout+0x50>)
 801add8:	699b      	ldr	r3, [r3, #24]
 801adda:	4798      	blx	r3
 801addc:	4602      	mov	r2, r0
 801adde:	68fb      	ldr	r3, [r7, #12]
 801ade0:	441a      	add	r2, r3
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801ade6:	4b05      	ldr	r3, [pc, #20]	; (801adfc <TimerSetTimeout+0x50>)
 801ade8:	689b      	ldr	r3, [r3, #8]
 801adea:	687a      	ldr	r2, [r7, #4]
 801adec:	6812      	ldr	r2, [r2, #0]
 801adee:	4610      	mov	r0, r2
 801adf0:	4798      	blx	r3
}
 801adf2:	bf00      	nop
 801adf4:	3714      	adds	r7, #20
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bd90      	pop	{r4, r7, pc}
 801adfa:	bf00      	nop
 801adfc:	0801bfec 	.word	0x0801bfec

0801ae00 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801ae00:	b480      	push	{r7}
 801ae02:	b085      	sub	sp, #20
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ae08:	4b14      	ldr	r3, [pc, #80]	; (801ae5c <TimerInsertTimer+0x5c>)
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801ae0e:	4b13      	ldr	r3, [pc, #76]	; (801ae5c <TimerInsertTimer+0x5c>)
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	695b      	ldr	r3, [r3, #20]
 801ae14:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801ae16:	e012      	b.n	801ae3e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	681a      	ldr	r2, [r3, #0]
 801ae1c:	68bb      	ldr	r3, [r7, #8]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	429a      	cmp	r2, r3
 801ae22:	d905      	bls.n	801ae30 <TimerInsertTimer+0x30>
    {
        cur = next;
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801ae28:	68bb      	ldr	r3, [r7, #8]
 801ae2a:	695b      	ldr	r3, [r3, #20]
 801ae2c:	60bb      	str	r3, [r7, #8]
 801ae2e:	e006      	b.n	801ae3e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	687a      	ldr	r2, [r7, #4]
 801ae34:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	68ba      	ldr	r2, [r7, #8]
 801ae3a:	615a      	str	r2, [r3, #20]
        return;
 801ae3c:	e009      	b.n	801ae52 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801ae3e:	68fb      	ldr	r3, [r7, #12]
 801ae40:	695b      	ldr	r3, [r3, #20]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d1e8      	bne.n	801ae18 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	687a      	ldr	r2, [r7, #4]
 801ae4a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	2200      	movs	r2, #0
 801ae50:	615a      	str	r2, [r3, #20]
}
 801ae52:	3714      	adds	r7, #20
 801ae54:	46bd      	mov	sp, r7
 801ae56:	bc80      	pop	{r7}
 801ae58:	4770      	bx	lr
 801ae5a:	bf00      	nop
 801ae5c:	20001cb4 	.word	0x20001cb4

0801ae60 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801ae60:	b580      	push	{r7, lr}
 801ae62:	b084      	sub	sp, #16
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ae68:	4b0b      	ldr	r3, [pc, #44]	; (801ae98 <TimerInsertNewHeadTimer+0x38>)
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801ae6e:	68fb      	ldr	r3, [r7, #12]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d002      	beq.n	801ae7a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	2200      	movs	r2, #0
 801ae78:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	68fa      	ldr	r2, [r7, #12]
 801ae7e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ae80:	4a05      	ldr	r2, [pc, #20]	; (801ae98 <TimerInsertNewHeadTimer+0x38>)
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801ae86:	4b04      	ldr	r3, [pc, #16]	; (801ae98 <TimerInsertNewHeadTimer+0x38>)
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	f7ff ff8e 	bl	801adac <TimerSetTimeout>
}
 801ae90:	bf00      	nop
 801ae92:	3710      	adds	r7, #16
 801ae94:	46bd      	mov	sp, r7
 801ae96:	bd80      	pop	{r7, pc}
 801ae98:	20001cb4 	.word	0x20001cb4

0801ae9c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801ae9c:	b580      	push	{r7, lr}
 801ae9e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801aea0:	2218      	movs	r2, #24
 801aea2:	2100      	movs	r1, #0
 801aea4:	4807      	ldr	r0, [pc, #28]	; (801aec4 <UTIL_ADV_TRACE_Init+0x28>)
 801aea6:	f7fe fff6 	bl	8019e96 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801aeaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801aeae:	2100      	movs	r1, #0
 801aeb0:	4805      	ldr	r0, [pc, #20]	; (801aec8 <UTIL_ADV_TRACE_Init+0x2c>)
 801aeb2:	f7fe fff0 	bl	8019e96 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801aeb6:	4b05      	ldr	r3, [pc, #20]	; (801aecc <UTIL_ADV_TRACE_Init+0x30>)
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	4805      	ldr	r0, [pc, #20]	; (801aed0 <UTIL_ADV_TRACE_Init+0x34>)
 801aebc:	4798      	blx	r3
 801aebe:	4603      	mov	r3, r0
}
 801aec0:	4618      	mov	r0, r3
 801aec2:	bd80      	pop	{r7, pc}
 801aec4:	20001cb8 	.word	0x20001cb8
 801aec8:	20001cd0 	.word	0x20001cd0
 801aecc:	0801c02c 	.word	0x0801c02c
 801aed0:	0801b13d 	.word	0x0801b13d

0801aed4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801aed4:	b480      	push	{r7}
 801aed6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801aed8:	4b06      	ldr	r3, [pc, #24]	; (801aef4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801aeda:	8a5a      	ldrh	r2, [r3, #18]
 801aedc:	4b05      	ldr	r3, [pc, #20]	; (801aef4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801aede:	8a1b      	ldrh	r3, [r3, #16]
 801aee0:	429a      	cmp	r2, r3
 801aee2:	d101      	bne.n	801aee8 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801aee4:	2301      	movs	r3, #1
 801aee6:	e000      	b.n	801aeea <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801aee8:	2300      	movs	r3, #0
}
 801aeea:	4618      	mov	r0, r3
 801aeec:	46bd      	mov	sp, r7
 801aeee:	bc80      	pop	{r7}
 801aef0:	4770      	bx	lr
 801aef2:	bf00      	nop
 801aef4:	20001cb8 	.word	0x20001cb8

0801aef8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801aef8:	b408      	push	{r3}
 801aefa:	b580      	push	{r7, lr}
 801aefc:	b08d      	sub	sp, #52	; 0x34
 801aefe:	af00      	add	r7, sp, #0
 801af00:	60f8      	str	r0, [r7, #12]
 801af02:	60b9      	str	r1, [r7, #8]
 801af04:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801af06:	2300      	movs	r3, #0
 801af08:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801af0a:	2300      	movs	r3, #0
 801af0c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801af0e:	4b37      	ldr	r3, [pc, #220]	; (801afec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801af10:	7a1b      	ldrb	r3, [r3, #8]
 801af12:	461a      	mov	r2, r3
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	4293      	cmp	r3, r2
 801af18:	d902      	bls.n	801af20 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801af1a:	f06f 0304 	mvn.w	r3, #4
 801af1e:	e05e      	b.n	801afde <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801af20:	4b32      	ldr	r3, [pc, #200]	; (801afec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801af22:	68da      	ldr	r2, [r3, #12]
 801af24:	68bb      	ldr	r3, [r7, #8]
 801af26:	4013      	ands	r3, r2
 801af28:	68ba      	ldr	r2, [r7, #8]
 801af2a:	429a      	cmp	r2, r3
 801af2c:	d002      	beq.n	801af34 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801af2e:	f06f 0305 	mvn.w	r3, #5
 801af32:	e054      	b.n	801afde <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801af34:	4b2d      	ldr	r3, [pc, #180]	; (801afec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801af36:	685b      	ldr	r3, [r3, #4]
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d00a      	beq.n	801af52 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d007      	beq.n	801af52 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801af42:	4b2a      	ldr	r3, [pc, #168]	; (801afec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801af44:	685b      	ldr	r3, [r3, #4]
 801af46:	f107 0116 	add.w	r1, r7, #22
 801af4a:	f107 0218 	add.w	r2, r7, #24
 801af4e:	4610      	mov	r0, r2
 801af50:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801af52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801af56:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801af58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801af5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801af60:	4823      	ldr	r0, [pc, #140]	; (801aff0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801af62:	f7ff fa25 	bl	801a3b0 <tiny_vsnprintf_like>
 801af66:	4603      	mov	r3, r0
 801af68:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801af6a:	f000 f9f1 	bl	801b350 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801af6e:	8afa      	ldrh	r2, [r7, #22]
 801af70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801af72:	4413      	add	r3, r2
 801af74:	b29b      	uxth	r3, r3
 801af76:	f107 0214 	add.w	r2, r7, #20
 801af7a:	4611      	mov	r1, r2
 801af7c:	4618      	mov	r0, r3
 801af7e:	f000 f969 	bl	801b254 <TRACE_AllocateBufer>
 801af82:	4603      	mov	r3, r0
 801af84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801af88:	d025      	beq.n	801afd6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801af8a:	2300      	movs	r3, #0
 801af8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801af8e:	e00e      	b.n	801afae <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801af90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801af92:	8aba      	ldrh	r2, [r7, #20]
 801af94:	3330      	adds	r3, #48	; 0x30
 801af96:	443b      	add	r3, r7
 801af98:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801af9c:	4b15      	ldr	r3, [pc, #84]	; (801aff4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801af9e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801afa0:	8abb      	ldrh	r3, [r7, #20]
 801afa2:	3301      	adds	r3, #1
 801afa4:	b29b      	uxth	r3, r3
 801afa6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801afa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801afaa:	3301      	adds	r3, #1
 801afac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801afae:	8afb      	ldrh	r3, [r7, #22]
 801afb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801afb2:	429a      	cmp	r2, r3
 801afb4:	d3ec      	bcc.n	801af90 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801afb6:	8abb      	ldrh	r3, [r7, #20]
 801afb8:	461a      	mov	r2, r3
 801afba:	4b0e      	ldr	r3, [pc, #56]	; (801aff4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801afbc:	18d0      	adds	r0, r2, r3
 801afbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801afc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801afc6:	f7ff f9f3 	bl	801a3b0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801afca:	f000 f9df 	bl	801b38c <TRACE_UnLock>

    return TRACE_Send();
 801afce:	f000 f831 	bl	801b034 <TRACE_Send>
 801afd2:	4603      	mov	r3, r0
 801afd4:	e003      	b.n	801afde <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801afd6:	f000 f9d9 	bl	801b38c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801afda:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801afde:	4618      	mov	r0, r3
 801afe0:	3734      	adds	r7, #52	; 0x34
 801afe2:	46bd      	mov	sp, r7
 801afe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801afe8:	b001      	add	sp, #4
 801afea:	4770      	bx	lr
 801afec:	20001cb8 	.word	0x20001cb8
 801aff0:	200020d0 	.word	0x200020d0
 801aff4:	20001cd0 	.word	0x20001cd0

0801aff8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801aff8:	b480      	push	{r7}
 801affa:	b083      	sub	sp, #12
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b000:	4a03      	ldr	r2, [pc, #12]	; (801b010 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	6053      	str	r3, [r2, #4]
}
 801b006:	bf00      	nop
 801b008:	370c      	adds	r7, #12
 801b00a:	46bd      	mov	sp, r7
 801b00c:	bc80      	pop	{r7}
 801b00e:	4770      	bx	lr
 801b010:	20001cb8 	.word	0x20001cb8

0801b014 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b014:	b480      	push	{r7}
 801b016:	b083      	sub	sp, #12
 801b018:	af00      	add	r7, sp, #0
 801b01a:	4603      	mov	r3, r0
 801b01c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b01e:	4a04      	ldr	r2, [pc, #16]	; (801b030 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b020:	79fb      	ldrb	r3, [r7, #7]
 801b022:	7213      	strb	r3, [r2, #8]
}
 801b024:	bf00      	nop
 801b026:	370c      	adds	r7, #12
 801b028:	46bd      	mov	sp, r7
 801b02a:	bc80      	pop	{r7}
 801b02c:	4770      	bx	lr
 801b02e:	bf00      	nop
 801b030:	20001cb8 	.word	0x20001cb8

0801b034 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b034:	b580      	push	{r7, lr}
 801b036:	b088      	sub	sp, #32
 801b038:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b03a:	2300      	movs	r3, #0
 801b03c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b03e:	2300      	movs	r3, #0
 801b040:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b042:	f3ef 8310 	mrs	r3, PRIMASK
 801b046:	613b      	str	r3, [r7, #16]
  return(result);
 801b048:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b04a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b04c:	b672      	cpsid	i
}
 801b04e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b050:	f000 f9ba 	bl	801b3c8 <TRACE_IsLocked>
 801b054:	4603      	mov	r3, r0
 801b056:	2b00      	cmp	r3, #0
 801b058:	d15d      	bne.n	801b116 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b05a:	f000 f979 	bl	801b350 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b05e:	4b34      	ldr	r3, [pc, #208]	; (801b130 <TRACE_Send+0xfc>)
 801b060:	8a1a      	ldrh	r2, [r3, #16]
 801b062:	4b33      	ldr	r3, [pc, #204]	; (801b130 <TRACE_Send+0xfc>)
 801b064:	8a5b      	ldrh	r3, [r3, #18]
 801b066:	429a      	cmp	r2, r3
 801b068:	d04d      	beq.n	801b106 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b06a:	4b31      	ldr	r3, [pc, #196]	; (801b130 <TRACE_Send+0xfc>)
 801b06c:	789b      	ldrb	r3, [r3, #2]
 801b06e:	2b01      	cmp	r3, #1
 801b070:	d117      	bne.n	801b0a2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b072:	4b2f      	ldr	r3, [pc, #188]	; (801b130 <TRACE_Send+0xfc>)
 801b074:	881a      	ldrh	r2, [r3, #0]
 801b076:	4b2e      	ldr	r3, [pc, #184]	; (801b130 <TRACE_Send+0xfc>)
 801b078:	8a1b      	ldrh	r3, [r3, #16]
 801b07a:	1ad3      	subs	r3, r2, r3
 801b07c:	b29a      	uxth	r2, r3
 801b07e:	4b2c      	ldr	r3, [pc, #176]	; (801b130 <TRACE_Send+0xfc>)
 801b080:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b082:	4b2b      	ldr	r3, [pc, #172]	; (801b130 <TRACE_Send+0xfc>)
 801b084:	2202      	movs	r2, #2
 801b086:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b088:	4b29      	ldr	r3, [pc, #164]	; (801b130 <TRACE_Send+0xfc>)
 801b08a:	2200      	movs	r2, #0
 801b08c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b08e:	4b28      	ldr	r3, [pc, #160]	; (801b130 <TRACE_Send+0xfc>)
 801b090:	8a9b      	ldrh	r3, [r3, #20]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d105      	bne.n	801b0a2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b096:	4b26      	ldr	r3, [pc, #152]	; (801b130 <TRACE_Send+0xfc>)
 801b098:	2200      	movs	r2, #0
 801b09a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b09c:	4b24      	ldr	r3, [pc, #144]	; (801b130 <TRACE_Send+0xfc>)
 801b09e:	2200      	movs	r2, #0
 801b0a0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b0a2:	4b23      	ldr	r3, [pc, #140]	; (801b130 <TRACE_Send+0xfc>)
 801b0a4:	789b      	ldrb	r3, [r3, #2]
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d115      	bne.n	801b0d6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b0aa:	4b21      	ldr	r3, [pc, #132]	; (801b130 <TRACE_Send+0xfc>)
 801b0ac:	8a5a      	ldrh	r2, [r3, #18]
 801b0ae:	4b20      	ldr	r3, [pc, #128]	; (801b130 <TRACE_Send+0xfc>)
 801b0b0:	8a1b      	ldrh	r3, [r3, #16]
 801b0b2:	429a      	cmp	r2, r3
 801b0b4:	d908      	bls.n	801b0c8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b0b6:	4b1e      	ldr	r3, [pc, #120]	; (801b130 <TRACE_Send+0xfc>)
 801b0b8:	8a5a      	ldrh	r2, [r3, #18]
 801b0ba:	4b1d      	ldr	r3, [pc, #116]	; (801b130 <TRACE_Send+0xfc>)
 801b0bc:	8a1b      	ldrh	r3, [r3, #16]
 801b0be:	1ad3      	subs	r3, r2, r3
 801b0c0:	b29a      	uxth	r2, r3
 801b0c2:	4b1b      	ldr	r3, [pc, #108]	; (801b130 <TRACE_Send+0xfc>)
 801b0c4:	829a      	strh	r2, [r3, #20]
 801b0c6:	e006      	b.n	801b0d6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b0c8:	4b19      	ldr	r3, [pc, #100]	; (801b130 <TRACE_Send+0xfc>)
 801b0ca:	8a1b      	ldrh	r3, [r3, #16]
 801b0cc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b0d0:	b29a      	uxth	r2, r3
 801b0d2:	4b17      	ldr	r3, [pc, #92]	; (801b130 <TRACE_Send+0xfc>)
 801b0d4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b0d6:	4b16      	ldr	r3, [pc, #88]	; (801b130 <TRACE_Send+0xfc>)
 801b0d8:	8a1b      	ldrh	r3, [r3, #16]
 801b0da:	461a      	mov	r2, r3
 801b0dc:	4b15      	ldr	r3, [pc, #84]	; (801b134 <TRACE_Send+0x100>)
 801b0de:	4413      	add	r3, r2
 801b0e0:	61bb      	str	r3, [r7, #24]
 801b0e2:	697b      	ldr	r3, [r7, #20]
 801b0e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	f383 8810 	msr	PRIMASK, r3
}
 801b0ec:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b0ee:	f7e6 fe67 	bl	8001dc0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b0f2:	4b11      	ldr	r3, [pc, #68]	; (801b138 <TRACE_Send+0x104>)
 801b0f4:	68db      	ldr	r3, [r3, #12]
 801b0f6:	4a0e      	ldr	r2, [pc, #56]	; (801b130 <TRACE_Send+0xfc>)
 801b0f8:	8a92      	ldrh	r2, [r2, #20]
 801b0fa:	4611      	mov	r1, r2
 801b0fc:	69b8      	ldr	r0, [r7, #24]
 801b0fe:	4798      	blx	r3
 801b100:	4603      	mov	r3, r0
 801b102:	77fb      	strb	r3, [r7, #31]
 801b104:	e00d      	b.n	801b122 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b106:	f000 f941 	bl	801b38c <TRACE_UnLock>
 801b10a:	697b      	ldr	r3, [r7, #20]
 801b10c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b10e:	68bb      	ldr	r3, [r7, #8]
 801b110:	f383 8810 	msr	PRIMASK, r3
}
 801b114:	e005      	b.n	801b122 <TRACE_Send+0xee>
 801b116:	697b      	ldr	r3, [r7, #20]
 801b118:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	f383 8810 	msr	PRIMASK, r3
}
 801b120:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b122:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b126:	4618      	mov	r0, r3
 801b128:	3720      	adds	r7, #32
 801b12a:	46bd      	mov	sp, r7
 801b12c:	bd80      	pop	{r7, pc}
 801b12e:	bf00      	nop
 801b130:	20001cb8 	.word	0x20001cb8
 801b134:	20001cd0 	.word	0x20001cd0
 801b138:	0801c02c 	.word	0x0801c02c

0801b13c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b088      	sub	sp, #32
 801b140:	af00      	add	r7, sp, #0
 801b142:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801b144:	2300      	movs	r3, #0
 801b146:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b148:	f3ef 8310 	mrs	r3, PRIMASK
 801b14c:	617b      	str	r3, [r7, #20]
  return(result);
 801b14e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b150:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b152:	b672      	cpsid	i
}
 801b154:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b156:	4b3c      	ldr	r3, [pc, #240]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b158:	789b      	ldrb	r3, [r3, #2]
 801b15a:	2b02      	cmp	r3, #2
 801b15c:	d106      	bne.n	801b16c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b15e:	4b3a      	ldr	r3, [pc, #232]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b160:	2200      	movs	r2, #0
 801b162:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b164:	4b38      	ldr	r3, [pc, #224]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b166:	2200      	movs	r2, #0
 801b168:	821a      	strh	r2, [r3, #16]
 801b16a:	e00a      	b.n	801b182 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b16c:	4b36      	ldr	r3, [pc, #216]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b16e:	8a1a      	ldrh	r2, [r3, #16]
 801b170:	4b35      	ldr	r3, [pc, #212]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b172:	8a9b      	ldrh	r3, [r3, #20]
 801b174:	4413      	add	r3, r2
 801b176:	b29b      	uxth	r3, r3
 801b178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b17c:	b29a      	uxth	r2, r3
 801b17e:	4b32      	ldr	r3, [pc, #200]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b180:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b182:	4b31      	ldr	r3, [pc, #196]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b184:	8a1a      	ldrh	r2, [r3, #16]
 801b186:	4b30      	ldr	r3, [pc, #192]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b188:	8a5b      	ldrh	r3, [r3, #18]
 801b18a:	429a      	cmp	r2, r3
 801b18c:	d04d      	beq.n	801b22a <TRACE_TxCpltCallback+0xee>
 801b18e:	4b2e      	ldr	r3, [pc, #184]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b190:	8adb      	ldrh	r3, [r3, #22]
 801b192:	2b01      	cmp	r3, #1
 801b194:	d149      	bne.n	801b22a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b196:	4b2c      	ldr	r3, [pc, #176]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b198:	789b      	ldrb	r3, [r3, #2]
 801b19a:	2b01      	cmp	r3, #1
 801b19c:	d117      	bne.n	801b1ce <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b19e:	4b2a      	ldr	r3, [pc, #168]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1a0:	881a      	ldrh	r2, [r3, #0]
 801b1a2:	4b29      	ldr	r3, [pc, #164]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1a4:	8a1b      	ldrh	r3, [r3, #16]
 801b1a6:	1ad3      	subs	r3, r2, r3
 801b1a8:	b29a      	uxth	r2, r3
 801b1aa:	4b27      	ldr	r3, [pc, #156]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1ac:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b1ae:	4b26      	ldr	r3, [pc, #152]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1b0:	2202      	movs	r2, #2
 801b1b2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b1b4:	4b24      	ldr	r3, [pc, #144]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1b6:	2200      	movs	r2, #0
 801b1b8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b1ba:	4b23      	ldr	r3, [pc, #140]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1bc:	8a9b      	ldrh	r3, [r3, #20]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d105      	bne.n	801b1ce <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b1c2:	4b21      	ldr	r3, [pc, #132]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1c4:	2200      	movs	r2, #0
 801b1c6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b1c8:	4b1f      	ldr	r3, [pc, #124]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b1ce:	4b1e      	ldr	r3, [pc, #120]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1d0:	789b      	ldrb	r3, [r3, #2]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d115      	bne.n	801b202 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b1d6:	4b1c      	ldr	r3, [pc, #112]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1d8:	8a5a      	ldrh	r2, [r3, #18]
 801b1da:	4b1b      	ldr	r3, [pc, #108]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1dc:	8a1b      	ldrh	r3, [r3, #16]
 801b1de:	429a      	cmp	r2, r3
 801b1e0:	d908      	bls.n	801b1f4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b1e2:	4b19      	ldr	r3, [pc, #100]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1e4:	8a5a      	ldrh	r2, [r3, #18]
 801b1e6:	4b18      	ldr	r3, [pc, #96]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1e8:	8a1b      	ldrh	r3, [r3, #16]
 801b1ea:	1ad3      	subs	r3, r2, r3
 801b1ec:	b29a      	uxth	r2, r3
 801b1ee:	4b16      	ldr	r3, [pc, #88]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1f0:	829a      	strh	r2, [r3, #20]
 801b1f2:	e006      	b.n	801b202 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b1f4:	4b14      	ldr	r3, [pc, #80]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b1f6:	8a1b      	ldrh	r3, [r3, #16]
 801b1f8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b1fc:	b29a      	uxth	r2, r3
 801b1fe:	4b12      	ldr	r3, [pc, #72]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b200:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b202:	4b11      	ldr	r3, [pc, #68]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b204:	8a1b      	ldrh	r3, [r3, #16]
 801b206:	461a      	mov	r2, r3
 801b208:	4b10      	ldr	r3, [pc, #64]	; (801b24c <TRACE_TxCpltCallback+0x110>)
 801b20a:	4413      	add	r3, r2
 801b20c:	61fb      	str	r3, [r7, #28]
 801b20e:	69bb      	ldr	r3, [r7, #24]
 801b210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b212:	693b      	ldr	r3, [r7, #16]
 801b214:	f383 8810 	msr	PRIMASK, r3
}
 801b218:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b21a:	4b0d      	ldr	r3, [pc, #52]	; (801b250 <TRACE_TxCpltCallback+0x114>)
 801b21c:	68db      	ldr	r3, [r3, #12]
 801b21e:	4a0a      	ldr	r2, [pc, #40]	; (801b248 <TRACE_TxCpltCallback+0x10c>)
 801b220:	8a92      	ldrh	r2, [r2, #20]
 801b222:	4611      	mov	r1, r2
 801b224:	69f8      	ldr	r0, [r7, #28]
 801b226:	4798      	blx	r3
 801b228:	e00a      	b.n	801b240 <TRACE_TxCpltCallback+0x104>
 801b22a:	69bb      	ldr	r3, [r7, #24]
 801b22c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	f383 8810 	msr	PRIMASK, r3
}
 801b234:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801b236:	f7e6 fdcb 	bl	8001dd0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801b23a:	f000 f8a7 	bl	801b38c <TRACE_UnLock>
  }
}
 801b23e:	bf00      	nop
 801b240:	bf00      	nop
 801b242:	3720      	adds	r7, #32
 801b244:	46bd      	mov	sp, r7
 801b246:	bd80      	pop	{r7, pc}
 801b248:	20001cb8 	.word	0x20001cb8
 801b24c:	20001cd0 	.word	0x20001cd0
 801b250:	0801c02c 	.word	0x0801c02c

0801b254 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b254:	b480      	push	{r7}
 801b256:	b087      	sub	sp, #28
 801b258:	af00      	add	r7, sp, #0
 801b25a:	4603      	mov	r3, r0
 801b25c:	6039      	str	r1, [r7, #0]
 801b25e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801b260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b264:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b266:	f3ef 8310 	mrs	r3, PRIMASK
 801b26a:	60fb      	str	r3, [r7, #12]
  return(result);
 801b26c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b26e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b270:	b672      	cpsid	i
}
 801b272:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b274:	4b35      	ldr	r3, [pc, #212]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b276:	8a5a      	ldrh	r2, [r3, #18]
 801b278:	4b34      	ldr	r3, [pc, #208]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b27a:	8a1b      	ldrh	r3, [r3, #16]
 801b27c:	429a      	cmp	r2, r3
 801b27e:	d11b      	bne.n	801b2b8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b280:	4b32      	ldr	r3, [pc, #200]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b282:	8a5b      	ldrh	r3, [r3, #18]
 801b284:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b288:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b28a:	88fa      	ldrh	r2, [r7, #6]
 801b28c:	8afb      	ldrh	r3, [r7, #22]
 801b28e:	429a      	cmp	r2, r3
 801b290:	d33a      	bcc.n	801b308 <TRACE_AllocateBufer+0xb4>
 801b292:	4b2e      	ldr	r3, [pc, #184]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b294:	8a1b      	ldrh	r3, [r3, #16]
 801b296:	88fa      	ldrh	r2, [r7, #6]
 801b298:	429a      	cmp	r2, r3
 801b29a:	d235      	bcs.n	801b308 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b29c:	4b2b      	ldr	r3, [pc, #172]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b29e:	2201      	movs	r2, #1
 801b2a0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b2a2:	4b2a      	ldr	r3, [pc, #168]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2a4:	8a5a      	ldrh	r2, [r3, #18]
 801b2a6:	4b29      	ldr	r3, [pc, #164]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2a8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b2aa:	4b28      	ldr	r3, [pc, #160]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2ac:	8a1b      	ldrh	r3, [r3, #16]
 801b2ae:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b2b0:	4b26      	ldr	r3, [pc, #152]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	825a      	strh	r2, [r3, #18]
 801b2b6:	e027      	b.n	801b308 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b2b8:	4b24      	ldr	r3, [pc, #144]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2ba:	8a5a      	ldrh	r2, [r3, #18]
 801b2bc:	4b23      	ldr	r3, [pc, #140]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2be:	8a1b      	ldrh	r3, [r3, #16]
 801b2c0:	429a      	cmp	r2, r3
 801b2c2:	d91b      	bls.n	801b2fc <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b2c4:	4b21      	ldr	r3, [pc, #132]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2c6:	8a5b      	ldrh	r3, [r3, #18]
 801b2c8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b2cc:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b2ce:	88fa      	ldrh	r2, [r7, #6]
 801b2d0:	8afb      	ldrh	r3, [r7, #22]
 801b2d2:	429a      	cmp	r2, r3
 801b2d4:	d318      	bcc.n	801b308 <TRACE_AllocateBufer+0xb4>
 801b2d6:	4b1d      	ldr	r3, [pc, #116]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2d8:	8a1b      	ldrh	r3, [r3, #16]
 801b2da:	88fa      	ldrh	r2, [r7, #6]
 801b2dc:	429a      	cmp	r2, r3
 801b2de:	d213      	bcs.n	801b308 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b2e0:	4b1a      	ldr	r3, [pc, #104]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2e2:	2201      	movs	r2, #1
 801b2e4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b2e6:	4b19      	ldr	r3, [pc, #100]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2e8:	8a5a      	ldrh	r2, [r3, #18]
 801b2ea:	4b18      	ldr	r3, [pc, #96]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2ec:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b2ee:	4b17      	ldr	r3, [pc, #92]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2f0:	8a1b      	ldrh	r3, [r3, #16]
 801b2f2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b2f4:	4b15      	ldr	r3, [pc, #84]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2f6:	2200      	movs	r2, #0
 801b2f8:	825a      	strh	r2, [r3, #18]
 801b2fa:	e005      	b.n	801b308 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b2fc:	4b13      	ldr	r3, [pc, #76]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b2fe:	8a1a      	ldrh	r2, [r3, #16]
 801b300:	4b12      	ldr	r3, [pc, #72]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b302:	8a5b      	ldrh	r3, [r3, #18]
 801b304:	1ad3      	subs	r3, r2, r3
 801b306:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801b308:	8afa      	ldrh	r2, [r7, #22]
 801b30a:	88fb      	ldrh	r3, [r7, #6]
 801b30c:	429a      	cmp	r2, r3
 801b30e:	d90f      	bls.n	801b330 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b310:	4b0e      	ldr	r3, [pc, #56]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b312:	8a5a      	ldrh	r2, [r3, #18]
 801b314:	683b      	ldr	r3, [r7, #0]
 801b316:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b318:	4b0c      	ldr	r3, [pc, #48]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b31a:	8a5a      	ldrh	r2, [r3, #18]
 801b31c:	88fb      	ldrh	r3, [r7, #6]
 801b31e:	4413      	add	r3, r2
 801b320:	b29b      	uxth	r3, r3
 801b322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b326:	b29a      	uxth	r2, r3
 801b328:	4b08      	ldr	r3, [pc, #32]	; (801b34c <TRACE_AllocateBufer+0xf8>)
 801b32a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801b32c:	2300      	movs	r3, #0
 801b32e:	82bb      	strh	r3, [r7, #20]
 801b330:	693b      	ldr	r3, [r7, #16]
 801b332:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b334:	68bb      	ldr	r3, [r7, #8]
 801b336:	f383 8810 	msr	PRIMASK, r3
}
 801b33a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801b33c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801b340:	4618      	mov	r0, r3
 801b342:	371c      	adds	r7, #28
 801b344:	46bd      	mov	sp, r7
 801b346:	bc80      	pop	{r7}
 801b348:	4770      	bx	lr
 801b34a:	bf00      	nop
 801b34c:	20001cb8 	.word	0x20001cb8

0801b350 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801b350:	b480      	push	{r7}
 801b352:	b085      	sub	sp, #20
 801b354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b356:	f3ef 8310 	mrs	r3, PRIMASK
 801b35a:	607b      	str	r3, [r7, #4]
  return(result);
 801b35c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b35e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b360:	b672      	cpsid	i
}
 801b362:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801b364:	4b08      	ldr	r3, [pc, #32]	; (801b388 <TRACE_Lock+0x38>)
 801b366:	8adb      	ldrh	r3, [r3, #22]
 801b368:	3301      	adds	r3, #1
 801b36a:	b29a      	uxth	r2, r3
 801b36c:	4b06      	ldr	r3, [pc, #24]	; (801b388 <TRACE_Lock+0x38>)
 801b36e:	82da      	strh	r2, [r3, #22]
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b374:	68bb      	ldr	r3, [r7, #8]
 801b376:	f383 8810 	msr	PRIMASK, r3
}
 801b37a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b37c:	bf00      	nop
 801b37e:	3714      	adds	r7, #20
 801b380:	46bd      	mov	sp, r7
 801b382:	bc80      	pop	{r7}
 801b384:	4770      	bx	lr
 801b386:	bf00      	nop
 801b388:	20001cb8 	.word	0x20001cb8

0801b38c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801b38c:	b480      	push	{r7}
 801b38e:	b085      	sub	sp, #20
 801b390:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b392:	f3ef 8310 	mrs	r3, PRIMASK
 801b396:	607b      	str	r3, [r7, #4]
  return(result);
 801b398:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b39a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b39c:	b672      	cpsid	i
}
 801b39e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b3a0:	4b08      	ldr	r3, [pc, #32]	; (801b3c4 <TRACE_UnLock+0x38>)
 801b3a2:	8adb      	ldrh	r3, [r3, #22]
 801b3a4:	3b01      	subs	r3, #1
 801b3a6:	b29a      	uxth	r2, r3
 801b3a8:	4b06      	ldr	r3, [pc, #24]	; (801b3c4 <TRACE_UnLock+0x38>)
 801b3aa:	82da      	strh	r2, [r3, #22]
 801b3ac:	68fb      	ldr	r3, [r7, #12]
 801b3ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3b0:	68bb      	ldr	r3, [r7, #8]
 801b3b2:	f383 8810 	msr	PRIMASK, r3
}
 801b3b6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b3b8:	bf00      	nop
 801b3ba:	3714      	adds	r7, #20
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	bc80      	pop	{r7}
 801b3c0:	4770      	bx	lr
 801b3c2:	bf00      	nop
 801b3c4:	20001cb8 	.word	0x20001cb8

0801b3c8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b3c8:	b480      	push	{r7}
 801b3ca:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b3cc:	4b05      	ldr	r3, [pc, #20]	; (801b3e4 <TRACE_IsLocked+0x1c>)
 801b3ce:	8adb      	ldrh	r3, [r3, #22]
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	bf14      	ite	ne
 801b3d4:	2301      	movne	r3, #1
 801b3d6:	2300      	moveq	r3, #0
 801b3d8:	b2db      	uxtb	r3, r3
}
 801b3da:	4618      	mov	r0, r3
 801b3dc:	46bd      	mov	sp, r7
 801b3de:	bc80      	pop	{r7}
 801b3e0:	4770      	bx	lr
 801b3e2:	bf00      	nop
 801b3e4:	20001cb8 	.word	0x20001cb8

0801b3e8 <__libc_init_array>:
 801b3e8:	b570      	push	{r4, r5, r6, lr}
 801b3ea:	4d0d      	ldr	r5, [pc, #52]	; (801b420 <__libc_init_array+0x38>)
 801b3ec:	4c0d      	ldr	r4, [pc, #52]	; (801b424 <__libc_init_array+0x3c>)
 801b3ee:	1b64      	subs	r4, r4, r5
 801b3f0:	10a4      	asrs	r4, r4, #2
 801b3f2:	2600      	movs	r6, #0
 801b3f4:	42a6      	cmp	r6, r4
 801b3f6:	d109      	bne.n	801b40c <__libc_init_array+0x24>
 801b3f8:	4d0b      	ldr	r5, [pc, #44]	; (801b428 <__libc_init_array+0x40>)
 801b3fa:	4c0c      	ldr	r4, [pc, #48]	; (801b42c <__libc_init_array+0x44>)
 801b3fc:	f000 f8a0 	bl	801b540 <_init>
 801b400:	1b64      	subs	r4, r4, r5
 801b402:	10a4      	asrs	r4, r4, #2
 801b404:	2600      	movs	r6, #0
 801b406:	42a6      	cmp	r6, r4
 801b408:	d105      	bne.n	801b416 <__libc_init_array+0x2e>
 801b40a:	bd70      	pop	{r4, r5, r6, pc}
 801b40c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b410:	4798      	blx	r3
 801b412:	3601      	adds	r6, #1
 801b414:	e7ee      	b.n	801b3f4 <__libc_init_array+0xc>
 801b416:	f855 3b04 	ldr.w	r3, [r5], #4
 801b41a:	4798      	blx	r3
 801b41c:	3601      	adds	r6, #1
 801b41e:	e7f2      	b.n	801b406 <__libc_init_array+0x1e>
 801b420:	0801c5bc 	.word	0x0801c5bc
 801b424:	0801c5bc 	.word	0x0801c5bc
 801b428:	0801c5bc 	.word	0x0801c5bc
 801b42c:	0801c5c0 	.word	0x0801c5c0

0801b430 <memset>:
 801b430:	4402      	add	r2, r0
 801b432:	4603      	mov	r3, r0
 801b434:	4293      	cmp	r3, r2
 801b436:	d100      	bne.n	801b43a <memset+0xa>
 801b438:	4770      	bx	lr
 801b43a:	f803 1b01 	strb.w	r1, [r3], #1
 801b43e:	e7f9      	b.n	801b434 <memset+0x4>

0801b440 <floor>:
 801b440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b444:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801b448:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801b44c:	2e13      	cmp	r6, #19
 801b44e:	4602      	mov	r2, r0
 801b450:	460b      	mov	r3, r1
 801b452:	4607      	mov	r7, r0
 801b454:	460c      	mov	r4, r1
 801b456:	4605      	mov	r5, r0
 801b458:	dc33      	bgt.n	801b4c2 <floor+0x82>
 801b45a:	2e00      	cmp	r6, #0
 801b45c:	da14      	bge.n	801b488 <floor+0x48>
 801b45e:	a334      	add	r3, pc, #208	; (adr r3, 801b530 <floor+0xf0>)
 801b460:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b464:	f7e4 fe96 	bl	8000194 <__adddf3>
 801b468:	2200      	movs	r2, #0
 801b46a:	2300      	movs	r3, #0
 801b46c:	f7e5 f8c6 	bl	80005fc <__aeabi_dcmpgt>
 801b470:	b138      	cbz	r0, 801b482 <floor+0x42>
 801b472:	2c00      	cmp	r4, #0
 801b474:	da58      	bge.n	801b528 <floor+0xe8>
 801b476:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b47a:	431d      	orrs	r5, r3
 801b47c:	d001      	beq.n	801b482 <floor+0x42>
 801b47e:	4c2e      	ldr	r4, [pc, #184]	; (801b538 <floor+0xf8>)
 801b480:	2500      	movs	r5, #0
 801b482:	4623      	mov	r3, r4
 801b484:	462f      	mov	r7, r5
 801b486:	e025      	b.n	801b4d4 <floor+0x94>
 801b488:	4a2c      	ldr	r2, [pc, #176]	; (801b53c <floor+0xfc>)
 801b48a:	fa42 f806 	asr.w	r8, r2, r6
 801b48e:	ea01 0208 	and.w	r2, r1, r8
 801b492:	4302      	orrs	r2, r0
 801b494:	d01e      	beq.n	801b4d4 <floor+0x94>
 801b496:	a326      	add	r3, pc, #152	; (adr r3, 801b530 <floor+0xf0>)
 801b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b49c:	f7e4 fe7a 	bl	8000194 <__adddf3>
 801b4a0:	2200      	movs	r2, #0
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	f7e5 f8aa 	bl	80005fc <__aeabi_dcmpgt>
 801b4a8:	2800      	cmp	r0, #0
 801b4aa:	d0ea      	beq.n	801b482 <floor+0x42>
 801b4ac:	2c00      	cmp	r4, #0
 801b4ae:	bfbe      	ittt	lt
 801b4b0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b4b4:	fa43 f606 	asrlt.w	r6, r3, r6
 801b4b8:	19a4      	addlt	r4, r4, r6
 801b4ba:	ea24 0408 	bic.w	r4, r4, r8
 801b4be:	2500      	movs	r5, #0
 801b4c0:	e7df      	b.n	801b482 <floor+0x42>
 801b4c2:	2e33      	cmp	r6, #51	; 0x33
 801b4c4:	dd0a      	ble.n	801b4dc <floor+0x9c>
 801b4c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b4ca:	d103      	bne.n	801b4d4 <floor+0x94>
 801b4cc:	f7e4 fe62 	bl	8000194 <__adddf3>
 801b4d0:	4607      	mov	r7, r0
 801b4d2:	460b      	mov	r3, r1
 801b4d4:	4638      	mov	r0, r7
 801b4d6:	4619      	mov	r1, r3
 801b4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4dc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801b4e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b4e4:	fa22 f808 	lsr.w	r8, r2, r8
 801b4e8:	ea18 0f00 	tst.w	r8, r0
 801b4ec:	d0f2      	beq.n	801b4d4 <floor+0x94>
 801b4ee:	a310      	add	r3, pc, #64	; (adr r3, 801b530 <floor+0xf0>)
 801b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4f4:	f7e4 fe4e 	bl	8000194 <__adddf3>
 801b4f8:	2200      	movs	r2, #0
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	f7e5 f87e 	bl	80005fc <__aeabi_dcmpgt>
 801b500:	2800      	cmp	r0, #0
 801b502:	d0be      	beq.n	801b482 <floor+0x42>
 801b504:	2c00      	cmp	r4, #0
 801b506:	da02      	bge.n	801b50e <floor+0xce>
 801b508:	2e14      	cmp	r6, #20
 801b50a:	d103      	bne.n	801b514 <floor+0xd4>
 801b50c:	3401      	adds	r4, #1
 801b50e:	ea25 0508 	bic.w	r5, r5, r8
 801b512:	e7b6      	b.n	801b482 <floor+0x42>
 801b514:	2301      	movs	r3, #1
 801b516:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b51a:	fa03 f606 	lsl.w	r6, r3, r6
 801b51e:	4435      	add	r5, r6
 801b520:	42bd      	cmp	r5, r7
 801b522:	bf38      	it	cc
 801b524:	18e4      	addcc	r4, r4, r3
 801b526:	e7f2      	b.n	801b50e <floor+0xce>
 801b528:	2500      	movs	r5, #0
 801b52a:	462c      	mov	r4, r5
 801b52c:	e7a9      	b.n	801b482 <floor+0x42>
 801b52e:	bf00      	nop
 801b530:	8800759c 	.word	0x8800759c
 801b534:	7e37e43c 	.word	0x7e37e43c
 801b538:	bff00000 	.word	0xbff00000
 801b53c:	000fffff 	.word	0x000fffff

0801b540 <_init>:
 801b540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b542:	bf00      	nop
 801b544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b546:	bc08      	pop	{r3}
 801b548:	469e      	mov	lr, r3
 801b54a:	4770      	bx	lr

0801b54c <_fini>:
 801b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b54e:	bf00      	nop
 801b550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b552:	bc08      	pop	{r3}
 801b554:	469e      	mov	lr, r3
 801b556:	4770      	bx	lr
